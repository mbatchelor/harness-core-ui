/**
 * Generated by @openapi-codegen
 *
 * @version 1.0
 */
import * as reactQuery from 'react-query'
import { usePortalContext, PortalContext } from './portalContext'
import type * as Fetcher from './portalFetcher'
import { portalFetch } from './portalFetcher'
import type * as Schemas from './portalSchemas'
import type * as RequestBodies from './portalRequestBodies'

export type GetDummyError = Fetcher.ErrorWrapper<undefined>

export type GetDummyVariables = PortalContext['fetcherOptions']

export const fetchGetDummy = (variables: GetDummyVariables) =>
  portalFetch<Schemas.RestResponseString, GetDummyError, undefined, {}, {}, {}>({
    url: '/agent/delegates/v2/dummy',
    method: 'get',
    ...variables
  })

export const useGetDummy = (
  variables: GetDummyVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.RestResponseString, GetDummyError, Schemas.RestResponseString>,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<Schemas.RestResponseString, GetDummyError, Schemas.RestResponseString>(
    queryKeyFn({ path: '/agent/delegates/v2/dummy', operationId: 'getDummy', variables }),
    () => fetchGetDummy({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type GetDelegateTokensQueryParams = {
  accountIdentifier: string
  orgIdentifier?: string
  projectIdentifier?: string
  status?: 'ACTIVE' | 'REVOKED'
}

export type GetDelegateTokensError = Fetcher.ErrorWrapper<undefined>

export type GetDelegateTokensVariables = {
  queryParams: GetDelegateTokensQueryParams
} & PortalContext['fetcherOptions']

export const fetchGetDelegateTokens = (variables: GetDelegateTokensVariables) =>
  portalFetch<
    Schemas.RestResponseListDelegateTokenDetails,
    GetDelegateTokensError,
    undefined,
    {},
    GetDelegateTokensQueryParams,
    {}
  >({ url: '/delegate-token/ng', method: 'get', ...variables })

export const useGetDelegateTokens = (
  variables: GetDelegateTokensVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponseListDelegateTokenDetails,
      GetDelegateTokensError,
      Schemas.RestResponseListDelegateTokenDetails
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponseListDelegateTokenDetails,
    GetDelegateTokensError,
    Schemas.RestResponseListDelegateTokenDetails
  >(
    queryKeyFn({ path: '/delegate-token/ng', operationId: 'getDelegateTokens', variables }),
    () => fetchGetDelegateTokens({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type CreateTokenQueryParams = {
  accountIdentifier: string
  orgIdentifier?: string
  projectIdentifier?: string
  tokenName: string
}

export type CreateTokenError = Fetcher.ErrorWrapper<undefined>

export type CreateTokenVariables = {
  queryParams: CreateTokenQueryParams
} & PortalContext['fetcherOptions']

export const fetchCreateToken = (variables: CreateTokenVariables) =>
  portalFetch<Schemas.RestResponseDelegateTokenDetails, CreateTokenError, undefined, {}, CreateTokenQueryParams, {}>({
    url: '/delegate-token/ng',
    method: 'post',
    ...variables
  })

export const useCreateToken = (
  options?: Omit<
    reactQuery.UseMutationOptions<Schemas.RestResponseDelegateTokenDetails, CreateTokenError, CreateTokenVariables>,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<Schemas.RestResponseDelegateTokenDetails, CreateTokenError, CreateTokenVariables>(
    (variables: CreateTokenVariables) => fetchCreateToken({ ...fetcherOptions, ...variables }),
    options
  )
}

export type RevokeTokenQueryParams = {
  accountIdentifier: string
  orgIdentifier?: string
  projectIdentifier?: string
  tokenName: string
}

export type RevokeTokenError = Fetcher.ErrorWrapper<undefined>

export type RevokeTokenVariables = {
  queryParams: RevokeTokenQueryParams
} & PortalContext['fetcherOptions']

export const fetchRevokeToken = (variables: RevokeTokenVariables) =>
  portalFetch<Schemas.RestResponseDelegateTokenDetails, RevokeTokenError, undefined, {}, RevokeTokenQueryParams, {}>({
    url: '/delegate-token/ng',
    method: 'put',
    ...variables
  })

export const useRevokeToken = (
  options?: Omit<
    reactQuery.UseMutationOptions<Schemas.RestResponseDelegateTokenDetails, RevokeTokenError, RevokeTokenVariables>,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<Schemas.RestResponseDelegateTokenDetails, RevokeTokenError, RevokeTokenVariables>(
    (variables: RevokeTokenVariables) => fetchRevokeToken({ ...fetcherOptions, ...variables }),
    options
  )
}

export type GetPathParams = {
  delegateGroupId: string
}

export type GetQueryParams = {
  accountId?: string
  orgId?: string
  projectId?: string
}

export type GetError = Fetcher.ErrorWrapper<undefined>

export type GetVariables = {
  pathParams: GetPathParams
  queryParams?: GetQueryParams
} & PortalContext['fetcherOptions']

export const fetchGet = (variables: GetVariables) =>
  portalFetch<Schemas.RestResponseDelegateGroupDetails, GetError, undefined, {}, GetQueryParams, GetPathParams>({
    url: '/setup/delegates/v2/{delegateGroupId}',
    method: 'get',
    ...variables
  })

export const useGet = (
  variables: GetVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponseDelegateGroupDetails,
      GetError,
      Schemas.RestResponseDelegateGroupDetails
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponseDelegateGroupDetails,
    GetError,
    Schemas.RestResponseDelegateGroupDetails
  >(
    queryKeyFn({ path: '/setup/delegates/v2/{delegateGroupId}', operationId: 'get', variables }),
    () => fetchGet({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type UpdatePathParams = {
  delegateGroupId: string
}

export type UpdateQueryParams = {
  accountId?: string
  orgId?: string
  projectId?: string
}

export type UpdateError = Fetcher.ErrorWrapper<undefined>

export type UpdateVariables = {
  body?: RequestBodies.DelegateGroupDetails
  pathParams: UpdatePathParams
  queryParams?: UpdateQueryParams
} & PortalContext['fetcherOptions']

export const fetchUpdate = (variables: UpdateVariables) =>
  portalFetch<
    Schemas.RestResponseDelegateGroupDetails,
    UpdateError,
    RequestBodies.DelegateGroupDetails,
    {},
    UpdateQueryParams,
    UpdatePathParams
  >({ url: '/setup/delegates/v2/{delegateGroupId}', method: 'put', ...variables })

export const useUpdate = (
  options?: Omit<
    reactQuery.UseMutationOptions<Schemas.RestResponseDelegateGroupDetails, UpdateError, UpdateVariables>,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<Schemas.RestResponseDelegateGroupDetails, UpdateError, UpdateVariables>(
    (variables: UpdateVariables) => fetchUpdate({ ...fetcherOptions, ...variables }),
    options
  )
}

export type ListQueryParams = {
  accountId?: string
  orgId?: string
  projectId?: string
}

export type ListError = Fetcher.ErrorWrapper<undefined>

export type ListVariables = {
  queryParams?: ListQueryParams
} & PortalContext['fetcherOptions']

export const fetchList = (variables: ListVariables) =>
  portalFetch<Schemas.RestResponseDelegateGroupListing, ListError, undefined, {}, ListQueryParams, {}>({
    url: '/setup/delegates/v2',
    method: 'get',
    ...variables
  })

export const useList = (
  variables: ListVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponseDelegateGroupListing,
      ListError,
      Schemas.RestResponseDelegateGroupListing
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponseDelegateGroupListing,
    ListError,
    Schemas.RestResponseDelegateGroupListing
  >(
    queryKeyFn({ path: '/setup/delegates/v2', operationId: 'list', variables }),
    () => fetchList({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type ListUpTheHierarchyQueryParams = {
  accountId?: string
  orgId?: string
  projectId?: string
}

export type ListUpTheHierarchyError = Fetcher.ErrorWrapper<undefined>

export type ListUpTheHierarchyVariables = {
  queryParams?: ListUpTheHierarchyQueryParams
} & PortalContext['fetcherOptions']

export const fetchListUpTheHierarchy = (variables: ListUpTheHierarchyVariables) =>
  portalFetch<
    Schemas.RestResponseDelegateGroupListing,
    ListUpTheHierarchyError,
    undefined,
    {},
    ListUpTheHierarchyQueryParams,
    {}
  >({ url: '/setup/delegates/v2/up-the-hierarchy', method: 'get', ...variables })

export const useListUpTheHierarchy = (
  variables: ListUpTheHierarchyVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponseDelegateGroupListing,
      ListUpTheHierarchyError,
      Schemas.RestResponseDelegateGroupListing
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponseDelegateGroupListing,
    ListUpTheHierarchyError,
    Schemas.RestResponseDelegateGroupListing
  >(
    queryKeyFn({ path: '/setup/delegates/v2/up-the-hierarchy', operationId: 'listUpTheHierarchy', variables }),
    () => fetchListUpTheHierarchy({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type Get1PathParams = {
  identifier: string
}

export type Get1QueryParams = {
  accountId?: string
  orgId?: string
  projectId?: string
}

export type Get1Error = Fetcher.ErrorWrapper<undefined>

export type Get1Variables = {
  pathParams: Get1PathParams
  queryParams?: Get1QueryParams
} & PortalContext['fetcherOptions']

export const fetchGet1 = (variables: Get1Variables) =>
  portalFetch<Schemas.RestResponseDelegateGroupDetails, Get1Error, undefined, {}, Get1QueryParams, Get1PathParams>({
    url: '/setup/delegates/ng/v2/{identifier}',
    method: 'get',
    ...variables
  })

export const useGet1 = (
  variables: Get1Variables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponseDelegateGroupDetails,
      Get1Error,
      Schemas.RestResponseDelegateGroupDetails
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponseDelegateGroupDetails,
    Get1Error,
    Schemas.RestResponseDelegateGroupDetails
  >(
    queryKeyFn({ path: '/setup/delegates/ng/v2/{identifier}', operationId: 'get1', variables }),
    () => fetchGet1({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type Update1PathParams = {
  identifier: string
}

export type Update1QueryParams = {
  accountId?: string
  orgId?: string
  projectId?: string
}

export type Update1Error = Fetcher.ErrorWrapper<undefined>

export type Update1Variables = {
  body?: RequestBodies.DelegateGroupDetails
  pathParams: Update1PathParams
  queryParams?: Update1QueryParams
} & PortalContext['fetcherOptions']

export const fetchUpdate1 = (variables: Update1Variables) =>
  portalFetch<
    Schemas.RestResponseDelegateGroupDetails,
    Update1Error,
    RequestBodies.DelegateGroupDetails,
    {},
    Update1QueryParams,
    Update1PathParams
  >({ url: '/setup/delegates/ng/v2/{identifier}', method: 'put', ...variables })

export const useUpdate1 = (
  options?: Omit<
    reactQuery.UseMutationOptions<Schemas.RestResponseDelegateGroupDetails, Update1Error, Update1Variables>,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<Schemas.RestResponseDelegateGroupDetails, Update1Error, Update1Variables>(
    (variables: Update1Variables) => fetchUpdate1({ ...fetcherOptions, ...variables }),
    options
  )
}

export type List1QueryParams = {
  accountId?: string
  orgId?: string
  projectId?: string
}

export type List1Error = Fetcher.ErrorWrapper<undefined>

export type List1Variables = {
  queryParams?: List1QueryParams
} & PortalContext['fetcherOptions']

export const fetchList1 = (variables: List1Variables) =>
  portalFetch<Schemas.RestResponseDelegateGroupListing, List1Error, undefined, {}, List1QueryParams, {}>({
    url: '/setup/delegates/ng/v2',
    method: 'get',
    ...variables
  })

export const useList1 = (
  variables: List1Variables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponseDelegateGroupListing,
      List1Error,
      Schemas.RestResponseDelegateGroupListing
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponseDelegateGroupListing,
    List1Error,
    Schemas.RestResponseDelegateGroupListing
  >(
    queryKeyFn({ path: '/setup/delegates/ng/v2', operationId: 'list1', variables }),
    () => fetchList1({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type ListV2QueryParams = {
  accountId?: string
  orgId?: string
  projectId?: string
  filterIdentifier?: string
  searchTerm?: string
  /*
   * @default 0
   */
  offset?: string
  limit?: string
  fieldsIncluded?: string[]
  fieldsExcluded?: string[]
}

export type ListV2Error = Fetcher.ErrorWrapper<undefined>

export type ListV2Variables = {
  body?: Schemas.DelegateFilterProperties
  queryParams?: ListV2QueryParams
} & PortalContext['fetcherOptions']

export const fetchListV2 = (variables: ListV2Variables) =>
  portalFetch<
    Schemas.RestResponseDelegateGroupListing,
    ListV2Error,
    Schemas.DelegateFilterProperties,
    {},
    ListV2QueryParams,
    {}
  >({ url: '/setup/delegates/ng/v2', method: 'post', ...variables })

export const useListV2 = (
  options?: Omit<
    reactQuery.UseMutationOptions<Schemas.RestResponseDelegateGroupListing, ListV2Error, ListV2Variables>,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<Schemas.RestResponseDelegateGroupListing, ListV2Error, ListV2Variables>(
    (variables: ListV2Variables) => fetchListV2({ ...fetcherOptions, ...variables }),
    options
  )
}

export type ListUpTheHierarchy1QueryParams = {
  accountId?: string
  orgId?: string
  projectId?: string
}

export type ListUpTheHierarchy1Error = Fetcher.ErrorWrapper<undefined>

export type ListUpTheHierarchy1Variables = {
  queryParams?: ListUpTheHierarchy1QueryParams
} & PortalContext['fetcherOptions']

export const fetchListUpTheHierarchy1 = (variables: ListUpTheHierarchy1Variables) =>
  portalFetch<
    Schemas.RestResponseDelegateGroupListing,
    ListUpTheHierarchy1Error,
    undefined,
    {},
    ListUpTheHierarchy1QueryParams,
    {}
  >({ url: '/setup/delegates/ng/v2/up-the-hierarchy', method: 'get', ...variables })

export const useListUpTheHierarchy1 = (
  variables: ListUpTheHierarchy1Variables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponseDelegateGroupListing,
      ListUpTheHierarchy1Error,
      Schemas.RestResponseDelegateGroupListing
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponseDelegateGroupListing,
    ListUpTheHierarchy1Error,
    Schemas.RestResponseDelegateGroupListing
  >(
    queryKeyFn({ path: '/setup/delegates/ng/v2/up-the-hierarchy', operationId: 'listUpTheHierarchy1', variables }),
    () => fetchListUpTheHierarchy1({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type UpdateTaskResponsePathParams = {
  delegateId: string
  taskId: string
}

export type UpdateTaskResponseQueryParams = {
  accountId?: string
}

export type UpdateTaskResponseError = Fetcher.ErrorWrapper<undefined>

export type UpdateTaskResponseVariables = {
  pathParams: UpdateTaskResponsePathParams
  queryParams?: UpdateTaskResponseQueryParams
} & PortalContext['fetcherOptions']

export const fetchUpdateTaskResponse = (variables: UpdateTaskResponseVariables) =>
  portalFetch<
    undefined,
    UpdateTaskResponseError,
    undefined,
    {},
    UpdateTaskResponseQueryParams,
    UpdateTaskResponsePathParams
  >({ url: '/agent/tasks/{taskId}/delegates/{delegateId}', method: 'post', ...variables })

export const useUpdateTaskResponse = (
  options?: Omit<
    reactQuery.UseMutationOptions<undefined, UpdateTaskResponseError, UpdateTaskResponseVariables>,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<undefined, UpdateTaskResponseError, UpdateTaskResponseVariables>(
    (variables: UpdateTaskResponseVariables) => fetchUpdateTaskResponse({ ...fetcherOptions, ...variables }),
    options
  )
}

export type GetTokenValuePathParams = {
  tokenName: string
}

export type GetTokenValueQueryParams = {
  accountId: string
}

export type GetTokenValueError = Fetcher.ErrorWrapper<undefined>

export type GetTokenValueVariables = {
  pathParams: GetTokenValuePathParams
  queryParams: GetTokenValueQueryParams
} & PortalContext['fetcherOptions']

export const fetchGetTokenValue = (variables: GetTokenValueVariables) =>
  portalFetch<
    Schemas.RestResponseString,
    GetTokenValueError,
    undefined,
    {},
    GetTokenValueQueryParams,
    GetTokenValuePathParams
  >({ url: '/delegate-token/{tokenName}', method: 'get', ...variables })

export const useGetTokenValue = (
  variables: GetTokenValueVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.RestResponseString, GetTokenValueError, Schemas.RestResponseString>,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<Schemas.RestResponseString, GetTokenValueError, Schemas.RestResponseString>(
    queryKeyFn({ path: '/delegate-token/{tokenName}', operationId: 'getTokenValue', variables }),
    () => fetchGetTokenValue({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type GetDelegateTokens1QueryParams = {
  accountId: string
  status?: 'ACTIVE' | 'REVOKED'
  tokenName?: string
}

export type GetDelegateTokens1Error = Fetcher.ErrorWrapper<undefined>

export type GetDelegateTokens1Variables = {
  queryParams: GetDelegateTokens1QueryParams
} & PortalContext['fetcherOptions']

export const fetchGetDelegateTokens1 = (variables: GetDelegateTokens1Variables) =>
  portalFetch<
    Schemas.RestResponseListDelegateTokenDetails,
    GetDelegateTokens1Error,
    undefined,
    {},
    GetDelegateTokens1QueryParams,
    {}
  >({ url: '/delegate-token', method: 'get', ...variables })

export const useGetDelegateTokens1 = (
  variables: GetDelegateTokens1Variables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponseListDelegateTokenDetails,
      GetDelegateTokens1Error,
      Schemas.RestResponseListDelegateTokenDetails
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponseListDelegateTokenDetails,
    GetDelegateTokens1Error,
    Schemas.RestResponseListDelegateTokenDetails
  >(
    queryKeyFn({ path: '/delegate-token', operationId: 'getDelegateTokens1', variables }),
    () => fetchGetDelegateTokens1({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type CreateToken1QueryParams = {
  accountId: string
  tokenName: string
}

export type CreateToken1Error = Fetcher.ErrorWrapper<undefined>

export type CreateToken1Variables = {
  queryParams: CreateToken1QueryParams
} & PortalContext['fetcherOptions']

export const fetchCreateToken1 = (variables: CreateToken1Variables) =>
  portalFetch<Schemas.RestResponseDelegateTokenDetails, CreateToken1Error, undefined, {}, CreateToken1QueryParams, {}>({
    url: '/delegate-token',
    method: 'post',
    ...variables
  })

export const useCreateToken1 = (
  options?: Omit<
    reactQuery.UseMutationOptions<Schemas.RestResponseDelegateTokenDetails, CreateToken1Error, CreateToken1Variables>,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<Schemas.RestResponseDelegateTokenDetails, CreateToken1Error, CreateToken1Variables>(
    (variables: CreateToken1Variables) => fetchCreateToken1({ ...fetcherOptions, ...variables }),
    options
  )
}

export type RevokeToken1QueryParams = {
  accountId: string
  tokenName: string
}

export type RevokeToken1Error = Fetcher.ErrorWrapper<undefined>

export type RevokeToken1Variables = {
  queryParams: RevokeToken1QueryParams
} & PortalContext['fetcherOptions']

export const fetchRevokeToken1 = (variables: RevokeToken1Variables) =>
  portalFetch<Schemas.RestResponseVoid, RevokeToken1Error, undefined, {}, RevokeToken1QueryParams, {}>({
    url: '/delegate-token',
    method: 'put',
    ...variables
  })

export const useRevokeToken1 = (
  options?: Omit<
    reactQuery.UseMutationOptions<Schemas.RestResponseVoid, RevokeToken1Error, RevokeToken1Variables>,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<Schemas.RestResponseVoid, RevokeToken1Error, RevokeToken1Variables>(
    (variables: RevokeToken1Variables) => fetchRevokeToken1({ ...fetcherOptions, ...variables }),
    options
  )
}

export type DeleteTokenQueryParams = {
  accountId: string
  tokenName: string
}

export type DeleteTokenError = Fetcher.ErrorWrapper<undefined>

export type DeleteTokenVariables = {
  queryParams: DeleteTokenQueryParams
} & PortalContext['fetcherOptions']

export const fetchDeleteToken = (variables: DeleteTokenVariables) =>
  portalFetch<Schemas.RestResponseVoid, DeleteTokenError, undefined, {}, DeleteTokenQueryParams, {}>({
    url: '/delegate-token',
    method: 'delete',
    ...variables
  })

export const useDeleteToken = (
  options?: Omit<
    reactQuery.UseMutationOptions<Schemas.RestResponseVoid, DeleteTokenError, DeleteTokenVariables>,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<Schemas.RestResponseVoid, DeleteTokenError, DeleteTokenVariables>(
    (variables: DeleteTokenVariables) => fetchDeleteToken({ ...fetcherOptions, ...variables }),
    options
  )
}

export type GetDelegateImageTagQueryParams = {
  accountId?: string
  currentDelegateImageTag?: string
}

export type GetDelegateImageTagError = Fetcher.ErrorWrapper<undefined>

export type GetDelegateImageTagVariables = {
  queryParams?: GetDelegateImageTagQueryParams
} & PortalContext['fetcherOptions']

export const fetchGetDelegateImageTag = (variables: GetDelegateImageTagVariables) =>
  portalFetch<
    Schemas.RestResponseUpgradeCheckResult,
    GetDelegateImageTagError,
    undefined,
    {},
    GetDelegateImageTagQueryParams,
    {}
  >({ url: '/upgrade-check/delegate', method: 'get', ...variables })

export const useGetDelegateImageTag = (
  variables: GetDelegateImageTagVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponseUpgradeCheckResult,
      GetDelegateImageTagError,
      Schemas.RestResponseUpgradeCheckResult
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponseUpgradeCheckResult,
    GetDelegateImageTagError,
    Schemas.RestResponseUpgradeCheckResult
  >(
    queryKeyFn({ path: '/upgrade-check/delegate', operationId: 'getDelegateImageTag', variables }),
    () => fetchGetDelegateImageTag({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type GetUpgraderImageTagQueryParams = {
  accountId?: string
  currentUpgraderImageTag?: string
}

export type GetUpgraderImageTagError = Fetcher.ErrorWrapper<undefined>

export type GetUpgraderImageTagVariables = {
  queryParams?: GetUpgraderImageTagQueryParams
} & PortalContext['fetcherOptions']

export const fetchGetUpgraderImageTag = (variables: GetUpgraderImageTagVariables) =>
  portalFetch<
    Schemas.RestResponseUpgradeCheckResult,
    GetUpgraderImageTagError,
    undefined,
    {},
    GetUpgraderImageTagQueryParams,
    {}
  >({ url: '/upgrade-check/upgrader', method: 'get', ...variables })

export const useGetUpgraderImageTag = (
  variables: GetUpgraderImageTagVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponseUpgradeCheckResult,
      GetUpgraderImageTagError,
      Schemas.RestResponseUpgradeCheckResult
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponseUpgradeCheckResult,
    GetUpgraderImageTagError,
    Schemas.RestResponseUpgradeCheckResult
  >(
    queryKeyFn({ path: '/upgrade-check/upgrader', operationId: 'getUpgraderImageTag', variables }),
    () => fetchGetUpgraderImageTag({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type CreateAccessRequestPathParams = {
  accountId: string
}

export type CreateAccessRequestError = Fetcher.ErrorWrapper<undefined>

export type CreateAccessRequestVariables = {
  body?: RequestBodies.AccessRequestDTO
  pathParams: CreateAccessRequestPathParams
} & PortalContext['fetcherOptions']

export const fetchCreateAccessRequest = (variables: CreateAccessRequestVariables) =>
  portalFetch<
    Schemas.RestResponseAccessRequestDTO,
    CreateAccessRequestError,
    RequestBodies.AccessRequestDTO,
    {},
    {},
    CreateAccessRequestPathParams
  >({ url: '/accessRequest/{accountId}/createAccessRequest', method: 'post', ...variables })

export const useCreateAccessRequest = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.RestResponseAccessRequestDTO,
      CreateAccessRequestError,
      CreateAccessRequestVariables
    >,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<
    Schemas.RestResponseAccessRequestDTO,
    CreateAccessRequestError,
    CreateAccessRequestVariables
  >((variables: CreateAccessRequestVariables) => fetchCreateAccessRequest({ ...fetcherOptions, ...variables }), options)
}

export type DeletePathParams = {
  accountId: string
  accessRequestId: string
}

export type DeleteError = Fetcher.ErrorWrapper<undefined>

export type DeleteVariables = {
  pathParams: DeletePathParams
} & PortalContext['fetcherOptions']

export const fetchDelete = (variables: DeleteVariables) =>
  portalFetch<Schemas.RestResponseBoolean, DeleteError, undefined, {}, {}, DeletePathParams>({
    url: '/accessRequest/{accountId}/{accessRequestId}',
    method: 'delete',
    ...variables
  })

export const useDelete = (
  options?: Omit<reactQuery.UseMutationOptions<Schemas.RestResponseBoolean, DeleteError, DeleteVariables>, 'mutationFn'>
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<Schemas.RestResponseBoolean, DeleteError, DeleteVariables>(
    (variables: DeleteVariables) => fetchDelete({ ...fetcherOptions, ...variables }),
    options
  )
}

export type CreatePathParams = {
  accountId: string
}

export type CreateError = Fetcher.ErrorWrapper<undefined>

export type CreateVariables = {
  body?: RequestBodies.AccessRequestDTO
  pathParams: CreatePathParams
} & PortalContext['fetcherOptions']

export const fetchCreate = (variables: CreateVariables) =>
  portalFetch<
    Schemas.RestResponseAccessRequestDTO,
    CreateError,
    RequestBodies.AccessRequestDTO,
    {},
    {},
    CreatePathParams
  >({ url: '/accessRequest/{accountId}', method: 'post', ...variables })

export const useCreate = (
  options?: Omit<
    reactQuery.UseMutationOptions<Schemas.RestResponseAccessRequestDTO, CreateError, CreateVariables>,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<Schemas.RestResponseAccessRequestDTO, CreateError, CreateVariables>(
    (variables: CreateVariables) => fetchCreate({ ...fetcherOptions, ...variables }),
    options
  )
}

export type DeleteAccessRequestPathParams = {
  accountId: string
  accessRequestId: string
}

export type DeleteAccessRequestError = Fetcher.ErrorWrapper<undefined>

export type DeleteAccessRequestVariables = {
  pathParams: DeleteAccessRequestPathParams
} & PortalContext['fetcherOptions']

export const fetchDeleteAccessRequest = (variables: DeleteAccessRequestVariables) =>
  portalFetch<Schemas.RestResponseBoolean, DeleteAccessRequestError, undefined, {}, {}, DeleteAccessRequestPathParams>({
    url: '/accessRequest/{accountId}/{accessRequestId}/deleteAccessRequest',
    method: 'delete',
    ...variables
  })

export const useDeleteAccessRequest = (
  options?: Omit<
    reactQuery.UseMutationOptions<Schemas.RestResponseBoolean, DeleteAccessRequestError, DeleteAccessRequestVariables>,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<Schemas.RestResponseBoolean, DeleteAccessRequestError, DeleteAccessRequestVariables>(
    (variables: DeleteAccessRequestVariables) => fetchDeleteAccessRequest({ ...fetcherOptions, ...variables }),
    options
  )
}

export type ListAccessRequestPathParams = {
  accountId: string
}

export type ListAccessRequestQueryParams = {
  accessRequestId?: string
}

export type ListAccessRequestError = Fetcher.ErrorWrapper<undefined>

export type ListAccessRequestVariables = {
  pathParams: ListAccessRequestPathParams
  queryParams?: ListAccessRequestQueryParams
} & PortalContext['fetcherOptions']

export const fetchListAccessRequest = (variables: ListAccessRequestVariables) =>
  portalFetch<
    Schemas.RestResponseAccessRequestDTO,
    ListAccessRequestError,
    undefined,
    {},
    ListAccessRequestQueryParams,
    ListAccessRequestPathParams
  >({ url: '/accessRequest/{accountId}/listAccessRequest', method: 'get', ...variables })

export const useListAccessRequest = (
  variables: ListAccessRequestVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponseAccessRequestDTO,
      ListAccessRequestError,
      Schemas.RestResponseAccessRequestDTO
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponseAccessRequestDTO,
    ListAccessRequestError,
    Schemas.RestResponseAccessRequestDTO
  >(
    queryKeyFn({ path: '/accessRequest/{accountId}/listAccessRequest', operationId: 'listAccessRequest', variables }),
    () => fetchListAccessRequest({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type ListActiveAccessRequestPathParams = {
  accountId: string
}

export type ListActiveAccessRequestQueryParams = {
  harnessUserGroupId?: string
}

export type ListActiveAccessRequestError = Fetcher.ErrorWrapper<undefined>

export type ListActiveAccessRequestVariables = {
  pathParams: ListActiveAccessRequestPathParams
  queryParams?: ListActiveAccessRequestQueryParams
} & PortalContext['fetcherOptions']

export const fetchListActiveAccessRequest = (variables: ListActiveAccessRequestVariables) =>
  portalFetch<
    Schemas.RestResponseListAccessRequestDTO,
    ListActiveAccessRequestError,
    undefined,
    {},
    ListActiveAccessRequestQueryParams,
    ListActiveAccessRequestPathParams
  >({ url: '/accessRequest/{accountId}/listAccessRequest/harnessUserGroup', method: 'get', ...variables })

export const useListActiveAccessRequest = (
  variables: ListActiveAccessRequestVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponseListAccessRequestDTO,
      ListActiveAccessRequestError,
      Schemas.RestResponseListAccessRequestDTO
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponseListAccessRequestDTO,
    ListActiveAccessRequestError,
    Schemas.RestResponseListAccessRequestDTO
  >(
    queryKeyFn({
      path: '/accessRequest/{accountId}/listAccessRequest/harnessUserGroup',
      operationId: 'listActiveAccessRequest',
      variables
    }),
    () => fetchListActiveAccessRequest({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type ListActiveAccessRequestForAccountPathParams = {
  accountId: string
}

export type ListActiveAccessRequestForAccountError = Fetcher.ErrorWrapper<undefined>

export type ListActiveAccessRequestForAccountVariables = {
  pathParams: ListActiveAccessRequestForAccountPathParams
} & PortalContext['fetcherOptions']

export const fetchListActiveAccessRequestForAccount = (variables: ListActiveAccessRequestForAccountVariables) =>
  portalFetch<
    Schemas.RestResponseListAccessRequestDTO,
    ListActiveAccessRequestForAccountError,
    undefined,
    {},
    {},
    ListActiveAccessRequestForAccountPathParams
  >({ url: '/accessRequest/{accountId}/listAccessRequest/account', method: 'get', ...variables })

export const useListActiveAccessRequestForAccount = (
  variables: ListActiveAccessRequestForAccountVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponseListAccessRequestDTO,
      ListActiveAccessRequestForAccountError,
      Schemas.RestResponseListAccessRequestDTO
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponseListAccessRequestDTO,
    ListActiveAccessRequestForAccountError,
    Schemas.RestResponseListAccessRequestDTO
  >(
    queryKeyFn({
      path: '/accessRequest/{accountId}/listAccessRequest/account',
      operationId: 'listActiveAccessRequestForAccount',
      variables
    }),
    () => fetchListActiveAccessRequestForAccount({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type ListAllAccessRequestForAccountPathParams = {
  accountId: string
}

export type ListAllAccessRequestForAccountError = Fetcher.ErrorWrapper<undefined>

export type ListAllAccessRequestForAccountVariables = {
  pathParams: ListAllAccessRequestForAccountPathParams
} & PortalContext['fetcherOptions']

export const fetchListAllAccessRequestForAccount = (variables: ListAllAccessRequestForAccountVariables) =>
  portalFetch<
    Schemas.RestResponseListAccessRequestDTO,
    ListAllAccessRequestForAccountError,
    undefined,
    {},
    {},
    ListAllAccessRequestForAccountPathParams
  >({ url: '/accessRequest/{accountId}/listAllAccessRequest/account', method: 'get', ...variables })

export const useListAllAccessRequestForAccount = (
  variables: ListAllAccessRequestForAccountVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponseListAccessRequestDTO,
      ListAllAccessRequestForAccountError,
      Schemas.RestResponseListAccessRequestDTO
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponseListAccessRequestDTO,
    ListAllAccessRequestForAccountError,
    Schemas.RestResponseListAccessRequestDTO
  >(
    queryKeyFn({
      path: '/accessRequest/{accountId}/listAllAccessRequest/account',
      operationId: 'listAllAccessRequestForAccount',
      variables
    }),
    () => fetchListAllAccessRequestForAccount({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type ExportAccountCollectionDataQueryParams = {
  accountId?: string
}

export type ExportAccountCollectionDataError = Fetcher.ErrorWrapper<undefined>

export type ExportAccountCollectionDataVariables = {
  queryParams?: ExportAccountCollectionDataQueryParams
} & PortalContext['fetcherOptions']

export const fetchExportAccountCollectionData = (variables: ExportAccountCollectionDataVariables) =>
  portalFetch<
    Schemas.RestResponseSetString,
    ExportAccountCollectionDataError,
    undefined,
    {},
    ExportAccountCollectionDataQueryParams,
    {}
  >({ url: '/account/exportableCollections', method: 'get', ...variables })

export const useExportAccountCollectionData = (
  variables: ExportAccountCollectionDataVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponseSetString,
      ExportAccountCollectionDataError,
      Schemas.RestResponseSetString
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponseSetString,
    ExportAccountCollectionDataError,
    Schemas.RestResponseSetString
  >(
    queryKeyFn({ path: '/account/exportableCollections', operationId: 'exportAccountCollectionData', variables }),
    () => fetchExportAccountCollectionData({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type ExportAccountCollectionData1QueryParams = {
  accountId?: string
  /*
   * @default ALL
   */
  mode?: 'ALL' | 'SPECIFIC'
  entityTypes?: string[]
  collectionName?: string
  exportConfigs?: boolean
  /*
   * @format int32
   */
  batchSize?: number
  /*
   * @format int32
   */
  mongoBatchSize?: number
  /*
   * @format int64
   */
  exportRecordsUpdatedAfter?: number
  /*
   * @format int64
   */
  exportRecordsCreatedAfter?: number
  identifiers?: string[]
}

export type ExportAccountCollectionData1Error = Fetcher.ErrorWrapper<undefined>

export type ExportAccountCollectionData1Variables = {
  queryParams?: ExportAccountCollectionData1QueryParams
} & PortalContext['fetcherOptions']

export const fetchExportAccountCollectionData1 = (variables: ExportAccountCollectionData1Variables) =>
  portalFetch<undefined, ExportAccountCollectionData1Error, undefined, {}, ExportAccountCollectionData1QueryParams, {}>(
    { url: '/account/exportCollection', method: 'get', ...variables }
  )

export const useExportAccountCollectionData1 = (
  variables: ExportAccountCollectionData1Variables,
  options?: Omit<
    reactQuery.UseQueryOptions<undefined, ExportAccountCollectionData1Error, undefined>,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<undefined, ExportAccountCollectionData1Error, undefined>(
    queryKeyFn({ path: '/account/exportCollection', operationId: 'exportAccountCollectionData1', variables }),
    () => fetchExportAccountCollectionData1({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type ExportAccountCollectionBatchDataQueryParams = {
  accountId?: string
  /*
   * @default ALL
   */
  mode?: 'ALL' | 'SPECIFIC'
  entityTypes?: string[]
  collectionName?: string
  exportConfigs?: boolean
  /*
   * @format int32
   */
  batchNumber?: number
  /*
   * @format int32
   */
  batchSize?: number
  /*
   * @format int32
   */
  mongoBatchSize?: number
  /*
   * @format int64
   */
  exportRecordsUpdatedAfter?: number
  /*
   * @format int64
   */
  exportRecordsCreatedAfter?: number
  identifiers?: string[]
}

export type ExportAccountCollectionBatchDataError = Fetcher.ErrorWrapper<undefined>

export type ExportAccountCollectionBatchDataVariables = {
  queryParams?: ExportAccountCollectionBatchDataQueryParams
} & PortalContext['fetcherOptions']

export const fetchExportAccountCollectionBatchData = (variables: ExportAccountCollectionBatchDataVariables) =>
  portalFetch<
    undefined,
    ExportAccountCollectionBatchDataError,
    undefined,
    {},
    ExportAccountCollectionBatchDataQueryParams,
    {}
  >({ url: '/account/exportBatchCollection', method: 'get', ...variables })

export const useExportAccountCollectionBatchData = (
  variables: ExportAccountCollectionBatchDataVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<undefined, ExportAccountCollectionBatchDataError, undefined>,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<undefined, ExportAccountCollectionBatchDataError, undefined>(
    queryKeyFn({ path: '/account/exportBatchCollection', operationId: 'exportAccountCollectionBatchData', variables }),
    () => fetchExportAccountCollectionBatchData({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type ExportAccountDataQueryParams = {
  accountId?: string
  /*
   * @default ALL
   */
  mode?: 'ALL' | 'SPECIFIC'
  entityTypes?: string[]
}

export type ExportAccountDataError = Fetcher.ErrorWrapper<undefined>

export type ExportAccountDataVariables = {
  queryParams?: ExportAccountDataQueryParams
} & PortalContext['fetcherOptions']

export const fetchExportAccountData = (variables: ExportAccountDataVariables) =>
  portalFetch<undefined, ExportAccountDataError, undefined, {}, ExportAccountDataQueryParams, {}>({
    url: '/account/export',
    method: 'get',
    ...variables
  })

export const useExportAccountData = (
  variables: ExportAccountDataVariables,
  options?: Omit<reactQuery.UseQueryOptions<undefined, ExportAccountDataError, undefined>, 'queryKey' | 'queryFn'>
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<undefined, ExportAccountDataError, undefined>(
    queryKeyFn({ path: '/account/export', operationId: 'exportAccountData', variables }),
    () => fetchExportAccountData({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type ImportAccountDataQueryParams = {
  accountId?: string
  /*
   * @default UPSERT
   */
  mode?: 'DRY_RUN' | 'UPSERT' | 'INSERT'
  singleCollectionImport?: boolean
  disableSchemaCheck?: boolean
  adminUser?: string
  adminPassword?: string
  accountName?: string
  companyName?: string
  updateAccountAttributes?: boolean
}

export type ImportAccountDataError = Fetcher.ErrorWrapper<undefined>

export type ImportAccountDataVariables = {
  body?: RequestBodies.ImportAccountData
  queryParams?: ImportAccountDataQueryParams
} & PortalContext['fetcherOptions']

export const fetchImportAccountData = (variables: ImportAccountDataVariables) =>
  portalFetch<
    Schemas.RestResponseImportStatusReport,
    ImportAccountDataError,
    RequestBodies.ImportAccountData,
    {},
    ImportAccountDataQueryParams,
    {}
  >({ url: '/account/import', method: 'post', ...variables })

export const useImportAccountData = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.RestResponseImportStatusReport,
      ImportAccountDataError,
      ImportAccountDataVariables
    >,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<
    Schemas.RestResponseImportStatusReport,
    ImportAccountDataError,
    ImportAccountDataVariables
  >((variables: ImportAccountDataVariables) => fetchImportAccountData({ ...fetcherOptions, ...variables }), options)
}

export type GetAccountPathParams = {
  accountId: string
}

export type GetAccountError = Fetcher.ErrorWrapper<undefined>

export type GetAccountVariables = {
  pathParams: GetAccountPathParams
} & PortalContext['fetcherOptions']

export const fetchGetAccount = (variables: GetAccountVariables) =>
  portalFetch<Schemas.RestResponseAccount, GetAccountError, undefined, {}, {}, GetAccountPathParams>({
    url: '/account/{accountId}',
    method: 'get',
    ...variables
  })

export const useGetAccount = (
  variables: GetAccountVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.RestResponseAccount, GetAccountError, Schemas.RestResponseAccount>,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<Schemas.RestResponseAccount, GetAccountError, Schemas.RestResponseAccount>(
    queryKeyFn({ path: '/account/{accountId}', operationId: 'getAccount', variables }),
    () => fetchGetAccount({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type DeleteAccountPathParams = {
  accountId: string
}

export type DeleteAccountError = Fetcher.ErrorWrapper<undefined>

export type DeleteAccountVariables = {
  pathParams: DeleteAccountPathParams
} & PortalContext['fetcherOptions']

export const fetchDeleteAccount = (variables: DeleteAccountVariables) =>
  portalFetch<Schemas.RestResponseBoolean, DeleteAccountError, undefined, {}, {}, DeleteAccountPathParams>({
    url: '/account/delete/{accountId}',
    method: 'delete',
    ...variables
  })

export const useDeleteAccount = (
  options?: Omit<
    reactQuery.UseMutationOptions<Schemas.RestResponseBoolean, DeleteAccountError, DeleteAccountVariables>,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<Schemas.RestResponseBoolean, DeleteAccountError, DeleteAccountVariables>(
    (variables: DeleteAccountVariables) => fetchDeleteAccount({ ...fetcherOptions, ...variables }),
    options
  )
}

export type ValidateDelegateTokenQueryParams = {
  accountId?: string
  delegateToken: string
}

export type ValidateDelegateTokenError = Fetcher.ErrorWrapper<undefined>

export type ValidateDelegateTokenVariables = {
  queryParams: ValidateDelegateTokenQueryParams
} & PortalContext['fetcherOptions']

export const fetchValidateDelegateToken = (variables: ValidateDelegateTokenVariables) =>
  portalFetch<
    Schemas.RestResponseBoolean,
    ValidateDelegateTokenError,
    undefined,
    {},
    ValidateDelegateTokenQueryParams,
    {}
  >({ url: '/account/validate-delegate-token', method: 'post', ...variables })

export const useValidateDelegateToken = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.RestResponseBoolean,
      ValidateDelegateTokenError,
      ValidateDelegateTokenVariables
    >,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<
    Schemas.RestResponseBoolean,
    ValidateDelegateTokenError,
    ValidateDelegateTokenVariables
  >(
    (variables: ValidateDelegateTokenVariables) => fetchValidateDelegateToken({ ...fetcherOptions, ...variables }),
    options
  )
}

export type GetAccountDetailsPathParams = {
  accountId: string
}

export type GetAccountDetailsError = Fetcher.ErrorWrapper<undefined>

export type GetAccountDetailsVariables = {
  pathParams: GetAccountDetailsPathParams
} & PortalContext['fetcherOptions']

export const fetchGetAccountDetails = (variables: GetAccountDetailsVariables) =>
  portalFetch<
    Schemas.RestResponseAccountDetails,
    GetAccountDetailsError,
    undefined,
    {},
    {},
    GetAccountDetailsPathParams
  >({ url: '/account/{accountId}/details', method: 'get', ...variables })

export const useGetAccountDetails = (
  variables: GetAccountDetailsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponseAccountDetails,
      GetAccountDetailsError,
      Schemas.RestResponseAccountDetails
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponseAccountDetails,
    GetAccountDetailsError,
    Schemas.RestResponseAccountDetails
  >(
    queryKeyFn({ path: '/account/{accountId}/details', operationId: 'getAccountDetails', variables }),
    () => fetchGetAccountDetails({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type GetAccountsQueryParams = {
  offset?: string
}

export type GetAccountsError = Fetcher.ErrorWrapper<undefined>

export type GetAccountsVariables = {
  queryParams?: GetAccountsQueryParams
} & PortalContext['fetcherOptions']

export const fetchGetAccounts = (variables: GetAccountsVariables) =>
  portalFetch<Schemas.RestResponsePageResponseAccount, GetAccountsError, undefined, {}, GetAccountsQueryParams, {}>({
    url: '/account',
    method: 'get',
    ...variables
  })

export const useGetAccounts = (
  variables: GetAccountsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponsePageResponseAccount,
      GetAccountsError,
      Schemas.RestResponsePageResponseAccount
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponsePageResponseAccount,
    GetAccountsError,
    Schemas.RestResponsePageResponseAccount
  >(
    queryKeyFn({ path: '/account', operationId: 'getAccounts', variables }),
    () => fetchGetAccounts({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type DeleteExportableAccountDataQueryParams = {
  accountId?: string
}

export type DeleteExportableAccountDataError = Fetcher.ErrorWrapper<undefined>

export type DeleteExportableAccountDataVariables = {
  queryParams?: DeleteExportableAccountDataQueryParams
} & PortalContext['fetcherOptions']

export const fetchDeleteExportableAccountData = (variables: DeleteExportableAccountDataVariables) =>
  portalFetch<
    Schemas.RestResponseBoolean,
    DeleteExportableAccountDataError,
    undefined,
    {},
    DeleteExportableAccountDataQueryParams,
    {}
  >({ url: '/account/export-delete', method: 'delete', ...variables })

export const useDeleteExportableAccountData = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.RestResponseBoolean,
      DeleteExportableAccountDataError,
      DeleteExportableAccountDataVariables
    >,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<
    Schemas.RestResponseBoolean,
    DeleteExportableAccountDataError,
    DeleteExportableAccountDataVariables
  >(
    (variables: DeleteExportableAccountDataVariables) =>
      fetchDeleteExportableAccountData({ ...fetcherOptions, ...variables }),
    options
  )
}

export type UpdateTechStacksPathParams = {
  accountId: string
}

export type UpdateTechStacksError = Fetcher.ErrorWrapper<undefined>

export type UpdateTechStacksRequestBody = Schemas.TechStack[]

export type UpdateTechStacksVariables = {
  body?: UpdateTechStacksRequestBody
  pathParams: UpdateTechStacksPathParams
} & PortalContext['fetcherOptions']

export const fetchUpdateTechStacks = (variables: UpdateTechStacksVariables) =>
  portalFetch<
    Schemas.RestResponseBoolean,
    UpdateTechStacksError,
    UpdateTechStacksRequestBody,
    {},
    {},
    UpdateTechStacksPathParams
  >({ url: '/account/{accountId}/tech-stacks', method: 'put', ...variables })

export const useUpdateTechStacks = (
  options?: Omit<
    reactQuery.UseMutationOptions<Schemas.RestResponseBoolean, UpdateTechStacksError, UpdateTechStacksVariables>,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<Schemas.RestResponseBoolean, UpdateTechStacksError, UpdateTechStacksVariables>(
    (variables: UpdateTechStacksVariables) => fetchUpdateTechStacks({ ...fetcherOptions, ...variables }),
    options
  )
}

export type GenerateSampleDelegateQueryParams = {
  accountId?: string
}

export type GenerateSampleDelegateError = Fetcher.ErrorWrapper<undefined>

export type GenerateSampleDelegateVariables = {
  queryParams?: GenerateSampleDelegateQueryParams
} & PortalContext['fetcherOptions']

export const fetchGenerateSampleDelegate = (variables: GenerateSampleDelegateVariables) =>
  portalFetch<
    Schemas.RestResponseString,
    GenerateSampleDelegateError,
    undefined,
    {},
    GenerateSampleDelegateQueryParams,
    {}
  >({ url: '/account/delegate/generate', method: 'post', ...variables })

export const useGenerateSampleDelegate = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.RestResponseString,
      GenerateSampleDelegateError,
      GenerateSampleDelegateVariables
    >,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<
    Schemas.RestResponseString,
    GenerateSampleDelegateError,
    GenerateSampleDelegateVariables
  >(
    (variables: GenerateSampleDelegateVariables) => fetchGenerateSampleDelegate({ ...fetcherOptions, ...variables }),
    options
  )
}

export type EnableAccountQueryParams = {
  accountId?: string
}

export type EnableAccountError = Fetcher.ErrorWrapper<undefined>

export type EnableAccountVariables = {
  queryParams?: EnableAccountQueryParams
} & PortalContext['fetcherOptions']

export const fetchEnableAccount = (variables: EnableAccountVariables) =>
  portalFetch<Schemas.RestResponseBoolean, EnableAccountError, undefined, {}, EnableAccountQueryParams, {}>({
    url: '/account/enable',
    method: 'post',
    ...variables
  })

export const useEnableAccount = (
  options?: Omit<
    reactQuery.UseMutationOptions<Schemas.RestResponseBoolean, EnableAccountError, EnableAccountVariables>,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<Schemas.RestResponseBoolean, EnableAccountError, EnableAccountVariables>(
    (variables: EnableAccountVariables) => fetchEnableAccount({ ...fetcherOptions, ...variables }),
    options
  )
}

export type DisableAccountQueryParams = {
  accountId?: string
  migratedTo?: string
}

export type DisableAccountError = Fetcher.ErrorWrapper<undefined>

export type DisableAccountVariables = {
  queryParams?: DisableAccountQueryParams
} & PortalContext['fetcherOptions']

export const fetchDisableAccount = (variables: DisableAccountVariables) =>
  portalFetch<Schemas.RestResponseBoolean, DisableAccountError, undefined, {}, DisableAccountQueryParams, {}>({
    url: '/account/disable',
    method: 'post',
    ...variables
  })

export const useDisableAccount = (
  options?: Omit<
    reactQuery.UseMutationOptions<Schemas.RestResponseBoolean, DisableAccountError, DisableAccountVariables>,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<Schemas.RestResponseBoolean, DisableAccountError, DisableAccountVariables>(
    (variables: DisableAccountVariables) => fetchDisableAccount({ ...fetcherOptions, ...variables }),
    options
  )
}

export type GetWhitelistedDomainsPathParams = {
  accountId: string
}

export type GetWhitelistedDomainsError = Fetcher.ErrorWrapper<undefined>

export type GetWhitelistedDomainsVariables = {
  pathParams: GetWhitelistedDomainsPathParams
} & PortalContext['fetcherOptions']

export const fetchGetWhitelistedDomains = (variables: GetWhitelistedDomainsVariables) =>
  portalFetch<
    Schemas.RestResponseSetString,
    GetWhitelistedDomainsError,
    undefined,
    {},
    {},
    GetWhitelistedDomainsPathParams
  >({ url: '/account/{accountId}/whitelisted-domains', method: 'get', ...variables })

export const useGetWhitelistedDomains = (
  variables: GetWhitelistedDomainsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponseSetString,
      GetWhitelistedDomainsError,
      Schemas.RestResponseSetString
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<Schemas.RestResponseSetString, GetWhitelistedDomainsError, Schemas.RestResponseSetString>(
    queryKeyFn({ path: '/account/{accountId}/whitelisted-domains', operationId: 'getWhitelistedDomains', variables }),
    () => fetchGetWhitelistedDomains({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type UpdateWhitelistedDomainsPathParams = {
  accountId: string
}

export type UpdateWhitelistedDomainsError = Fetcher.ErrorWrapper<undefined>

export type UpdateWhitelistedDomainsVariables = {
  body?: RequestBodies.UpdateWhitelistedDomainsBody
  pathParams: UpdateWhitelistedDomainsPathParams
} & PortalContext['fetcherOptions']

export const fetchUpdateWhitelistedDomains = (variables: UpdateWhitelistedDomainsVariables) =>
  portalFetch<
    Schemas.RestResponseAccount,
    UpdateWhitelistedDomainsError,
    RequestBodies.UpdateWhitelistedDomainsBody,
    {},
    {},
    UpdateWhitelistedDomainsPathParams
  >({ url: '/account/{accountId}/whitelisted-domains', method: 'put', ...variables })

export const useUpdateWhitelistedDomains = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.RestResponseAccount,
      UpdateWhitelistedDomainsError,
      UpdateWhitelistedDomainsVariables
    >,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<
    Schemas.RestResponseAccount,
    UpdateWhitelistedDomainsError,
    UpdateWhitelistedDomainsVariables
  >(
    (variables: UpdateWhitelistedDomainsVariables) =>
      fetchUpdateWhitelistedDomains({ ...fetcherOptions, ...variables }),
    options
  )
}

export type PostCustomEventQueryParams = {
  accountId?: string
  /*
   * @default true
   */
  oneTimeOnly?: boolean
  /*
   * @default true
   */
  trialOnly?: boolean
}

export type PostCustomEventError = Fetcher.ErrorWrapper<undefined>

export type PostCustomEventVariables = {
  body?: Schemas.AccountEvent
  queryParams?: PostCustomEventQueryParams
} & PortalContext['fetcherOptions']

export const fetchPostCustomEvent = (variables: PostCustomEventVariables) =>
  portalFetch<
    Schemas.RestResponseBoolean,
    PostCustomEventError,
    Schemas.AccountEvent,
    {},
    PostCustomEventQueryParams,
    {}
  >({ url: '/account/custom-event', method: 'post', ...variables })

export const usePostCustomEvent = (
  options?: Omit<
    reactQuery.UseMutationOptions<Schemas.RestResponseBoolean, PostCustomEventError, PostCustomEventVariables>,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<Schemas.RestResponseBoolean, PostCustomEventError, PostCustomEventVariables>(
    (variables: PostCustomEventVariables) => fetchPostCustomEvent({ ...fetcherOptions, ...variables }),
    options
  )
}

export type AddSubdomainUrlPathParams = {
  accountId: string
}

export type AddSubdomainUrlError = Fetcher.ErrorWrapper<undefined>

export type AddSubdomainUrlVariables = {
  body?: Schemas.SubdomainUrl
  pathParams: AddSubdomainUrlPathParams
} & PortalContext['fetcherOptions']

export const fetchAddSubdomainUrl = (variables: AddSubdomainUrlVariables) =>
  portalFetch<
    Schemas.RestResponseBoolean,
    AddSubdomainUrlError,
    Schemas.SubdomainUrl,
    {},
    {},
    AddSubdomainUrlPathParams
  >({ url: '/account/{accountId}/addSubdomainUrl', method: 'patch', ...variables })

export const useAddSubdomainUrl = (
  options?: Omit<
    reactQuery.UseMutationOptions<Schemas.RestResponseBoolean, AddSubdomainUrlError, AddSubdomainUrlVariables>,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<Schemas.RestResponseBoolean, AddSubdomainUrlError, AddSubdomainUrlVariables>(
    (variables: AddSubdomainUrlVariables) => fetchAddSubdomainUrl({ ...fetcherOptions, ...variables }),
    options
  )
}

export type UpdateAccountPreferenceQueryParams = {
  accountId?: string
  preferenceKey?: string
}

export type UpdateAccountPreferenceError = Fetcher.ErrorWrapper<undefined>

export type UpdateAccountPreferenceVariables = {
  body?: RequestBodies.UpdateAccountPreferenceBody
  queryParams?: UpdateAccountPreferenceQueryParams
} & PortalContext['fetcherOptions']

export const fetchUpdateAccountPreference = (variables: UpdateAccountPreferenceVariables) =>
  portalFetch<
    Schemas.RestResponseBoolean,
    UpdateAccountPreferenceError,
    RequestBodies.UpdateAccountPreferenceBody,
    {},
    UpdateAccountPreferenceQueryParams,
    {}
  >({ url: '/account/updateAccountPreference', method: 'post', ...variables })

export const useUpdateAccountPreference = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.RestResponseBoolean,
      UpdateAccountPreferenceError,
      UpdateAccountPreferenceVariables
    >,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<
    Schemas.RestResponseBoolean,
    UpdateAccountPreferenceError,
    UpdateAccountPreferenceVariables
  >(
    (variables: UpdateAccountPreferenceVariables) => fetchUpdateAccountPreference({ ...fetcherOptions, ...variables }),
    options
  )
}

export type EnableHarnessUserGroupAccessPathParams = {
  accountId: string
}

export type EnableHarnessUserGroupAccessError = Fetcher.ErrorWrapper<undefined>

export type EnableHarnessUserGroupAccessVariables = {
  pathParams: EnableHarnessUserGroupAccessPathParams
} & PortalContext['fetcherOptions']

export const fetchEnableHarnessUserGroupAccess = (variables: EnableHarnessUserGroupAccessVariables) =>
  portalFetch<
    Schemas.RestResponseBoolean,
    EnableHarnessUserGroupAccessError,
    undefined,
    {},
    {},
    EnableHarnessUserGroupAccessPathParams
  >({ url: '/account/{accountId}/disableRestrictedAccess', method: 'put', ...variables })

export const useEnableHarnessUserGroupAccess = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.RestResponseBoolean,
      EnableHarnessUserGroupAccessError,
      EnableHarnessUserGroupAccessVariables
    >,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<
    Schemas.RestResponseBoolean,
    EnableHarnessUserGroupAccessError,
    EnableHarnessUserGroupAccessVariables
  >(
    (variables: EnableHarnessUserGroupAccessVariables) =>
      fetchEnableHarnessUserGroupAccess({ ...fetcherOptions, ...variables }),
    options
  )
}

export type DisableHarnessUserGroupAccessPathParams = {
  accountId: string
}

export type DisableHarnessUserGroupAccessError = Fetcher.ErrorWrapper<undefined>

export type DisableHarnessUserGroupAccessVariables = {
  pathParams: DisableHarnessUserGroupAccessPathParams
} & PortalContext['fetcherOptions']

export const fetchDisableHarnessUserGroupAccess = (variables: DisableHarnessUserGroupAccessVariables) =>
  portalFetch<
    Schemas.RestResponseBoolean,
    DisableHarnessUserGroupAccessError,
    undefined,
    {},
    {},
    DisableHarnessUserGroupAccessPathParams
  >({ url: '/account/{accountId}/enableRestrictedAccess', method: 'put', ...variables })

export const useDisableHarnessUserGroupAccess = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.RestResponseBoolean,
      DisableHarnessUserGroupAccessError,
      DisableHarnessUserGroupAccessVariables
    >,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<
    Schemas.RestResponseBoolean,
    DisableHarnessUserGroupAccessError,
    DisableHarnessUserGroupAccessVariables
  >(
    (variables: DisableHarnessUserGroupAccessVariables) =>
      fetchDisableHarnessUserGroupAccess({ ...fetcherOptions, ...variables }),
    options
  )
}

export type IsRestrictedAccessEnabledPathParams = {
  accountId: string
}

export type IsRestrictedAccessEnabledError = Fetcher.ErrorWrapper<undefined>

export type IsRestrictedAccessEnabledVariables = {
  pathParams: IsRestrictedAccessEnabledPathParams
} & PortalContext['fetcherOptions']

export const fetchIsRestrictedAccessEnabled = (variables: IsRestrictedAccessEnabledVariables) =>
  portalFetch<
    Schemas.RestResponseBoolean,
    IsRestrictedAccessEnabledError,
    undefined,
    {},
    {},
    IsRestrictedAccessEnabledPathParams
  >({ url: '/account/{accountId}/isRestrictedAccessEnabled', method: 'get', ...variables })

export const useIsRestrictedAccessEnabled = (
  variables: IsRestrictedAccessEnabledVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponseBoolean,
      IsRestrictedAccessEnabledError,
      Schemas.RestResponseBoolean
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<Schemas.RestResponseBoolean, IsRestrictedAccessEnabledError, Schemas.RestResponseBoolean>(
    queryKeyFn({
      path: '/account/{accountId}/isRestrictedAccessEnabled',
      operationId: 'isRestrictedAccessEnabled',
      variables
    }),
    () => fetchIsRestrictedAccessEnabled({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type GetAuthenticationInfoQueryParams = {
  accountId?: string
}

export type GetAuthenticationInfoError = Fetcher.ErrorWrapper<undefined>

export type GetAuthenticationInfoVariables = {
  queryParams?: GetAuthenticationInfoQueryParams
} & PortalContext['fetcherOptions']

export const fetchGetAuthenticationInfo = (variables: GetAuthenticationInfoVariables) =>
  portalFetch<
    Schemas.RestResponseAuthenticationInfo,
    GetAuthenticationInfoError,
    undefined,
    {},
    GetAuthenticationInfoQueryParams,
    {}
  >({ url: '/account/authentication-info', method: 'get', ...variables })

export const useGetAuthenticationInfo = (
  variables: GetAuthenticationInfoVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponseAuthenticationInfo,
      GetAuthenticationInfoError,
      Schemas.RestResponseAuthenticationInfo
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponseAuthenticationInfo,
    GetAuthenticationInfoError,
    Schemas.RestResponseAuthenticationInfo
  >(
    queryKeyFn({ path: '/account/authentication-info', operationId: 'getAuthenticationInfo', variables }),
    () => fetchGetAuthenticationInfo({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type GetStatusPathParams = {
  accountId: string
}

export type GetStatusError = Fetcher.ErrorWrapper<undefined>

export type GetStatusVariables = {
  pathParams: GetStatusPathParams
} & PortalContext['fetcherOptions']

export const fetchGetStatus = (variables: GetStatusVariables) =>
  portalFetch<Schemas.RestResponseString, GetStatusError, undefined, {}, {}, GetStatusPathParams>({
    url: '/account/{accountId}/status',
    method: 'get',
    ...variables
  })

export const useGetStatus = (
  variables: GetStatusVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.RestResponseString, GetStatusError, Schemas.RestResponseString>,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<Schemas.RestResponseString, GetStatusError, Schemas.RestResponseString>(
    queryKeyFn({ path: '/account/{accountId}/status', operationId: 'getStatus', variables }),
    () => fetchGetStatus({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type CreateAccountError = Fetcher.ErrorWrapper<undefined>

export type CreateAccountVariables = {
  body: RequestBodies.Account
} & PortalContext['fetcherOptions']

export const fetchCreateAccount = (variables: CreateAccountVariables) =>
  portalFetch<Schemas.RestResponseAccount, CreateAccountError, RequestBodies.Account, {}, {}, {}>({
    url: '/account/new',
    method: 'post',
    ...variables
  })

export const useCreateAccount = (
  options?: Omit<
    reactQuery.UseMutationOptions<Schemas.RestResponseAccount, CreateAccountError, CreateAccountVariables>,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<Schemas.RestResponseAccount, CreateAccountError, CreateAccountVariables>(
    (variables: CreateAccountVariables) => fetchCreateAccount({ ...fetcherOptions, ...variables }),
    options
  )
}

export type UpdateAccountSalesContactsPathParams = {
  accountId: string
}

export type UpdateAccountSalesContactsError = Fetcher.ErrorWrapper<undefined>

export type UpdateAccountSalesContactsVariables = {
  body?: Schemas.AccountSalesContactsInfo
  pathParams: UpdateAccountSalesContactsPathParams
} & PortalContext['fetcherOptions']

export const fetchUpdateAccountSalesContacts = (variables: UpdateAccountSalesContactsVariables) =>
  portalFetch<
    Schemas.RestResponseAccount,
    UpdateAccountSalesContactsError,
    Schemas.AccountSalesContactsInfo,
    {},
    {},
    UpdateAccountSalesContactsPathParams
  >({ url: '/account/{accountId}/sales-contacts', method: 'put', ...variables })

export const useUpdateAccountSalesContacts = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.RestResponseAccount,
      UpdateAccountSalesContactsError,
      UpdateAccountSalesContactsVariables
    >,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<
    Schemas.RestResponseAccount,
    UpdateAccountSalesContactsError,
    UpdateAccountSalesContactsVariables
  >(
    (variables: UpdateAccountSalesContactsVariables) =>
      fetchUpdateAccountSalesContacts({ ...fetcherOptions, ...variables }),
    options
  )
}

export type UpdateAccountLicenseQueryParams = {
  accountId?: string
}

export type UpdateAccountLicenseError = Fetcher.ErrorWrapper<undefined>

export type UpdateAccountLicenseVariables = {
  body: Schemas.LicenseUpdateInfo
  queryParams?: UpdateAccountLicenseQueryParams
} & PortalContext['fetcherOptions']

export const fetchUpdateAccountLicense = (variables: UpdateAccountLicenseVariables) =>
  portalFetch<
    Schemas.RestResponseBoolean,
    UpdateAccountLicenseError,
    Schemas.LicenseUpdateInfo,
    {},
    UpdateAccountLicenseQueryParams,
    {}
  >({ url: '/account/license', method: 'put', ...variables })

export const useUpdateAccountLicense = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.RestResponseBoolean,
      UpdateAccountLicenseError,
      UpdateAccountLicenseVariables
    >,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<Schemas.RestResponseBoolean, UpdateAccountLicenseError, UpdateAccountLicenseVariables>(
    (variables: UpdateAccountLicenseVariables) => fetchUpdateAccountLicense({ ...fetcherOptions, ...variables }),
    options
  )
}

export type UpdateAccountLicense1PathParams = {
  accountId: string
}

export type UpdateAccountLicense1Error = Fetcher.ErrorWrapper<undefined>

export type UpdateAccountLicense1Variables = {
  body?: RequestBodies.LicenseInfo
  pathParams: UpdateAccountLicense1PathParams
} & PortalContext['fetcherOptions']

export const fetchUpdateAccountLicense1 = (variables: UpdateAccountLicense1Variables) =>
  portalFetch<
    Schemas.RestResponseBoolean,
    UpdateAccountLicense1Error,
    RequestBodies.LicenseInfo,
    {},
    {},
    UpdateAccountLicense1PathParams
  >({ url: '/account/license/{accountId}', method: 'put', ...variables })

export const useUpdateAccountLicense1 = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.RestResponseBoolean,
      UpdateAccountLicense1Error,
      UpdateAccountLicense1Variables
    >,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<
    Schemas.RestResponseBoolean,
    UpdateAccountLicense1Error,
    UpdateAccountLicense1Variables
  >(
    (variables: UpdateAccountLicense1Variables) => fetchUpdateAccountLicense1({ ...fetcherOptions, ...variables }),
    options
  )
}

export type IsFeatureEnabledQueryParams = {
  featureName?: string
  accountId?: string
}

export type IsFeatureEnabledError = Fetcher.ErrorWrapper<undefined>

export type IsFeatureEnabledVariables = {
  queryParams?: IsFeatureEnabledQueryParams
} & PortalContext['fetcherOptions']

export const fetchIsFeatureEnabled = (variables: IsFeatureEnabledVariables) =>
  portalFetch<Schemas.RestResponseBoolean, IsFeatureEnabledError, undefined, {}, IsFeatureEnabledQueryParams, {}>({
    url: '/account/feature-flag-enabled',
    method: 'get',
    ...variables
  })

export const useIsFeatureEnabled = (
  variables: IsFeatureEnabledVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.RestResponseBoolean, IsFeatureEnabledError, Schemas.RestResponseBoolean>,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<Schemas.RestResponseBoolean, IsFeatureEnabledError, Schemas.RestResponseBoolean>(
    queryKeyFn({ path: '/account/feature-flag-enabled', operationId: 'isFeatureEnabled', variables }),
    () => fetchIsFeatureEnabled({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type GetAllServicesFor24x7QueryParams = {
  accountId?: string
  serviceId?: string
  /*
   * @default 0
   */
  offset?: string
  limit?: string
  fieldsIncluded?: string[]
  fieldsExcluded?: string[]
}

export type GetAllServicesFor24x7Error = Fetcher.ErrorWrapper<undefined>

export type GetAllServicesFor24x7Variables = {
  queryParams?: GetAllServicesFor24x7QueryParams
} & PortalContext['fetcherOptions']

export const fetchGetAllServicesFor24x7 = (variables: GetAllServicesFor24x7Variables) =>
  portalFetch<
    Schemas.RestResponsePageResponseCVEnabledService,
    GetAllServicesFor24x7Error,
    undefined,
    {},
    GetAllServicesFor24x7QueryParams,
    {}
  >({ url: '/account/services-cv-24x7', method: 'get', ...variables })

export const useGetAllServicesFor24x7 = (
  variables: GetAllServicesFor24x7Variables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponsePageResponseCVEnabledService,
      GetAllServicesFor24x7Error,
      Schemas.RestResponsePageResponseCVEnabledService
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponsePageResponseCVEnabledService,
    GetAllServicesFor24x7Error,
    Schemas.RestResponsePageResponseCVEnabledService
  >(
    queryKeyFn({ path: '/account/services-cv-24x7', operationId: 'getAllServicesFor24x7', variables }),
    () => fetchGetAllServicesFor24x7({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type GetAllServicesFor24x71QueryParams = {
  accountId?: string
}

export type GetAllServicesFor24x71Error = Fetcher.ErrorWrapper<undefined>

export type GetAllServicesFor24x71Variables = {
  queryParams?: GetAllServicesFor24x71QueryParams
} & PortalContext['fetcherOptions']

export const fetchGetAllServicesFor24x71 = (variables: GetAllServicesFor24x71Variables) =>
  portalFetch<
    Schemas.RestResponseListService,
    GetAllServicesFor24x71Error,
    undefined,
    {},
    GetAllServicesFor24x71QueryParams,
    {}
  >({ url: '/account/services-cv-24x7-breadcrumb', method: 'get', ...variables })

export const useGetAllServicesFor24x71 = (
  variables: GetAllServicesFor24x71Variables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponseListService,
      GetAllServicesFor24x71Error,
      Schemas.RestResponseListService
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponseListService,
    GetAllServicesFor24x71Error,
    Schemas.RestResponseListService
  >(
    queryKeyFn({ path: '/account/services-cv-24x7-breadcrumb', operationId: 'getAllServicesFor24x71', variables }),
    () => fetchGetAllServicesFor24x71({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type StartCeTrialPathParams = {
  accountId: string
}

export type StartCeTrialError = Fetcher.ErrorWrapper<undefined>

export type StartCeTrialVariables = {
  pathParams: StartCeTrialPathParams
} & PortalContext['fetcherOptions']

export const fetchStartCeTrial = (variables: StartCeTrialVariables) =>
  portalFetch<Schemas.RestResponseBoolean, StartCeTrialError, undefined, {}, {}, StartCeTrialPathParams>({
    url: '/account/continuous-efficiency/{accountId}/startTrial',
    method: 'post',
    ...variables
  })

export const useStartCeTrial = (
  options?: Omit<
    reactQuery.UseMutationOptions<Schemas.RestResponseBoolean, StartCeTrialError, StartCeTrialVariables>,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<Schemas.RestResponseBoolean, StartCeTrialError, StartCeTrialVariables>(
    (variables: StartCeTrialVariables) => fetchStartCeTrial({ ...fetcherOptions, ...variables }),
    options
  )
}

export type GenerateLicensePathParams = {
  accountId: string
}

export type GenerateLicenseError = Fetcher.ErrorWrapper<undefined>

export type GenerateLicenseVariables = {
  body?: RequestBodies.LicenseInfo
  pathParams: GenerateLicensePathParams
} & PortalContext['fetcherOptions']

export const fetchGenerateLicense = (variables: GenerateLicenseVariables) =>
  portalFetch<
    Schemas.RestResponseString,
    GenerateLicenseError,
    RequestBodies.LicenseInfo,
    {},
    {},
    GenerateLicensePathParams
  >({ url: '/account/license/generate/{accountId}', method: 'put', ...variables })

export const useGenerateLicense = (
  options?: Omit<
    reactQuery.UseMutationOptions<Schemas.RestResponseString, GenerateLicenseError, GenerateLicenseVariables>,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<Schemas.RestResponseString, GenerateLicenseError, GenerateLicenseVariables>(
    (variables: GenerateLicenseVariables) => fetchGenerateLicense({ ...fetcherOptions, ...variables }),
    options
  )
}

export type CheckSampleDelegateQueryParams = {
  accountId?: string
}

export type CheckSampleDelegateError = Fetcher.ErrorWrapper<undefined>

export type CheckSampleDelegateVariables = {
  queryParams?: CheckSampleDelegateQueryParams
} & PortalContext['fetcherOptions']

export const fetchCheckSampleDelegate = (variables: CheckSampleDelegateVariables) =>
  portalFetch<Schemas.RestResponseBoolean, CheckSampleDelegateError, undefined, {}, CheckSampleDelegateQueryParams, {}>(
    { url: '/account/delegate/active', method: 'get', ...variables }
  )

export const useCheckSampleDelegate = (
  variables: CheckSampleDelegateVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.RestResponseBoolean, CheckSampleDelegateError, Schemas.RestResponseBoolean>,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<Schemas.RestResponseBoolean, CheckSampleDelegateError, Schemas.RestResponseBoolean>(
    queryKeyFn({ path: '/account/delegate/active', operationId: 'checkSampleDelegate', variables }),
    () => fetchCheckSampleDelegate({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type CheckProgressSampleDelegateQueryParams = {
  accountId?: string
}

export type CheckProgressSampleDelegateError = Fetcher.ErrorWrapper<undefined>

export type CheckProgressSampleDelegateVariables = {
  queryParams?: CheckProgressSampleDelegateQueryParams
} & PortalContext['fetcherOptions']

export const fetchCheckProgressSampleDelegate = (variables: CheckProgressSampleDelegateVariables) =>
  portalFetch<
    Schemas.RestResponseListProvisionStep,
    CheckProgressSampleDelegateError,
    undefined,
    {},
    CheckProgressSampleDelegateQueryParams,
    {}
  >({ url: '/account/delegate/progress', method: 'get', ...variables })

export const useCheckProgressSampleDelegate = (
  variables: CheckProgressSampleDelegateVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponseListProvisionStep,
      CheckProgressSampleDelegateError,
      Schemas.RestResponseListProvisionStep
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponseListProvisionStep,
    CheckProgressSampleDelegateError,
    Schemas.RestResponseListProvisionStep
  >(
    queryKeyFn({ path: '/account/delegate/progress', operationId: 'checkProgressSampleDelegate', variables }),
    () => fetchCheckProgressSampleDelegate({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type CreateSampleApplicationQueryParams = {
  accountId?: string
}

export type CreateSampleApplicationError = Fetcher.ErrorWrapper<undefined>

export type CreateSampleApplicationVariables = {
  queryParams?: CreateSampleApplicationQueryParams
} & PortalContext['fetcherOptions']

export const fetchCreateSampleApplication = (variables: CreateSampleApplicationVariables) =>
  portalFetch<
    Schemas.RestResponseBoolean,
    CreateSampleApplicationError,
    undefined,
    {},
    CreateSampleApplicationQueryParams,
    {}
  >({ url: '/account/createSampleApplication', method: 'post', ...variables })

export const useCreateSampleApplication = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.RestResponseBoolean,
      CreateSampleApplicationError,
      CreateSampleApplicationVariables
    >,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<
    Schemas.RestResponseBoolean,
    CreateSampleApplicationError,
    CreateSampleApplicationVariables
  >(
    (variables: CreateSampleApplicationVariables) => fetchCreateSampleApplication({ ...fetcherOptions, ...variables }),
    options
  )
}

export type GetLatestAccountPathParams = {
  accountId: string
}

export type GetLatestAccountError = Fetcher.ErrorWrapper<undefined>

export type GetLatestAccountVariables = {
  pathParams: GetLatestAccountPathParams
} & PortalContext['fetcherOptions']

export const fetchGetLatestAccount = (variables: GetLatestAccountVariables) =>
  portalFetch<Schemas.RestResponseAccount, GetLatestAccountError, undefined, {}, {}, GetLatestAccountPathParams>({
    url: '/account/{accountId}/latest',
    method: 'get',
    ...variables
  })

export const useGetLatestAccount = (
  variables: GetLatestAccountVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.RestResponseAccount, GetLatestAccountError, Schemas.RestResponseAccount>,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<Schemas.RestResponseAccount, GetLatestAccountError, Schemas.RestResponseAccount>(
    queryKeyFn({ path: '/account/{accountId}/latest', operationId: 'getLatestAccount', variables }),
    () => fetchGetLatestAccount({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type GcpSignUpError = Fetcher.ErrorWrapper<undefined>

export type GcpSignUpVariables = {
  body?: RequestBodies.GcpSignUp
} & PortalContext['fetcherOptions']

export const fetchGcpSignUp = (variables: GcpSignUpVariables) =>
  portalFetch<undefined, GcpSignUpError, RequestBodies.GcpSignUp, {}, {}, {}>({
    url: '/account/gcp',
    method: 'post',
    ...variables
  })

export const useGcpSignUp = (
  options?: Omit<reactQuery.UseMutationOptions<undefined, GcpSignUpError, GcpSignUpVariables>, 'mutationFn'>
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<undefined, GcpSignUpError, GcpSignUpVariables>(
    (variables: GcpSignUpVariables) => fetchGcpSignUp({ ...fetcherOptions, ...variables }),
    options
  )
}

export type SetServiceGuardAccountLimitPathParams = {
  accountId: string
}

export type SetServiceGuardAccountLimitError = Fetcher.ErrorWrapper<undefined>

export type SetServiceGuardAccountLimitVariables = {
  body?: Schemas.ServiceGuardLimitDTO
  pathParams: SetServiceGuardAccountLimitPathParams
} & PortalContext['fetcherOptions']

export const fetchSetServiceGuardAccountLimit = (variables: SetServiceGuardAccountLimitVariables) =>
  portalFetch<
    Schemas.RestResponseString,
    SetServiceGuardAccountLimitError,
    Schemas.ServiceGuardLimitDTO,
    {},
    {},
    SetServiceGuardAccountLimitPathParams
  >({ url: '/account/{accountId}/set-service-guard-count', method: 'put', ...variables })

export const useSetServiceGuardAccountLimit = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.RestResponseString,
      SetServiceGuardAccountLimitError,
      SetServiceGuardAccountLimitVariables
    >,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<
    Schemas.RestResponseString,
    SetServiceGuardAccountLimitError,
    SetServiceGuardAccountLimitVariables
  >(
    (variables: SetServiceGuardAccountLimitVariables) =>
      fetchSetServiceGuardAccountLimit({ ...fetcherOptions, ...variables }),
    options
  )
}

export type EnableHarnessUserGroupAccessWorkflowPathParams = {
  accountId: string
  enableAccountId: string
}

export type EnableHarnessUserGroupAccessWorkflowError = Fetcher.ErrorWrapper<undefined>

export type EnableHarnessUserGroupAccessWorkflowVariables = {
  pathParams: EnableHarnessUserGroupAccessWorkflowPathParams
} & PortalContext['fetcherOptions']

export const fetchEnableHarnessUserGroupAccessWorkflow = (variables: EnableHarnessUserGroupAccessWorkflowVariables) =>
  portalFetch<
    Schemas.RestResponseBoolean,
    EnableHarnessUserGroupAccessWorkflowError,
    undefined,
    {},
    {},
    EnableHarnessUserGroupAccessWorkflowPathParams
  >({ url: '/account/{accountId}/enableHarnessUserGroupAccessWorkflow/{enableAccountId}', method: 'put', ...variables })

export const useEnableHarnessUserGroupAccessWorkflow = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.RestResponseBoolean,
      EnableHarnessUserGroupAccessWorkflowError,
      EnableHarnessUserGroupAccessWorkflowVariables
    >,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<
    Schemas.RestResponseBoolean,
    EnableHarnessUserGroupAccessWorkflowError,
    EnableHarnessUserGroupAccessWorkflowVariables
  >(
    (variables: EnableHarnessUserGroupAccessWorkflowVariables) =>
      fetchEnableHarnessUserGroupAccessWorkflow({ ...fetcherOptions, ...variables }),
    options
  )
}

export type DisableHarnessUserGroupAccessWorkflowPathParams = {
  accountId: string
  disableAccountId: string
}

export type DisableHarnessUserGroupAccessWorkflowError = Fetcher.ErrorWrapper<undefined>

export type DisableHarnessUserGroupAccessWorkflowVariables = {
  pathParams: DisableHarnessUserGroupAccessWorkflowPathParams
} & PortalContext['fetcherOptions']

export const fetchDisableHarnessUserGroupAccessWorkflow = (variables: DisableHarnessUserGroupAccessWorkflowVariables) =>
  portalFetch<
    Schemas.RestResponseBoolean,
    DisableHarnessUserGroupAccessWorkflowError,
    undefined,
    {},
    {},
    DisableHarnessUserGroupAccessWorkflowPathParams
  >({
    url: '/account/{accountId}/disableHarnessUserGroupAccessWorkflow/{disableAccountId}',
    method: 'put',
    ...variables
  })

export const useDisableHarnessUserGroupAccessWorkflow = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.RestResponseBoolean,
      DisableHarnessUserGroupAccessWorkflowError,
      DisableHarnessUserGroupAccessWorkflowVariables
    >,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<
    Schemas.RestResponseBoolean,
    DisableHarnessUserGroupAccessWorkflowError,
    DisableHarnessUserGroupAccessWorkflowVariables
  >(
    (variables: DisableHarnessUserGroupAccessWorkflowVariables) =>
      fetchDisableHarnessUserGroupAccessWorkflow({ ...fetcherOptions, ...variables }),
    options
  )
}

export type GetNgAccountLicensePathParams = {
  accountId: string
}

export type GetNgAccountLicenseError = Fetcher.ErrorWrapper<undefined>

export type GetNgAccountLicenseVariables = {
  pathParams: GetNgAccountLicensePathParams
} & PortalContext['fetcherOptions']

export const fetchGetNgAccountLicense = (variables: GetNgAccountLicenseVariables) =>
  portalFetch<
    Schemas.RestResponseAccountLicenseDTO,
    GetNgAccountLicenseError,
    undefined,
    {},
    {},
    GetNgAccountLicensePathParams
  >({ url: '/account/{accountId}/ng/license', method: 'get', ...variables })

export const useGetNgAccountLicense = (
  variables: GetNgAccountLicenseVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponseAccountLicenseDTO,
      GetNgAccountLicenseError,
      Schemas.RestResponseAccountLicenseDTO
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponseAccountLicenseDTO,
    GetNgAccountLicenseError,
    Schemas.RestResponseAccountLicenseDTO
  >(
    queryKeyFn({ path: '/account/{accountId}/ng/license', operationId: 'getNgAccountLicense', variables }),
    () => fetchGetNgAccountLicense({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type CreateNgLicensePathParams = {
  accountId: string
}

export type CreateNgLicenseError = Fetcher.ErrorWrapper<undefined>

export type CreateNgLicenseVariables = {
  body?: RequestBodies.ModuleLicenseDTO
  pathParams: CreateNgLicensePathParams
} & PortalContext['fetcherOptions']

export const fetchCreateNgLicense = (variables: CreateNgLicenseVariables) =>
  portalFetch<
    Schemas.RestResponseModuleLicenseDTO,
    CreateNgLicenseError,
    RequestBodies.ModuleLicenseDTO,
    {},
    {},
    CreateNgLicensePathParams
  >({ url: '/account/{accountId}/ng/license', method: 'post', ...variables })

export const useCreateNgLicense = (
  options?: Omit<
    reactQuery.UseMutationOptions<Schemas.RestResponseModuleLicenseDTO, CreateNgLicenseError, CreateNgLicenseVariables>,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<Schemas.RestResponseModuleLicenseDTO, CreateNgLicenseError, CreateNgLicenseVariables>(
    (variables: CreateNgLicenseVariables) => fetchCreateNgLicense({ ...fetcherOptions, ...variables }),
    options
  )
}

export type UpdateNgLicensePathParams = {
  accountId: string
}

export type UpdateNgLicenseError = Fetcher.ErrorWrapper<undefined>

export type UpdateNgLicenseVariables = {
  body?: RequestBodies.ModuleLicenseDTO
  pathParams: UpdateNgLicensePathParams
} & PortalContext['fetcherOptions']

export const fetchUpdateNgLicense = (variables: UpdateNgLicenseVariables) =>
  portalFetch<
    Schemas.RestResponseModuleLicenseDTO,
    UpdateNgLicenseError,
    RequestBodies.ModuleLicenseDTO,
    {},
    {},
    UpdateNgLicensePathParams
  >({ url: '/account/{accountId}/ng/license', method: 'put', ...variables })

export const useUpdateNgLicense = (
  options?: Omit<
    reactQuery.UseMutationOptions<Schemas.RestResponseModuleLicenseDTO, UpdateNgLicenseError, UpdateNgLicenseVariables>,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<Schemas.RestResponseModuleLicenseDTO, UpdateNgLicenseError, UpdateNgLicenseVariables>(
    (variables: UpdateNgLicenseVariables) => fetchUpdateNgLicense({ ...fetcherOptions, ...variables }),
    options
  )
}

export type UpdateDefaultExperiencePathParams = {
  accountId: string
}

export type UpdateDefaultExperienceError = Fetcher.ErrorWrapper<undefined>

export type UpdateDefaultExperienceVariables = {
  body: RequestBodies.Account
  pathParams: UpdateDefaultExperiencePathParams
} & PortalContext['fetcherOptions']

export const fetchUpdateDefaultExperience = (variables: UpdateDefaultExperienceVariables) =>
  portalFetch<
    Schemas.RestResponseVoid,
    UpdateDefaultExperienceError,
    RequestBodies.Account,
    {},
    {},
    UpdateDefaultExperiencePathParams
  >({ url: '/account/{accountId}/defaultExperience', method: 'put', ...variables })

export const useUpdateDefaultExperience = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.RestResponseVoid,
      UpdateDefaultExperienceError,
      UpdateDefaultExperienceVariables
    >,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<
    Schemas.RestResponseVoid,
    UpdateDefaultExperienceError,
    UpdateDefaultExperienceVariables
  >(
    (variables: UpdateDefaultExperienceVariables) => fetchUpdateDefaultExperience({ ...fetcherOptions, ...variables }),
    options
  )
}

export type Get2PathParams = {
  activityId: string
}

export type Get2QueryParams = {
  appId?: string
}

export type Get2Error = Fetcher.ErrorWrapper<undefined>

export type Get2Variables = {
  pathParams: Get2PathParams
  queryParams?: Get2QueryParams
} & PortalContext['fetcherOptions']

export const fetchGet2 = (variables: Get2Variables) =>
  portalFetch<Schemas.RestResponseActivity, Get2Error, undefined, {}, Get2QueryParams, Get2PathParams>({
    url: '/activities/{activityId}',
    method: 'get',
    ...variables
  })

export const useGet2 = (
  variables: Get2Variables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.RestResponseActivity, Get2Error, Schemas.RestResponseActivity>,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<Schemas.RestResponseActivity, Get2Error, Schemas.RestResponseActivity>(
    queryKeyFn({ path: '/activities/{activityId}', operationId: 'get2', variables }),
    () => fetchGet2({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type List2QueryParams = {
  accountId?: string
  envId?: string
  /*
   * @default 0
   */
  offset?: string
  limit?: string
  fieldsIncluded?: string[]
  fieldsExcluded?: string[]
}

export type List2Error = Fetcher.ErrorWrapper<undefined>

export type List2Variables = {
  queryParams?: List2QueryParams
} & PortalContext['fetcherOptions']

export const fetchList2 = (variables: List2Variables) =>
  portalFetch<Schemas.RestResponsePageResponseActivity, List2Error, undefined, {}, List2QueryParams, {}>({
    url: '/activities',
    method: 'get',
    ...variables
  })

export const useList2 = (
  variables: List2Variables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponsePageResponseActivity,
      List2Error,
      Schemas.RestResponsePageResponseActivity
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponsePageResponseActivity,
    List2Error,
    Schemas.RestResponsePageResponseActivity
  >(
    queryKeyFn({ path: '/activities', operationId: 'list2', variables }),
    () => fetchList2({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type ListLogsPathParams = {
  activityId: string
}

export type ListLogsQueryParams = {
  appId?: string
  unitName?: string
  /*
   * @default 0
   */
  offset?: string
  limit?: string
  fieldsIncluded?: string[]
  fieldsExcluded?: string[]
}

export type ListLogsError = Fetcher.ErrorWrapper<undefined>

export type ListLogsVariables = {
  pathParams: ListLogsPathParams
  queryParams?: ListLogsQueryParams
} & PortalContext['fetcherOptions']

export const fetchListLogs = (variables: ListLogsVariables) =>
  portalFetch<
    Schemas.RestResponsePageResponseLog,
    ListLogsError,
    undefined,
    {},
    ListLogsQueryParams,
    ListLogsPathParams
  >({ url: '/activities/{activityId}/logs', method: 'get', ...variables })

export const useListLogs = (
  variables: ListLogsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.RestResponsePageResponseLog, ListLogsError, Schemas.RestResponsePageResponseLog>,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<Schemas.RestResponsePageResponseLog, ListLogsError, Schemas.RestResponsePageResponseLog>(
    queryKeyFn({ path: '/activities/{activityId}/logs', operationId: 'listLogs', variables }),
    () => fetchListLogs({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type ListLogs1PathParams = {
  stateExecutionId: string
}

export type ListLogs1QueryParams = {
  appId?: string
  /*
   * @format int64
   */
  startTime?: number
  /*
   * @format int64
   */
  endTime?: number
  /*
   * @default 0
   */
  offset?: string
  limit?: string
  fieldsIncluded?: string[]
  fieldsExcluded?: string[]
}

export type ListLogs1Error = Fetcher.ErrorWrapper<undefined>

export type ListLogs1Variables = {
  pathParams: ListLogs1PathParams
  queryParams?: ListLogs1QueryParams
} & PortalContext['fetcherOptions']

export const fetchListLogs1 = (variables: ListLogs1Variables) =>
  portalFetch<
    Schemas.RestResponsePageResponseThirdPartyApiCallLog,
    ListLogs1Error,
    undefined,
    {},
    ListLogs1QueryParams,
    ListLogs1PathParams
  >({ url: '/activities/{stateExecutionId}/api-call-logs', method: 'get', ...variables })

export const useListLogs1 = (
  variables: ListLogs1Variables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponsePageResponseThirdPartyApiCallLog,
      ListLogs1Error,
      Schemas.RestResponsePageResponseThirdPartyApiCallLog
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponsePageResponseThirdPartyApiCallLog,
    ListLogs1Error,
    Schemas.RestResponsePageResponseThirdPartyApiCallLog
  >(
    queryKeyFn({ path: '/activities/{stateExecutionId}/api-call-logs', operationId: 'listLogs1', variables }),
    () => fetchListLogs1({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type GetActivityCommandUnitsPathParams = {
  activityId: string
}

export type GetActivityCommandUnitsQueryParams = {
  appId?: string
}

export type GetActivityCommandUnitsError = Fetcher.ErrorWrapper<undefined>

export type GetActivityCommandUnitsVariables = {
  pathParams: GetActivityCommandUnitsPathParams
  queryParams?: GetActivityCommandUnitsQueryParams
} & PortalContext['fetcherOptions']

export const fetchGetActivityCommandUnits = (variables: GetActivityCommandUnitsVariables) =>
  portalFetch<
    Schemas.RestResponseListCommandUnitDetails,
    GetActivityCommandUnitsError,
    undefined,
    {},
    GetActivityCommandUnitsQueryParams,
    GetActivityCommandUnitsPathParams
  >({ url: '/activities/{activityId}/units', method: 'get', ...variables })

export const useGetActivityCommandUnits = (
  variables: GetActivityCommandUnitsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponseListCommandUnitDetails,
      GetActivityCommandUnitsError,
      Schemas.RestResponseListCommandUnitDetails
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponseListCommandUnitDetails,
    GetActivityCommandUnitsError,
    Schemas.RestResponseListCommandUnitDetails
  >(
    queryKeyFn({ path: '/activities/{activityId}/units', operationId: 'getActivityCommandUnits', variables }),
    () => fetchGetActivityCommandUnits({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type ExportLogsPathParams = {
  activityId: string
}

export type ExportLogsQueryParams = {
  appId?: string
}

export type ExportLogsError = Fetcher.ErrorWrapper<undefined>

export type ExportLogsVariables = {
  pathParams: ExportLogsPathParams
  queryParams?: ExportLogsQueryParams
} & PortalContext['fetcherOptions']

export const fetchExportLogs = (variables: ExportLogsVariables) =>
  portalFetch<undefined, ExportLogsError, undefined, {}, ExportLogsQueryParams, ExportLogsPathParams>({
    url: '/activities/{activityId}/all-logs',
    method: 'get',
    ...variables
  })

export const useExportLogs = (
  variables: ExportLogsVariables,
  options?: Omit<reactQuery.UseQueryOptions<undefined, ExportLogsError, undefined>, 'queryKey' | 'queryFn'>
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<undefined, ExportLogsError, undefined>(
    queryKeyFn({ path: '/activities/{activityId}/all-logs', operationId: 'exportLogs', variables }),
    () => fetchExportLogs({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type List3QueryParams = {
  accountId?: string
}

export type List3Error = Fetcher.ErrorWrapper<undefined>

export type List3Variables = {
  queryParams?: List3QueryParams
} & PortalContext['fetcherOptions']

export const fetchList3 = (variables: List3Variables) =>
  portalFetch<Schemas.RestResponseListAlertNotificationRule, List3Error, undefined, {}, List3QueryParams, {}>({
    url: '/alert-notification-rules',
    method: 'get',
    ...variables
  })

export const useList3 = (
  variables: List3Variables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponseListAlertNotificationRule,
      List3Error,
      Schemas.RestResponseListAlertNotificationRule
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponseListAlertNotificationRule,
    List3Error,
    Schemas.RestResponseListAlertNotificationRule
  >(
    queryKeyFn({ path: '/alert-notification-rules', operationId: 'list3', variables }),
    () => fetchList3({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type CreateAlertNotificationRuleQueryParams = {
  accountId?: string
}

export type CreateAlertNotificationRuleError = Fetcher.ErrorWrapper<undefined>

export type CreateAlertNotificationRuleVariables = {
  body: RequestBodies.AlertNotificationRule
  queryParams?: CreateAlertNotificationRuleQueryParams
} & PortalContext['fetcherOptions']

export const fetchCreateAlertNotificationRule = (variables: CreateAlertNotificationRuleVariables) =>
  portalFetch<
    Schemas.RestResponseAlertNotificationRule,
    CreateAlertNotificationRuleError,
    RequestBodies.AlertNotificationRule,
    {},
    CreateAlertNotificationRuleQueryParams,
    {}
  >({ url: '/alert-notification-rules', method: 'post', ...variables })

export const useCreateAlertNotificationRule = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.RestResponseAlertNotificationRule,
      CreateAlertNotificationRuleError,
      CreateAlertNotificationRuleVariables
    >,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<
    Schemas.RestResponseAlertNotificationRule,
    CreateAlertNotificationRuleError,
    CreateAlertNotificationRuleVariables
  >(
    (variables: CreateAlertNotificationRuleVariables) =>
      fetchCreateAlertNotificationRule({ ...fetcherOptions, ...variables }),
    options
  )
}

export type GetStatus1QueryParams = {
  accountId?: string
}

export type GetStatus1Error = Fetcher.ErrorWrapper<undefined>

export type GetStatus1Variables = {
  queryParams?: GetStatus1QueryParams
} & PortalContext['fetcherOptions']

export const fetchGetStatus1 = (variables: GetStatus1Variables) =>
  portalFetch<Schemas.RestResponseNotificationRulesStatus, GetStatus1Error, undefined, {}, GetStatus1QueryParams, {}>({
    url: '/alert-notification-rules/status',
    method: 'get',
    ...variables
  })

export const useGetStatus1 = (
  variables: GetStatus1Variables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponseNotificationRulesStatus,
      GetStatus1Error,
      Schemas.RestResponseNotificationRulesStatus
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponseNotificationRulesStatus,
    GetStatus1Error,
    Schemas.RestResponseNotificationRulesStatus
  >(
    queryKeyFn({ path: '/alert-notification-rules/status', operationId: 'getStatus1', variables }),
    () => fetchGetStatus1({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type UpdateStatusQueryParams = {
  accountId?: string
}

export type UpdateStatusError = Fetcher.ErrorWrapper<undefined>

export type UpdateStatusVariables = {
  body?: Schemas.NotificationRulesStatus
  queryParams?: UpdateStatusQueryParams
} & PortalContext['fetcherOptions']

export const fetchUpdateStatus = (variables: UpdateStatusVariables) =>
  portalFetch<
    Schemas.RestResponseNotificationRulesStatus,
    UpdateStatusError,
    Schemas.NotificationRulesStatus,
    {},
    UpdateStatusQueryParams,
    {}
  >({ url: '/alert-notification-rules/status', method: 'put', ...variables })

export const useUpdateStatus = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.RestResponseNotificationRulesStatus,
      UpdateStatusError,
      UpdateStatusVariables
    >,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<Schemas.RestResponseNotificationRulesStatus, UpdateStatusError, UpdateStatusVariables>(
    (variables: UpdateStatusVariables) => fetchUpdateStatus({ ...fetcherOptions, ...variables }),
    options
  )
}

export type UpdateAlertNotificationRulePathParams = {
  alertNotificationRuleId: string
}

export type UpdateAlertNotificationRuleQueryParams = {
  accountId?: string
}

export type UpdateAlertNotificationRuleError = Fetcher.ErrorWrapper<undefined>

export type UpdateAlertNotificationRuleVariables = {
  body: RequestBodies.AlertNotificationRule
  pathParams: UpdateAlertNotificationRulePathParams
  queryParams?: UpdateAlertNotificationRuleQueryParams
} & PortalContext['fetcherOptions']

export const fetchUpdateAlertNotificationRule = (variables: UpdateAlertNotificationRuleVariables) =>
  portalFetch<
    Schemas.RestResponseAlertNotificationRule,
    UpdateAlertNotificationRuleError,
    RequestBodies.AlertNotificationRule,
    {},
    UpdateAlertNotificationRuleQueryParams,
    UpdateAlertNotificationRulePathParams
  >({ url: '/alert-notification-rules/{alertNotificationRuleId}', method: 'put', ...variables })

export const useUpdateAlertNotificationRule = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.RestResponseAlertNotificationRule,
      UpdateAlertNotificationRuleError,
      UpdateAlertNotificationRuleVariables
    >,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<
    Schemas.RestResponseAlertNotificationRule,
    UpdateAlertNotificationRuleError,
    UpdateAlertNotificationRuleVariables
  >(
    (variables: UpdateAlertNotificationRuleVariables) =>
      fetchUpdateAlertNotificationRule({ ...fetcherOptions, ...variables }),
    options
  )
}

export type DeleteAlertNotificationRulePathParams = {
  alertNotificationRuleId: string
}

export type DeleteAlertNotificationRuleQueryParams = {
  accountId?: string
}

export type DeleteAlertNotificationRuleError = Fetcher.ErrorWrapper<undefined>

export type DeleteAlertNotificationRuleVariables = {
  pathParams: DeleteAlertNotificationRulePathParams
  queryParams?: DeleteAlertNotificationRuleQueryParams
} & PortalContext['fetcherOptions']

export const fetchDeleteAlertNotificationRule = (variables: DeleteAlertNotificationRuleVariables) =>
  portalFetch<
    Schemas.RestResponse,
    DeleteAlertNotificationRuleError,
    undefined,
    {},
    DeleteAlertNotificationRuleQueryParams,
    DeleteAlertNotificationRulePathParams
  >({ url: '/alert-notification-rules/{alertNotificationRuleId}', method: 'delete', ...variables })

export const useDeleteAlertNotificationRule = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.RestResponse,
      DeleteAlertNotificationRuleError,
      DeleteAlertNotificationRuleVariables
    >,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<
    Schemas.RestResponse,
    DeleteAlertNotificationRuleError,
    DeleteAlertNotificationRuleVariables
  >(
    (variables: DeleteAlertNotificationRuleVariables) =>
      fetchDeleteAlertNotificationRule({ ...fetcherOptions, ...variables }),
    options
  )
}

export type Get3PathParams = {
  apiKeyId: string
}

export type Get3QueryParams = {
  accountId?: string
}

export type Get3Error = Fetcher.ErrorWrapper<undefined>

export type Get3Variables = {
  pathParams: Get3PathParams
  queryParams?: Get3QueryParams
} & PortalContext['fetcherOptions']

export const fetchGet3 = (variables: Get3Variables) =>
  portalFetch<Schemas.RestResponseApiKeyEntry, Get3Error, undefined, {}, Get3QueryParams, Get3PathParams>({
    url: '/api-keys/{apiKeyId}',
    method: 'get',
    ...variables
  })

export const useGet3 = (
  variables: Get3Variables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.RestResponseApiKeyEntry, Get3Error, Schemas.RestResponseApiKeyEntry>,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<Schemas.RestResponseApiKeyEntry, Get3Error, Schemas.RestResponseApiKeyEntry>(
    queryKeyFn({ path: '/api-keys/{apiKeyId}', operationId: 'get3', variables }),
    () => fetchGet3({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type Update2PathParams = {
  apiKeyId: string
}

export type Update2QueryParams = {
  accountId?: string
}

export type Update2Error = Fetcher.ErrorWrapper<undefined>

export type Update2Variables = {
  body?: RequestBodies.ApiKeyEntry
  pathParams: Update2PathParams
  queryParams?: Update2QueryParams
} & PortalContext['fetcherOptions']

export const fetchUpdate2 = (variables: Update2Variables) =>
  portalFetch<
    Schemas.RestResponseApiKeyEntry,
    Update2Error,
    RequestBodies.ApiKeyEntry,
    {},
    Update2QueryParams,
    Update2PathParams
  >({ url: '/api-keys/{apiKeyId}', method: 'put', ...variables })

export const useUpdate2 = (
  options?: Omit<
    reactQuery.UseMutationOptions<Schemas.RestResponseApiKeyEntry, Update2Error, Update2Variables>,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<Schemas.RestResponseApiKeyEntry, Update2Error, Update2Variables>(
    (variables: Update2Variables) => fetchUpdate2({ ...fetcherOptions, ...variables }),
    options
  )
}

export type Delete1PathParams = {
  apiKeyId: string
}

export type Delete1QueryParams = {
  accountId?: string
}

export type Delete1Error = Fetcher.ErrorWrapper<undefined>

export type Delete1Variables = {
  pathParams: Delete1PathParams
  queryParams?: Delete1QueryParams
} & PortalContext['fetcherOptions']

export const fetchDelete1 = (variables: Delete1Variables) =>
  portalFetch<Schemas.RestResponseVoid, Delete1Error, undefined, {}, Delete1QueryParams, Delete1PathParams>({
    url: '/api-keys/{apiKeyId}',
    method: 'delete',
    ...variables
  })

export const useDelete1 = (
  options?: Omit<reactQuery.UseMutationOptions<Schemas.RestResponseVoid, Delete1Error, Delete1Variables>, 'mutationFn'>
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<Schemas.RestResponseVoid, Delete1Error, Delete1Variables>(
    (variables: Delete1Variables) => fetchDelete1({ ...fetcherOptions, ...variables }),
    options
  )
}

export type List4QueryParams = {
  accountId?: string
  /*
   * @default 0
   */
  offset?: string
  limit?: string
  fieldsIncluded?: string[]
  fieldsExcluded?: string[]
}

export type List4Error = Fetcher.ErrorWrapper<undefined>

export type List4Variables = {
  queryParams?: List4QueryParams
} & PortalContext['fetcherOptions']

export const fetchList4 = (variables: List4Variables) =>
  portalFetch<Schemas.RestResponsePageResponseApiKeyEntry, List4Error, undefined, {}, List4QueryParams, {}>({
    url: '/api-keys',
    method: 'get',
    ...variables
  })

export const useList4 = (
  variables: List4Variables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponsePageResponseApiKeyEntry,
      List4Error,
      Schemas.RestResponsePageResponseApiKeyEntry
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponsePageResponseApiKeyEntry,
    List4Error,
    Schemas.RestResponsePageResponseApiKeyEntry
  >(
    queryKeyFn({ path: '/api-keys', operationId: 'list4', variables }),
    () => fetchList4({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type GenerateQueryParams = {
  accountId?: string
}

export type GenerateError = Fetcher.ErrorWrapper<undefined>

export type GenerateVariables = {
  body?: RequestBodies.ApiKeyEntry
  queryParams?: GenerateQueryParams
} & PortalContext['fetcherOptions']

export const fetchGenerate = (variables: GenerateVariables) =>
  portalFetch<Schemas.RestResponseApiKeyEntry, GenerateError, RequestBodies.ApiKeyEntry, {}, GenerateQueryParams, {}>({
    url: '/api-keys',
    method: 'post',
    ...variables
  })

export const useGenerate = (
  options?: Omit<
    reactQuery.UseMutationOptions<Schemas.RestResponseApiKeyEntry, GenerateError, GenerateVariables>,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<Schemas.RestResponseApiKeyEntry, GenerateError, GenerateVariables>(
    (variables: GenerateVariables) => fetchGenerate({ ...fetcherOptions, ...variables }),
    options
  )
}

export type DeleteAllQueryParams = {
  accountId?: string
}

export type DeleteAllError = Fetcher.ErrorWrapper<undefined>

export type DeleteAllVariables = {
  queryParams?: DeleteAllQueryParams
} & PortalContext['fetcherOptions']

export const fetchDeleteAll = (variables: DeleteAllVariables) =>
  portalFetch<Schemas.RestResponseMapStringObject, DeleteAllError, undefined, {}, DeleteAllQueryParams, {}>({
    url: '/api-keys',
    method: 'delete',
    ...variables
  })

export const useDeleteAll = (
  options?: Omit<
    reactQuery.UseMutationOptions<Schemas.RestResponseMapStringObject, DeleteAllError, DeleteAllVariables>,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<Schemas.RestResponseMapStringObject, DeleteAllError, DeleteAllVariables>(
    (variables: DeleteAllVariables) => fetchDeleteAll({ ...fetcherOptions, ...variables }),
    options
  )
}

export type ValidateQueryParams = {
  accountId?: string
}

export type ValidateError = Fetcher.ErrorWrapper<undefined>

export type ValidateVariables = {
  body?: RequestBodies.ValidateBody
  queryParams?: ValidateQueryParams
} & PortalContext['fetcherOptions']

export const fetchValidate = (variables: ValidateVariables) =>
  portalFetch<Schemas.RestResponseBoolean, ValidateError, RequestBodies.ValidateBody, {}, ValidateQueryParams, {}>({
    url: '/api-keys/validate',
    method: 'post',
    ...variables
  })

export const useValidate = (
  options?: Omit<
    reactQuery.UseMutationOptions<Schemas.RestResponseBoolean, ValidateError, ValidateVariables>,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<Schemas.RestResponseBoolean, ValidateError, ValidateVariables>(
    (variables: ValidateVariables) => fetchValidate({ ...fetcherOptions, ...variables }),
    options
  )
}

export type Get4PathParams = {
  appContainerId: string
}

export type Get4QueryParams = {
  accountId?: string
}

export type Get4Error = Fetcher.ErrorWrapper<undefined>

export type Get4Variables = {
  pathParams: Get4PathParams
  queryParams?: Get4QueryParams
} & PortalContext['fetcherOptions']

export const fetchGet4 = (variables: Get4Variables) =>
  portalFetch<Schemas.RestResponseAppContainer, Get4Error, undefined, {}, Get4QueryParams, Get4PathParams>({
    url: '/app-containers/{appContainerId}',
    method: 'get',
    ...variables
  })

export const useGet4 = (
  variables: Get4Variables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.RestResponseAppContainer, Get4Error, Schemas.RestResponseAppContainer>,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<Schemas.RestResponseAppContainer, Get4Error, Schemas.RestResponseAppContainer>(
    queryKeyFn({ path: '/app-containers/{appContainerId}', operationId: 'get4', variables }),
    () => fetchGet4({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type UpdatePlatformPathParams = {
  appContainerId: string
}

export type UpdatePlatformQueryParams = {
  accountId?: string
}

export type UpdatePlatformError = Fetcher.ErrorWrapper<undefined>

export type UpdatePlatformVariables = {
  body?: RequestBodies.UpdatePlatform
  pathParams: UpdatePlatformPathParams
  queryParams?: UpdatePlatformQueryParams
} & PortalContext['fetcherOptions']

export const fetchUpdatePlatform = (variables: UpdatePlatformVariables) =>
  portalFetch<
    Schemas.RestResponseAppContainer,
    UpdatePlatformError,
    RequestBodies.UpdatePlatform,
    {},
    UpdatePlatformQueryParams,
    UpdatePlatformPathParams
  >({ url: '/app-containers/{appContainerId}', method: 'put', ...variables })

export const useUpdatePlatform = (
  options?: Omit<
    reactQuery.UseMutationOptions<Schemas.RestResponseAppContainer, UpdatePlatformError, UpdatePlatformVariables>,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<Schemas.RestResponseAppContainer, UpdatePlatformError, UpdatePlatformVariables>(
    (variables: UpdatePlatformVariables) => fetchUpdatePlatform({ ...fetcherOptions, ...variables }),
    options
  )
}

export type DeletePlatformPathParams = {
  appContainerId: string
}

export type DeletePlatformQueryParams = {
  accountId?: string
}

export type DeletePlatformError = Fetcher.ErrorWrapper<undefined>

export type DeletePlatformVariables = {
  pathParams: DeletePlatformPathParams
  queryParams?: DeletePlatformQueryParams
} & PortalContext['fetcherOptions']

export const fetchDeletePlatform = (variables: DeletePlatformVariables) =>
  portalFetch<
    Schemas.RestResponse,
    DeletePlatformError,
    undefined,
    {},
    DeletePlatformQueryParams,
    DeletePlatformPathParams
  >({ url: '/app-containers/{appContainerId}', method: 'delete', ...variables })

export const useDeletePlatform = (
  options?: Omit<
    reactQuery.UseMutationOptions<Schemas.RestResponse, DeletePlatformError, DeletePlatformVariables>,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<Schemas.RestResponse, DeletePlatformError, DeletePlatformVariables>(
    (variables: DeletePlatformVariables) => fetchDeletePlatform({ ...fetcherOptions, ...variables }),
    options
  )
}

export type List5QueryParams = {
  accountId?: string
  /*
   * @default 0
   */
  offset?: string
  limit?: string
  fieldsIncluded?: string[]
  fieldsExcluded?: string[]
}

export type List5Error = Fetcher.ErrorWrapper<undefined>

export type List5Variables = {
  queryParams?: List5QueryParams
} & PortalContext['fetcherOptions']

export const fetchList5 = (variables: List5Variables) =>
  portalFetch<Schemas.RestResponsePageResponseAppContainer, List5Error, undefined, {}, List5QueryParams, {}>({
    url: '/app-containers',
    method: 'get',
    ...variables
  })

export const useList5 = (
  variables: List5Variables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponsePageResponseAppContainer,
      List5Error,
      Schemas.RestResponsePageResponseAppContainer
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponsePageResponseAppContainer,
    List5Error,
    Schemas.RestResponsePageResponseAppContainer
  >(
    queryKeyFn({ path: '/app-containers', operationId: 'list5', variables }),
    () => fetchList5({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type UploadPlatformQueryParams = {
  accountId?: string
}

export type UploadPlatformError = Fetcher.ErrorWrapper<undefined>

export type UploadPlatformVariables = {
  body?: RequestBodies.UpdatePlatform
  queryParams?: UploadPlatformQueryParams
} & PortalContext['fetcherOptions']

export const fetchUploadPlatform = (variables: UploadPlatformVariables) =>
  portalFetch<
    Schemas.RestResponseAppContainer,
    UploadPlatformError,
    RequestBodies.UpdatePlatform,
    {},
    UploadPlatformQueryParams,
    {}
  >({ url: '/app-containers', method: 'post', ...variables })

export const useUploadPlatform = (
  options?: Omit<
    reactQuery.UseMutationOptions<Schemas.RestResponseAppContainer, UploadPlatformError, UploadPlatformVariables>,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<Schemas.RestResponseAppContainer, UploadPlatformError, UploadPlatformVariables>(
    (variables: UploadPlatformVariables) => fetchUploadPlatform({ ...fetcherOptions, ...variables }),
    options
  )
}

export type DownloadPathParams = {
  appContainerId: string
}

export type DownloadQueryParams = {
  accountId?: string
}

export type DownloadError = Fetcher.ErrorWrapper<undefined>

export type DownloadVariables = {
  pathParams: DownloadPathParams
  queryParams?: DownloadQueryParams
} & PortalContext['fetcherOptions']

export const fetchDownload = (variables: DownloadVariables) =>
  portalFetch<undefined, DownloadError, undefined, {}, DownloadQueryParams, DownloadPathParams>({
    url: '/app-containers/{appContainerId}/download',
    method: 'get',
    ...variables
  })

export const useDownload = (
  variables: DownloadVariables,
  options?: Omit<reactQuery.UseQueryOptions<undefined, DownloadError, undefined>, 'queryKey' | 'queryFn'>
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<undefined, DownloadError, undefined>(
    queryKeyFn({ path: '/app-containers/{appContainerId}/download', operationId: 'download', variables }),
    () => fetchDownload({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type Get5PathParams = {
  appId: string
}

export type Get5QueryParams = {
  /*
   * @default true
   */
  details?: boolean
}

export type Get5Error = Fetcher.ErrorWrapper<undefined>

export type Get5Variables = {
  pathParams: Get5PathParams
  queryParams?: Get5QueryParams
} & PortalContext['fetcherOptions']

export const fetchGet5 = (variables: Get5Variables) =>
  portalFetch<Schemas.RestResponseApplication, Get5Error, undefined, {}, Get5QueryParams, Get5PathParams>({
    url: '/apps/{appId}',
    method: 'get',
    ...variables
  })

export const useGet5 = (
  variables: Get5Variables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.RestResponseApplication, Get5Error, Schemas.RestResponseApplication>,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<Schemas.RestResponseApplication, Get5Error, Schemas.RestResponseApplication>(
    queryKeyFn({ path: '/apps/{appId}', operationId: 'get5', variables }),
    () => fetchGet5({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type Update3PathParams = {
  appId: string
}

export type Update3Error = Fetcher.ErrorWrapper<undefined>

export type Update3Variables = {
  body: RequestBodies.Application
  pathParams: Update3PathParams
} & PortalContext['fetcherOptions']

export const fetchUpdate3 = (variables: Update3Variables) =>
  portalFetch<Schemas.RestResponseApplication, Update3Error, RequestBodies.Application, {}, {}, Update3PathParams>({
    url: '/apps/{appId}',
    method: 'put',
    ...variables
  })

export const useUpdate3 = (
  options?: Omit<
    reactQuery.UseMutationOptions<Schemas.RestResponseApplication, Update3Error, Update3Variables>,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<Schemas.RestResponseApplication, Update3Error, Update3Variables>(
    (variables: Update3Variables) => fetchUpdate3({ ...fetcherOptions, ...variables }),
    options
  )
}

export type Delete2PathParams = {
  appId: string
}

export type Delete2Error = Fetcher.ErrorWrapper<undefined>

export type Delete2Variables = {
  pathParams: Delete2PathParams
} & PortalContext['fetcherOptions']

export const fetchDelete2 = (variables: Delete2Variables) =>
  portalFetch<Schemas.RestResponse, Delete2Error, undefined, {}, {}, Delete2PathParams>({
    url: '/apps/{appId}',
    method: 'delete',
    ...variables
  })

export const useDelete2 = (
  options?: Omit<reactQuery.UseMutationOptions<Schemas.RestResponse, Delete2Error, Delete2Variables>, 'mutationFn'>
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<Schemas.RestResponse, Delete2Error, Delete2Variables>(
    (variables: Delete2Variables) => fetchDelete2({ ...fetcherOptions, ...variables }),
    options
  )
}

export type List6QueryParams = {
  /*
   * @default 0
   */
  offset?: string
  limit?: string
  fieldsIncluded?: string[]
  fieldsExcluded?: string[]
  accountId?: string
  appIds?: string[]
  /*
   * @default true
   */
  details?: boolean
  tagFilter?: string
  /*
   * @default false
   */
  withTags?: boolean
}

export type List6Error = Fetcher.ErrorWrapper<undefined>

export type List6Variables = {
  queryParams?: List6QueryParams
} & PortalContext['fetcherOptions']

export const fetchList6 = (variables: List6Variables) =>
  portalFetch<Schemas.RestResponsePageResponseApplication, List6Error, undefined, {}, List6QueryParams, {}>({
    url: '/apps',
    method: 'get',
    ...variables
  })

export const useList6 = (
  variables: List6Variables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponsePageResponseApplication,
      List6Error,
      Schemas.RestResponsePageResponseApplication
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponsePageResponseApplication,
    List6Error,
    Schemas.RestResponsePageResponseApplication
  >(
    queryKeyFn({ path: '/apps', operationId: 'list6', variables }),
    () => fetchList6({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type SaveQueryParams = {
  accountId?: string
}

export type SaveError = Fetcher.ErrorWrapper<undefined>

export type SaveVariables = {
  body: RequestBodies.Application
  queryParams?: SaveQueryParams
} & PortalContext['fetcherOptions']

export const fetchSave = (variables: SaveVariables) =>
  portalFetch<Schemas.RestResponseApplication, SaveError, RequestBodies.Application, {}, SaveQueryParams, {}>({
    url: '/apps',
    method: 'post',
    ...variables
  })

export const useSave = (
  options?: Omit<reactQuery.UseMutationOptions<Schemas.RestResponseApplication, SaveError, SaveVariables>, 'mutationFn'>
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<Schemas.RestResponseApplication, SaveError, SaveVariables>(
    (variables: SaveVariables) => fetchSave({ ...fetcherOptions, ...variables }),
    options
  )
}

export type GetAllApplicationsQueryParams = {
  accountId?: string
  settingId?: string
}

export type GetAllApplicationsError = Fetcher.ErrorWrapper<undefined>

export type GetAllApplicationsVariables = {
  queryParams?: GetAllApplicationsQueryParams
} & PortalContext['fetcherOptions']

export const fetchGetAllApplications = (variables: GetAllApplicationsVariables) =>
  portalFetch<
    Schemas.RestResponseListNewRelicApplication,
    GetAllApplicationsError,
    undefined,
    {},
    GetAllApplicationsQueryParams,
    {}
  >({ url: '/appdynamics/applications', method: 'get', ...variables })

export const useGetAllApplications = (
  variables: GetAllApplicationsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponseListNewRelicApplication,
      GetAllApplicationsError,
      Schemas.RestResponseListNewRelicApplication
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponseListNewRelicApplication,
    GetAllApplicationsError,
    Schemas.RestResponseListNewRelicApplication
  >(
    queryKeyFn({ path: '/appdynamics/applications', operationId: 'getAllApplications', variables }),
    () => fetchGetAllApplications({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type GetMetricsWithDataForNodeQueryParams = {
  accountId?: string
}

export type GetMetricsWithDataForNodeError = Fetcher.ErrorWrapper<undefined>

export type GetMetricsWithDataForNodeVariables = {
  body: Schemas.AppdynamicsSetupTestNodeData
  queryParams?: GetMetricsWithDataForNodeQueryParams
} & PortalContext['fetcherOptions']

export const fetchGetMetricsWithDataForNode = (variables: GetMetricsWithDataForNodeVariables) =>
  portalFetch<
    Schemas.RestResponseVerificationNodeDataSetupResponse,
    GetMetricsWithDataForNodeError,
    Schemas.AppdynamicsSetupTestNodeData,
    {},
    GetMetricsWithDataForNodeQueryParams,
    {}
  >({ url: '/appdynamics/node-data', method: 'post', ...variables })

export const useGetMetricsWithDataForNode = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.RestResponseVerificationNodeDataSetupResponse,
      GetMetricsWithDataForNodeError,
      GetMetricsWithDataForNodeVariables
    >,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<
    Schemas.RestResponseVerificationNodeDataSetupResponse,
    GetMetricsWithDataForNodeError,
    GetMetricsWithDataForNodeVariables
  >(
    (variables: GetMetricsWithDataForNodeVariables) =>
      fetchGetMetricsWithDataForNode({ ...fetcherOptions, ...variables }),
    options
  )
}

export type GetAllTiersQueryParams = {
  accountId?: string
  settingId?: string
  /*
   * @format int64
   */
  appdynamicsAppId?: number
}

export type GetAllTiersError = Fetcher.ErrorWrapper<undefined>

export type GetAllTiersVariables = {
  queryParams?: GetAllTiersQueryParams
} & PortalContext['fetcherOptions']

export const fetchGetAllTiers = (variables: GetAllTiersVariables) =>
  portalFetch<Schemas.RestResponseSetAppdynamicsTier, GetAllTiersError, undefined, {}, GetAllTiersQueryParams, {}>({
    url: '/appdynamics/tiers',
    method: 'get',
    ...variables
  })

export const useGetAllTiers = (
  variables: GetAllTiersVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponseSetAppdynamicsTier,
      GetAllTiersError,
      Schemas.RestResponseSetAppdynamicsTier
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponseSetAppdynamicsTier,
    GetAllTiersError,
    Schemas.RestResponseSetAppdynamicsTier
  >(
    queryKeyFn({ path: '/appdynamics/tiers', operationId: 'getAllTiers', variables }),
    () => fetchGetAllTiers({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type GetApplicationManifestPathParams = {
  appManifestId: string
}

export type GetApplicationManifestQueryParams = {
  appId?: string
  serviceId?: string
}

export type GetApplicationManifestError = Fetcher.ErrorWrapper<undefined>

export type GetApplicationManifestVariables = {
  pathParams: GetApplicationManifestPathParams
  queryParams?: GetApplicationManifestQueryParams
} & PortalContext['fetcherOptions']

export const fetchGetApplicationManifest = (variables: GetApplicationManifestVariables) =>
  portalFetch<
    Schemas.RestResponseApplicationManifest,
    GetApplicationManifestError,
    undefined,
    {},
    GetApplicationManifestQueryParams,
    GetApplicationManifestPathParams
  >({ url: '/app-manifests/{appManifestId}', method: 'get', ...variables })

export const useGetApplicationManifest = (
  variables: GetApplicationManifestVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponseApplicationManifest,
      GetApplicationManifestError,
      Schemas.RestResponseApplicationManifest
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponseApplicationManifest,
    GetApplicationManifestError,
    Schemas.RestResponseApplicationManifest
  >(
    queryKeyFn({ path: '/app-manifests/{appManifestId}', operationId: 'getApplicationManifest', variables }),
    () => fetchGetApplicationManifest({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type UpdateApplicationManifestPathParams = {
  appManifestId: string
}

export type UpdateApplicationManifestQueryParams = {
  appId?: string
  serviceId?: string
}

export type UpdateApplicationManifestError = Fetcher.ErrorWrapper<undefined>

export type UpdateApplicationManifestVariables = {
  body: RequestBodies.ApplicationManifest
  pathParams: UpdateApplicationManifestPathParams
  queryParams?: UpdateApplicationManifestQueryParams
} & PortalContext['fetcherOptions']

export const fetchUpdateApplicationManifest = (variables: UpdateApplicationManifestVariables) =>
  portalFetch<
    Schemas.RestResponseApplicationManifest,
    UpdateApplicationManifestError,
    RequestBodies.ApplicationManifest,
    {},
    UpdateApplicationManifestQueryParams,
    UpdateApplicationManifestPathParams
  >({ url: '/app-manifests/{appManifestId}', method: 'put', ...variables })

export const useUpdateApplicationManifest = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.RestResponseApplicationManifest,
      UpdateApplicationManifestError,
      UpdateApplicationManifestVariables
    >,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<
    Schemas.RestResponseApplicationManifest,
    UpdateApplicationManifestError,
    UpdateApplicationManifestVariables
  >(
    (variables: UpdateApplicationManifestVariables) =>
      fetchUpdateApplicationManifest({ ...fetcherOptions, ...variables }),
    options
  )
}

export type DeleteApplicationManifestPathParams = {
  appManifestId: string
}

export type DeleteApplicationManifestQueryParams = {
  appId?: string
  serviceId?: string
}

export type DeleteApplicationManifestError = Fetcher.ErrorWrapper<undefined>

export type DeleteApplicationManifestVariables = {
  pathParams: DeleteApplicationManifestPathParams
  queryParams?: DeleteApplicationManifestQueryParams
} & PortalContext['fetcherOptions']

export const fetchDeleteApplicationManifest = (variables: DeleteApplicationManifestVariables) =>
  portalFetch<
    Schemas.RestResponse,
    DeleteApplicationManifestError,
    undefined,
    {},
    DeleteApplicationManifestQueryParams,
    DeleteApplicationManifestPathParams
  >({ url: '/app-manifests/{appManifestId}', method: 'delete', ...variables })

export const useDeleteApplicationManifest = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.RestResponse,
      DeleteApplicationManifestError,
      DeleteApplicationManifestVariables
    >,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<
    Schemas.RestResponse,
    DeleteApplicationManifestError,
    DeleteApplicationManifestVariables
  >(
    (variables: DeleteApplicationManifestVariables) =>
      fetchDeleteApplicationManifest({ ...fetcherOptions, ...variables }),
    options
  )
}

export type GetManifestFilePathParams = {
  appManifestId: string
  manifestFileId: string
}

export type GetManifestFileQueryParams = {
  appId?: string
  serviceId?: string
}

export type GetManifestFileError = Fetcher.ErrorWrapper<undefined>

export type GetManifestFileVariables = {
  pathParams: GetManifestFilePathParams
  queryParams?: GetManifestFileQueryParams
} & PortalContext['fetcherOptions']

export const fetchGetManifestFile = (variables: GetManifestFileVariables) =>
  portalFetch<
    Schemas.RestResponseManifestFile,
    GetManifestFileError,
    undefined,
    {},
    GetManifestFileQueryParams,
    GetManifestFilePathParams
  >({ url: '/app-manifests/{appManifestId}/manifest-file/{manifestFileId}', method: 'get', ...variables })

export const useGetManifestFile = (
  variables: GetManifestFileVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponseManifestFile,
      GetManifestFileError,
      Schemas.RestResponseManifestFile
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<Schemas.RestResponseManifestFile, GetManifestFileError, Schemas.RestResponseManifestFile>(
    queryKeyFn({
      path: '/app-manifests/{appManifestId}/manifest-file/{manifestFileId}',
      operationId: 'getManifestFile',
      variables
    }),
    () => fetchGetManifestFile({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type UpdateManifestFilePathParams = {
  appManifestId: string
  manifestFileId: string
}

export type UpdateManifestFileQueryParams = {
  appId?: string
  serviceId?: string
  removeNamespace?: boolean
}

export type UpdateManifestFileError = Fetcher.ErrorWrapper<undefined>

export type UpdateManifestFileVariables = {
  body: RequestBodies.ManifestFile
  pathParams: UpdateManifestFilePathParams
  queryParams?: UpdateManifestFileQueryParams
} & PortalContext['fetcherOptions']

export const fetchUpdateManifestFile = (variables: UpdateManifestFileVariables) =>
  portalFetch<
    Schemas.RestResponseManifestFile,
    UpdateManifestFileError,
    RequestBodies.ManifestFile,
    {},
    UpdateManifestFileQueryParams,
    UpdateManifestFilePathParams
  >({ url: '/app-manifests/{appManifestId}/manifest-file/{manifestFileId}', method: 'put', ...variables })

export const useUpdateManifestFile = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.RestResponseManifestFile,
      UpdateManifestFileError,
      UpdateManifestFileVariables
    >,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<Schemas.RestResponseManifestFile, UpdateManifestFileError, UpdateManifestFileVariables>(
    (variables: UpdateManifestFileVariables) => fetchUpdateManifestFile({ ...fetcherOptions, ...variables }),
    options
  )
}

export type DeleteManifestFilePathParams = {
  appManifestId: string
  manifestFileId: string
}

export type DeleteManifestFileQueryParams = {
  appId?: string
  serviceId?: string
}

export type DeleteManifestFileError = Fetcher.ErrorWrapper<undefined>

export type DeleteManifestFileVariables = {
  pathParams: DeleteManifestFilePathParams
  queryParams?: DeleteManifestFileQueryParams
} & PortalContext['fetcherOptions']

export const fetchDeleteManifestFile = (variables: DeleteManifestFileVariables) =>
  portalFetch<
    Schemas.RestResponse,
    DeleteManifestFileError,
    undefined,
    {},
    DeleteManifestFileQueryParams,
    DeleteManifestFilePathParams
  >({ url: '/app-manifests/{appManifestId}/manifest-file/{manifestFileId}', method: 'delete', ...variables })

export const useDeleteManifestFile = (
  options?: Omit<
    reactQuery.UseMutationOptions<Schemas.RestResponse, DeleteManifestFileError, DeleteManifestFileVariables>,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<Schemas.RestResponse, DeleteManifestFileError, DeleteManifestFileVariables>(
    (variables: DeleteManifestFileVariables) => fetchDeleteManifestFile({ ...fetcherOptions, ...variables }),
    options
  )
}

export type List7QueryParams = {
  appId?: string
  /*
   * @default 0
   */
  offset?: string
  limit?: string
  fieldsIncluded?: string[]
  fieldsExcluded?: string[]
}

export type List7Error = Fetcher.ErrorWrapper<undefined>

export type List7Variables = {
  queryParams?: List7QueryParams
} & PortalContext['fetcherOptions']

export const fetchList7 = (variables: List7Variables) =>
  portalFetch<Schemas.RestResponsePageResponseApplicationManifest, List7Error, undefined, {}, List7QueryParams, {}>({
    url: '/app-manifests',
    method: 'get',
    ...variables
  })

export const useList7 = (
  variables: List7Variables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponsePageResponseApplicationManifest,
      List7Error,
      Schemas.RestResponsePageResponseApplicationManifest
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponsePageResponseApplicationManifest,
    List7Error,
    Schemas.RestResponsePageResponseApplicationManifest
  >(
    queryKeyFn({ path: '/app-manifests', operationId: 'list7', variables }),
    () => fetchList7({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type CreateApplicationManifestQueryParams = {
  appId?: string
  serviceId?: string
}

export type CreateApplicationManifestError = Fetcher.ErrorWrapper<undefined>

export type CreateApplicationManifestVariables = {
  body: RequestBodies.ApplicationManifest
  queryParams?: CreateApplicationManifestQueryParams
} & PortalContext['fetcherOptions']

export const fetchCreateApplicationManifest = (variables: CreateApplicationManifestVariables) =>
  portalFetch<
    Schemas.RestResponseApplicationManifest,
    CreateApplicationManifestError,
    RequestBodies.ApplicationManifest,
    {},
    CreateApplicationManifestQueryParams,
    {}
  >({ url: '/app-manifests', method: 'post', ...variables })

export const useCreateApplicationManifest = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.RestResponseApplicationManifest,
      CreateApplicationManifestError,
      CreateApplicationManifestVariables
    >,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<
    Schemas.RestResponseApplicationManifest,
    CreateApplicationManifestError,
    CreateApplicationManifestVariables
  >(
    (variables: CreateApplicationManifestVariables) =>
      fetchCreateApplicationManifest({ ...fetcherOptions, ...variables }),
    options
  )
}

export type GetManifestFilesFromGitPathParams = {
  appManifestId: string
}

export type GetManifestFilesFromGitQueryParams = {
  appId?: string
  serviceId?: string
}

export type GetManifestFilesFromGitError = Fetcher.ErrorWrapper<undefined>

export type GetManifestFilesFromGitVariables = {
  pathParams: GetManifestFilesFromGitPathParams
  queryParams?: GetManifestFilesFromGitQueryParams
} & PortalContext['fetcherOptions']

export const fetchGetManifestFilesFromGit = (variables: GetManifestFilesFromGitVariables) =>
  portalFetch<
    Schemas.RestResponseDirectoryNode,
    GetManifestFilesFromGitError,
    undefined,
    {},
    GetManifestFilesFromGitQueryParams,
    GetManifestFilesFromGitPathParams
  >({ url: '/app-manifests/{appManifestId}/manifest-files-from-git', method: 'get', ...variables })

export const useGetManifestFilesFromGit = (
  variables: GetManifestFilesFromGitVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponseDirectoryNode,
      GetManifestFilesFromGitError,
      Schemas.RestResponseDirectoryNode
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponseDirectoryNode,
    GetManifestFilesFromGitError,
    Schemas.RestResponseDirectoryNode
  >(
    queryKeyFn({
      path: '/app-manifests/{appManifestId}/manifest-files-from-git',
      operationId: 'getManifestFilesFromGit',
      variables
    }),
    () => fetchGetManifestFilesFromGit({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type ListManifestFilesPathParams = {
  appManifestId: string
}

export type ListManifestFilesQueryParams = {
  appId?: string
}

export type ListManifestFilesError = Fetcher.ErrorWrapper<undefined>

export type ListManifestFilesVariables = {
  pathParams: ListManifestFilesPathParams
  queryParams?: ListManifestFilesQueryParams
} & PortalContext['fetcherOptions']

export const fetchListManifestFiles = (variables: ListManifestFilesVariables) =>
  portalFetch<
    Schemas.RestResponseListManifestFile,
    ListManifestFilesError,
    undefined,
    {},
    ListManifestFilesQueryParams,
    ListManifestFilesPathParams
  >({ url: '/app-manifests/{appManifestId}/manifest-files', method: 'get', ...variables })

export const useListManifestFiles = (
  variables: ListManifestFilesVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponseListManifestFile,
      ListManifestFilesError,
      Schemas.RestResponseListManifestFile
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponseListManifestFile,
    ListManifestFilesError,
    Schemas.RestResponseListManifestFile
  >(
    queryKeyFn({ path: '/app-manifests/{appManifestId}/manifest-files', operationId: 'listManifestFiles', variables }),
    () => fetchListManifestFiles({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type DeleteAllManifestFilesByAppManifestIdPathParams = {
  appManifestId: string
}

export type DeleteAllManifestFilesByAppManifestIdQueryParams = {
  appId?: string
}

export type DeleteAllManifestFilesByAppManifestIdError = Fetcher.ErrorWrapper<undefined>

export type DeleteAllManifestFilesByAppManifestIdVariables = {
  pathParams: DeleteAllManifestFilesByAppManifestIdPathParams
  queryParams?: DeleteAllManifestFilesByAppManifestIdQueryParams
} & PortalContext['fetcherOptions']

export const fetchDeleteAllManifestFilesByAppManifestId = (variables: DeleteAllManifestFilesByAppManifestIdVariables) =>
  portalFetch<
    Schemas.RestResponse,
    DeleteAllManifestFilesByAppManifestIdError,
    undefined,
    {},
    DeleteAllManifestFilesByAppManifestIdQueryParams,
    DeleteAllManifestFilesByAppManifestIdPathParams
  >({ url: '/app-manifests/{appManifestId}/manifest-files/delete-all', method: 'post', ...variables })

export const useDeleteAllManifestFilesByAppManifestId = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.RestResponse,
      DeleteAllManifestFilesByAppManifestIdError,
      DeleteAllManifestFilesByAppManifestIdVariables
    >,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<
    Schemas.RestResponse,
    DeleteAllManifestFilesByAppManifestIdError,
    DeleteAllManifestFilesByAppManifestIdVariables
  >(
    (variables: DeleteAllManifestFilesByAppManifestIdVariables) =>
      fetchDeleteAllManifestFilesByAppManifestId({ ...fetcherOptions, ...variables }),
    options
  )
}

export type ListPollingEnabledQueryParams = {
  appId?: string
  /*
   * @default 0
   */
  offset?: string
  limit?: string
  fieldsIncluded?: string[]
  fieldsExcluded?: string[]
}

export type ListPollingEnabledError = Fetcher.ErrorWrapper<undefined>

export type ListPollingEnabledVariables = {
  queryParams?: ListPollingEnabledQueryParams
} & PortalContext['fetcherOptions']

export const fetchListPollingEnabled = (variables: ListPollingEnabledVariables) =>
  portalFetch<
    Schemas.RestResponsePageResponseApplicationManifest,
    ListPollingEnabledError,
    undefined,
    {},
    ListPollingEnabledQueryParams,
    {}
  >({ url: '/app-manifests/list-with-polling-enabled', method: 'get', ...variables })

export const useListPollingEnabled = (
  variables: ListPollingEnabledVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponsePageResponseApplicationManifest,
      ListPollingEnabledError,
      Schemas.RestResponsePageResponseApplicationManifest
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponsePageResponseApplicationManifest,
    ListPollingEnabledError,
    Schemas.RestResponsePageResponseApplicationManifest
  >(
    queryKeyFn({ path: '/app-manifests/list-with-polling-enabled', operationId: 'listPollingEnabled', variables }),
    () => fetchListPollingEnabled({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type CreateManifestFilePathParams = {
  appManifestId: string
}

export type CreateManifestFileQueryParams = {
  appId?: string
  serviceId?: string
  removeNamespace?: boolean
}

export type CreateManifestFileError = Fetcher.ErrorWrapper<undefined>

export type CreateManifestFileVariables = {
  body: RequestBodies.ManifestFile
  pathParams: CreateManifestFilePathParams
  queryParams?: CreateManifestFileQueryParams
} & PortalContext['fetcherOptions']

export const fetchCreateManifestFile = (variables: CreateManifestFileVariables) =>
  portalFetch<
    Schemas.RestResponseManifestFile,
    CreateManifestFileError,
    RequestBodies.ManifestFile,
    {},
    CreateManifestFileQueryParams,
    CreateManifestFilePathParams
  >({ url: '/app-manifests/{appManifestId}/manifest-file', method: 'post', ...variables })

export const useCreateManifestFile = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.RestResponseManifestFile,
      CreateManifestFileError,
      CreateManifestFileVariables
    >,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<Schemas.RestResponseManifestFile, CreateManifestFileError, CreateManifestFileVariables>(
    (variables: CreateManifestFileVariables) => fetchCreateManifestFile({ ...fetcherOptions, ...variables }),
    options
  )
}

export type Get6PathParams = {
  artifactId: string
}

export type Get6QueryParams = {
  appId?: string
}

export type Get6Error = Fetcher.ErrorWrapper<undefined>

export type Get6Variables = {
  pathParams: Get6PathParams
  queryParams?: Get6QueryParams
} & PortalContext['fetcherOptions']

export const fetchGet6 = (variables: Get6Variables) =>
  portalFetch<Schemas.RestResponseArtifact, Get6Error, undefined, {}, Get6QueryParams, Get6PathParams>({
    url: '/artifacts/{artifactId}',
    method: 'get',
    ...variables
  })

export const useGet6 = (
  variables: Get6Variables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.RestResponseArtifact, Get6Error, Schemas.RestResponseArtifact>,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<Schemas.RestResponseArtifact, Get6Error, Schemas.RestResponseArtifact>(
    queryKeyFn({ path: '/artifacts/{artifactId}', operationId: 'get6', variables }),
    () => fetchGet6({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type Update4PathParams = {
  artifactId: string
}

export type Update4QueryParams = {
  appId?: string
}

export type Update4Error = Fetcher.ErrorWrapper<undefined>

export type Update4Variables = {
  body: RequestBodies.Artifact
  pathParams: Update4PathParams
  queryParams?: Update4QueryParams
} & PortalContext['fetcherOptions']

export const fetchUpdate4 = (variables: Update4Variables) =>
  portalFetch<
    Schemas.RestResponseArtifact,
    Update4Error,
    RequestBodies.Artifact,
    {},
    Update4QueryParams,
    Update4PathParams
  >({ url: '/artifacts/{artifactId}', method: 'put', ...variables })

export const useUpdate4 = (
  options?: Omit<
    reactQuery.UseMutationOptions<Schemas.RestResponseArtifact, Update4Error, Update4Variables>,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<Schemas.RestResponseArtifact, Update4Error, Update4Variables>(
    (variables: Update4Variables) => fetchUpdate4({ ...fetcherOptions, ...variables }),
    options
  )
}

export type Delete3PathParams = {
  artifactId: string
}

export type Delete3QueryParams = {
  appId?: string
}

export type Delete3Error = Fetcher.ErrorWrapper<undefined>

export type Delete3Variables = {
  pathParams: Delete3PathParams
  queryParams?: Delete3QueryParams
} & PortalContext['fetcherOptions']

export const fetchDelete3 = (variables: Delete3Variables) =>
  portalFetch<Schemas.RestResponse, Delete3Error, undefined, {}, Delete3QueryParams, Delete3PathParams>({
    url: '/artifacts/{artifactId}',
    method: 'delete',
    ...variables
  })

export const useDelete3 = (
  options?: Omit<reactQuery.UseMutationOptions<Schemas.RestResponse, Delete3Error, Delete3Variables>, 'mutationFn'>
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<Schemas.RestResponse, Delete3Error, Delete3Variables>(
    (variables: Delete3Variables) => fetchDelete3({ ...fetcherOptions, ...variables }),
    options
  )
}

export type List8QueryParams = {
  appId?: string
  accountId?: string
  routingId?: string
  serviceId?: string
  /*
   * @default 0
   */
  offset?: string
  limit?: string
  fieldsIncluded?: string[]
  fieldsExcluded?: string[]
}

export type List8Error = Fetcher.ErrorWrapper<undefined>

export type List8Variables = {
  queryParams?: List8QueryParams
} & PortalContext['fetcherOptions']

export const fetchList8 = (variables: List8Variables) =>
  portalFetch<Schemas.RestResponsePageResponseArtifact, List8Error, undefined, {}, List8QueryParams, {}>({
    url: '/artifacts',
    method: 'get',
    ...variables
  })

export const useList8 = (
  variables: List8Variables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponsePageResponseArtifact,
      List8Error,
      Schemas.RestResponsePageResponseArtifact
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponsePageResponseArtifact,
    List8Error,
    Schemas.RestResponsePageResponseArtifact
  >(
    queryKeyFn({ path: '/artifacts', operationId: 'list8', variables }),
    () => fetchList8({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type Save1QueryParams = {
  appId?: string
}

export type Save1Error = Fetcher.ErrorWrapper<undefined>

export type Save1Variables = {
  body: RequestBodies.Artifact
  queryParams?: Save1QueryParams
} & PortalContext['fetcherOptions']

export const fetchSave1 = (variables: Save1Variables) =>
  portalFetch<Schemas.RestResponseArtifact, Save1Error, RequestBodies.Artifact, {}, Save1QueryParams, {}>({
    url: '/artifacts',
    method: 'post',
    ...variables
  })

export const useSave1 = (
  options?: Omit<reactQuery.UseMutationOptions<Schemas.RestResponseArtifact, Save1Error, Save1Variables>, 'mutationFn'>
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<Schemas.RestResponseArtifact, Save1Error, Save1Variables>(
    (variables: Save1Variables) => fetchSave1({ ...fetcherOptions, ...variables }),
    options
  )
}

export type CollectArtifactContentQueryParams = {
  appId?: string
}

export type CollectArtifactContentError = Fetcher.ErrorWrapper<undefined>

export type CollectArtifactContentVariables = {
  body: RequestBodies.Artifact
  queryParams?: CollectArtifactContentQueryParams
} & PortalContext['fetcherOptions']

export const fetchCollectArtifactContent = (variables: CollectArtifactContentVariables) =>
  portalFetch<
    Schemas.RestResponseArtifact,
    CollectArtifactContentError,
    RequestBodies.Artifact,
    {},
    CollectArtifactContentQueryParams,
    {}
  >({ url: '/artifacts', method: 'put', ...variables })

export const useCollectArtifactContent = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.RestResponseArtifact,
      CollectArtifactContentError,
      CollectArtifactContentVariables
    >,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<
    Schemas.RestResponseArtifact,
    CollectArtifactContentError,
    CollectArtifactContentVariables
  >(
    (variables: CollectArtifactContentVariables) => fetchCollectArtifactContent({ ...fetcherOptions, ...variables }),
    options
  )
}

export type Download1PathParams = {
  artifactId: string
}

export type Download1QueryParams = {
  appId?: string
}

export type Download1Error = Fetcher.ErrorWrapper<undefined>

export type Download1Variables = {
  pathParams: Download1PathParams
  queryParams?: Download1QueryParams
} & PortalContext['fetcherOptions']

export const fetchDownload1 = (variables: Download1Variables) =>
  portalFetch<undefined, Download1Error, undefined, {}, Download1QueryParams, Download1PathParams>({
    url: '/artifacts/{artifactId}/artifactFile',
    method: 'get',
    ...variables
  })

export const useDownload1 = (
  variables: Download1Variables,
  options?: Omit<reactQuery.UseQueryOptions<undefined, Download1Error, undefined>, 'queryKey' | 'queryFn'>
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<undefined, Download1Error, undefined>(
    queryKeyFn({ path: '/artifacts/{artifactId}/artifactFile', operationId: 'download1', variables }),
    () => fetchDownload1({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type ListArtifactsByServiceIdQueryParams = {
  serviceId?: string
  accountId?: string
  /*
   * @default 0
   */
  offset?: string
  limit?: string
  fieldsIncluded?: string[]
  fieldsExcluded?: string[]
}

export type ListArtifactsByServiceIdError = Fetcher.ErrorWrapper<undefined>

export type ListArtifactsByServiceIdVariables = {
  queryParams?: ListArtifactsByServiceIdQueryParams
} & PortalContext['fetcherOptions']

export const fetchListArtifactsByServiceId = (variables: ListArtifactsByServiceIdVariables) =>
  portalFetch<
    Schemas.RestResponsePageResponseArtifact,
    ListArtifactsByServiceIdError,
    undefined,
    {},
    ListArtifactsByServiceIdQueryParams,
    {}
  >({ url: '/artifacts/v2', method: 'get', ...variables })

export const useListArtifactsByServiceId = (
  variables: ListArtifactsByServiceIdVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponsePageResponseArtifact,
      ListArtifactsByServiceIdError,
      Schemas.RestResponsePageResponseArtifact
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponsePageResponseArtifact,
    ListArtifactsByServiceIdError,
    Schemas.RestResponsePageResponseArtifact
  >(
    queryKeyFn({ path: '/artifacts/v2', operationId: 'listArtifactsByServiceId', variables }),
    () => fetchListArtifactsByServiceId({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type Get7PathParams = {
  streamId: string
}

export type Get7QueryParams = {
  appId?: string
}

export type Get7Error = Fetcher.ErrorWrapper<undefined>

export type Get7Variables = {
  pathParams: Get7PathParams
  queryParams?: Get7QueryParams
} & PortalContext['fetcherOptions']

export const fetchGet7 = (variables: Get7Variables) =>
  portalFetch<Schemas.RestResponseArtifactStream, Get7Error, undefined, {}, Get7QueryParams, Get7PathParams>({
    url: '/artifactstreams/{streamId}',
    method: 'get',
    ...variables
  })

export const useGet7 = (
  variables: Get7Variables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.RestResponseArtifactStream, Get7Error, Schemas.RestResponseArtifactStream>,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<Schemas.RestResponseArtifactStream, Get7Error, Schemas.RestResponseArtifactStream>(
    queryKeyFn({ path: '/artifactstreams/{streamId}', operationId: 'get7', variables }),
    () => fetchGet7({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type Update5PathParams = {
  streamId: string
}

export type Update5QueryParams = {
  appId?: string
}

export type Update5Error = Fetcher.ErrorWrapper<undefined>

export type Update5Variables = {
  body: RequestBodies.ArtifactStream
  pathParams: Update5PathParams
  queryParams?: Update5QueryParams
} & PortalContext['fetcherOptions']

export const fetchUpdate5 = (variables: Update5Variables) =>
  portalFetch<
    Schemas.RestResponseArtifactStream,
    Update5Error,
    RequestBodies.ArtifactStream,
    {},
    Update5QueryParams,
    Update5PathParams
  >({ url: '/artifactstreams/{streamId}', method: 'put', ...variables })

export const useUpdate5 = (
  options?: Omit<
    reactQuery.UseMutationOptions<Schemas.RestResponseArtifactStream, Update5Error, Update5Variables>,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<Schemas.RestResponseArtifactStream, Update5Error, Update5Variables>(
    (variables: Update5Variables) => fetchUpdate5({ ...fetcherOptions, ...variables }),
    options
  )
}

export type Delete4PathParams = {
  id: string
}

export type Delete4QueryParams = {
  appId?: string
}

export type Delete4Error = Fetcher.ErrorWrapper<undefined>

export type Delete4Variables = {
  pathParams: Delete4PathParams
  queryParams?: Delete4QueryParams
} & PortalContext['fetcherOptions']

export const fetchDelete4 = (variables: Delete4Variables) =>
  portalFetch<Schemas.RestResponse, Delete4Error, undefined, {}, Delete4QueryParams, Delete4PathParams>({
    url: '/artifactstreams/{id}',
    method: 'delete',
    ...variables
  })

export const useDelete4 = (
  options?: Omit<reactQuery.UseMutationOptions<Schemas.RestResponse, Delete4Error, Delete4Variables>, 'mutationFn'>
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<Schemas.RestResponse, Delete4Error, Delete4Variables>(
    (variables: Delete4Variables) => fetchDelete4({ ...fetcherOptions, ...variables }),
    options
  )
}

export type List9QueryParams = {
  appId?: string
  accountId?: string
  withArtifactCount?: boolean
  artifactSearchString?: string
  /*
   * @default 0
   */
  offset?: string
  limit?: string
  fieldsIncluded?: string[]
  fieldsExcluded?: string[]
}

export type List9Error = Fetcher.ErrorWrapper<undefined>

export type List9Variables = {
  queryParams?: List9QueryParams
} & PortalContext['fetcherOptions']

export const fetchList9 = (variables: List9Variables) =>
  portalFetch<Schemas.RestResponsePageResponseArtifactStream, List9Error, undefined, {}, List9QueryParams, {}>({
    url: '/artifactstreams',
    method: 'get',
    ...variables
  })

export const useList9 = (
  variables: List9Variables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponsePageResponseArtifactStream,
      List9Error,
      Schemas.RestResponsePageResponseArtifactStream
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponsePageResponseArtifactStream,
    List9Error,
    Schemas.RestResponsePageResponseArtifactStream
  >(
    queryKeyFn({ path: '/artifactstreams', operationId: 'list9', variables }),
    () => fetchList9({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type Save2QueryParams = {
  appId?: string
}

export type Save2Error = Fetcher.ErrorWrapper<undefined>

export type Save2Variables = {
  body: RequestBodies.ArtifactStream
  queryParams?: Save2QueryParams
} & PortalContext['fetcherOptions']

export const fetchSave2 = (variables: Save2Variables) =>
  portalFetch<Schemas.RestResponseArtifactStream, Save2Error, RequestBodies.ArtifactStream, {}, Save2QueryParams, {}>({
    url: '/artifactstreams',
    method: 'post',
    ...variables
  })

export const useSave2 = (
  options?: Omit<
    reactQuery.UseMutationOptions<Schemas.RestResponseArtifactStream, Save2Error, Save2Variables>,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<Schemas.RestResponseArtifactStream, Save2Error, Save2Variables>(
    (variables: Save2Variables) => fetchSave2({ ...fetcherOptions, ...variables }),
    options
  )
}

export type GetBuildSourceTypesQueryParams = {
  appId?: string
  serviceId?: string
}

export type GetBuildSourceTypesError = Fetcher.ErrorWrapper<undefined>

export type GetBuildSourceTypesVariables = {
  queryParams?: GetBuildSourceTypesQueryParams
} & PortalContext['fetcherOptions']

export const fetchGetBuildSourceTypes = (variables: GetBuildSourceTypesVariables) =>
  portalFetch<
    Schemas.RestResponseMapStringString,
    GetBuildSourceTypesError,
    undefined,
    {},
    GetBuildSourceTypesQueryParams,
    {}
  >({ url: '/artifactstreams/buildsource-types', method: 'get', ...variables })

export const useGetBuildSourceTypes = (
  variables: GetBuildSourceTypesVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponseMapStringString,
      GetBuildSourceTypesError,
      Schemas.RestResponseMapStringString
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponseMapStringString,
    GetBuildSourceTypesError,
    Schemas.RestResponseMapStringString
  >(
    queryKeyFn({ path: '/artifactstreams/buildsource-types', operationId: 'getBuildSourceTypes', variables }),
    () => fetchGetBuildSourceTypes({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type ListArtifactStreamSummaryQueryParams = {
  appId?: string
}

export type ListArtifactStreamSummaryError = Fetcher.ErrorWrapper<undefined>

export type ListArtifactStreamSummaryVariables = {
  queryParams?: ListArtifactStreamSummaryQueryParams
} & PortalContext['fetcherOptions']

export const fetchListArtifactStreamSummary = (variables: ListArtifactStreamSummaryVariables) =>
  portalFetch<
    Schemas.RestResponseListArtifactStreamSummary,
    ListArtifactStreamSummaryError,
    undefined,
    {},
    ListArtifactStreamSummaryQueryParams,
    {}
  >({ url: '/artifactstreams/summary', method: 'get', ...variables })

export const useListArtifactStreamSummary = (
  variables: ListArtifactStreamSummaryVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponseListArtifactStreamSummary,
      ListArtifactStreamSummaryError,
      Schemas.RestResponseListArtifactStreamSummary
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponseListArtifactStreamSummary,
    ListArtifactStreamSummaryError,
    Schemas.RestResponseListArtifactStreamSummary
  >(
    queryKeyFn({ path: '/artifactstreams/summary', operationId: 'listArtifactStreamSummary', variables }),
    () => fetchListArtifactStreamSummary({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type ListArtifactStreamParametersPathParams = {
  id: string
}

export type ListArtifactStreamParametersError = Fetcher.ErrorWrapper<undefined>

export type ListArtifactStreamParametersVariables = {
  pathParams: ListArtifactStreamParametersPathParams
} & PortalContext['fetcherOptions']

export const fetchListArtifactStreamParameters = (variables: ListArtifactStreamParametersVariables) =>
  portalFetch<
    Schemas.RestResponseListString,
    ListArtifactStreamParametersError,
    undefined,
    {},
    {},
    ListArtifactStreamParametersPathParams
  >({ url: '/artifactstreams/{id}/parameters', method: 'get', ...variables })

export const useListArtifactStreamParameters = (
  variables: ListArtifactStreamParametersVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponseListString,
      ListArtifactStreamParametersError,
      Schemas.RestResponseListString
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponseListString,
    ListArtifactStreamParametersError,
    Schemas.RestResponseListString
  >(
    queryKeyFn({ path: '/artifactstreams/{id}/parameters', operationId: 'listArtifactStreamParameters', variables }),
    () => fetchListArtifactStreamParameters({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type ResetArtifactCollectionPathParams = {
  id: string
}

export type ResetArtifactCollectionQueryParams = {
  appId?: string
}

export type ResetArtifactCollectionError = Fetcher.ErrorWrapper<undefined>

export type ResetArtifactCollectionVariables = {
  pathParams: ResetArtifactCollectionPathParams
  queryParams?: ResetArtifactCollectionQueryParams
} & PortalContext['fetcherOptions']

export const fetchResetArtifactCollection = (variables: ResetArtifactCollectionVariables) =>
  portalFetch<
    Schemas.RestResponseArtifactStream,
    ResetArtifactCollectionError,
    undefined,
    {},
    ResetArtifactCollectionQueryParams,
    ResetArtifactCollectionPathParams
  >({ url: '/artifactstreams/resetCollection/{id}', method: 'patch', ...variables })

export const useResetArtifactCollection = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.RestResponseArtifactStream,
      ResetArtifactCollectionError,
      ResetArtifactCollectionVariables
    >,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<
    Schemas.RestResponseArtifactStream,
    ResetArtifactCollectionError,
    ResetArtifactCollectionVariables
  >(
    (variables: ResetArtifactCollectionVariables) => fetchResetArtifactCollection({ ...fetcherOptions, ...variables }),
    options
  )
}

export type List10QueryParams = {
  accountId?: string
  /*
   * @default 0
   */
  offset?: string
  limit?: string
  fieldsIncluded?: string[]
  fieldsExcluded?: string[]
}

export type List10Error = Fetcher.ErrorWrapper<undefined>

export type List10Variables = {
  queryParams?: List10QueryParams
} & PortalContext['fetcherOptions']

export const fetchList10 = (variables: List10Variables) =>
  portalFetch<Schemas.RestResponsePageResponseAuditHeader, List10Error, undefined, {}, List10QueryParams, {}>({
    url: '/audits',
    method: 'get',
    ...variables
  })

export const useList10 = (
  variables: List10Variables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponsePageResponseAuditHeader,
      List10Error,
      Schemas.RestResponsePageResponseAuditHeader
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponsePageResponseAuditHeader,
    List10Error,
    Schemas.RestResponsePageResponseAuditHeader
  >(
    queryKeyFn({ path: '/audits', operationId: 'list10', variables }),
    () => fetchList10({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type ListUsingFilterQueryParams = {
  accountId?: string
  filter?: string
  limit?: string
  offset?: string
}

export type ListUsingFilterError = Fetcher.ErrorWrapper<undefined>

export type ListUsingFilterVariables = {
  queryParams?: ListUsingFilterQueryParams
} & PortalContext['fetcherOptions']

export const fetchListUsingFilter = (variables: ListUsingFilterVariables) =>
  portalFetch<
    Schemas.RestResponsePageResponseAuditHeader,
    ListUsingFilterError,
    undefined,
    {},
    ListUsingFilterQueryParams,
    {}
  >({ url: '/audits/filter', method: 'get', ...variables })

export const useListUsingFilter = (
  variables: ListUsingFilterVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponsePageResponseAuditHeader,
      ListUsingFilterError,
      Schemas.RestResponsePageResponseAuditHeader
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponsePageResponseAuditHeader,
    ListUsingFilterError,
    Schemas.RestResponsePageResponseAuditHeader
  >(
    queryKeyFn({ path: '/audits/filter', operationId: 'listUsingFilter', variables }),
    () => fetchListUsingFilter({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type GetAuditHeaderDetailsPathParams = {
  auditHeaderId: string
}

export type GetAuditHeaderDetailsQueryParams = {
  entityId?: string
  accountId?: string
}

export type GetAuditHeaderDetailsError = Fetcher.ErrorWrapper<undefined>

export type GetAuditHeaderDetailsVariables = {
  pathParams: GetAuditHeaderDetailsPathParams
  queryParams?: GetAuditHeaderDetailsQueryParams
} & PortalContext['fetcherOptions']

export const fetchGetAuditHeaderDetails = (variables: GetAuditHeaderDetailsVariables) =>
  portalFetch<
    Schemas.RestResponseAuditHeaderYamlResponse,
    GetAuditHeaderDetailsError,
    undefined,
    {},
    GetAuditHeaderDetailsQueryParams,
    GetAuditHeaderDetailsPathParams
  >({ url: '/audits/{auditHeaderId}/yamldetails', method: 'get', ...variables })

export const useGetAuditHeaderDetails = (
  variables: GetAuditHeaderDetailsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponseAuditHeaderYamlResponse,
      GetAuditHeaderDetailsError,
      Schemas.RestResponseAuditHeaderYamlResponse
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponseAuditHeaderYamlResponse,
    GetAuditHeaderDetailsError,
    Schemas.RestResponseAuditHeaderYamlResponse
  >(
    queryKeyFn({ path: '/audits/{auditHeaderId}/yamldetails', operationId: 'getAuditHeaderDetails', variables }),
    () => fetchGetAuditHeaderDetails({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type List11QueryParams = {
  accountId?: string
}

export type List11Error = Fetcher.ErrorWrapper<undefined>

export type List11Variables = {
  queryParams?: List11QueryParams
} & PortalContext['fetcherOptions']

export const fetchList11 = (variables: List11Variables) =>
  portalFetch<Schemas.RestResponseMapStringString, List11Error, undefined, {}, List11QueryParams, {}>({
    url: '/awshelper/regions',
    method: 'get',
    ...variables
  })

export const useList11 = (
  variables: List11Variables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.RestResponseMapStringString, List11Error, Schemas.RestResponseMapStringString>,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<Schemas.RestResponseMapStringString, List11Error, Schemas.RestResponseMapStringString>(
    queryKeyFn({ path: '/awshelper/regions', operationId: 'list11', variables }),
    () => fetchList11({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type ListBucketsPathParams = {
  settingId: string
}

export type ListBucketsQueryParams = {
  accountId?: string
}

export type ListBucketsError = Fetcher.ErrorWrapper<undefined>

export type ListBucketsVariables = {
  pathParams: ListBucketsPathParams
  queryParams?: ListBucketsQueryParams
} & PortalContext['fetcherOptions']

export const fetchListBuckets = (variables: ListBucketsVariables) =>
  portalFetch<
    Schemas.RestResponseListString,
    ListBucketsError,
    undefined,
    {},
    ListBucketsQueryParams,
    ListBucketsPathParams
  >({ url: '/awshelper/buckets/{settingId}', method: 'get', ...variables })

export const useListBuckets = (
  variables: ListBucketsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.RestResponseListString, ListBucketsError, Schemas.RestResponseListString>,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<Schemas.RestResponseListString, ListBucketsError, Schemas.RestResponseListString>(
    queryKeyFn({ path: '/awshelper/buckets/{settingId}', operationId: 'listBuckets', variables }),
    () => fetchListBuckets({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type ListCloudformationCapabilitiesError = Fetcher.ErrorWrapper<undefined>

export type ListCloudformationCapabilitiesVariables = PortalContext['fetcherOptions']

export const fetchListCloudformationCapabilities = (variables: ListCloudformationCapabilitiesVariables) =>
  portalFetch<Schemas.RestResponseListString, ListCloudformationCapabilitiesError, undefined, {}, {}, {}>({
    url: '/awshelper/cloudformation/capabilities',
    method: 'get',
    ...variables
  })

export const useListCloudformationCapabilities = (
  variables: ListCloudformationCapabilitiesVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponseListString,
      ListCloudformationCapabilitiesError,
      Schemas.RestResponseListString
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponseListString,
    ListCloudformationCapabilitiesError,
    Schemas.RestResponseListString
  >(
    queryKeyFn({
      path: '/awshelper/cloudformation/capabilities',
      operationId: 'listCloudformationCapabilities',
      variables
    }),
    () => fetchListCloudformationCapabilities({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type ListCloudFormationStatuesQueryParams = {
  accountId?: string
}

export type ListCloudFormationStatuesError = Fetcher.ErrorWrapper<undefined>

export type ListCloudFormationStatuesVariables = {
  queryParams?: ListCloudFormationStatuesQueryParams
} & PortalContext['fetcherOptions']

export const fetchListCloudFormationStatues = (variables: ListCloudFormationStatuesVariables) =>
  portalFetch<
    Schemas.RestResponseSetString,
    ListCloudFormationStatuesError,
    undefined,
    {},
    ListCloudFormationStatuesQueryParams,
    {}
  >({ url: '/awshelper/cf-states', method: 'get', ...variables })

export const useListCloudFormationStatues = (
  variables: ListCloudFormationStatuesVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponseSetString,
      ListCloudFormationStatuesError,
      Schemas.RestResponseSetString
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponseSetString,
    ListCloudFormationStatuesError,
    Schemas.RestResponseSetString
  >(
    queryKeyFn({ path: '/awshelper/cf-states', operationId: 'listCloudFormationStatues', variables }),
    () => fetchListCloudFormationStatues({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type ListTagsQueryParams = {
  appId?: string
  region?: string
  computeProviderId?: string
  resourceType?: string
}

export type ListTagsError = Fetcher.ErrorWrapper<undefined>

export type ListTagsVariables = {
  queryParams?: ListTagsQueryParams
} & PortalContext['fetcherOptions']

export const fetchListTags = (variables: ListTagsVariables) =>
  portalFetch<Schemas.RestResponseSetString, ListTagsError, undefined, {}, ListTagsQueryParams, {}>({
    url: '/awshelper/tags',
    method: 'get',
    ...variables
  })

export const useListTags = (
  variables: ListTagsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.RestResponseSetString, ListTagsError, Schemas.RestResponseSetString>,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<Schemas.RestResponseSetString, ListTagsError, Schemas.RestResponseSetString>(
    queryKeyFn({ path: '/awshelper/tags', operationId: 'listTags', variables }),
    () => fetchListTags({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type ListAwsRegionsQueryParams = {
  accountId?: string
}

export type ListAwsRegionsError = Fetcher.ErrorWrapper<undefined>

export type ListAwsRegionsVariables = {
  queryParams?: ListAwsRegionsQueryParams
} & PortalContext['fetcherOptions']

export const fetchListAwsRegions = (variables: ListAwsRegionsVariables) =>
  portalFetch<Schemas.RestResponseListNameValuePair, ListAwsRegionsError, undefined, {}, ListAwsRegionsQueryParams, {}>(
    { url: '/awshelper/aws-regions', method: 'get', ...variables }
  )

export const useListAwsRegions = (
  variables: ListAwsRegionsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponseListNameValuePair,
      ListAwsRegionsError,
      Schemas.RestResponseListNameValuePair
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponseListNameValuePair,
    ListAwsRegionsError,
    Schemas.RestResponseListNameValuePair
  >(
    queryKeyFn({ path: '/awshelper/aws-regions', operationId: 'listAwsRegions', variables }),
    () => fetchListAwsRegions({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type ListContainerRegistriesPathParams = {
  subscriptionId: string
}

export type ListContainerRegistriesQueryParams = {
  accountId?: string
  cloudProviderId?: string
}

export type ListContainerRegistriesError = Fetcher.ErrorWrapper<undefined>

export type ListContainerRegistriesVariables = {
  pathParams: ListContainerRegistriesPathParams
  queryParams?: ListContainerRegistriesQueryParams
} & PortalContext['fetcherOptions']

export const fetchListContainerRegistries = (variables: ListContainerRegistriesVariables) =>
  portalFetch<
    Schemas.RestResponseListString,
    ListContainerRegistriesError,
    undefined,
    {},
    ListContainerRegistriesQueryParams,
    ListContainerRegistriesPathParams
  >({ url: '/azure/subscriptions/{subscriptionId}/containerRegistries', method: 'get', ...variables })

export const useListContainerRegistries = (
  variables: ListContainerRegistriesVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponseListString,
      ListContainerRegistriesError,
      Schemas.RestResponseListString
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponseListString,
    ListContainerRegistriesError,
    Schemas.RestResponseListString
  >(
    queryKeyFn({
      path: '/azure/subscriptions/{subscriptionId}/containerRegistries',
      operationId: 'listContainerRegistries',
      variables
    }),
    () => fetchListContainerRegistries({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type ListRepositoriesPathParams = {
  subscriptionId: string
  registryName: string
}

export type ListRepositoriesQueryParams = {
  accountId?: string
  cloudProviderId?: string
}

export type ListRepositoriesError = Fetcher.ErrorWrapper<undefined>

export type ListRepositoriesVariables = {
  pathParams: ListRepositoriesPathParams
  queryParams?: ListRepositoriesQueryParams
} & PortalContext['fetcherOptions']

export const fetchListRepositories = (variables: ListRepositoriesVariables) =>
  portalFetch<
    Schemas.RestResponseListString,
    ListRepositoriesError,
    undefined,
    {},
    ListRepositoriesQueryParams,
    ListRepositoriesPathParams
  >({
    url: '/azure/subscriptions/{subscriptionId}/containerRegistries/{registryName}/repositories',
    method: 'get',
    ...variables
  })

export const useListRepositories = (
  variables: ListRepositoriesVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.RestResponseListString, ListRepositoriesError, Schemas.RestResponseListString>,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<Schemas.RestResponseListString, ListRepositoriesError, Schemas.RestResponseListString>(
    queryKeyFn({
      path: '/azure/subscriptions/{subscriptionId}/containerRegistries/{registryName}/repositories',
      operationId: 'listRepositories',
      variables
    }),
    () => fetchListRepositories({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type ListRepositoryTagsPathParams = {
  subscriptionId: string
  registryName: string
  repositoryName: string
}

export type ListRepositoryTagsQueryParams = {
  accountId?: string
  cloudProviderId?: string
}

export type ListRepositoryTagsError = Fetcher.ErrorWrapper<undefined>

export type ListRepositoryTagsVariables = {
  pathParams: ListRepositoryTagsPathParams
  queryParams?: ListRepositoryTagsQueryParams
} & PortalContext['fetcherOptions']

export const fetchListRepositoryTags = (variables: ListRepositoryTagsVariables) =>
  portalFetch<
    Schemas.RestResponseListString,
    ListRepositoryTagsError,
    undefined,
    {},
    ListRepositoryTagsQueryParams,
    ListRepositoryTagsPathParams
  >({
    url: '/azure/subscriptions/{subscriptionId}/containerRegistries/{registryName}/repositories/{repositoryName}/tags',
    method: 'get',
    ...variables
  })

export const useListRepositoryTags = (
  variables: ListRepositoryTagsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.RestResponseListString, ListRepositoryTagsError, Schemas.RestResponseListString>,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<Schemas.RestResponseListString, ListRepositoryTagsError, Schemas.RestResponseListString>(
    queryKeyFn({
      path: '/azure/subscriptions/{subscriptionId}/containerRegistries/{registryName}/repositories/{repositoryName}/tags',
      operationId: 'listRepositoryTags',
      variables
    }),
    () => fetchListRepositoryTags({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type ListKubernetesClustersPathParams = {
  subscriptionId: string
}

export type ListKubernetesClustersQueryParams = {
  accountId?: string
  cloudProviderId?: string
}

export type ListKubernetesClustersError = Fetcher.ErrorWrapper<undefined>

export type ListKubernetesClustersVariables = {
  pathParams: ListKubernetesClustersPathParams
  queryParams?: ListKubernetesClustersQueryParams
} & PortalContext['fetcherOptions']

export const fetchListKubernetesClusters = (variables: ListKubernetesClustersVariables) =>
  portalFetch<
    Schemas.RestResponseListAzureKubernetesCluster,
    ListKubernetesClustersError,
    undefined,
    {},
    ListKubernetesClustersQueryParams,
    ListKubernetesClustersPathParams
  >({ url: '/azure/subscriptions/{subscriptionId}/kubernetesClusters', method: 'get', ...variables })

export const useListKubernetesClusters = (
  variables: ListKubernetesClustersVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponseListAzureKubernetesCluster,
      ListKubernetesClustersError,
      Schemas.RestResponseListAzureKubernetesCluster
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponseListAzureKubernetesCluster,
    ListKubernetesClustersError,
    Schemas.RestResponseListAzureKubernetesCluster
  >(
    queryKeyFn({
      path: '/azure/subscriptions/{subscriptionId}/kubernetesClusters',
      operationId: 'listKubernetesClusters',
      variables
    }),
    () => fetchListKubernetesClusters({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type ListAzureRegionsQueryParams = {
  accountId?: string
}

export type ListAzureRegionsError = Fetcher.ErrorWrapper<undefined>

export type ListAzureRegionsVariables = {
  queryParams?: ListAzureRegionsQueryParams
} & PortalContext['fetcherOptions']

export const fetchListAzureRegions = (variables: ListAzureRegionsVariables) =>
  portalFetch<
    Schemas.RestResponseListNameValuePair,
    ListAzureRegionsError,
    undefined,
    {},
    ListAzureRegionsQueryParams,
    {}
  >({ url: '/azure/regions', method: 'get', ...variables })

export const useListAzureRegions = (
  variables: ListAzureRegionsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponseListNameValuePair,
      ListAzureRegionsError,
      Schemas.RestResponseListNameValuePair
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponseListNameValuePair,
    ListAzureRegionsError,
    Schemas.RestResponseListNameValuePair
  >(
    queryKeyFn({ path: '/azure/regions', operationId: 'listAzureRegions', variables }),
    () => fetchListAzureRegions({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type ListSubscriptionsQueryParams = {
  accountId?: string
  cloudProviderId?: string
}

export type ListSubscriptionsError = Fetcher.ErrorWrapper<undefined>

export type ListSubscriptionsVariables = {
  queryParams?: ListSubscriptionsQueryParams
} & PortalContext['fetcherOptions']

export const fetchListSubscriptions = (variables: ListSubscriptionsVariables) =>
  portalFetch<
    Schemas.RestResponseMapStringString,
    ListSubscriptionsError,
    undefined,
    {},
    ListSubscriptionsQueryParams,
    {}
  >({ url: '/azure/subscriptions', method: 'get', ...variables })

export const useListSubscriptions = (
  variables: ListSubscriptionsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponseMapStringString,
      ListSubscriptionsError,
      Schemas.RestResponseMapStringString
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponseMapStringString,
    ListSubscriptionsError,
    Schemas.RestResponseMapStringString
  >(
    queryKeyFn({ path: '/azure/subscriptions', operationId: 'listSubscriptions', variables }),
    () => fetchListSubscriptions({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type ListImageGalleriesPathParams = {
  subscriptionId: string
  resourceGroupName: string
}

export type ListImageGalleriesQueryParams = {
  accountId?: string
  cloudProviderId?: string
}

export type ListImageGalleriesError = Fetcher.ErrorWrapper<undefined>

export type ListImageGalleriesVariables = {
  pathParams: ListImageGalleriesPathParams
  queryParams?: ListImageGalleriesQueryParams
} & PortalContext['fetcherOptions']

export const fetchListImageGalleries = (variables: ListImageGalleriesVariables) =>
  portalFetch<
    Schemas.RestResponseListAzureImageGallery,
    ListImageGalleriesError,
    undefined,
    {},
    ListImageGalleriesQueryParams,
    ListImageGalleriesPathParams
  >({
    url: '/azure/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/imageGalleries',
    method: 'get',
    ...variables
  })

export const useListImageGalleries = (
  variables: ListImageGalleriesVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponseListAzureImageGallery,
      ListImageGalleriesError,
      Schemas.RestResponseListAzureImageGallery
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponseListAzureImageGallery,
    ListImageGalleriesError,
    Schemas.RestResponseListAzureImageGallery
  >(
    queryKeyFn({
      path: '/azure/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/imageGalleries',
      operationId: 'listImageGalleries',
      variables
    }),
    () => fetchListImageGalleries({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type ListImageDefinitionsPathParams = {
  subscriptionId: string
  resourceGroupName: string
  galleryName: string
}

export type ListImageDefinitionsQueryParams = {
  accountId?: string
  cloudProviderId?: string
}

export type ListImageDefinitionsError = Fetcher.ErrorWrapper<undefined>

export type ListImageDefinitionsVariables = {
  pathParams: ListImageDefinitionsPathParams
  queryParams?: ListImageDefinitionsQueryParams
} & PortalContext['fetcherOptions']

export const fetchListImageDefinitions = (variables: ListImageDefinitionsVariables) =>
  portalFetch<
    Schemas.RestResponseListAzureImageDefinition,
    ListImageDefinitionsError,
    undefined,
    {},
    ListImageDefinitionsQueryParams,
    ListImageDefinitionsPathParams
  >({
    url: '/azure/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/imageGalleries/{galleryName}/imageDefinitions',
    method: 'get',
    ...variables
  })

export const useListImageDefinitions = (
  variables: ListImageDefinitionsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponseListAzureImageDefinition,
      ListImageDefinitionsError,
      Schemas.RestResponseListAzureImageDefinition
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponseListAzureImageDefinition,
    ListImageDefinitionsError,
    Schemas.RestResponseListAzureImageDefinition
  >(
    queryKeyFn({
      path: '/azure/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/imageGalleries/{galleryName}/imageDefinitions',
      operationId: 'listImageDefinitions',
      variables
    }),
    () => fetchListImageDefinitions({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type ListResourceGroupsPathParams = {
  subscriptionId: string
}

export type ListResourceGroupsQueryParams = {
  accountId?: string
  cloudProviderId?: string
}

export type ListResourceGroupsError = Fetcher.ErrorWrapper<undefined>

export type ListResourceGroupsVariables = {
  pathParams: ListResourceGroupsPathParams
  queryParams?: ListResourceGroupsQueryParams
} & PortalContext['fetcherOptions']

export const fetchListResourceGroups = (variables: ListResourceGroupsVariables) =>
  portalFetch<
    Schemas.RestResponseListAzureResourceGroup,
    ListResourceGroupsError,
    undefined,
    {},
    ListResourceGroupsQueryParams,
    ListResourceGroupsPathParams
  >({ url: '/azure/subscriptions/{subscriptionId}/resourceGroups', method: 'get', ...variables })

export const useListResourceGroups = (
  variables: ListResourceGroupsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponseListAzureResourceGroup,
      ListResourceGroupsError,
      Schemas.RestResponseListAzureResourceGroup
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponseListAzureResourceGroup,
    ListResourceGroupsError,
    Schemas.RestResponseListAzureResourceGroup
  >(
    queryKeyFn({
      path: '/azure/subscriptions/{subscriptionId}/resourceGroups',
      operationId: 'listResourceGroups',
      variables
    }),
    () => fetchListResourceGroups({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type ListContainerRegistriesWithDetailsPathParams = {
  subscriptionId: string
}

export type ListContainerRegistriesWithDetailsQueryParams = {
  accountId?: string
  cloudProviderId?: string
}

export type ListContainerRegistriesWithDetailsError = Fetcher.ErrorWrapper<undefined>

export type ListContainerRegistriesWithDetailsVariables = {
  pathParams: ListContainerRegistriesWithDetailsPathParams
  queryParams?: ListContainerRegistriesWithDetailsQueryParams
} & PortalContext['fetcherOptions']

export const fetchListContainerRegistriesWithDetails = (variables: ListContainerRegistriesWithDetailsVariables) =>
  portalFetch<
    Schemas.RestResponseListAzureContainerRegistry,
    ListContainerRegistriesWithDetailsError,
    undefined,
    {},
    ListContainerRegistriesWithDetailsQueryParams,
    ListContainerRegistriesWithDetailsPathParams
  >({ url: '/azure/subscriptions/{subscriptionId}/containerRegistriesWithDetails', method: 'get', ...variables })

export const useListContainerRegistriesWithDetails = (
  variables: ListContainerRegistriesWithDetailsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponseListAzureContainerRegistry,
      ListContainerRegistriesWithDetailsError,
      Schemas.RestResponseListAzureContainerRegistry
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponseListAzureContainerRegistry,
    ListContainerRegistriesWithDetailsError,
    Schemas.RestResponseListAzureContainerRegistry
  >(
    queryKeyFn({
      path: '/azure/subscriptions/{subscriptionId}/containerRegistriesWithDetails',
      operationId: 'listContainerRegistriesWithDetails',
      variables
    }),
    () => fetchListContainerRegistriesWithDetails({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type FrameworkError = Fetcher.ErrorWrapper<undefined>

export type FrameworkVariables = PortalContext['fetcherOptions']

export const fetchFramework = (variables: FrameworkVariables) =>
  portalFetch<undefined, FrameworkError, undefined, {}, {}, {}>({ url: '/bins/framework', method: 'get', ...variables })

export const useFramework = (
  variables: FrameworkVariables,
  options?: Omit<reactQuery.UseQueryOptions<undefined, FrameworkError, undefined>, 'queryKey' | 'queryFn'>
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<undefined, FrameworkError, undefined>(
    queryKeyFn({ path: '/bins/framework', operationId: 'framework', variables }),
    () => fetchFramework({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type Get8PathParams = {
  id: string
}

export type Get8QueryParams = {
  accountId?: string
}

export type Get8Error = Fetcher.ErrorWrapper<undefined>

export type Get8Variables = {
  pathParams: Get8PathParams
  queryParams?: Get8QueryParams
} & PortalContext['fetcherOptions']

export const fetchGet8 = (variables: Get8Variables) =>
  portalFetch<Schemas.RestResponseBudget, Get8Error, undefined, {}, Get8QueryParams, Get8PathParams>({
    url: '/budgets/{id}',
    method: 'get',
    ...variables
  })

export const useGet8 = (
  variables: Get8Variables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.RestResponseBudget, Get8Error, Schemas.RestResponseBudget>,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<Schemas.RestResponseBudget, Get8Error, Schemas.RestResponseBudget>(
    queryKeyFn({ path: '/budgets/{id}', operationId: 'get8', variables }),
    () => fetchGet8({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type ClonePathParams = {
  id: string
}

export type CloneQueryParams = {
  accountId?: string
  cloneName?: string
}

export type CloneError = Fetcher.ErrorWrapper<undefined>

export type CloneVariables = {
  pathParams: ClonePathParams
  queryParams?: CloneQueryParams
} & PortalContext['fetcherOptions']

export const fetchClone = (variables: CloneVariables) =>
  portalFetch<Schemas.RestResponseString, CloneError, undefined, {}, CloneQueryParams, ClonePathParams>({
    url: '/budgets/{id}',
    method: 'post',
    ...variables
  })

export const useClone = (
  options?: Omit<reactQuery.UseMutationOptions<Schemas.RestResponseString, CloneError, CloneVariables>, 'mutationFn'>
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<Schemas.RestResponseString, CloneError, CloneVariables>(
    (variables: CloneVariables) => fetchClone({ ...fetcherOptions, ...variables }),
    options
  )
}

export type Update6PathParams = {
  id: string
}

export type Update6Error = Fetcher.ErrorWrapper<undefined>

export type Update6Variables = {
  body?: RequestBodies.Budget
  pathParams: Update6PathParams
} & PortalContext['fetcherOptions']

export const fetchUpdate6 = (variables: Update6Variables) =>
  portalFetch<Schemas.RestResponse, Update6Error, RequestBodies.Budget, {}, {}, Update6PathParams>({
    url: '/budgets/{id}',
    method: 'put',
    ...variables
  })

export const useUpdate6 = (
  options?: Omit<reactQuery.UseMutationOptions<Schemas.RestResponse, Update6Error, Update6Variables>, 'mutationFn'>
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<Schemas.RestResponse, Update6Error, Update6Variables>(
    (variables: Update6Variables) => fetchUpdate6({ ...fetcherOptions, ...variables }),
    options
  )
}

export type Delete5PathParams = {
  id: string
}

export type Delete5QueryParams = {
  accountId?: string
}

export type Delete5Error = Fetcher.ErrorWrapper<undefined>

export type Delete5Variables = {
  pathParams: Delete5PathParams
  queryParams?: Delete5QueryParams
} & PortalContext['fetcherOptions']

export const fetchDelete5 = (variables: Delete5Variables) =>
  portalFetch<Schemas.RestResponse, Delete5Error, undefined, {}, Delete5QueryParams, Delete5PathParams>({
    url: '/budgets/{id}',
    method: 'delete',
    ...variables
  })

export const useDelete5 = (
  options?: Omit<reactQuery.UseMutationOptions<Schemas.RestResponse, Delete5Error, Delete5Variables>, 'mutationFn'>
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<Schemas.RestResponse, Delete5Error, Delete5Variables>(
    (variables: Delete5Variables) => fetchDelete5({ ...fetcherOptions, ...variables }),
    options
  )
}

export type List12QueryParams = {
  accountId?: string
  viewId?: string
}

export type List12Error = Fetcher.ErrorWrapper<undefined>

export type List12Variables = {
  queryParams?: List12QueryParams
} & PortalContext['fetcherOptions']

export const fetchList12 = (variables: List12Variables) =>
  portalFetch<Schemas.RestResponseListBudget, List12Error, undefined, {}, List12QueryParams, {}>({
    url: '/budgets/perspectiveBudgets',
    method: 'get',
    ...variables
  })

export const useList12 = (
  variables: List12Variables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.RestResponseListBudget, List12Error, Schemas.RestResponseListBudget>,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<Schemas.RestResponseListBudget, List12Error, Schemas.RestResponseListBudget>(
    queryKeyFn({ path: '/budgets/perspectiveBudgets', operationId: 'list12', variables }),
    () => fetchList12({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type List13QueryParams = {
  accountId?: string
  /*
   * @format int32
   */
  count?: number
  /*
   * @format int32
   */
  startIndex?: number
}

export type List13Error = Fetcher.ErrorWrapper<undefined>

export type List13Variables = {
  queryParams?: List13QueryParams
} & PortalContext['fetcherOptions']

export const fetchList13 = (variables: List13Variables) =>
  portalFetch<Schemas.RestResponseListBudget, List13Error, undefined, {}, List13QueryParams, {}>({
    url: '/budgets',
    method: 'get',
    ...variables
  })

export const useList13 = (
  variables: List13Variables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.RestResponseListBudget, List13Error, Schemas.RestResponseListBudget>,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<Schemas.RestResponseListBudget, List13Error, Schemas.RestResponseListBudget>(
    queryKeyFn({ path: '/budgets', operationId: 'list13', variables }),
    () => fetchList13({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type Save3QueryParams = {
  accountId?: string
}

export type Save3Error = Fetcher.ErrorWrapper<undefined>

export type Save3Variables = {
  body?: RequestBodies.Budget
  queryParams?: Save3QueryParams
} & PortalContext['fetcherOptions']

export const fetchSave3 = (variables: Save3Variables) =>
  portalFetch<Schemas.RestResponseString, Save3Error, RequestBodies.Budget, {}, Save3QueryParams, {}>({
    url: '/budgets',
    method: 'post',
    ...variables
  })

export const useSave3 = (
  options?: Omit<reactQuery.UseMutationOptions<Schemas.RestResponseString, Save3Error, Save3Variables>, 'mutationFn'>
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<Schemas.RestResponseString, Save3Error, Save3Variables>(
    (variables: Save3Variables) => fetchSave3({ ...fetcherOptions, ...variables }),
    options
  )
}

export type GetBugsnagApplicationsQueryParams = {
  accountId?: string
  settingId?: string
  organizationId?: string
}

export type GetBugsnagApplicationsError = Fetcher.ErrorWrapper<undefined>

export type GetBugsnagApplicationsVariables = {
  queryParams?: GetBugsnagApplicationsQueryParams
} & PortalContext['fetcherOptions']

export const fetchGetBugsnagApplications = (variables: GetBugsnagApplicationsVariables) =>
  portalFetch<
    Schemas.RestResponseSetBugsnagApplication,
    GetBugsnagApplicationsError,
    undefined,
    {},
    GetBugsnagApplicationsQueryParams,
    {}
  >({ url: '/bugsnag/applications', method: 'get', ...variables })

export const useGetBugsnagApplications = (
  variables: GetBugsnagApplicationsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponseSetBugsnagApplication,
      GetBugsnagApplicationsError,
      Schemas.RestResponseSetBugsnagApplication
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponseSetBugsnagApplication,
    GetBugsnagApplicationsError,
    Schemas.RestResponseSetBugsnagApplication
  >(
    queryKeyFn({ path: '/bugsnag/applications', operationId: 'getBugsnagApplications', variables }),
    () => fetchGetBugsnagApplications({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type GetBugsnagOrganizationsQueryParams = {
  accountId?: string
  settingId?: string
}

export type GetBugsnagOrganizationsError = Fetcher.ErrorWrapper<undefined>

export type GetBugsnagOrganizationsVariables = {
  queryParams?: GetBugsnagOrganizationsQueryParams
} & PortalContext['fetcherOptions']

export const fetchGetBugsnagOrganizations = (variables: GetBugsnagOrganizationsVariables) =>
  portalFetch<
    Schemas.RestResponseSetBugsnagApplication,
    GetBugsnagOrganizationsError,
    undefined,
    {},
    GetBugsnagOrganizationsQueryParams,
    {}
  >({ url: '/bugsnag/orgs', method: 'get', ...variables })

export const useGetBugsnagOrganizations = (
  variables: GetBugsnagOrganizationsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponseSetBugsnagApplication,
      GetBugsnagOrganizationsError,
      Schemas.RestResponseSetBugsnagApplication
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponseSetBugsnagApplication,
    GetBugsnagOrganizationsError,
    Schemas.RestResponseSetBugsnagApplication
  >(
    queryKeyFn({ path: '/bugsnag/orgs', operationId: 'getBugsnagOrganizations', variables }),
    () => fetchGetBugsnagOrganizations({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type GetLogRecordsQueryParams = {
  accountId?: string
}

export type GetLogRecordsError = Fetcher.ErrorWrapper<undefined>

export type GetLogRecordsVariables = {
  body: Schemas.BugsnagSetupTestData
  queryParams?: GetLogRecordsQueryParams
} & PortalContext['fetcherOptions']

export const fetchGetLogRecords = (variables: GetLogRecordsVariables) =>
  portalFetch<
    Schemas.RestResponseVerificationNodeDataSetupResponse,
    GetLogRecordsError,
    Schemas.BugsnagSetupTestData,
    {},
    GetLogRecordsQueryParams,
    {}
  >({ url: '/bugsnag/node-data', method: 'post', ...variables })

export const useGetLogRecords = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.RestResponseVerificationNodeDataSetupResponse,
      GetLogRecordsError,
      GetLogRecordsVariables
    >,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<
    Schemas.RestResponseVerificationNodeDataSetupResponse,
    GetLogRecordsError,
    GetLogRecordsVariables
  >((variables: GetLogRecordsVariables) => fetchGetLogRecords({ ...fetcherOptions, ...variables }), options)
}

export type GetProjectQueryParams = {
  appId?: string
  settingId?: string
}

export type GetProjectError = Fetcher.ErrorWrapper<undefined>

export type GetProjectVariables = {
  queryParams?: GetProjectQueryParams
} & PortalContext['fetcherOptions']

export const fetchGetProject = (variables: GetProjectVariables) =>
  portalFetch<Schemas.RestResponseString, GetProjectError, undefined, {}, GetProjectQueryParams, {}>({
    url: '/build-sources/project',
    method: 'get',
    ...variables
  })

export const useGetProject = (
  variables: GetProjectVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.RestResponseString, GetProjectError, Schemas.RestResponseString>,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<Schemas.RestResponseString, GetProjectError, Schemas.RestResponseString>(
    queryKeyFn({ path: '/build-sources/project', operationId: 'getProject', variables }),
    () => fetchGetProject({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type GetArtifactPathsPathParams = {
  jobName: string
}

export type GetArtifactPathsQueryParams = {
  appId?: string
  settingId?: string
  groupId?: string
  streamType?: string
  repositoryFormat?: string
}

export type GetArtifactPathsError = Fetcher.ErrorWrapper<undefined>

export type GetArtifactPathsVariables = {
  pathParams: GetArtifactPathsPathParams
  queryParams?: GetArtifactPathsQueryParams
} & PortalContext['fetcherOptions']

export const fetchGetArtifactPaths = (variables: GetArtifactPathsVariables) =>
  portalFetch<
    Schemas.RestResponseSetString,
    GetArtifactPathsError,
    undefined,
    {},
    GetArtifactPathsQueryParams,
    GetArtifactPathsPathParams
  >({ url: '/build-sources/jobs/{jobName}/paths', method: 'get', ...variables })

export const useGetArtifactPaths = (
  variables: GetArtifactPathsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.RestResponseSetString, GetArtifactPathsError, Schemas.RestResponseSetString>,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<Schemas.RestResponseSetString, GetArtifactPathsError, Schemas.RestResponseSetString>(
    queryKeyFn({ path: '/build-sources/jobs/{jobName}/paths', operationId: 'getArtifactPaths', variables }),
    () => fetchGetArtifactPaths({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type GetSmbPathsQueryParams = {
  appId?: string
  settingId?: string
}

export type GetSmbPathsError = Fetcher.ErrorWrapper<undefined>

export type GetSmbPathsVariables = {
  queryParams?: GetSmbPathsQueryParams
} & PortalContext['fetcherOptions']

export const fetchGetSmbPaths = (variables: GetSmbPathsVariables) =>
  portalFetch<Schemas.RestResponseListString, GetSmbPathsError, undefined, {}, GetSmbPathsQueryParams, {}>({
    url: '/build-sources/smb-paths',
    method: 'get',
    ...variables
  })

export const useGetSmbPaths = (
  variables: GetSmbPathsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.RestResponseListString, GetSmbPathsError, Schemas.RestResponseListString>,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<Schemas.RestResponseListString, GetSmbPathsError, Schemas.RestResponseListString>(
    queryKeyFn({ path: '/build-sources/smb-paths', operationId: 'getSmbPaths', variables }),
    () => fetchGetSmbPaths({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type GetGroupIdsPathParams = {
  jobName: string
}

export type GetGroupIdsQueryParams = {
  appId?: string
  settingId?: string
  repositoryFormat?: string
}

export type GetGroupIdsError = Fetcher.ErrorWrapper<undefined>

export type GetGroupIdsVariables = {
  pathParams: GetGroupIdsPathParams
  queryParams?: GetGroupIdsQueryParams
} & PortalContext['fetcherOptions']

export const fetchGetGroupIds = (variables: GetGroupIdsVariables) =>
  portalFetch<
    Schemas.RestResponseSetString,
    GetGroupIdsError,
    undefined,
    {},
    GetGroupIdsQueryParams,
    GetGroupIdsPathParams
  >({ url: '/build-sources/jobs/{jobName}/groupIds', method: 'get', ...variables })

export const useGetGroupIds = (
  variables: GetGroupIdsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.RestResponseSetString, GetGroupIdsError, Schemas.RestResponseSetString>,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<Schemas.RestResponseSetString, GetGroupIdsError, Schemas.RestResponseSetString>(
    queryKeyFn({ path: '/build-sources/jobs/{jobName}/groupIds', operationId: 'getGroupIds', variables }),
    () => fetchGetGroupIds({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type CollectArtifactQueryParams = {
  appId?: string
  artifactStreamId?: string
}

export type CollectArtifactError = Fetcher.ErrorWrapper<undefined>

export type CollectArtifactVariables = {
  body?: RequestBodies.BuildDetails
  queryParams?: CollectArtifactQueryParams
} & PortalContext['fetcherOptions']

export const fetchCollectArtifact = (variables: CollectArtifactVariables) =>
  portalFetch<
    Schemas.RestResponseArtifact,
    CollectArtifactError,
    RequestBodies.BuildDetails,
    {},
    CollectArtifactQueryParams,
    {}
  >({ url: '/build-sources', method: 'post', ...variables })

export const useCollectArtifact = (
  options?: Omit<
    reactQuery.UseMutationOptions<Schemas.RestResponseArtifact, CollectArtifactError, CollectArtifactVariables>,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<Schemas.RestResponseArtifact, CollectArtifactError, CollectArtifactVariables>(
    (variables: CollectArtifactVariables) => fetchCollectArtifact({ ...fetcherOptions, ...variables }),
    options
  )
}

export type GetJobsQueryParams = {
  appId?: string
  settingId?: string
  parentJobName?: string
}

export type GetJobsError = Fetcher.ErrorWrapper<undefined>

export type GetJobsVariables = {
  queryParams?: GetJobsQueryParams
} & PortalContext['fetcherOptions']

export const fetchGetJobs = (variables: GetJobsVariables) =>
  portalFetch<Schemas.RestResponseSetJobDetails, GetJobsError, undefined, {}, GetJobsQueryParams, {}>({
    url: '/build-sources/jobs',
    method: 'get',
    ...variables
  })

export const useGetJobs = (
  variables: GetJobsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.RestResponseSetJobDetails, GetJobsError, Schemas.RestResponseSetJobDetails>,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<Schemas.RestResponseSetJobDetails, GetJobsError, Schemas.RestResponseSetJobDetails>(
    queryKeyFn({ path: '/build-sources/jobs', operationId: 'getJobs', variables }),
    () => fetchGetJobs({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type GetJobPathParams = {
  jobName: string
}

export type GetJobQueryParams = {
  appId?: string
  settingId?: string
}

export type GetJobError = Fetcher.ErrorWrapper<undefined>

export type GetJobVariables = {
  pathParams: GetJobPathParams
  queryParams?: GetJobQueryParams
} & PortalContext['fetcherOptions']

export const fetchGetJob = (variables: GetJobVariables) =>
  portalFetch<Schemas.RestResponseJobDetails, GetJobError, undefined, {}, GetJobQueryParams, GetJobPathParams>({
    url: '/build-sources/jobs/{jobName}/details',
    method: 'get',
    ...variables
  })

export const useGetJob = (
  variables: GetJobVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.RestResponseJobDetails, GetJobError, Schemas.RestResponseJobDetails>,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<Schemas.RestResponseJobDetails, GetJobError, Schemas.RestResponseJobDetails>(
    queryKeyFn({ path: '/build-sources/jobs/{jobName}/details', operationId: 'getJob', variables }),
    () => fetchGetJob({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type GetBuildsQueryParams = {
  appId?: string
  artifactStreamId?: string
  settingId?: string
}

export type GetBuildsError = Fetcher.ErrorWrapper<undefined>

export type GetBuildsVariables = {
  queryParams?: GetBuildsQueryParams
} & PortalContext['fetcherOptions']

export const fetchGetBuilds = (variables: GetBuildsVariables) =>
  portalFetch<Schemas.RestResponseListBuildDetails, GetBuildsError, undefined, {}, GetBuildsQueryParams, {}>({
    url: '/build-sources/builds',
    method: 'get',
    ...variables
  })

export const useGetBuilds = (
  variables: GetBuildsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponseListBuildDetails,
      GetBuildsError,
      Schemas.RestResponseListBuildDetails
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponseListBuildDetails,
    GetBuildsError,
    Schemas.RestResponseListBuildDetails
  >(
    queryKeyFn({ path: '/build-sources/builds', operationId: 'getBuilds', variables }),
    () => fetchGetBuilds({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type ListProjectsQueryParams = {
  accountId?: string
  settingId?: string
}

export type ListProjectsError = Fetcher.ErrorWrapper<undefined>

export type ListProjectsVariables = {
  queryParams?: ListProjectsQueryParams
} & PortalContext['fetcherOptions']

export const fetchListProjects = (variables: ListProjectsVariables) =>
  portalFetch<
    Schemas.RestResponseListAzureDevopsProject,
    ListProjectsError,
    undefined,
    {},
    ListProjectsQueryParams,
    {}
  >({ url: '/build-sources/projects', method: 'get', ...variables })

export const useListProjects = (
  variables: ListProjectsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponseListAzureDevopsProject,
      ListProjectsError,
      Schemas.RestResponseListAzureDevopsProject
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponseListAzureDevopsProject,
    ListProjectsError,
    Schemas.RestResponseListAzureDevopsProject
  >(
    queryKeyFn({ path: '/build-sources/projects', operationId: 'listProjects', variables }),
    () => fetchListProjects({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type ListFeedsQueryParams = {
  accountId?: string
  settingId?: string
  project?: string
}

export type ListFeedsError = Fetcher.ErrorWrapper<undefined>

export type ListFeedsVariables = {
  queryParams?: ListFeedsQueryParams
} & PortalContext['fetcherOptions']

export const fetchListFeeds = (variables: ListFeedsVariables) =>
  portalFetch<Schemas.RestResponseListAzureArtifactsFeed, ListFeedsError, undefined, {}, ListFeedsQueryParams, {}>({
    url: '/build-sources/feeds',
    method: 'get',
    ...variables
  })

export const useListFeeds = (
  variables: ListFeedsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponseListAzureArtifactsFeed,
      ListFeedsError,
      Schemas.RestResponseListAzureArtifactsFeed
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponseListAzureArtifactsFeed,
    ListFeedsError,
    Schemas.RestResponseListAzureArtifactsFeed
  >(
    queryKeyFn({ path: '/build-sources/feeds', operationId: 'listFeeds', variables }),
    () => fetchListFeeds({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type ListPackagesPathParams = {
  feed: string
}

export type ListPackagesQueryParams = {
  accountId?: string
  settingId?: string
  project?: string
  protocolType?: string
}

export type ListPackagesError = Fetcher.ErrorWrapper<undefined>

export type ListPackagesVariables = {
  pathParams: ListPackagesPathParams
  queryParams?: ListPackagesQueryParams
} & PortalContext['fetcherOptions']

export const fetchListPackages = (variables: ListPackagesVariables) =>
  portalFetch<
    Schemas.RestResponseListAzureArtifactsPackage,
    ListPackagesError,
    undefined,
    {},
    ListPackagesQueryParams,
    ListPackagesPathParams
  >({ url: '/build-sources/feeds/{feed}/packages', method: 'get', ...variables })

export const useListPackages = (
  variables: ListPackagesVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponseListAzureArtifactsPackage,
      ListPackagesError,
      Schemas.RestResponseListAzureArtifactsPackage
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponseListAzureArtifactsPackage,
    ListPackagesError,
    Schemas.RestResponseListAzureArtifactsPackage
  >(
    queryKeyFn({ path: '/build-sources/feeds/{feed}/packages', operationId: 'listPackages', variables }),
    () => fetchListPackages({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type GetBucketsQueryParams = {
  appId?: string
  projectId?: string
  settingId?: string
}

export type GetBucketsError = Fetcher.ErrorWrapper<undefined>

export type GetBucketsVariables = {
  queryParams?: GetBucketsQueryParams
} & PortalContext['fetcherOptions']

export const fetchGetBuckets = (variables: GetBucketsVariables) =>
  portalFetch<Schemas.RestResponseMapStringString, GetBucketsError, undefined, {}, GetBucketsQueryParams, {}>({
    url: '/build-sources/buckets',
    method: 'get',
    ...variables
  })

export const useGetBuckets = (
  variables: GetBucketsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponseMapStringString,
      GetBucketsError,
      Schemas.RestResponseMapStringString
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<Schemas.RestResponseMapStringString, GetBucketsError, Schemas.RestResponseMapStringString>(
    queryKeyFn({ path: '/build-sources/buckets', operationId: 'getBuckets', variables }),
    () => fetchGetBuckets({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type GetBuildPlansQueryParams = {
  appId?: string
  settingId?: string
  serviceId?: string
  streamType?: string
  repositoryType?: string
  repositoryFormat?: string
}

export type GetBuildPlansError = Fetcher.ErrorWrapper<undefined>

export type GetBuildPlansVariables = {
  queryParams?: GetBuildPlansQueryParams
} & PortalContext['fetcherOptions']

export const fetchGetBuildPlans = (variables: GetBuildPlansVariables) =>
  portalFetch<Schemas.RestResponseMapStringString, GetBuildPlansError, undefined, {}, GetBuildPlansQueryParams, {}>({
    url: '/build-sources/plans',
    method: 'get',
    ...variables
  })

export const useGetBuildPlans = (
  variables: GetBuildPlansVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponseMapStringString,
      GetBuildPlansError,
      Schemas.RestResponseMapStringString
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponseMapStringString,
    GetBuildPlansError,
    Schemas.RestResponseMapStringString
  >(
    queryKeyFn({ path: '/build-sources/plans', operationId: 'getBuildPlans', variables }),
    () => fetchGetBuildPlans({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type GetSftpPathsQueryParams = {
  appId?: string
  settingId?: string
  streamType?: string
}

export type GetSftpPathsError = Fetcher.ErrorWrapper<undefined>

export type GetSftpPathsVariables = {
  queryParams?: GetSftpPathsQueryParams
} & PortalContext['fetcherOptions']

export const fetchGetSftpPaths = (variables: GetSftpPathsVariables) =>
  portalFetch<Schemas.RestResponseListString, GetSftpPathsError, undefined, {}, GetSftpPathsQueryParams, {}>({
    url: '/build-sources/artifact-paths',
    method: 'get',
    ...variables
  })

export const useGetSftpPaths = (
  variables: GetSftpPathsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.RestResponseListString, GetSftpPathsError, Schemas.RestResponseListString>,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<Schemas.RestResponseListString, GetSftpPathsError, Schemas.RestResponseListString>(
    queryKeyFn({ path: '/build-sources/artifact-paths', operationId: 'getSftpPaths', variables }),
    () => fetchGetSftpPaths({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type FetchPackageNamesPathParams = {
  repositoryName: string
}

export type FetchPackageNamesQueryParams = {
  appId?: string
  repositoryFormat?: string
  settingId?: string
}

export type FetchPackageNamesError = Fetcher.ErrorWrapper<undefined>

export type FetchPackageNamesVariables = {
  pathParams: FetchPackageNamesPathParams
  queryParams?: FetchPackageNamesQueryParams
} & PortalContext['fetcherOptions']

export const fetchFetchPackageNames = (variables: FetchPackageNamesVariables) =>
  portalFetch<
    Schemas.RestResponseSetString,
    FetchPackageNamesError,
    undefined,
    {},
    FetchPackageNamesQueryParams,
    FetchPackageNamesPathParams
  >({ url: '/build-sources/nexus/repositories/{repositoryName}/packageNames', method: 'get', ...variables })

export const useFetchPackageNames = (
  variables: FetchPackageNamesVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.RestResponseSetString, FetchPackageNamesError, Schemas.RestResponseSetString>,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<Schemas.RestResponseSetString, FetchPackageNamesError, Schemas.RestResponseSetString>(
    queryKeyFn({
      path: '/build-sources/nexus/repositories/{repositoryName}/packageNames',
      operationId: 'fetchPackageNames',
      variables
    }),
    () => fetchFetchPackageNames({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type GetTriggersQueryParams = {
  accountId?: string
  settingId?: string
}

export type GetTriggersError = Fetcher.ErrorWrapper<undefined>

export type GetTriggersVariables = {
  queryParams?: GetTriggersQueryParams
} & PortalContext['fetcherOptions']

export const fetchGetTriggers = (variables: GetTriggersVariables) =>
  portalFetch<Schemas.RestResponseListString, GetTriggersError, undefined, {}, GetTriggersQueryParams, {}>({
    url: '/build-sources/gcb-triggers',
    method: 'get',
    ...variables
  })

export const useGetTriggers = (
  variables: GetTriggersVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.RestResponseListString, GetTriggersError, Schemas.RestResponseListString>,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<Schemas.RestResponseListString, GetTriggersError, Schemas.RestResponseListString>(
    queryKeyFn({ path: '/build-sources/gcb-triggers', operationId: 'getTriggers', variables }),
    () => fetchGetTriggers({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type GetEntriesEnabledViaEmailsPathParams = {
  accountId: string
}

export type GetEntriesEnabledViaEmailsError = Fetcher.ErrorWrapper<undefined>

export type GetEntriesEnabledViaEmailsVariables = {
  pathParams: GetEntriesEnabledViaEmailsPathParams
} & PortalContext['fetcherOptions']

export const fetchGetEntriesEnabledViaEmails = (variables: GetEntriesEnabledViaEmailsVariables) =>
  portalFetch<
    Schemas.RestResponse,
    GetEntriesEnabledViaEmailsError,
    undefined,
    {},
    {},
    GetEntriesEnabledViaEmailsPathParams
  >({ url: '/ceCommunications/{accountId}', method: 'get', ...variables })

export const useGetEntriesEnabledViaEmails = (
  variables: GetEntriesEnabledViaEmailsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.RestResponse, GetEntriesEnabledViaEmailsError, Schemas.RestResponse>,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<Schemas.RestResponse, GetEntriesEnabledViaEmailsError, Schemas.RestResponse>(
    queryKeyFn({ path: '/ceCommunications/{accountId}', operationId: 'getEntriesEnabledViaEmails', variables }),
    () => fetchGetEntriesEnabledViaEmails({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type EnableViaEmailPathParams = {
  accountId: string
}

export type EnableViaEmailQueryParams = {
  type?: 'WEEKLY_REPORT'
  email?: string
  enable?: boolean
}

export type EnableViaEmailError = Fetcher.ErrorWrapper<undefined>

export type EnableViaEmailVariables = {
  pathParams: EnableViaEmailPathParams
  queryParams?: EnableViaEmailQueryParams
} & PortalContext['fetcherOptions']

export const fetchEnableViaEmail = (variables: EnableViaEmailVariables) =>
  portalFetch<
    Schemas.RestResponse,
    EnableViaEmailError,
    undefined,
    {},
    EnableViaEmailQueryParams,
    EnableViaEmailPathParams
  >({ url: '/ceCommunications/{accountId}', method: 'post', ...variables })

export const useEnableViaEmail = (
  options?: Omit<
    reactQuery.UseMutationOptions<Schemas.RestResponse, EnableViaEmailError, EnableViaEmailVariables>,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<Schemas.RestResponse, EnableViaEmailError, EnableViaEmailVariables>(
    (variables: EnableViaEmailVariables) => fetchEnableViaEmail({ ...fetcherOptions, ...variables }),
    options
  )
}

export type RemoveEmailPathParams = {
  accountId: string
}

export type RemoveEmailQueryParams = {
  type?: 'WEEKLY_REPORT'
  email?: string
}

export type RemoveEmailError = Fetcher.ErrorWrapper<undefined>

export type RemoveEmailVariables = {
  pathParams: RemoveEmailPathParams
  queryParams?: RemoveEmailQueryParams
} & PortalContext['fetcherOptions']

export const fetchRemoveEmail = (variables: RemoveEmailVariables) =>
  portalFetch<Schemas.RestResponse, RemoveEmailError, undefined, {}, RemoveEmailQueryParams, RemoveEmailPathParams>({
    url: '/ceCommunications/{accountId}',
    method: 'delete',
    ...variables
  })

export const useRemoveEmail = (
  options?: Omit<
    reactQuery.UseMutationOptions<Schemas.RestResponse, RemoveEmailError, RemoveEmailVariables>,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<Schemas.RestResponse, RemoveEmailError, RemoveEmailVariables>(
    (variables: RemoveEmailVariables) => fetchRemoveEmail({ ...fetcherOptions, ...variables }),
    options
  )
}

export type Get9QueryParams = {
  accountId?: string
}

export type Get9Error = Fetcher.ErrorWrapper<undefined>

export type Get9Variables = {
  queryParams?: Get9QueryParams
} & PortalContext['fetcherOptions']

export const fetchGet9 = (variables: Get9Variables) =>
  portalFetch<Schemas.RestResponseListCECommunications, Get9Error, undefined, {}, Get9QueryParams, {}>({
    url: '/ceCommunications',
    method: 'get',
    ...variables
  })

export const useGet9 = (
  variables: Get9Variables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponseListCECommunications,
      Get9Error,
      Schemas.RestResponseListCECommunications
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponseListCECommunications,
    Get9Error,
    Schemas.RestResponseListCECommunications
  >(
    queryKeyFn({ path: '/ceCommunications', operationId: 'get9', variables }),
    () => fetchGet9({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type Update7QueryParams = {
  accountId?: string
  type?: 'WEEKLY_REPORT'
  enable?: boolean
}

export type Update7Error = Fetcher.ErrorWrapper<undefined>

export type Update7Variables = {
  queryParams?: Update7QueryParams
} & PortalContext['fetcherOptions']

export const fetchUpdate7 = (variables: Update7Variables) =>
  portalFetch<Schemas.RestResponse, Update7Error, undefined, {}, Update7QueryParams, {}>({
    url: '/ceCommunications',
    method: 'post',
    ...variables
  })

export const useUpdate7 = (
  options?: Omit<reactQuery.UseMutationOptions<Schemas.RestResponse, Update7Error, Update7Variables>, 'mutationFn'>
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<Schemas.RestResponse, Update7Error, Update7Variables>(
    (variables: Update7Variables) => fetchUpdate7({ ...fetcherOptions, ...variables }),
    options
  )
}

export type AddMultipleEmailPathParams = {
  accountId: string
}

export type AddMultipleEmailQueryParams = {
  type?: 'WEEKLY_REPORT'
}

export type AddMultipleEmailError = Fetcher.ErrorWrapper<undefined>

export type AddMultipleEmailVariables = {
  body?: RequestBodies.UpdateWhitelistedDomainsBody
  pathParams: AddMultipleEmailPathParams
  queryParams?: AddMultipleEmailQueryParams
} & PortalContext['fetcherOptions']

export const fetchAddMultipleEmail = (variables: AddMultipleEmailVariables) =>
  portalFetch<
    Schemas.RestResponse,
    AddMultipleEmailError,
    RequestBodies.UpdateWhitelistedDomainsBody,
    {},
    AddMultipleEmailQueryParams,
    AddMultipleEmailPathParams
  >({ url: '/ceCommunications/{accountId}/addEmails', method: 'post', ...variables })

export const useAddMultipleEmail = (
  options?: Omit<
    reactQuery.UseMutationOptions<Schemas.RestResponse, AddMultipleEmailError, AddMultipleEmailVariables>,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<Schemas.RestResponse, AddMultipleEmailError, AddMultipleEmailVariables>(
    (variables: AddMultipleEmailVariables) => fetchAddMultipleEmail({ ...fetcherOptions, ...variables }),
    options
  )
}

export type EnableViaEmailInternalPathParams = {
  accountId: string
}

export type EnableViaEmailInternalQueryParams = {
  targetAccount?: string
  type?: 'WEEKLY_REPORT'
  email?: string
}

export type EnableViaEmailInternalError = Fetcher.ErrorWrapper<undefined>

export type EnableViaEmailInternalVariables = {
  pathParams: EnableViaEmailInternalPathParams
  queryParams?: EnableViaEmailInternalQueryParams
} & PortalContext['fetcherOptions']

export const fetchEnableViaEmailInternal = (variables: EnableViaEmailInternalVariables) =>
  portalFetch<
    Schemas.RestResponse,
    EnableViaEmailInternalError,
    undefined,
    {},
    EnableViaEmailInternalQueryParams,
    EnableViaEmailInternalPathParams
  >({ url: '/ceCommunications/{accountId}/internal', method: 'post', ...variables })

export const useEnableViaEmailInternal = (
  options?: Omit<
    reactQuery.UseMutationOptions<Schemas.RestResponse, EnableViaEmailInternalError, EnableViaEmailInternalVariables>,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<Schemas.RestResponse, EnableViaEmailInternalError, EnableViaEmailInternalVariables>(
    (variables: EnableViaEmailInternalVariables) => fetchEnableViaEmailInternal({ ...fetcherOptions, ...variables }),
    options
  )
}

export type RemoveEmailInternalPathParams = {
  accountId: string
}

export type RemoveEmailInternalQueryParams = {
  targetAccount?: string
  type?: 'WEEKLY_REPORT'
  email?: string
}

export type RemoveEmailInternalError = Fetcher.ErrorWrapper<undefined>

export type RemoveEmailInternalVariables = {
  pathParams: RemoveEmailInternalPathParams
  queryParams?: RemoveEmailInternalQueryParams
} & PortalContext['fetcherOptions']

export const fetchRemoveEmailInternal = (variables: RemoveEmailInternalVariables) =>
  portalFetch<
    Schemas.RestResponse,
    RemoveEmailInternalError,
    undefined,
    {},
    RemoveEmailInternalQueryParams,
    RemoveEmailInternalPathParams
  >({ url: '/ceCommunications/{accountId}/internal', method: 'delete', ...variables })

export const useRemoveEmailInternal = (
  options?: Omit<
    reactQuery.UseMutationOptions<Schemas.RestResponse, RemoveEmailInternalError, RemoveEmailInternalVariables>,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<Schemas.RestResponse, RemoveEmailInternalError, RemoveEmailInternalVariables>(
    (variables: RemoveEmailInternalVariables) => fetchRemoveEmailInternal({ ...fetcherOptions, ...variables }),
    options
  )
}

export type UnsubscribePathParams = {
  id: string
}

export type UnsubscribeError = Fetcher.ErrorWrapper<undefined>

export type UnsubscribeVariables = {
  pathParams: UnsubscribePathParams
} & PortalContext['fetcherOptions']

export const fetchUnsubscribe = (variables: UnsubscribeVariables) =>
  portalFetch<Schemas.RestResponse, UnsubscribeError, undefined, {}, {}, UnsubscribePathParams>({
    url: '/ceMailUnsubscribe/{id}',
    method: 'post',
    ...variables
  })

export const useUnsubscribe = (
  options?: Omit<
    reactQuery.UseMutationOptions<Schemas.RestResponse, UnsubscribeError, UnsubscribeVariables>,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<Schemas.RestResponse, UnsubscribeError, UnsubscribeVariables>(
    (variables: UnsubscribeVariables) => fetchUnsubscribe({ ...fetcherOptions, ...variables }),
    options
  )
}

export type GetReportSettingPathParams = {
  accountId: string
}

export type GetReportSettingQueryParams = {
  viewId?: string
  reportId?: string
}

export type GetReportSettingError = Fetcher.ErrorWrapper<undefined>

export type GetReportSettingVariables = {
  pathParams: GetReportSettingPathParams
  queryParams?: GetReportSettingQueryParams
} & PortalContext['fetcherOptions']

export const fetchGetReportSetting = (variables: GetReportSettingVariables) =>
  portalFetch<undefined, GetReportSettingError, undefined, {}, GetReportSettingQueryParams, GetReportSettingPathParams>(
    { url: '/ceReportSchedule/{accountId}', method: 'get', ...variables }
  )

export const useGetReportSetting = (
  variables: GetReportSettingVariables,
  options?: Omit<reactQuery.UseQueryOptions<undefined, GetReportSettingError, undefined>, 'queryKey' | 'queryFn'>
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<undefined, GetReportSettingError, undefined>(
    queryKeyFn({ path: '/ceReportSchedule/{accountId}', operationId: 'getReportSetting', variables }),
    () => fetchGetReportSetting({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type CreateReportSettingPathParams = {
  accountId: string
}

export type CreateReportSettingError = Fetcher.ErrorWrapper<undefined>

export type CreateReportSettingVariables = {
  body: RequestBodies.CEReportSchedule
  pathParams: CreateReportSettingPathParams
} & PortalContext['fetcherOptions']

export const fetchCreateReportSetting = (variables: CreateReportSettingVariables) =>
  portalFetch<
    undefined,
    CreateReportSettingError,
    RequestBodies.CEReportSchedule,
    {},
    {},
    CreateReportSettingPathParams
  >({ url: '/ceReportSchedule/{accountId}', method: 'post', ...variables })

export const useCreateReportSetting = (
  options?: Omit<
    reactQuery.UseMutationOptions<undefined, CreateReportSettingError, CreateReportSettingVariables>,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<undefined, CreateReportSettingError, CreateReportSettingVariables>(
    (variables: CreateReportSettingVariables) => fetchCreateReportSetting({ ...fetcherOptions, ...variables }),
    options
  )
}

export type UpdateReportSettingPathParams = {
  accountId: string
}

export type UpdateReportSettingError = Fetcher.ErrorWrapper<undefined>

export type UpdateReportSettingVariables = {
  body: RequestBodies.CEReportSchedule
  pathParams: UpdateReportSettingPathParams
} & PortalContext['fetcherOptions']

export const fetchUpdateReportSetting = (variables: UpdateReportSettingVariables) =>
  portalFetch<
    undefined,
    UpdateReportSettingError,
    RequestBodies.CEReportSchedule,
    {},
    {},
    UpdateReportSettingPathParams
  >({ url: '/ceReportSchedule/{accountId}', method: 'put', ...variables })

export const useUpdateReportSetting = (
  options?: Omit<
    reactQuery.UseMutationOptions<undefined, UpdateReportSettingError, UpdateReportSettingVariables>,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<undefined, UpdateReportSettingError, UpdateReportSettingVariables>(
    (variables: UpdateReportSettingVariables) => fetchUpdateReportSetting({ ...fetcherOptions, ...variables }),
    options
  )
}

export type DeleteReportSettingPathParams = {
  accountId: string
}

export type DeleteReportSettingQueryParams = {
  reportId?: string
  viewId?: string
}

export type DeleteReportSettingError = Fetcher.ErrorWrapper<undefined>

export type DeleteReportSettingVariables = {
  pathParams: DeleteReportSettingPathParams
  queryParams?: DeleteReportSettingQueryParams
} & PortalContext['fetcherOptions']

export const fetchDeleteReportSetting = (variables: DeleteReportSettingVariables) =>
  portalFetch<
    undefined,
    DeleteReportSettingError,
    undefined,
    {},
    DeleteReportSettingQueryParams,
    DeleteReportSettingPathParams
  >({ url: '/ceReportSchedule/{accountId}', method: 'delete', ...variables })

export const useDeleteReportSetting = (
  options?: Omit<
    reactQuery.UseMutationOptions<undefined, DeleteReportSettingError, DeleteReportSettingVariables>,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<undefined, DeleteReportSettingError, DeleteReportSettingVariables>(
    (variables: DeleteReportSettingVariables) => fetchDeleteReportSetting({ ...fetcherOptions, ...variables }),
    options
  )
}

export type SendReportPathParams = {
  accountId: string
}

export type SendReportQueryParams = {
  viewId?: string
}

export type SendReportError = Fetcher.ErrorWrapper<undefined>

export type SendReportVariables = {
  body?: RequestBodies.UpdateWhitelistedDomainsBody
  pathParams: SendReportPathParams
  queryParams?: SendReportQueryParams
} & PortalContext['fetcherOptions']

export const fetchSendReport = (variables: SendReportVariables) =>
  portalFetch<
    undefined,
    SendReportError,
    RequestBodies.UpdateWhitelistedDomainsBody,
    {},
    SendReportQueryParams,
    SendReportPathParams
  >({ url: '/ceReportSchedule/{accountId}/sendReport', method: 'post', ...variables })

export const useSendReport = (
  options?: Omit<reactQuery.UseMutationOptions<undefined, SendReportError, SendReportVariables>, 'mutationFn'>
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<undefined, SendReportError, SendReportVariables>(
    (variables: SendReportVariables) => fetchSendReport({ ...fetcherOptions, ...variables }),
    options
  )
}

export type Get10QueryParams = {
  accountId?: string
}

export type Get10Error = Fetcher.ErrorWrapper<undefined>

export type Get10Variables = {
  queryParams?: Get10QueryParams
} & PortalContext['fetcherOptions']

export const fetchGet10 = (variables: Get10Variables) =>
  portalFetch<Schemas.RestResponseCESlackWebhook, Get10Error, undefined, {}, Get10QueryParams, {}>({
    url: '/ceSlackWebhooks',
    method: 'get',
    ...variables
  })

export const useGet10 = (
  variables: Get10Variables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.RestResponseCESlackWebhook, Get10Error, Schemas.RestResponseCESlackWebhook>,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<Schemas.RestResponseCESlackWebhook, Get10Error, Schemas.RestResponseCESlackWebhook>(
    queryKeyFn({ path: '/ceSlackWebhooks', operationId: 'get10', variables }),
    () => fetchGet10({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type Save4QueryParams = {
  accountId?: string
}

export type Save4Error = Fetcher.ErrorWrapper<undefined>

export type Save4Variables = {
  body?: Schemas.CESlackWebhook
  queryParams?: Save4QueryParams
} & PortalContext['fetcherOptions']

export const fetchSave4 = (variables: Save4Variables) =>
  portalFetch<Schemas.RestResponseCESlackWebhook, Save4Error, Schemas.CESlackWebhook, {}, Save4QueryParams, {}>({
    url: '/ceSlackWebhooks',
    method: 'post',
    ...variables
  })

export const useSave4 = (
  options?: Omit<
    reactQuery.UseMutationOptions<Schemas.RestResponseCESlackWebhook, Save4Error, Save4Variables>,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<Schemas.RestResponseCESlackWebhook, Save4Error, Save4Variables>(
    (variables: Save4Variables) => fetchSave4({ ...fetcherOptions, ...variables }),
    options
  )
}

export type GetActivityLogsQueryParams = {
  accountId?: string
  stateExecutionId?: string
  cvConfigId?: string
  /*
   * @format int64
   */
  startTime?: number
  /*
   * @format int64
   */
  endTime?: number
}

export type GetActivityLogsError = Fetcher.ErrorWrapper<undefined>

export type GetActivityLogsVariables = {
  queryParams?: GetActivityLogsQueryParams
} & PortalContext['fetcherOptions']

export const fetchGetActivityLogs = (variables: GetActivityLogsVariables) =>
  portalFetch<
    Schemas.RestResponseListCVActivityLog,
    GetActivityLogsError,
    undefined,
    {},
    GetActivityLogsQueryParams,
    {}
  >({ url: '/cv-activity-logs', method: 'get', ...variables })

export const useGetActivityLogs = (
  variables: GetActivityLogsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponseListCVActivityLog,
      GetActivityLogsError,
      Schemas.RestResponseListCVActivityLog
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponseListCVActivityLog,
    GetActivityLogsError,
    Schemas.RestResponseListCVActivityLog
  >(
    queryKeyFn({ path: '/cv-activity-logs', operationId: 'getActivityLogs', variables }),
    () => fetchGetActivityLogs({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type GetConfigurationPathParams = {
  serviceConfigurationId: string
}

export type GetConfigurationQueryParams = {
  accountId?: string
}

export type GetConfigurationError = Fetcher.ErrorWrapper<undefined>

export type GetConfigurationVariables = {
  pathParams: GetConfigurationPathParams
  queryParams?: GetConfigurationQueryParams
} & PortalContext['fetcherOptions']

export const fetchGetConfiguration = (variables: GetConfigurationVariables) =>
  portalFetch<
    Schemas.RestResponseCVConfiguration,
    GetConfigurationError,
    undefined,
    {},
    GetConfigurationQueryParams,
    GetConfigurationPathParams
  >({ url: '/cv-configuration/{serviceConfigurationId}', method: 'get', ...variables })

export const useGetConfiguration = (
  variables: GetConfigurationVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponseCVConfiguration,
      GetConfigurationError,
      Schemas.RestResponseCVConfiguration
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponseCVConfiguration,
    GetConfigurationError,
    Schemas.RestResponseCVConfiguration
  >(
    queryKeyFn({ path: '/cv-configuration/{serviceConfigurationId}', operationId: 'getConfiguration', variables }),
    () => fetchGetConfiguration({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type UpdateCVConfigurationPathParams = {
  serviceConfigurationId: string
}

export type UpdateCVConfigurationQueryParams = {
  accountId?: string
  appId?: string
  stateType?:
    | 'SUB_WORKFLOW'
    | 'REPEAT'
    | 'FORK'
    | 'WAIT'
    | 'PAUSE'
    | 'BARRIER'
    | 'RESOURCE_CONSTRAINT'
    | 'SHELL_SCRIPT'
    | 'HTTP'
    | 'TEMPLATIZED_SECRET_MANAGER'
    | 'EMAIL'
    | 'APP_DYNAMICS'
    | 'NEW_RELIC'
    | 'NEW_RELIC_DEPLOYMENT_MARKER'
    | 'DYNA_TRACE'
    | 'PROMETHEUS'
    | 'SPLUNKV2'
    | 'ELK'
    | 'LOGZ'
    | 'SUMO'
    | 'DATA_DOG'
    | 'DATA_DOG_LOG'
    | 'CVNG'
    | 'CLOUD_WATCH'
    | 'AWS_LAMBDA_VERIFICATION'
    | 'APM_VERIFICATION'
    | 'LOG_VERIFICATION'
    | 'BUG_SNAG'
    | 'STACK_DRIVER'
    | 'STACK_DRIVER_LOG'
    | 'INSTANA'
    | 'SCALYR'
    | 'ENV_STATE'
    | 'ENV_LOOP_STATE'
    | 'ENV_RESUME_STATE'
    | 'ENV_LOOP_RESUME_STATE'
    | 'COMMAND'
    | 'APPROVAL'
    | 'APPROVAL_RESUME'
    | 'ELASTIC_LOAD_BALANCER'
    | 'JENKINS'
    | 'GCB'
    | 'BAMBOO'
    | 'ARTIFACT_COLLECTION'
    | 'ARTIFACT_CHECK'
    | 'AZURE_NODE_SELECT'
    | 'AZURE_VMSS_SETUP'
    | 'AZURE_VMSS_DEPLOY'
    | 'AZURE_VMSS_ROLLBACK'
    | 'AZURE_VMSS_SWITCH_ROUTES'
    | 'AZURE_VMSS_SWITCH_ROUTES_ROLLBACK'
    | 'AZURE_WEBAPP_SLOT_SETUP'
    | 'AZURE_WEBAPP_SLOT_SWAP'
    | 'AZURE_WEBAPP_SLOT_SHIFT_TRAFFIC'
    | 'AZURE_WEBAPP_SLOT_ROLLBACK'
    | 'AWS_NODE_SELECT'
    | 'DC_NODE_SELECT'
    | 'ROLLING_NODE_SELECT'
    | 'PHASE'
    | 'PHASE_STEP'
    | 'STAGING_ORIGINAL_EXECUTION'
    | 'AWS_CODEDEPLOY_STATE'
    | 'AWS_CODEDEPLOY_ROLLBACK'
    | 'AWS_LAMBDA_STATE'
    | 'AWS_LAMBDA_ROLLBACK'
    | 'AWS_AMI_SERVICE_SETUP'
    | 'ASG_AMI_SERVICE_ALB_SHIFT_SETUP'
    | 'AWS_AMI_SERVICE_DEPLOY'
    | 'ASG_AMI_SERVICE_ALB_SHIFT_DEPLOY'
    | 'AWS_AMI_SWITCH_ROUTES'
    | 'ASG_AMI_ALB_SHIFT_SWITCH_ROUTES'
    | 'AWS_AMI_ROLLBACK_SWITCH_ROUTES'
    | 'ASG_AMI_ROLLBACK_ALB_SHIFT_SWITCH_ROUTES'
    | 'AWS_AMI_SERVICE_ROLLBACK'
    | 'ECS_SERVICE_SETUP'
    | 'SPOTINST_SETUP'
    | 'SPOTINST_ALB_SHIFT_SETUP'
    | 'SPOTINST_DEPLOY'
    | 'SPOTINST_ALB_SHIFT_DEPLOY'
    | 'SPOTINST_LISTENER_UPDATE'
    | 'SPOTINST_LISTENER_ALB_SHIFT'
    | 'SPOTINST_ROLLBACK'
    | 'SPOTINST_LISTENER_UPDATE_ROLLBACK'
    | 'SPOTINST_LISTENER_ALB_SHIFT_ROLLBACK'
    | 'ECS_SERVICE_SETUP_ROLLBACK'
    | 'ECS_DAEMON_SERVICE_SETUP'
    | 'ECS_BG_SERVICE_SETUP'
    | 'ECS_BG_SERVICE_SETUP_ROUTE53'
    | 'ECS_SERVICE_DEPLOY'
    | 'ECS_SERVICE_ROLLBACK'
    | 'ECS_LISTENER_UPDATE'
    | 'ECS_LISTENER_UPDATE_ROLLBACK'
    | 'ECS_ROUTE53_DNS_WEIGHT_UPDATE'
    | 'ECS_ROUTE53_DNS_WEIGHT_UPDATE_ROLLBACK'
    | 'KUBERNETES_SETUP'
    | 'KUBERNETES_SETUP_ROLLBACK'
    | 'KUBERNETES_DEPLOY'
    | 'KUBERNETES_DEPLOY_ROLLBACK'
    | 'KUBERNETES_STEADY_STATE_CHECK'
    | 'ECS_STEADY_STATE_CHECK'
    | 'ECS_RUN_TASK'
    | 'GCP_CLUSTER_SETUP'
    | 'HELM_DEPLOY'
    | 'HELM_ROLLBACK'
    | 'PCF_SETUP'
    | 'PCF_RESIZE'
    | 'PCF_ROLLBACK'
    | 'PCF_MAP_ROUTE'
    | 'PCF_UNMAP_ROUTE'
    | 'PCF_BG_MAP_ROUTE'
    | 'PCF_PLUGIN'
    | 'TERRAFORM_PROVISION'
    | 'TERRAFORM_APPLY'
    | 'TERRAGRUNT_PROVISION'
    | 'TERRAGRUNT_DESTROY'
    | 'TERRAGRUNT_ROLLBACK'
    | 'ARM_CREATE_RESOURCE'
    | 'ARM_ROLLBACK'
    | 'SHELL_SCRIPT_PROVISION'
    | 'TERRAFORM_DESTROY'
    | 'CLOUD_FORMATION_CREATE_STACK'
    | 'CLOUD_FORMATION_DELETE_STACK'
    | 'KUBERNETES_SWAP_SERVICE_SELECTORS'
    | 'CLOUD_FORMATION_ROLLBACK_STACK'
    | 'TERRAFORM_ROLLBACK'
    | 'K8S_DEPLOYMENT_ROLLING'
    | 'K8S_SCALE'
    | 'K8S_DEPLOYMENT_ROLLING_ROLLBACK'
    | 'K8S_BLUE_GREEN_DEPLOY'
    | 'K8S_CANARY_DEPLOY'
    | 'K8S_DELETE'
    | 'RANCHER_RESOLVE'
    | 'RANCHER_K8S_DEPLOYMENT_ROLLING'
    | 'RANCHER_K8S_CANARY_DEPLOY'
    | 'RANCHER_K8S_BLUE_GREEN_DEPLOY'
    | 'RANCHER_KUBERNETES_SWAP_SERVICE_SELECTORS'
    | 'RANCHER_K8S_DELETE'
    | 'RANCHER_K8S_DEPLOYMENT_ROLLING_ROLLBACK'
    | 'JIRA_CREATE_UPDATE'
    | 'SERVICENOW_CREATE_UPDATE'
    | 'K8S_TRAFFIC_SPLIT'
    | 'K8S_APPLY'
    | 'CUSTOM_DEPLOYMENT_FETCH_INSTANCES'
}

export type UpdateCVConfigurationError = Fetcher.ErrorWrapper<undefined>

export type UpdateCVConfigurationVariables = {
  body?: RequestBodies.UpdateAccountPreferenceBody
  pathParams: UpdateCVConfigurationPathParams
  queryParams?: UpdateCVConfigurationQueryParams
} & PortalContext['fetcherOptions']

export const fetchUpdateCVConfiguration = (variables: UpdateCVConfigurationVariables) =>
  portalFetch<
    Schemas.RestResponseString,
    UpdateCVConfigurationError,
    RequestBodies.UpdateAccountPreferenceBody,
    {},
    UpdateCVConfigurationQueryParams,
    UpdateCVConfigurationPathParams
  >({ url: '/cv-configuration/{serviceConfigurationId}', method: 'put', ...variables })

export const useUpdateCVConfiguration = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.RestResponseString,
      UpdateCVConfigurationError,
      UpdateCVConfigurationVariables
    >,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<Schemas.RestResponseString, UpdateCVConfigurationError, UpdateCVConfigurationVariables>(
    (variables: UpdateCVConfigurationVariables) => fetchUpdateCVConfiguration({ ...fetcherOptions, ...variables }),
    options
  )
}

export type DeleteCVConfigurationPathParams = {
  serviceConfigurationId: string
}

export type DeleteCVConfigurationQueryParams = {
  accountId?: string
  appId?: string
}

export type DeleteCVConfigurationError = Fetcher.ErrorWrapper<undefined>

export type DeleteCVConfigurationVariables = {
  pathParams: DeleteCVConfigurationPathParams
  queryParams?: DeleteCVConfigurationQueryParams
} & PortalContext['fetcherOptions']

export const fetchDeleteCVConfiguration = (variables: DeleteCVConfigurationVariables) =>
  portalFetch<
    Schemas.RestResponseBoolean,
    DeleteCVConfigurationError,
    undefined,
    {},
    DeleteCVConfigurationQueryParams,
    DeleteCVConfigurationPathParams
  >({ url: '/cv-configuration/{serviceConfigurationId}', method: 'delete', ...variables })

export const useDeleteCVConfiguration = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.RestResponseBoolean,
      DeleteCVConfigurationError,
      DeleteCVConfigurationVariables
    >,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<
    Schemas.RestResponseBoolean,
    DeleteCVConfigurationError,
    DeleteCVConfigurationVariables
  >(
    (variables: DeleteCVConfigurationVariables) => fetchDeleteCVConfiguration({ ...fetcherOptions, ...variables }),
    options
  )
}

export type ListConfigurations1QueryParams = {
  accountId?: string
  appId?: string
  envId?: string
  stateType?:
    | 'SUB_WORKFLOW'
    | 'REPEAT'
    | 'FORK'
    | 'WAIT'
    | 'PAUSE'
    | 'BARRIER'
    | 'RESOURCE_CONSTRAINT'
    | 'SHELL_SCRIPT'
    | 'HTTP'
    | 'TEMPLATIZED_SECRET_MANAGER'
    | 'EMAIL'
    | 'APP_DYNAMICS'
    | 'NEW_RELIC'
    | 'NEW_RELIC_DEPLOYMENT_MARKER'
    | 'DYNA_TRACE'
    | 'PROMETHEUS'
    | 'SPLUNKV2'
    | 'ELK'
    | 'LOGZ'
    | 'SUMO'
    | 'DATA_DOG'
    | 'DATA_DOG_LOG'
    | 'CVNG'
    | 'CLOUD_WATCH'
    | 'AWS_LAMBDA_VERIFICATION'
    | 'APM_VERIFICATION'
    | 'LOG_VERIFICATION'
    | 'BUG_SNAG'
    | 'STACK_DRIVER'
    | 'STACK_DRIVER_LOG'
    | 'INSTANA'
    | 'SCALYR'
    | 'ENV_STATE'
    | 'ENV_LOOP_STATE'
    | 'ENV_RESUME_STATE'
    | 'ENV_LOOP_RESUME_STATE'
    | 'COMMAND'
    | 'APPROVAL'
    | 'APPROVAL_RESUME'
    | 'ELASTIC_LOAD_BALANCER'
    | 'JENKINS'
    | 'GCB'
    | 'BAMBOO'
    | 'ARTIFACT_COLLECTION'
    | 'ARTIFACT_CHECK'
    | 'AZURE_NODE_SELECT'
    | 'AZURE_VMSS_SETUP'
    | 'AZURE_VMSS_DEPLOY'
    | 'AZURE_VMSS_ROLLBACK'
    | 'AZURE_VMSS_SWITCH_ROUTES'
    | 'AZURE_VMSS_SWITCH_ROUTES_ROLLBACK'
    | 'AZURE_WEBAPP_SLOT_SETUP'
    | 'AZURE_WEBAPP_SLOT_SWAP'
    | 'AZURE_WEBAPP_SLOT_SHIFT_TRAFFIC'
    | 'AZURE_WEBAPP_SLOT_ROLLBACK'
    | 'AWS_NODE_SELECT'
    | 'DC_NODE_SELECT'
    | 'ROLLING_NODE_SELECT'
    | 'PHASE'
    | 'PHASE_STEP'
    | 'STAGING_ORIGINAL_EXECUTION'
    | 'AWS_CODEDEPLOY_STATE'
    | 'AWS_CODEDEPLOY_ROLLBACK'
    | 'AWS_LAMBDA_STATE'
    | 'AWS_LAMBDA_ROLLBACK'
    | 'AWS_AMI_SERVICE_SETUP'
    | 'ASG_AMI_SERVICE_ALB_SHIFT_SETUP'
    | 'AWS_AMI_SERVICE_DEPLOY'
    | 'ASG_AMI_SERVICE_ALB_SHIFT_DEPLOY'
    | 'AWS_AMI_SWITCH_ROUTES'
    | 'ASG_AMI_ALB_SHIFT_SWITCH_ROUTES'
    | 'AWS_AMI_ROLLBACK_SWITCH_ROUTES'
    | 'ASG_AMI_ROLLBACK_ALB_SHIFT_SWITCH_ROUTES'
    | 'AWS_AMI_SERVICE_ROLLBACK'
    | 'ECS_SERVICE_SETUP'
    | 'SPOTINST_SETUP'
    | 'SPOTINST_ALB_SHIFT_SETUP'
    | 'SPOTINST_DEPLOY'
    | 'SPOTINST_ALB_SHIFT_DEPLOY'
    | 'SPOTINST_LISTENER_UPDATE'
    | 'SPOTINST_LISTENER_ALB_SHIFT'
    | 'SPOTINST_ROLLBACK'
    | 'SPOTINST_LISTENER_UPDATE_ROLLBACK'
    | 'SPOTINST_LISTENER_ALB_SHIFT_ROLLBACK'
    | 'ECS_SERVICE_SETUP_ROLLBACK'
    | 'ECS_DAEMON_SERVICE_SETUP'
    | 'ECS_BG_SERVICE_SETUP'
    | 'ECS_BG_SERVICE_SETUP_ROUTE53'
    | 'ECS_SERVICE_DEPLOY'
    | 'ECS_SERVICE_ROLLBACK'
    | 'ECS_LISTENER_UPDATE'
    | 'ECS_LISTENER_UPDATE_ROLLBACK'
    | 'ECS_ROUTE53_DNS_WEIGHT_UPDATE'
    | 'ECS_ROUTE53_DNS_WEIGHT_UPDATE_ROLLBACK'
    | 'KUBERNETES_SETUP'
    | 'KUBERNETES_SETUP_ROLLBACK'
    | 'KUBERNETES_DEPLOY'
    | 'KUBERNETES_DEPLOY_ROLLBACK'
    | 'KUBERNETES_STEADY_STATE_CHECK'
    | 'ECS_STEADY_STATE_CHECK'
    | 'ECS_RUN_TASK'
    | 'GCP_CLUSTER_SETUP'
    | 'HELM_DEPLOY'
    | 'HELM_ROLLBACK'
    | 'PCF_SETUP'
    | 'PCF_RESIZE'
    | 'PCF_ROLLBACK'
    | 'PCF_MAP_ROUTE'
    | 'PCF_UNMAP_ROUTE'
    | 'PCF_BG_MAP_ROUTE'
    | 'PCF_PLUGIN'
    | 'TERRAFORM_PROVISION'
    | 'TERRAFORM_APPLY'
    | 'TERRAGRUNT_PROVISION'
    | 'TERRAGRUNT_DESTROY'
    | 'TERRAGRUNT_ROLLBACK'
    | 'ARM_CREATE_RESOURCE'
    | 'ARM_ROLLBACK'
    | 'SHELL_SCRIPT_PROVISION'
    | 'TERRAFORM_DESTROY'
    | 'CLOUD_FORMATION_CREATE_STACK'
    | 'CLOUD_FORMATION_DELETE_STACK'
    | 'KUBERNETES_SWAP_SERVICE_SELECTORS'
    | 'CLOUD_FORMATION_ROLLBACK_STACK'
    | 'TERRAFORM_ROLLBACK'
    | 'K8S_DEPLOYMENT_ROLLING'
    | 'K8S_SCALE'
    | 'K8S_DEPLOYMENT_ROLLING_ROLLBACK'
    | 'K8S_BLUE_GREEN_DEPLOY'
    | 'K8S_CANARY_DEPLOY'
    | 'K8S_DELETE'
    | 'RANCHER_RESOLVE'
    | 'RANCHER_K8S_DEPLOYMENT_ROLLING'
    | 'RANCHER_K8S_CANARY_DEPLOY'
    | 'RANCHER_K8S_BLUE_GREEN_DEPLOY'
    | 'RANCHER_KUBERNETES_SWAP_SERVICE_SELECTORS'
    | 'RANCHER_K8S_DELETE'
    | 'RANCHER_K8S_DEPLOYMENT_ROLLING_ROLLBACK'
    | 'JIRA_CREATE_UPDATE'
    | 'SERVICENOW_CREATE_UPDATE'
    | 'K8S_TRAFFIC_SPLIT'
    | 'K8S_APPLY'
    | 'CUSTOM_DEPLOYMENT_FETCH_INSTANCES'
}

export type ListConfigurations1Error = Fetcher.ErrorWrapper<undefined>

export type ListConfigurations1Variables = {
  queryParams?: ListConfigurations1QueryParams
} & PortalContext['fetcherOptions']

export const fetchListConfigurations1 = (variables: ListConfigurations1Variables) =>
  portalFetch<
    Schemas.RestResponseListCVConfiguration,
    ListConfigurations1Error,
    undefined,
    {},
    ListConfigurations1QueryParams,
    {}
  >({ url: '/cv-configuration', method: 'get', ...variables })

export const useListConfigurations1 = (
  variables: ListConfigurations1Variables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponseListCVConfiguration,
      ListConfigurations1Error,
      Schemas.RestResponseListCVConfiguration
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponseListCVConfiguration,
    ListConfigurations1Error,
    Schemas.RestResponseListCVConfiguration
  >(
    queryKeyFn({ path: '/cv-configuration', operationId: 'listConfigurations1', variables }),
    () => fetchListConfigurations1({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type SaveCVConfigurationQueryParams = {
  accountId?: string
  appId?: string
  stateType?:
    | 'SUB_WORKFLOW'
    | 'REPEAT'
    | 'FORK'
    | 'WAIT'
    | 'PAUSE'
    | 'BARRIER'
    | 'RESOURCE_CONSTRAINT'
    | 'SHELL_SCRIPT'
    | 'HTTP'
    | 'TEMPLATIZED_SECRET_MANAGER'
    | 'EMAIL'
    | 'APP_DYNAMICS'
    | 'NEW_RELIC'
    | 'NEW_RELIC_DEPLOYMENT_MARKER'
    | 'DYNA_TRACE'
    | 'PROMETHEUS'
    | 'SPLUNKV2'
    | 'ELK'
    | 'LOGZ'
    | 'SUMO'
    | 'DATA_DOG'
    | 'DATA_DOG_LOG'
    | 'CVNG'
    | 'CLOUD_WATCH'
    | 'AWS_LAMBDA_VERIFICATION'
    | 'APM_VERIFICATION'
    | 'LOG_VERIFICATION'
    | 'BUG_SNAG'
    | 'STACK_DRIVER'
    | 'STACK_DRIVER_LOG'
    | 'INSTANA'
    | 'SCALYR'
    | 'ENV_STATE'
    | 'ENV_LOOP_STATE'
    | 'ENV_RESUME_STATE'
    | 'ENV_LOOP_RESUME_STATE'
    | 'COMMAND'
    | 'APPROVAL'
    | 'APPROVAL_RESUME'
    | 'ELASTIC_LOAD_BALANCER'
    | 'JENKINS'
    | 'GCB'
    | 'BAMBOO'
    | 'ARTIFACT_COLLECTION'
    | 'ARTIFACT_CHECK'
    | 'AZURE_NODE_SELECT'
    | 'AZURE_VMSS_SETUP'
    | 'AZURE_VMSS_DEPLOY'
    | 'AZURE_VMSS_ROLLBACK'
    | 'AZURE_VMSS_SWITCH_ROUTES'
    | 'AZURE_VMSS_SWITCH_ROUTES_ROLLBACK'
    | 'AZURE_WEBAPP_SLOT_SETUP'
    | 'AZURE_WEBAPP_SLOT_SWAP'
    | 'AZURE_WEBAPP_SLOT_SHIFT_TRAFFIC'
    | 'AZURE_WEBAPP_SLOT_ROLLBACK'
    | 'AWS_NODE_SELECT'
    | 'DC_NODE_SELECT'
    | 'ROLLING_NODE_SELECT'
    | 'PHASE'
    | 'PHASE_STEP'
    | 'STAGING_ORIGINAL_EXECUTION'
    | 'AWS_CODEDEPLOY_STATE'
    | 'AWS_CODEDEPLOY_ROLLBACK'
    | 'AWS_LAMBDA_STATE'
    | 'AWS_LAMBDA_ROLLBACK'
    | 'AWS_AMI_SERVICE_SETUP'
    | 'ASG_AMI_SERVICE_ALB_SHIFT_SETUP'
    | 'AWS_AMI_SERVICE_DEPLOY'
    | 'ASG_AMI_SERVICE_ALB_SHIFT_DEPLOY'
    | 'AWS_AMI_SWITCH_ROUTES'
    | 'ASG_AMI_ALB_SHIFT_SWITCH_ROUTES'
    | 'AWS_AMI_ROLLBACK_SWITCH_ROUTES'
    | 'ASG_AMI_ROLLBACK_ALB_SHIFT_SWITCH_ROUTES'
    | 'AWS_AMI_SERVICE_ROLLBACK'
    | 'ECS_SERVICE_SETUP'
    | 'SPOTINST_SETUP'
    | 'SPOTINST_ALB_SHIFT_SETUP'
    | 'SPOTINST_DEPLOY'
    | 'SPOTINST_ALB_SHIFT_DEPLOY'
    | 'SPOTINST_LISTENER_UPDATE'
    | 'SPOTINST_LISTENER_ALB_SHIFT'
    | 'SPOTINST_ROLLBACK'
    | 'SPOTINST_LISTENER_UPDATE_ROLLBACK'
    | 'SPOTINST_LISTENER_ALB_SHIFT_ROLLBACK'
    | 'ECS_SERVICE_SETUP_ROLLBACK'
    | 'ECS_DAEMON_SERVICE_SETUP'
    | 'ECS_BG_SERVICE_SETUP'
    | 'ECS_BG_SERVICE_SETUP_ROUTE53'
    | 'ECS_SERVICE_DEPLOY'
    | 'ECS_SERVICE_ROLLBACK'
    | 'ECS_LISTENER_UPDATE'
    | 'ECS_LISTENER_UPDATE_ROLLBACK'
    | 'ECS_ROUTE53_DNS_WEIGHT_UPDATE'
    | 'ECS_ROUTE53_DNS_WEIGHT_UPDATE_ROLLBACK'
    | 'KUBERNETES_SETUP'
    | 'KUBERNETES_SETUP_ROLLBACK'
    | 'KUBERNETES_DEPLOY'
    | 'KUBERNETES_DEPLOY_ROLLBACK'
    | 'KUBERNETES_STEADY_STATE_CHECK'
    | 'ECS_STEADY_STATE_CHECK'
    | 'ECS_RUN_TASK'
    | 'GCP_CLUSTER_SETUP'
    | 'HELM_DEPLOY'
    | 'HELM_ROLLBACK'
    | 'PCF_SETUP'
    | 'PCF_RESIZE'
    | 'PCF_ROLLBACK'
    | 'PCF_MAP_ROUTE'
    | 'PCF_UNMAP_ROUTE'
    | 'PCF_BG_MAP_ROUTE'
    | 'PCF_PLUGIN'
    | 'TERRAFORM_PROVISION'
    | 'TERRAFORM_APPLY'
    | 'TERRAGRUNT_PROVISION'
    | 'TERRAGRUNT_DESTROY'
    | 'TERRAGRUNT_ROLLBACK'
    | 'ARM_CREATE_RESOURCE'
    | 'ARM_ROLLBACK'
    | 'SHELL_SCRIPT_PROVISION'
    | 'TERRAFORM_DESTROY'
    | 'CLOUD_FORMATION_CREATE_STACK'
    | 'CLOUD_FORMATION_DELETE_STACK'
    | 'KUBERNETES_SWAP_SERVICE_SELECTORS'
    | 'CLOUD_FORMATION_ROLLBACK_STACK'
    | 'TERRAFORM_ROLLBACK'
    | 'K8S_DEPLOYMENT_ROLLING'
    | 'K8S_SCALE'
    | 'K8S_DEPLOYMENT_ROLLING_ROLLBACK'
    | 'K8S_BLUE_GREEN_DEPLOY'
    | 'K8S_CANARY_DEPLOY'
    | 'K8S_DELETE'
    | 'RANCHER_RESOLVE'
    | 'RANCHER_K8S_DEPLOYMENT_ROLLING'
    | 'RANCHER_K8S_CANARY_DEPLOY'
    | 'RANCHER_K8S_BLUE_GREEN_DEPLOY'
    | 'RANCHER_KUBERNETES_SWAP_SERVICE_SELECTORS'
    | 'RANCHER_K8S_DELETE'
    | 'RANCHER_K8S_DEPLOYMENT_ROLLING_ROLLBACK'
    | 'JIRA_CREATE_UPDATE'
    | 'SERVICENOW_CREATE_UPDATE'
    | 'K8S_TRAFFIC_SPLIT'
    | 'K8S_APPLY'
    | 'CUSTOM_DEPLOYMENT_FETCH_INSTANCES'
}

export type SaveCVConfigurationError = Fetcher.ErrorWrapper<undefined>

export type SaveCVConfigurationVariables = {
  body?: RequestBodies.UpdateAccountPreferenceBody
  queryParams?: SaveCVConfigurationQueryParams
} & PortalContext['fetcherOptions']

export const fetchSaveCVConfiguration = (variables: SaveCVConfigurationVariables) =>
  portalFetch<
    Schemas.RestResponseString,
    SaveCVConfigurationError,
    RequestBodies.UpdateAccountPreferenceBody,
    {},
    SaveCVConfigurationQueryParams,
    {}
  >({ url: '/cv-configuration', method: 'post', ...variables })

export const useSaveCVConfiguration = (
  options?: Omit<
    reactQuery.UseMutationOptions<Schemas.RestResponseString, SaveCVConfigurationError, SaveCVConfigurationVariables>,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<Schemas.RestResponseString, SaveCVConfigurationError, SaveCVConfigurationVariables>(
    (variables: SaveCVConfigurationVariables) => fetchSaveCVConfiguration({ ...fetcherOptions, ...variables }),
    options
  )
}

export type ListConfigurationsQueryParams = {
  accountId?: string
  appIds?: string[]
  envIds?: string[]
}

export type ListConfigurationsError = Fetcher.ErrorWrapper<undefined>

export type ListConfigurationsVariables = {
  queryParams?: ListConfigurationsQueryParams
} & PortalContext['fetcherOptions']

export const fetchListConfigurations = (variables: ListConfigurationsVariables) =>
  portalFetch<
    Schemas.RestResponseListCVConfiguration,
    ListConfigurationsError,
    undefined,
    {},
    ListConfigurationsQueryParams,
    {}
  >({ url: '/cv-configuration/list-cv-configurations', method: 'get', ...variables })

export const useListConfigurations = (
  variables: ListConfigurationsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponseListCVConfiguration,
      ListConfigurationsError,
      Schemas.RestResponseListCVConfiguration
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponseListCVConfiguration,
    ListConfigurationsError,
    Schemas.RestResponseListCVConfiguration
  >(
    queryKeyFn({ path: '/cv-configuration/list-cv-configurations', operationId: 'listConfigurations', variables }),
    () => fetchListConfigurations({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type ResetBaselineQueryParams = {
  accountId?: string
  appId?: string
  cvConfigId?: string
}

export type ResetBaselineError = Fetcher.ErrorWrapper<undefined>

export type ResetBaselineVariables = {
  body: Schemas.LogsCVConfiguration
  queryParams?: ResetBaselineQueryParams
} & PortalContext['fetcherOptions']

export const fetchResetBaseline = (variables: ResetBaselineVariables) =>
  portalFetch<
    Schemas.RestResponseString,
    ResetBaselineError,
    Schemas.LogsCVConfiguration,
    {},
    ResetBaselineQueryParams,
    {}
  >({ url: '/cv-configuration/reset-baseline', method: 'post', ...variables })

export const useResetBaseline = (
  options?: Omit<
    reactQuery.UseMutationOptions<Schemas.RestResponseString, ResetBaselineError, ResetBaselineVariables>,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<Schemas.RestResponseString, ResetBaselineError, ResetBaselineVariables>(
    (variables: ResetBaselineVariables) => fetchResetBaseline({ ...fetcherOptions, ...variables }),
    options
  )
}

export type UpdateAlertSettingsQueryParams = {
  accountId?: string
  cvConfigId?: string
}

export type UpdateAlertSettingsError = Fetcher.ErrorWrapper<undefined>

export type UpdateAlertSettingsVariables = {
  body: RequestBodies.CVConfiguration
  queryParams?: UpdateAlertSettingsQueryParams
} & PortalContext['fetcherOptions']

export const fetchUpdateAlertSettings = (variables: UpdateAlertSettingsVariables) =>
  portalFetch<
    Schemas.RestResponseBoolean,
    UpdateAlertSettingsError,
    RequestBodies.CVConfiguration,
    {},
    UpdateAlertSettingsQueryParams,
    {}
  >({ url: '/cv-configuration/update-alert-setting', method: 'post', ...variables })

export const useUpdateAlertSettings = (
  options?: Omit<
    reactQuery.UseMutationOptions<Schemas.RestResponseBoolean, UpdateAlertSettingsError, UpdateAlertSettingsVariables>,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<Schemas.RestResponseBoolean, UpdateAlertSettingsError, UpdateAlertSettingsVariables>(
    (variables: UpdateAlertSettingsVariables) => fetchUpdateAlertSettings({ ...fetcherOptions, ...variables }),
    options
  )
}

export type UpdateSnoozeQueryParams = {
  accountId?: string
  cvConfigId?: string
}

export type UpdateSnoozeError = Fetcher.ErrorWrapper<undefined>

export type UpdateSnoozeVariables = {
  body: RequestBodies.CVConfiguration
  queryParams?: UpdateSnoozeQueryParams
} & PortalContext['fetcherOptions']

export const fetchUpdateSnooze = (variables: UpdateSnoozeVariables) =>
  portalFetch<
    Schemas.RestResponseBoolean,
    UpdateSnoozeError,
    RequestBodies.CVConfiguration,
    {},
    UpdateSnoozeQueryParams,
    {}
  >({ url: '/cv-configuration/update-snooze', method: 'post', ...variables })

export const useUpdateSnooze = (
  options?: Omit<
    reactQuery.UseMutationOptions<Schemas.RestResponseBoolean, UpdateSnoozeError, UpdateSnoozeVariables>,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<Schemas.RestResponseBoolean, UpdateSnoozeError, UpdateSnoozeVariables>(
    (variables: UpdateSnoozeVariables) => fetchUpdateSnooze({ ...fetcherOptions, ...variables }),
    options
  )
}

export type List14QueryParams = {
  catalogType?: string[]
}

export type List14Error = Fetcher.ErrorWrapper<undefined>

export type List14Variables = {
  queryParams?: List14QueryParams
} & PortalContext['fetcherOptions']

export const fetchList14 = (variables: List14Variables) =>
  portalFetch<Schemas.RestResponseMapStringObject, List14Error, undefined, {}, List14QueryParams, {}>({
    url: '/catalogs',
    method: 'get',
    ...variables
  })

export const useList14 = (
  variables: List14Variables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.RestResponseMapStringObject, List14Error, Schemas.RestResponseMapStringObject>,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<Schemas.RestResponseMapStringObject, List14Error, Schemas.RestResponseMapStringObject>(
    queryKeyFn({ path: '/catalogs', operationId: 'list14', variables }),
    () => fetchList14({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type ListForAppQueryParams = {
  catalogType?: string[]
}

export type ListForAppError = Fetcher.ErrorWrapper<undefined>

export type ListForAppVariables = {
  queryParams?: ListForAppQueryParams
} & PortalContext['fetcherOptions']

export const fetchListForApp = (variables: ListForAppVariables) =>
  portalFetch<Schemas.RestResponseMapStringObject, ListForAppError, undefined, {}, ListForAppQueryParams, {}>({
    url: '/catalogs/app-catalogs',
    method: 'get',
    ...variables
  })

export const useListForApp = (
  variables: ListForAppVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponseMapStringObject,
      ListForAppError,
      Schemas.RestResponseMapStringObject
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<Schemas.RestResponseMapStringObject, ListForAppError, Schemas.RestResponseMapStringObject>(
    queryKeyFn({ path: '/catalogs/app-catalogs', operationId: 'listForApp', variables }),
    () => fetchListForApp({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type GetEventConfigPathParams = {
  eventConfigId: string
}

export type GetEventConfigQueryParams = {
  appId?: string
  accountId?: string
}

export type GetEventConfigError = Fetcher.ErrorWrapper<undefined>

export type GetEventConfigVariables = {
  pathParams: GetEventConfigPathParams
  queryParams?: GetEventConfigQueryParams
} & PortalContext['fetcherOptions']

export const fetchGetEventConfig = (variables: GetEventConfigVariables) =>
  portalFetch<
    Schemas.RestResponseCgEventConfig,
    GetEventConfigError,
    undefined,
    {},
    GetEventConfigQueryParams,
    GetEventConfigPathParams
  >({ url: '/events-config/{eventConfigId}', method: 'get', ...variables })

export const useGetEventConfig = (
  variables: GetEventConfigVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponseCgEventConfig,
      GetEventConfigError,
      Schemas.RestResponseCgEventConfig
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<Schemas.RestResponseCgEventConfig, GetEventConfigError, Schemas.RestResponseCgEventConfig>(
    queryKeyFn({ path: '/events-config/{eventConfigId}', operationId: 'getEventConfig', variables }),
    () => fetchGetEventConfig({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type UpdateEventConfigPathParams = {
  eventConfigId: string
}

export type UpdateEventConfigQueryParams = {
  appId?: string
  accountId?: string
}

export type UpdateEventConfigError = Fetcher.ErrorWrapper<undefined>

export type UpdateEventConfigVariables = {
  body: RequestBodies.CgEventConfig
  pathParams: UpdateEventConfigPathParams
  queryParams?: UpdateEventConfigQueryParams
} & PortalContext['fetcherOptions']

export const fetchUpdateEventConfig = (variables: UpdateEventConfigVariables) =>
  portalFetch<
    Schemas.RestResponseCgEventConfig,
    UpdateEventConfigError,
    RequestBodies.CgEventConfig,
    {},
    UpdateEventConfigQueryParams,
    UpdateEventConfigPathParams
  >({ url: '/events-config/{eventConfigId}', method: 'put', ...variables })

export const useUpdateEventConfig = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.RestResponseCgEventConfig,
      UpdateEventConfigError,
      UpdateEventConfigVariables
    >,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<Schemas.RestResponseCgEventConfig, UpdateEventConfigError, UpdateEventConfigVariables>(
    (variables: UpdateEventConfigVariables) => fetchUpdateEventConfig({ ...fetcherOptions, ...variables }),
    options
  )
}

export type DeleteEventConfigPathParams = {
  eventConfigId: string
}

export type DeleteEventConfigQueryParams = {
  appId?: string
  accountId?: string
}

export type DeleteEventConfigError = Fetcher.ErrorWrapper<undefined>

export type DeleteEventConfigVariables = {
  pathParams: DeleteEventConfigPathParams
  queryParams?: DeleteEventConfigQueryParams
} & PortalContext['fetcherOptions']

export const fetchDeleteEventConfig = (variables: DeleteEventConfigVariables) =>
  portalFetch<
    Schemas.RestResponseCgEventConfig,
    DeleteEventConfigError,
    undefined,
    {},
    DeleteEventConfigQueryParams,
    DeleteEventConfigPathParams
  >({ url: '/events-config/{eventConfigId}', method: 'delete', ...variables })

export const useDeleteEventConfig = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.RestResponseCgEventConfig,
      DeleteEventConfigError,
      DeleteEventConfigVariables
    >,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<Schemas.RestResponseCgEventConfig, DeleteEventConfigError, DeleteEventConfigVariables>(
    (variables: DeleteEventConfigVariables) => fetchDeleteEventConfig({ ...fetcherOptions, ...variables }),
    options
  )
}

export type List15QueryParams = {
  appId?: string
  accountId?: string
}

export type List15Error = Fetcher.ErrorWrapper<undefined>

export type List15Variables = {
  queryParams?: List15QueryParams
} & PortalContext['fetcherOptions']

export const fetchList15 = (variables: List15Variables) =>
  portalFetch<Schemas.RestResponseListCgEventConfig, List15Error, undefined, {}, List15QueryParams, {}>({
    url: '/events-config',
    method: 'get',
    ...variables
  })

export const useList15 = (
  variables: List15Variables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponseListCgEventConfig,
      List15Error,
      Schemas.RestResponseListCgEventConfig
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<Schemas.RestResponseListCgEventConfig, List15Error, Schemas.RestResponseListCgEventConfig>(
    queryKeyFn({ path: '/events-config', operationId: 'list15', variables }),
    () => fetchList15({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type CreateEventConfigQueryParams = {
  appId?: string
  accountId?: string
}

export type CreateEventConfigError = Fetcher.ErrorWrapper<undefined>

export type CreateEventConfigVariables = {
  body: RequestBodies.CgEventConfig
  queryParams?: CreateEventConfigQueryParams
} & PortalContext['fetcherOptions']

export const fetchCreateEventConfig = (variables: CreateEventConfigVariables) =>
  portalFetch<
    Schemas.RestResponseCgEventConfig,
    CreateEventConfigError,
    RequestBodies.CgEventConfig,
    {},
    CreateEventConfigQueryParams,
    {}
  >({ url: '/events-config', method: 'post', ...variables })

export const useCreateEventConfig = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.RestResponseCgEventConfig,
      CreateEventConfigError,
      CreateEventConfigVariables
    >,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<Schemas.RestResponseCgEventConfig, CreateEventConfigError, CreateEventConfigVariables>(
    (variables: CreateEventConfigVariables) => fetchCreateEventConfig({ ...fetcherOptions, ...variables }),
    options
  )
}

export type UpdateTogglePathParams = {
  eventConfigId: string
}

export type UpdateToggleQueryParams = {
  appId?: string
  accountId?: string
}

export type UpdateToggleError = Fetcher.ErrorWrapper<undefined>

export type UpdateToggleVariables = {
  body: RequestBodies.CgEventConfig
  pathParams: UpdateTogglePathParams
  queryParams?: UpdateToggleQueryParams
} & PortalContext['fetcherOptions']

export const fetchUpdateToggle = (variables: UpdateToggleVariables) =>
  portalFetch<
    Schemas.RestResponseCgEventConfig,
    UpdateToggleError,
    RequestBodies.CgEventConfig,
    {},
    UpdateToggleQueryParams,
    UpdateTogglePathParams
  >({ url: '/events-config/{eventConfigId}/enable', method: 'put', ...variables })

export const useUpdateToggle = (
  options?: Omit<
    reactQuery.UseMutationOptions<Schemas.RestResponseCgEventConfig, UpdateToggleError, UpdateToggleVariables>,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<Schemas.RestResponseCgEventConfig, UpdateToggleError, UpdateToggleVariables>(
    (variables: UpdateToggleVariables) => fetchUpdateToggle({ ...fetcherOptions, ...variables }),
    options
  )
}

export type SendTestEventPathParams = {
  eventConfigId: string
}

export type SendTestEventQueryParams = {
  appId?: string
  accountId?: string
}

export type SendTestEventError = Fetcher.ErrorWrapper<undefined>

export type SendTestEventVariables = {
  pathParams: SendTestEventPathParams
  queryParams?: SendTestEventQueryParams
} & PortalContext['fetcherOptions']

export const fetchSendTestEvent = (variables: SendTestEventVariables) =>
  portalFetch<
    Schemas.RestResponseVoid,
    SendTestEventError,
    undefined,
    {},
    SendTestEventQueryParams,
    SendTestEventPathParams
  >({ url: '/events-config/{eventConfigId}/test', method: 'post', ...variables })

export const useSendTestEvent = (
  options?: Omit<
    reactQuery.UseMutationOptions<Schemas.RestResponseVoid, SendTestEventError, SendTestEventVariables>,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<Schemas.RestResponseVoid, SendTestEventError, SendTestEventVariables>(
    (variables: SendTestEventVariables) => fetchSendTestEvent({ ...fetcherOptions, ...variables }),
    options
  )
}

export type GetMetricsWithDataForNode1QueryParams = {
  accountId?: string
}

export type GetMetricsWithDataForNode1Error = Fetcher.ErrorWrapper<undefined>

export type GetMetricsWithDataForNode1Variables = {
  body: Schemas.CloudWatchSetupTestNodeData
  queryParams?: GetMetricsWithDataForNode1QueryParams
} & PortalContext['fetcherOptions']

export const fetchGetMetricsWithDataForNode1 = (variables: GetMetricsWithDataForNode1Variables) =>
  portalFetch<
    Schemas.RestResponseVerificationNodeDataSetupResponse,
    GetMetricsWithDataForNode1Error,
    Schemas.CloudWatchSetupTestNodeData,
    {},
    GetMetricsWithDataForNode1QueryParams,
    {}
  >({ url: '/cloudwatch/node-data', method: 'post', ...variables })

export const useGetMetricsWithDataForNode1 = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.RestResponseVerificationNodeDataSetupResponse,
      GetMetricsWithDataForNode1Error,
      GetMetricsWithDataForNode1Variables
    >,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<
    Schemas.RestResponseVerificationNodeDataSetupResponse,
    GetMetricsWithDataForNode1Error,
    GetMetricsWithDataForNode1Variables
  >(
    (variables: GetMetricsWithDataForNode1Variables) =>
      fetchGetMetricsWithDataForNode1({ ...fetcherOptions, ...variables }),
    options
  )
}

export type GetLoadBalancerNamesQueryParams = {
  accountId?: string
  settingId?: string
  region?: string
}

export type GetLoadBalancerNamesError = Fetcher.ErrorWrapper<undefined>

export type GetLoadBalancerNamesVariables = {
  queryParams?: GetLoadBalancerNamesQueryParams
} & PortalContext['fetcherOptions']

export const fetchGetLoadBalancerNames = (variables: GetLoadBalancerNamesVariables) =>
  portalFetch<
    Schemas.RestResponseSetString,
    GetLoadBalancerNamesError,
    undefined,
    {},
    GetLoadBalancerNamesQueryParams,
    {}
  >({ url: '/cloudwatch/get-load-balancers', method: 'get', ...variables })

export const useGetLoadBalancerNames = (
  variables: GetLoadBalancerNamesVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.RestResponseSetString, GetLoadBalancerNamesError, Schemas.RestResponseSetString>,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<Schemas.RestResponseSetString, GetLoadBalancerNamesError, Schemas.RestResponseSetString>(
    queryKeyFn({ path: '/cloudwatch/get-load-balancers', operationId: 'getLoadBalancerNames', variables }),
    () => fetchGetLoadBalancerNames({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type GetLambdaFunctionsNamesQueryParams = {
  accountId?: string
  settingId?: string
  region?: string
}

export type GetLambdaFunctionsNamesError = Fetcher.ErrorWrapper<undefined>

export type GetLambdaFunctionsNamesVariables = {
  queryParams?: GetLambdaFunctionsNamesQueryParams
} & PortalContext['fetcherOptions']

export const fetchGetLambdaFunctionsNames = (variables: GetLambdaFunctionsNamesVariables) =>
  portalFetch<
    Schemas.RestResponseListString,
    GetLambdaFunctionsNamesError,
    undefined,
    {},
    GetLambdaFunctionsNamesQueryParams,
    {}
  >({ url: '/cloudwatch/get-lambda-functions', method: 'get', ...variables })

export const useGetLambdaFunctionsNames = (
  variables: GetLambdaFunctionsNamesVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponseListString,
      GetLambdaFunctionsNamesError,
      Schemas.RestResponseListString
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponseListString,
    GetLambdaFunctionsNamesError,
    Schemas.RestResponseListString
  >(
    queryKeyFn({ path: '/cloudwatch/get-lambda-functions', operationId: 'getLambdaFunctionsNames', variables }),
    () => fetchGetLambdaFunctionsNames({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type GetEC2InstancesQueryParams = {
  accountId?: string
  settingId?: string
  region?: string
}

export type GetEC2InstancesError = Fetcher.ErrorWrapper<undefined>

export type GetEC2InstancesVariables = {
  queryParams?: GetEC2InstancesQueryParams
} & PortalContext['fetcherOptions']

export const fetchGetEC2Instances = (variables: GetEC2InstancesVariables) =>
  portalFetch<Schemas.RestResponseMapStringString, GetEC2InstancesError, undefined, {}, GetEC2InstancesQueryParams, {}>(
    { url: '/cloudwatch/get-ec2-instances', method: 'get', ...variables }
  )

export const useGetEC2Instances = (
  variables: GetEC2InstancesVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponseMapStringString,
      GetEC2InstancesError,
      Schemas.RestResponseMapStringString
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponseMapStringString,
    GetEC2InstancesError,
    Schemas.RestResponseMapStringString
  >(
    queryKeyFn({ path: '/cloudwatch/get-ec2-instances', operationId: 'getEC2Instances', variables }),
    () => fetchGetEC2Instances({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type GetECSClusterNamesQueryParams = {
  accountId?: string
  settingId?: string
  region?: string
}

export type GetECSClusterNamesError = Fetcher.ErrorWrapper<undefined>

export type GetECSClusterNamesVariables = {
  queryParams?: GetECSClusterNamesQueryParams
} & PortalContext['fetcherOptions']

export const fetchGetECSClusterNames = (variables: GetECSClusterNamesVariables) =>
  portalFetch<
    Schemas.RestResponseListString,
    GetECSClusterNamesError,
    undefined,
    {},
    GetECSClusterNamesQueryParams,
    {}
  >({ url: '/cloudwatch/get-ecs-cluster-names', method: 'get', ...variables })

export const useGetECSClusterNames = (
  variables: GetECSClusterNamesVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.RestResponseListString, GetECSClusterNamesError, Schemas.RestResponseListString>,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<Schemas.RestResponseListString, GetECSClusterNamesError, Schemas.RestResponseListString>(
    queryKeyFn({ path: '/cloudwatch/get-ecs-cluster-names', operationId: 'getECSClusterNames', variables }),
    () => fetchGetECSClusterNames({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type GetMetricNamesQueryParams = {
  accountId?: string
  awsNameSpace?:
    | 'APIGATEWAY'
    | 'APPSTREAM'
    | 'AUTOSCALING'
    | 'BILLING'
    | 'CLOUDFRONT'
    | 'CLOUDSEARCH'
    | 'EVENTS'
    | 'LOGS'
    | 'CONNECT'
    | 'DMS'
    | 'DX'
    | 'DYNAMODB'
    | 'EC2'
    | 'EC2SPOT'
    | 'ECS'
    | 'ELASTICBEANSTALK'
    | 'EBS'
    | 'EFS'
    | 'ELB'
    | 'APPLICATIONELB'
    | 'NETWORKELB'
    | 'ELASTICTRANSCODER'
    | 'ELASTICACHE'
    | 'ES'
    | 'ELASTICMAPREDUCE'
    | 'GAMELIFT'
    | 'INSPECTOR'
    | 'IOT'
    | 'KMS'
    | 'KINESISANALYTICS'
    | 'FIREHOSE'
    | 'KINESIS'
    | 'KINESISVIDEO'
    | 'LAMBDA'
    | 'LEX'
    | 'ML'
    | 'OPSWORKS'
    | 'POLLY'
    | 'REDSHIFT'
    | 'RDS'
    | 'ROUTE53'
    | 'SAGEMAKER'
    | 'DDOSPROTECTION'
    | 'SES'
    | 'SNS'
    | 'SQS'
    | 'S3'
    | 'SWF'
    | 'STATES'
    | 'STORAGEGATEWAY'
    | 'NATGATEWAY'
    | 'VPN'
    | 'WAF'
    | 'WORKSPACES'
}

export type GetMetricNamesError = Fetcher.ErrorWrapper<undefined>

export type GetMetricNamesVariables = {
  queryParams?: GetMetricNamesQueryParams
} & PortalContext['fetcherOptions']

export const fetchGetMetricNames = (variables: GetMetricNamesVariables) =>
  portalFetch<
    Schemas.RestResponseListCloudWatchMetric,
    GetMetricNamesError,
    undefined,
    {},
    GetMetricNamesQueryParams,
    {}
  >({ url: '/cloudwatch/get-metric-names', method: 'get', ...variables })

export const useGetMetricNames = (
  variables: GetMetricNamesVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponseListCloudWatchMetric,
      GetMetricNamesError,
      Schemas.RestResponseListCloudWatchMetric
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponseListCloudWatchMetric,
    GetMetricNamesError,
    Schemas.RestResponseListCloudWatchMetric
  >(
    queryKeyFn({ path: '/cloudwatch/get-metric-names', operationId: 'getMetricNames', variables }),
    () => fetchGetMetricNames({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type Get11PathParams = {
  id: string
}

export type Get11QueryParams = {
  accountId?: string
}

export type Get11Error = Fetcher.ErrorWrapper<undefined>

export type Get11Variables = {
  pathParams: Get11PathParams
  queryParams?: Get11QueryParams
} & PortalContext['fetcherOptions']

export const fetchGet11 = (variables: Get11Variables) =>
  portalFetch<Schemas.RestResponseClusterRecord, Get11Error, undefined, {}, Get11QueryParams, Get11PathParams>({
    url: '/clusters/{id}',
    method: 'get',
    ...variables
  })

export const useGet11 = (
  variables: Get11Variables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.RestResponseClusterRecord, Get11Error, Schemas.RestResponseClusterRecord>,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<Schemas.RestResponseClusterRecord, Get11Error, Schemas.RestResponseClusterRecord>(
    queryKeyFn({ path: '/clusters/{id}', operationId: 'get11', variables }),
    () => fetchGet11({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type List16QueryParams = {
  accountId?: string
  cloudProviderId?: string
  /*
   * @format int32
   */
  count?: number
  /*
   * @format int32
   */
  startIndex?: number
}

export type List16Error = Fetcher.ErrorWrapper<undefined>

export type List16Variables = {
  queryParams?: List16QueryParams
} & PortalContext['fetcherOptions']

export const fetchList16 = (variables: List16Variables) =>
  portalFetch<Schemas.RestResponseListClusterRecord, List16Error, undefined, {}, List16QueryParams, {}>({
    url: '/clusters',
    method: 'get',
    ...variables
  })

export const useList16 = (
  variables: List16Variables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponseListClusterRecord,
      List16Error,
      Schemas.RestResponseListClusterRecord
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<Schemas.RestResponseListClusterRecord, List16Error, Schemas.RestResponseListClusterRecord>(
    queryKeyFn({ path: '/clusters', operationId: 'list16', variables }),
    () => fetchList16({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type Get12PathParams = {
  configId: string
}

export type Get12QueryParams = {
  appId?: string
}

export type Get12Error = Fetcher.ErrorWrapper<undefined>

export type Get12Variables = {
  pathParams: Get12PathParams
  queryParams?: Get12QueryParams
} & PortalContext['fetcherOptions']

export const fetchGet12 = (variables: Get12Variables) =>
  portalFetch<Schemas.RestResponseConfigFile, Get12Error, undefined, {}, Get12QueryParams, Get12PathParams>({
    url: '/configs/{configId}',
    method: 'get',
    ...variables
  })

export const useGet12 = (
  variables: Get12Variables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.RestResponseConfigFile, Get12Error, Schemas.RestResponseConfigFile>,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<Schemas.RestResponseConfigFile, Get12Error, Schemas.RestResponseConfigFile>(
    queryKeyFn({ path: '/configs/{configId}', operationId: 'get12', variables }),
    () => fetchGet12({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type Update8PathParams = {
  configId: string
}

export type Update8QueryParams = {
  appId?: string
}

export type Update8Error = Fetcher.ErrorWrapper<undefined>

export type Update8Variables = {
  pathParams: Update8PathParams
  queryParams?: Update8QueryParams
} & PortalContext['fetcherOptions']

export const fetchUpdate8 = (variables: Update8Variables) =>
  portalFetch<Schemas.RestResponse, Update8Error, undefined, {}, Update8QueryParams, Update8PathParams>({
    url: '/configs/{configId}',
    method: 'put',
    ...variables
  })

export const useUpdate8 = (
  options?: Omit<reactQuery.UseMutationOptions<Schemas.RestResponse, Update8Error, Update8Variables>, 'mutationFn'>
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<Schemas.RestResponse, Update8Error, Update8Variables>(
    (variables: Update8Variables) => fetchUpdate8({ ...fetcherOptions, ...variables }),
    options
  )
}

export type Delete6PathParams = {
  configId: string
}

export type Delete6QueryParams = {
  appId?: string
}

export type Delete6Error = Fetcher.ErrorWrapper<undefined>

export type Delete6Variables = {
  pathParams: Delete6PathParams
  queryParams?: Delete6QueryParams
} & PortalContext['fetcherOptions']

export const fetchDelete6 = (variables: Delete6Variables) =>
  portalFetch<Schemas.RestResponse, Delete6Error, undefined, {}, Delete6QueryParams, Delete6PathParams>({
    url: '/configs/{configId}',
    method: 'delete',
    ...variables
  })

export const useDelete6 = (
  options?: Omit<reactQuery.UseMutationOptions<Schemas.RestResponse, Delete6Error, Delete6Variables>, 'mutationFn'>
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<Schemas.RestResponse, Delete6Error, Delete6Variables>(
    (variables: Delete6Variables) => fetchDelete6({ ...fetcherOptions, ...variables }),
    options
  )
}

export type List17QueryParams = {
  /*
   * @default 0
   */
  offset?: string
  limit?: string
  fieldsIncluded?: string[]
  fieldsExcluded?: string[]
}

export type List17Error = Fetcher.ErrorWrapper<undefined>

export type List17Variables = {
  queryParams?: List17QueryParams
} & PortalContext['fetcherOptions']

export const fetchList17 = (variables: List17Variables) =>
  portalFetch<Schemas.RestResponsePageResponseConfigFile, List17Error, undefined, {}, List17QueryParams, {}>({
    url: '/configs',
    method: 'get',
    ...variables
  })

export const useList17 = (
  variables: List17Variables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponsePageResponseConfigFile,
      List17Error,
      Schemas.RestResponsePageResponseConfigFile
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponsePageResponseConfigFile,
    List17Error,
    Schemas.RestResponsePageResponseConfigFile
  >(
    queryKeyFn({ path: '/configs', operationId: 'list17', variables }),
    () => fetchList17({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type Save5QueryParams = {
  appId?: string
  entityId?: string
  entityType?:
    | 'SERVICE'
    | 'PROVISIONER'
    | 'ENVIRONMENT'
    | 'HOST'
    | 'RELEASE'
    | 'ARTIFACT'
    | 'SSH_USER'
    | 'SSH_PASSWORD'
    | 'SSH_APP_ACCOUNT'
    | 'SSH_KEY_PASSPHRASE'
    | 'SSH_APP_ACCOUNT_PASSOWRD'
    | 'SIMPLE_DEPLOYMENT'
    | 'ORCHESTRATED_DEPLOYMENT'
    | 'PIPELINE'
    | 'WORKFLOW'
    | 'DEPLOYMENT'
    | 'INSTANCE'
    | 'APPLICATION'
    | 'COMMAND'
    | 'CONFIG'
    | 'SERVICE_TEMPLATE'
    | 'INFRASTRUCTURE_MAPPING'
    | 'INFRASTRUCTURE_DEFINITION'
    | 'USER'
    | 'ARTIFACT_STREAM'
    | 'APPDYNAMICS_CONFIGID'
    | 'APPDYNAMICS_APPID'
    | 'APPDYNAMICS_TIERID'
    | 'ELK_CONFIGID'
    | 'ELK_INDICES'
    | 'NEWRELIC_CONFIGID'
    | 'NEWRELIC_APPID'
    | 'SS_SSH_CONNECTION_ATTRIBUTE'
    | 'SS_WINRM_CONNECTION_ATTRIBUTE'
    | 'SUMOLOGIC_CONFIGID'
    | 'SPLUNK_CONFIGID'
    | 'NEWRELIC_MARKER_CONFIGID'
    | 'NEWRELIC_MARKER_APPID'
    | 'API_KEY'
    | 'ACCOUNT'
    | 'APPLICATION_MANIFEST'
    | 'USER_GROUP'
    | 'WHITELISTED_IP'
    | 'CF_AWS_CONFIG_ID'
    | 'VERIFICATION_CONFIGURATION'
    | 'HELM_GIT_CONFIG_ID'
    | 'NOTIFICATION_GROUP'
    | 'HELM_CHART_SPECIFICATION'
    | 'PCF_SERVICE_SPECIFICATION'
    | 'LAMBDA_SPECIFICATION'
    | 'USER_DATA_SPECIFICATION'
    | 'ECS_CONTAINER_SPECIFICATION'
    | 'ECS_SERVICE_SPECIFICATION'
    | 'K8S_CONTAINER_SPECIFICATION'
    | 'CONFIG_FILE'
    | 'SERVICE_COMMAND'
    | 'MANIFEST_FILE'
    | 'SERVICE_VARIABLE'
    | 'TRIGGER'
    | 'ROLE'
    | 'TEMPLATE'
    | 'TEMPLATE_FOLDER'
    | 'SETTING_ATTRIBUTE'
    | 'ENCRYPTED_RECORDS'
    | 'CV_CONFIGURATION'
    | 'TAG'
    | 'CUSTOM_DASHBOARD'
    | 'PIPELINE_GOVERNANCE_STANDARD'
    | 'WORKFLOW_EXECUTION'
    | 'SERVERLESS_INSTANCE'
    | 'USER_INVITE'
    | 'LOGIN_SETTINGS'
    | 'SSO_SETTINGS'
    | 'DELEGATE'
    | 'DELEGATE_SCOPE'
    | 'DELEGATE_PROFILE'
    | 'EXPORT_EXECUTIONS_REQUEST'
    | 'GCP_CONFIG'
    | 'GIT_CONFIG'
    | 'JENKINS_SERVER'
    | 'SECRETS_MANAGER'
    | 'HELM_CHART'
    | 'SECRET'
    | 'CONNECTOR'
    | 'CLOUD_PROVIDER'
    | 'GOVERNANCE_FREEZE_CONFIG'
    | 'GOVERNANCE_CONFIG'
    | 'EVENT_RULE'
}

export type Save5Error = Fetcher.ErrorWrapper<undefined>

export type Save5Variables = {
  queryParams?: Save5QueryParams
} & PortalContext['fetcherOptions']

export const fetchSave5 = (variables: Save5Variables) =>
  portalFetch<Schemas.RestResponseString, Save5Error, undefined, {}, Save5QueryParams, {}>({
    url: '/configs',
    method: 'post',
    ...variables
  })

export const useSave5 = (
  options?: Omit<reactQuery.UseMutationOptions<Schemas.RestResponseString, Save5Error, Save5Variables>, 'mutationFn'>
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<Schemas.RestResponseString, Save5Error, Save5Variables>(
    (variables: Save5Variables) => fetchSave5({ ...fetcherOptions, ...variables }),
    options
  )
}

export type DownloadConfigPathParams = {
  configId: string
}

export type DownloadConfigQueryParams = {
  appId?: string
  /*
   * @format int32
   */
  version?: number
}

export type DownloadConfigError = Fetcher.ErrorWrapper<undefined>

export type DownloadConfigVariables = {
  pathParams: DownloadConfigPathParams
  queryParams?: DownloadConfigQueryParams
} & PortalContext['fetcherOptions']

export const fetchDownloadConfig = (variables: DownloadConfigVariables) =>
  portalFetch<undefined, DownloadConfigError, undefined, {}, DownloadConfigQueryParams, DownloadConfigPathParams>({
    url: '/configs/{configId}/download',
    method: 'get',
    ...variables
  })

export const useDownloadConfig = (
  variables: DownloadConfigVariables,
  options?: Omit<reactQuery.UseQueryOptions<undefined, DownloadConfigError, undefined>, 'queryKey' | 'queryFn'>
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<undefined, DownloadConfigError, undefined>(
    queryKeyFn({ path: '/configs/{configId}/download', operationId: 'downloadConfig', variables }),
    () => fetchDownloadConfig({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type DeleteByEntityPathParams = {
  entityId: string
}

export type DeleteByEntityQueryParams = {
  appId?: string
  /*
   * @default __TEMPLATE_ID
   */
  templateId?: string
}

export type DeleteByEntityError = Fetcher.ErrorWrapper<undefined>

export type DeleteByEntityVariables = {
  pathParams: DeleteByEntityPathParams
  queryParams?: DeleteByEntityQueryParams
} & PortalContext['fetcherOptions']

export const fetchDeleteByEntity = (variables: DeleteByEntityVariables) =>
  portalFetch<
    Schemas.RestResponse,
    DeleteByEntityError,
    undefined,
    {},
    DeleteByEntityQueryParams,
    DeleteByEntityPathParams
  >({ url: '/configs/entity/{entityId}', method: 'delete', ...variables })

export const useDeleteByEntity = (
  options?: Omit<
    reactQuery.UseMutationOptions<Schemas.RestResponse, DeleteByEntityError, DeleteByEntityVariables>,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<Schemas.RestResponse, DeleteByEntityError, DeleteByEntityVariables>(
    (variables: DeleteByEntityVariables) => fetchDeleteByEntity({ ...fetcherOptions, ...variables }),
    options
  )
}

export type GetCVExecutionRecordsQueryParams = {
  accountId?: string
  /*
   * @format int64
   */
  beginEpochTs?: number
  /*
   * @format int64
   */
  endEpochTs?: number
}

export type GetCVExecutionRecordsError = Fetcher.ErrorWrapper<undefined>

export type GetCVExecutionRecordsVariables = {
  queryParams?: GetCVExecutionRecordsQueryParams
} & PortalContext['fetcherOptions']

export const fetchGetCVExecutionRecords = (variables: GetCVExecutionRecordsVariables) =>
  portalFetch<
    Schemas.RestResponseLinkedHashMapLongLinkedHashMapStringLinkedHashMapStringLinkedHashMapStringLinkedHashMapStringListContinuousVerificationExecutionMetaData,
    GetCVExecutionRecordsError,
    undefined,
    {},
    GetCVExecutionRecordsQueryParams,
    {}
  >({ url: '/cvdash/get-records', method: 'get', ...variables })

export const useGetCVExecutionRecords = (
  variables: GetCVExecutionRecordsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponseLinkedHashMapLongLinkedHashMapStringLinkedHashMapStringLinkedHashMapStringLinkedHashMapStringListContinuousVerificationExecutionMetaData,
      GetCVExecutionRecordsError,
      Schemas.RestResponseLinkedHashMapLongLinkedHashMapStringLinkedHashMapStringLinkedHashMapStringLinkedHashMapStringListContinuousVerificationExecutionMetaData
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponseLinkedHashMapLongLinkedHashMapStringLinkedHashMapStringLinkedHashMapStringLinkedHashMapStringListContinuousVerificationExecutionMetaData,
    GetCVExecutionRecordsError,
    Schemas.RestResponseLinkedHashMapLongLinkedHashMapStringLinkedHashMapStringLinkedHashMapStringLinkedHashMapStringListContinuousVerificationExecutionMetaData
  >(
    queryKeyFn({ path: '/cvdash/get-records', operationId: 'getCVExecutionRecords', variables }),
    () => fetchGetCVExecutionRecords({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type GetAllCVExecutionsQueryParams = {
  accountId?: string
  /*
   * @format int64
   */
  beginEpochTs?: number
  /*
   * @format int64
   */
  endEpochTs?: number
  isTimeSeries?: boolean
  /*
   * @default 0
   */
  offset?: string
  limit?: string
  fieldsIncluded?: string[]
  fieldsExcluded?: string[]
}

export type GetAllCVExecutionsError = Fetcher.ErrorWrapper<undefined>

export type GetAllCVExecutionsVariables = {
  queryParams?: GetAllCVExecutionsQueryParams
} & PortalContext['fetcherOptions']

export const fetchGetAllCVExecutions = (variables: GetAllCVExecutionsVariables) =>
  portalFetch<
    Schemas.RestResponsePageResponseContinuousVerificationExecutionMetaData,
    GetAllCVExecutionsError,
    undefined,
    {},
    GetAllCVExecutionsQueryParams,
    {}
  >({ url: '/cvdash/get-all-cv-executions', method: 'get', ...variables })

export const useGetAllCVExecutions = (
  variables: GetAllCVExecutionsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponsePageResponseContinuousVerificationExecutionMetaData,
      GetAllCVExecutionsError,
      Schemas.RestResponsePageResponseContinuousVerificationExecutionMetaData
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponsePageResponseContinuousVerificationExecutionMetaData,
    GetAllCVExecutionsError,
    Schemas.RestResponsePageResponseContinuousVerificationExecutionMetaData
  >(
    queryKeyFn({ path: '/cvdash/get-all-cv-executions', operationId: 'getAllCVExecutions', variables }),
    () => fetchGetAllCVExecutions({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type GetDetailedHeatMapQueryParams = {
  accountId?: string
  appId?: string
  serviceId?: string
  /*
   * @format int64
   */
  startTime?: number
  /*
   * @format int64
   */
  endTime?: number
}

export type GetDetailedHeatMapError = Fetcher.ErrorWrapper<undefined>

export type GetDetailedHeatMapVariables = {
  queryParams?: GetDetailedHeatMapQueryParams
} & PortalContext['fetcherOptions']

export const fetchGetDetailedHeatMap = (variables: GetDetailedHeatMapVariables) =>
  portalFetch<
    Schemas.RestResponseListHeatMap,
    GetDetailedHeatMapError,
    undefined,
    {},
    GetDetailedHeatMapQueryParams,
    {}
  >({ url: '/cvdash/heatmap', method: 'get', ...variables })

export const useGetDetailedHeatMap = (
  variables: GetDetailedHeatMapVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponseListHeatMap,
      GetDetailedHeatMapError,
      Schemas.RestResponseListHeatMap
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<Schemas.RestResponseListHeatMap, GetDetailedHeatMapError, Schemas.RestResponseListHeatMap>(
    queryKeyFn({ path: '/cvdash/heatmap', operationId: 'getDetailedHeatMap', variables }),
    () => fetchGetDetailedHeatMap({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type GetCVExecutionDeploymentRecordsQueryParams = {
  accountId?: string
  /*
   * @format int64
   */
  startTime?: number
  /*
   * @format int64
   */
  endTime?: number
  serviceId?: string
}

export type GetCVExecutionDeploymentRecordsError = Fetcher.ErrorWrapper<undefined>

export type GetCVExecutionDeploymentRecordsVariables = {
  queryParams?: GetCVExecutionDeploymentRecordsQueryParams
} & PortalContext['fetcherOptions']

export const fetchGetCVExecutionDeploymentRecords = (variables: GetCVExecutionDeploymentRecordsVariables) =>
  portalFetch<
    Schemas.RestResponseListCVDeploymentData,
    GetCVExecutionDeploymentRecordsError,
    undefined,
    {},
    GetCVExecutionDeploymentRecordsQueryParams,
    {}
  >({ url: '/cvdash/cv24-7-deployment-list', method: 'get', ...variables })

export const useGetCVExecutionDeploymentRecords = (
  variables: GetCVExecutionDeploymentRecordsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponseListCVDeploymentData,
      GetCVExecutionDeploymentRecordsError,
      Schemas.RestResponseListCVDeploymentData
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponseListCVDeploymentData,
    GetCVExecutionDeploymentRecordsError,
    Schemas.RestResponseListCVDeploymentData
  >(
    queryKeyFn({ path: '/cvdash/cv24-7-deployment-list', operationId: 'getCVExecutionDeploymentRecords', variables }),
    () => fetchGetCVExecutionDeploymentRecords({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type GetAllDeploymentsForServiceQueryParams = {
  accountId?: string
  /*
   * @format int64
   */
  startTime?: number
  /*
   * @format int64
   */
  endTime?: number
  serviceId?: string
}

export type GetAllDeploymentsForServiceError = Fetcher.ErrorWrapper<undefined>

export type GetAllDeploymentsForServiceVariables = {
  queryParams?: GetAllDeploymentsForServiceQueryParams
} & PortalContext['fetcherOptions']

export const fetchGetAllDeploymentsForService = (variables: GetAllDeploymentsForServiceVariables) =>
  portalFetch<
    Schemas.RestResponseListWorkflowExecution,
    GetAllDeploymentsForServiceError,
    undefined,
    {},
    GetAllDeploymentsForServiceQueryParams,
    {}
  >({ url: '/cvdash/service-deployment-list', method: 'get', ...variables })

export const useGetAllDeploymentsForService = (
  variables: GetAllDeploymentsForServiceVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponseListWorkflowExecution,
      GetAllDeploymentsForServiceError,
      Schemas.RestResponseListWorkflowExecution
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponseListWorkflowExecution,
    GetAllDeploymentsForServiceError,
    Schemas.RestResponseListWorkflowExecution
  >(
    queryKeyFn({ path: '/cvdash/service-deployment-list', operationId: 'getAllDeploymentsForService', variables }),
    () => fetchGetAllDeploymentsForService({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type GetHeatMapSummaryQueryParams = {
  accountId?: string
  appId?: string
  serviceId?: string
  /*
   * @format int64
   */
  startTime?: number
  /*
   * @format int64
   */
  endTime?: number
}

export type GetHeatMapSummaryError = Fetcher.ErrorWrapper<undefined>

export type GetHeatMapSummaryVariables = {
  queryParams?: GetHeatMapSummaryQueryParams
} & PortalContext['fetcherOptions']

export const fetchGetHeatMapSummary = (variables: GetHeatMapSummaryVariables) =>
  portalFetch<Schemas.RestResponseListHeatMap, GetHeatMapSummaryError, undefined, {}, GetHeatMapSummaryQueryParams, {}>(
    { url: '/cvdash/heatmap-summary', method: 'get', ...variables }
  )

export const useGetHeatMapSummary = (
  variables: GetHeatMapSummaryVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponseListHeatMap,
      GetHeatMapSummaryError,
      Schemas.RestResponseListHeatMap
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<Schemas.RestResponseListHeatMap, GetHeatMapSummaryError, Schemas.RestResponseListHeatMap>(
    queryKeyFn({ path: '/cvdash/heatmap-summary', operationId: 'getHeatMapSummary', variables }),
    () => fetchGetHeatMapSummary({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type GetFilteredTimeSeriesOfHeatMapUnitQueryParams = {
  accountId?: string
  cvConfigId?: string
  /*
   * @format int64
   */
  startTime?: number
  /*
   * @format int64
   */
  endTime?: number
  /*
   * @format int64
   */
  historyStartTime?: number
  txnNames?: string[]
  metricNames?: string[]
  tags?: string[]
}

export type GetFilteredTimeSeriesOfHeatMapUnitError = Fetcher.ErrorWrapper<undefined>

export type GetFilteredTimeSeriesOfHeatMapUnitVariables = {
  queryParams?: GetFilteredTimeSeriesOfHeatMapUnitQueryParams
} & PortalContext['fetcherOptions']

export const fetchGetFilteredTimeSeriesOfHeatMapUnit = (variables: GetFilteredTimeSeriesOfHeatMapUnitVariables) =>
  portalFetch<
    Schemas.RestResponseSortedSetTransactionTimeSeries,
    GetFilteredTimeSeriesOfHeatMapUnitError,
    undefined,
    {},
    GetFilteredTimeSeriesOfHeatMapUnitQueryParams,
    {}
  >({ url: '/cvdash/timeseries', method: 'get', ...variables })

export const useGetFilteredTimeSeriesOfHeatMapUnit = (
  variables: GetFilteredTimeSeriesOfHeatMapUnitVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponseSortedSetTransactionTimeSeries,
      GetFilteredTimeSeriesOfHeatMapUnitError,
      Schemas.RestResponseSortedSetTransactionTimeSeries
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponseSortedSetTransactionTimeSeries,
    GetFilteredTimeSeriesOfHeatMapUnitError,
    Schemas.RestResponseSortedSetTransactionTimeSeries
  >(
    queryKeyFn({ path: '/cvdash/timeseries', operationId: 'getFilteredTimeSeriesOfHeatMapUnit', variables }),
    () => fetchGetFilteredTimeSeriesOfHeatMapUnit({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type GetFilteredTimeSeriesOfHeatMapUnitPostQueryParams = {
  accountId?: string
}

export type GetFilteredTimeSeriesOfHeatMapUnitPostError = Fetcher.ErrorWrapper<undefined>

export type GetFilteredTimeSeriesOfHeatMapUnitPostVariables = {
  body?: Schemas.TimeSeriesFilter
  queryParams?: GetFilteredTimeSeriesOfHeatMapUnitPostQueryParams
} & PortalContext['fetcherOptions']

export const fetchGetFilteredTimeSeriesOfHeatMapUnitPost = (
  variables: GetFilteredTimeSeriesOfHeatMapUnitPostVariables
) =>
  portalFetch<
    Schemas.RestResponseSortedSetTransactionTimeSeries,
    GetFilteredTimeSeriesOfHeatMapUnitPostError,
    Schemas.TimeSeriesFilter,
    {},
    GetFilteredTimeSeriesOfHeatMapUnitPostQueryParams,
    {}
  >({ url: '/cvdash/timeseries', method: 'post', ...variables })

export const useGetFilteredTimeSeriesOfHeatMapUnitPost = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.RestResponseSortedSetTransactionTimeSeries,
      GetFilteredTimeSeriesOfHeatMapUnitPostError,
      GetFilteredTimeSeriesOfHeatMapUnitPostVariables
    >,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<
    Schemas.RestResponseSortedSetTransactionTimeSeries,
    GetFilteredTimeSeriesOfHeatMapUnitPostError,
    GetFilteredTimeSeriesOfHeatMapUnitPostVariables
  >(
    (variables: GetFilteredTimeSeriesOfHeatMapUnitPostVariables) =>
      fetchGetFilteredTimeSeriesOfHeatMapUnitPost({ ...fetcherOptions, ...variables }),
    options
  )
}

export type GetFilteredTimeSeriesOfHeatMapUnitV2QueryParams = {
  accountId?: string
  cvConfigId?: string
  /*
   * @format int64
   */
  startTime?: number
  /*
   * @format int64
   */
  endTime?: number
  /*
   * @format int64
   */
  historyStartTime?: number
  txnNames?: string[]
  metricNames?: string[]
  tags?: string[]
  /*
   * @format int32
   */
  offset?: number
  /*
   * @format int32
   */
  pageSize?: number
}

export type GetFilteredTimeSeriesOfHeatMapUnitV2Error = Fetcher.ErrorWrapper<undefined>

export type GetFilteredTimeSeriesOfHeatMapUnitV2Variables = {
  queryParams?: GetFilteredTimeSeriesOfHeatMapUnitV2QueryParams
} & PortalContext['fetcherOptions']

export const fetchGetFilteredTimeSeriesOfHeatMapUnitV2 = (variables: GetFilteredTimeSeriesOfHeatMapUnitV2Variables) =>
  portalFetch<
    Schemas.RestResponseServiceGuardTimeSeries,
    GetFilteredTimeSeriesOfHeatMapUnitV2Error,
    undefined,
    {},
    GetFilteredTimeSeriesOfHeatMapUnitV2QueryParams,
    {}
  >({ url: '/cvdash/timeseries-serviceguard', method: 'get', ...variables })

export const useGetFilteredTimeSeriesOfHeatMapUnitV2 = (
  variables: GetFilteredTimeSeriesOfHeatMapUnitV2Variables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponseServiceGuardTimeSeries,
      GetFilteredTimeSeriesOfHeatMapUnitV2Error,
      Schemas.RestResponseServiceGuardTimeSeries
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponseServiceGuardTimeSeries,
    GetFilteredTimeSeriesOfHeatMapUnitV2Error,
    Schemas.RestResponseServiceGuardTimeSeries
  >(
    queryKeyFn({
      path: '/cvdash/timeseries-serviceguard',
      operationId: 'getFilteredTimeSeriesOfHeatMapUnitV2',
      variables
    }),
    () => fetchGetFilteredTimeSeriesOfHeatMapUnitV2({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type GetLogAnalysisSummaryOfHeatmapQueryParams = {
  accountId?: string
  appId?: string
  /*
   * @format int64
   */
  startTime?: number
  /*
   * @format int64
   */
  endTime?: number
  cvConfigId?: string
}

export type GetLogAnalysisSummaryOfHeatmapError = Fetcher.ErrorWrapper<undefined>

export type GetLogAnalysisSummaryOfHeatmapVariables = {
  queryParams?: GetLogAnalysisSummaryOfHeatmapQueryParams
} & PortalContext['fetcherOptions']

export const fetchGetLogAnalysisSummaryOfHeatmap = (variables: GetLogAnalysisSummaryOfHeatmapVariables) =>
  portalFetch<
    Schemas.RestResponseLogMLAnalysisSummary,
    GetLogAnalysisSummaryOfHeatmapError,
    undefined,
    {},
    GetLogAnalysisSummaryOfHeatmapQueryParams,
    {}
  >({ url: '/cvdash/log-24x7-summary', method: 'get', ...variables })

export const useGetLogAnalysisSummaryOfHeatmap = (
  variables: GetLogAnalysisSummaryOfHeatmapVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponseLogMLAnalysisSummary,
      GetLogAnalysisSummaryOfHeatmapError,
      Schemas.RestResponseLogMLAnalysisSummary
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponseLogMLAnalysisSummary,
    GetLogAnalysisSummaryOfHeatmapError,
    Schemas.RestResponseLogMLAnalysisSummary
  >(
    queryKeyFn({ path: '/cvdash/log-24x7-summary', operationId: 'getLogAnalysisSummaryOfHeatmap', variables }),
    () => fetchGetLogAnalysisSummaryOfHeatmap({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type GetListOfMetricTagsQueryParams = {
  accountId?: string
  appId?: string
  cvConfigId?: string
  /*
   * @format int64
   */
  startTime?: number
  /*
   * @format int64
   */
  endTime?: number
}

export type GetListOfMetricTagsError = Fetcher.ErrorWrapper<undefined>

export type GetListOfMetricTagsVariables = {
  queryParams?: GetListOfMetricTagsQueryParams
} & PortalContext['fetcherOptions']

export const fetchGetListOfMetricTags = (variables: GetListOfMetricTagsVariables) =>
  portalFetch<
    Schemas.RestResponseMapStringDouble,
    GetListOfMetricTagsError,
    undefined,
    {},
    GetListOfMetricTagsQueryParams,
    {}
  >({ url: '/cvdash/metric-tags', method: 'get', ...variables })

export const useGetListOfMetricTags = (
  variables: GetListOfMetricTagsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponseMapStringDouble,
      GetListOfMetricTagsError,
      Schemas.RestResponseMapStringDouble
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponseMapStringDouble,
    GetListOfMetricTagsError,
    Schemas.RestResponseMapStringDouble
  >(
    queryKeyFn({ path: '/cvdash/metric-tags', operationId: 'getListOfMetricTags', variables }),
    () => fetchGetListOfMetricTags({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type GetCurrenAnalysistWindowQueryParams = {
  cvConfigId?: string
}

export type GetCurrenAnalysistWindowError = Fetcher.ErrorWrapper<undefined>

export type GetCurrenAnalysistWindowVariables = {
  queryParams?: GetCurrenAnalysistWindowQueryParams
} & PortalContext['fetcherOptions']

export const fetchGetCurrenAnalysistWindow = (variables: GetCurrenAnalysistWindowVariables) =>
  portalFetch<
    Schemas.RestResponseLong,
    GetCurrenAnalysistWindowError,
    undefined,
    {},
    GetCurrenAnalysistWindowQueryParams,
    {}
  >({ url: '/cvdash/current-analysis-window', method: 'get', ...variables })

export const useGetCurrenAnalysistWindow = (
  variables: GetCurrenAnalysistWindowVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.RestResponseLong, GetCurrenAnalysistWindowError, Schemas.RestResponseLong>,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<Schemas.RestResponseLong, GetCurrenAnalysistWindowError, Schemas.RestResponseLong>(
    queryKeyFn({ path: '/cvdash/current-analysis-window', operationId: 'getCurrenAnalysistWindow', variables }),
    () => fetchGetCurrenAnalysistWindow({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type GetMetricsWithDataForNode2QueryParams = {
  accountId?: string
  serverConfigId?: string
}

export type GetMetricsWithDataForNode2Error = Fetcher.ErrorWrapper<undefined>

export type GetMetricsWithDataForNode2Variables = {
  body: Schemas.APMSetupTestNodeData
  queryParams?: GetMetricsWithDataForNode2QueryParams
} & PortalContext['fetcherOptions']

export const fetchGetMetricsWithDataForNode2 = (variables: GetMetricsWithDataForNode2Variables) =>
  portalFetch<
    Schemas.RestResponseVerificationNodeDataSetupResponse,
    GetMetricsWithDataForNode2Error,
    Schemas.APMSetupTestNodeData,
    {},
    GetMetricsWithDataForNode2QueryParams,
    {}
  >({ url: '/apm/node-data', method: 'post', ...variables })

export const useGetMetricsWithDataForNode2 = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.RestResponseVerificationNodeDataSetupResponse,
      GetMetricsWithDataForNode2Error,
      GetMetricsWithDataForNode2Variables
    >,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<
    Schemas.RestResponseVerificationNodeDataSetupResponse,
    GetMetricsWithDataForNode2Error,
    GetMetricsWithDataForNode2Variables
  >(
    (variables: GetMetricsWithDataForNode2Variables) =>
      fetchGetMetricsWithDataForNode2({ ...fetcherOptions, ...variables }),
    options
  )
}

export type NotifyVerificationStateQueryParams = {
  correlationId?: string
}

export type NotifyVerificationStateError = Fetcher.ErrorWrapper<undefined>

export type NotifyVerificationStateVariables = {
  body?: Schemas.VerificationDataAnalysisResponse
  queryParams?: NotifyVerificationStateQueryParams
} & PortalContext['fetcherOptions']

export const fetchNotifyVerificationState = (variables: NotifyVerificationStateVariables) =>
  portalFetch<
    Schemas.RestResponseBoolean,
    NotifyVerificationStateError,
    Schemas.VerificationDataAnalysisResponse,
    {},
    NotifyVerificationStateQueryParams,
    {}
  >({ url: '/apm/notify-verification-state', method: 'post', ...variables })

export const useNotifyVerificationState = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.RestResponseBoolean,
      NotifyVerificationStateError,
      NotifyVerificationStateVariables
    >,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<
    Schemas.RestResponseBoolean,
    NotifyVerificationStateError,
    NotifyVerificationStateVariables
  >(
    (variables: NotifyVerificationStateVariables) => fetchNotifyVerificationState({ ...fetcherOptions, ...variables }),
    options
  )
}

export type NotifyWorkflowVerificationStateQueryParams = {
  accountId?: string
  appId?: string
  workflowId?: string
  workflowExecutionId?: string
  stateExecutionId?: string
  status?:
    | 'ABORTED'
    | 'DISCONTINUING'
    | 'ERROR'
    | 'FAILED'
    | 'NEW'
    | 'PAUSED'
    | 'PAUSING'
    | 'QUEUED'
    | 'RESUMED'
    | 'RUNNING'
    | 'SCHEDULED'
    | 'STARTING'
    | 'SUCCESS'
    | 'WAITING'
    | 'SKIPPED'
    | 'ABORTING'
    | 'REJECTED'
    | 'EXPIRED'
    | 'PREPARING'
}

export type NotifyWorkflowVerificationStateError = Fetcher.ErrorWrapper<undefined>

export type NotifyWorkflowVerificationStateVariables = {
  queryParams?: NotifyWorkflowVerificationStateQueryParams
} & PortalContext['fetcherOptions']

export const fetchNotifyWorkflowVerificationState = (variables: NotifyWorkflowVerificationStateVariables) =>
  portalFetch<
    Schemas.RestResponseBoolean,
    NotifyWorkflowVerificationStateError,
    undefined,
    {},
    NotifyWorkflowVerificationStateQueryParams,
    {}
  >({ url: '/apm/notify-workflow-verification-state', method: 'post', ...variables })

export const useNotifyWorkflowVerificationState = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.RestResponseBoolean,
      NotifyWorkflowVerificationStateError,
      NotifyWorkflowVerificationStateVariables
    >,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<
    Schemas.RestResponseBoolean,
    NotifyWorkflowVerificationStateError,
    NotifyWorkflowVerificationStateVariables
  >(
    (variables: NotifyWorkflowVerificationStateVariables) =>
      fetchNotifyWorkflowVerificationState({ ...fetcherOptions, ...variables }),
    options
  )
}

export type CollectCVDataQueryParams = {
  cvTaskId?: string
}

export type CollectCVDataError = Fetcher.ErrorWrapper<undefined>

export type CollectCVDataVariables = {
  body?: Schemas.DataCollectionInfoV2
  queryParams?: CollectCVDataQueryParams
} & PortalContext['fetcherOptions']

export const fetchCollectCVData = (variables: CollectCVDataVariables) =>
  portalFetch<
    Schemas.RestResponseBoolean,
    CollectCVDataError,
    Schemas.DataCollectionInfoV2,
    {},
    CollectCVDataQueryParams,
    {}
  >({ url: '/apm/collect-cv-data', method: 'post', ...variables })

export const useCollectCVData = (
  options?: Omit<
    reactQuery.UseMutationOptions<Schemas.RestResponseBoolean, CollectCVDataError, CollectCVDataVariables>,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<Schemas.RestResponseBoolean, CollectCVDataError, CollectCVDataVariables>(
    (variables: CollectCVDataVariables) => fetchCollectCVData({ ...fetcherOptions, ...variables }),
    options
  )
}

export type GetVerificationStateExecutionDataQueryParams = {
  accountId?: string
  stateExecutionId?: string
}

export type GetVerificationStateExecutionDataError = Fetcher.ErrorWrapper<undefined>

export type GetVerificationStateExecutionDataVariables = {
  queryParams?: GetVerificationStateExecutionDataQueryParams
} & PortalContext['fetcherOptions']

export const fetchGetVerificationStateExecutionData = (variables: GetVerificationStateExecutionDataVariables) =>
  portalFetch<
    Schemas.RestResponseStateExecutionData,
    GetVerificationStateExecutionDataError,
    undefined,
    {},
    GetVerificationStateExecutionDataQueryParams,
    {}
  >({ url: '/apm/verification-state-details', method: 'get', ...variables })

export const useGetVerificationStateExecutionData = (
  variables: GetVerificationStateExecutionDataVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponseStateExecutionData,
      GetVerificationStateExecutionDataError,
      Schemas.RestResponseStateExecutionData
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponseStateExecutionData,
    GetVerificationStateExecutionDataError,
    Schemas.RestResponseStateExecutionData
  >(
    queryKeyFn({
      path: '/apm/verification-state-details',
      operationId: 'getVerificationStateExecutionData',
      variables
    }),
    () => fetchGetVerificationStateExecutionData({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type Collect247CVDataQueryParams = {
  cvConfigId?: string
  stateType?:
    | 'SUB_WORKFLOW'
    | 'REPEAT'
    | 'FORK'
    | 'WAIT'
    | 'PAUSE'
    | 'BARRIER'
    | 'RESOURCE_CONSTRAINT'
    | 'SHELL_SCRIPT'
    | 'HTTP'
    | 'TEMPLATIZED_SECRET_MANAGER'
    | 'EMAIL'
    | 'APP_DYNAMICS'
    | 'NEW_RELIC'
    | 'NEW_RELIC_DEPLOYMENT_MARKER'
    | 'DYNA_TRACE'
    | 'PROMETHEUS'
    | 'SPLUNKV2'
    | 'ELK'
    | 'LOGZ'
    | 'SUMO'
    | 'DATA_DOG'
    | 'DATA_DOG_LOG'
    | 'CVNG'
    | 'CLOUD_WATCH'
    | 'AWS_LAMBDA_VERIFICATION'
    | 'APM_VERIFICATION'
    | 'LOG_VERIFICATION'
    | 'BUG_SNAG'
    | 'STACK_DRIVER'
    | 'STACK_DRIVER_LOG'
    | 'INSTANA'
    | 'SCALYR'
    | 'ENV_STATE'
    | 'ENV_LOOP_STATE'
    | 'ENV_RESUME_STATE'
    | 'ENV_LOOP_RESUME_STATE'
    | 'COMMAND'
    | 'APPROVAL'
    | 'APPROVAL_RESUME'
    | 'ELASTIC_LOAD_BALANCER'
    | 'JENKINS'
    | 'GCB'
    | 'BAMBOO'
    | 'ARTIFACT_COLLECTION'
    | 'ARTIFACT_CHECK'
    | 'AZURE_NODE_SELECT'
    | 'AZURE_VMSS_SETUP'
    | 'AZURE_VMSS_DEPLOY'
    | 'AZURE_VMSS_ROLLBACK'
    | 'AZURE_VMSS_SWITCH_ROUTES'
    | 'AZURE_VMSS_SWITCH_ROUTES_ROLLBACK'
    | 'AZURE_WEBAPP_SLOT_SETUP'
    | 'AZURE_WEBAPP_SLOT_SWAP'
    | 'AZURE_WEBAPP_SLOT_SHIFT_TRAFFIC'
    | 'AZURE_WEBAPP_SLOT_ROLLBACK'
    | 'AWS_NODE_SELECT'
    | 'DC_NODE_SELECT'
    | 'ROLLING_NODE_SELECT'
    | 'PHASE'
    | 'PHASE_STEP'
    | 'STAGING_ORIGINAL_EXECUTION'
    | 'AWS_CODEDEPLOY_STATE'
    | 'AWS_CODEDEPLOY_ROLLBACK'
    | 'AWS_LAMBDA_STATE'
    | 'AWS_LAMBDA_ROLLBACK'
    | 'AWS_AMI_SERVICE_SETUP'
    | 'ASG_AMI_SERVICE_ALB_SHIFT_SETUP'
    | 'AWS_AMI_SERVICE_DEPLOY'
    | 'ASG_AMI_SERVICE_ALB_SHIFT_DEPLOY'
    | 'AWS_AMI_SWITCH_ROUTES'
    | 'ASG_AMI_ALB_SHIFT_SWITCH_ROUTES'
    | 'AWS_AMI_ROLLBACK_SWITCH_ROUTES'
    | 'ASG_AMI_ROLLBACK_ALB_SHIFT_SWITCH_ROUTES'
    | 'AWS_AMI_SERVICE_ROLLBACK'
    | 'ECS_SERVICE_SETUP'
    | 'SPOTINST_SETUP'
    | 'SPOTINST_ALB_SHIFT_SETUP'
    | 'SPOTINST_DEPLOY'
    | 'SPOTINST_ALB_SHIFT_DEPLOY'
    | 'SPOTINST_LISTENER_UPDATE'
    | 'SPOTINST_LISTENER_ALB_SHIFT'
    | 'SPOTINST_ROLLBACK'
    | 'SPOTINST_LISTENER_UPDATE_ROLLBACK'
    | 'SPOTINST_LISTENER_ALB_SHIFT_ROLLBACK'
    | 'ECS_SERVICE_SETUP_ROLLBACK'
    | 'ECS_DAEMON_SERVICE_SETUP'
    | 'ECS_BG_SERVICE_SETUP'
    | 'ECS_BG_SERVICE_SETUP_ROUTE53'
    | 'ECS_SERVICE_DEPLOY'
    | 'ECS_SERVICE_ROLLBACK'
    | 'ECS_LISTENER_UPDATE'
    | 'ECS_LISTENER_UPDATE_ROLLBACK'
    | 'ECS_ROUTE53_DNS_WEIGHT_UPDATE'
    | 'ECS_ROUTE53_DNS_WEIGHT_UPDATE_ROLLBACK'
    | 'KUBERNETES_SETUP'
    | 'KUBERNETES_SETUP_ROLLBACK'
    | 'KUBERNETES_DEPLOY'
    | 'KUBERNETES_DEPLOY_ROLLBACK'
    | 'KUBERNETES_STEADY_STATE_CHECK'
    | 'ECS_STEADY_STATE_CHECK'
    | 'ECS_RUN_TASK'
    | 'GCP_CLUSTER_SETUP'
    | 'HELM_DEPLOY'
    | 'HELM_ROLLBACK'
    | 'PCF_SETUP'
    | 'PCF_RESIZE'
    | 'PCF_ROLLBACK'
    | 'PCF_MAP_ROUTE'
    | 'PCF_UNMAP_ROUTE'
    | 'PCF_BG_MAP_ROUTE'
    | 'PCF_PLUGIN'
    | 'TERRAFORM_PROVISION'
    | 'TERRAFORM_APPLY'
    | 'TERRAGRUNT_PROVISION'
    | 'TERRAGRUNT_DESTROY'
    | 'TERRAGRUNT_ROLLBACK'
    | 'ARM_CREATE_RESOURCE'
    | 'ARM_ROLLBACK'
    | 'SHELL_SCRIPT_PROVISION'
    | 'TERRAFORM_DESTROY'
    | 'CLOUD_FORMATION_CREATE_STACK'
    | 'CLOUD_FORMATION_DELETE_STACK'
    | 'KUBERNETES_SWAP_SERVICE_SELECTORS'
    | 'CLOUD_FORMATION_ROLLBACK_STACK'
    | 'TERRAFORM_ROLLBACK'
    | 'K8S_DEPLOYMENT_ROLLING'
    | 'K8S_SCALE'
    | 'K8S_DEPLOYMENT_ROLLING_ROLLBACK'
    | 'K8S_BLUE_GREEN_DEPLOY'
    | 'K8S_CANARY_DEPLOY'
    | 'K8S_DELETE'
    | 'RANCHER_RESOLVE'
    | 'RANCHER_K8S_DEPLOYMENT_ROLLING'
    | 'RANCHER_K8S_CANARY_DEPLOY'
    | 'RANCHER_K8S_BLUE_GREEN_DEPLOY'
    | 'RANCHER_KUBERNETES_SWAP_SERVICE_SELECTORS'
    | 'RANCHER_K8S_DELETE'
    | 'RANCHER_K8S_DEPLOYMENT_ROLLING_ROLLBACK'
    | 'JIRA_CREATE_UPDATE'
    | 'SERVICENOW_CREATE_UPDATE'
    | 'K8S_TRAFFIC_SPLIT'
    | 'K8S_APPLY'
    | 'CUSTOM_DEPLOYMENT_FETCH_INSTANCES'
  /*
   * @format int64
   */
  startTime?: number
  /*
   * @format int64
   */
  endTime?: number
}

export type Collect247CVDataError = Fetcher.ErrorWrapper<undefined>

export type Collect247CVDataVariables = {
  queryParams?: Collect247CVDataQueryParams
} & PortalContext['fetcherOptions']

export const fetchCollect247CVData = (variables: Collect247CVDataVariables) =>
  portalFetch<Schemas.RestResponseBoolean, Collect247CVDataError, undefined, {}, Collect247CVDataQueryParams, {}>({
    url: '/apm/collect-24-7-data',
    method: 'get',
    ...variables
  })

export const useCollect247CVData = (
  variables: Collect247CVDataVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.RestResponseBoolean, Collect247CVDataError, Schemas.RestResponseBoolean>,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<Schemas.RestResponseBoolean, Collect247CVDataError, Schemas.RestResponseBoolean>(
    queryKeyFn({ path: '/apm/collect-24-7-data', operationId: 'collect247CVData', variables }),
    () => fetchCollect247CVData({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type CollectWorkflowDataQueryParams = {
  analysisContextId?: string
  /*
   * @format int64
   */
  startDataCollectionMinute?: number
}

export type CollectWorkflowDataError = Fetcher.ErrorWrapper<undefined>

export type CollectWorkflowDataVariables = {
  queryParams?: CollectWorkflowDataQueryParams
} & PortalContext['fetcherOptions']

export const fetchCollectWorkflowData = (variables: CollectWorkflowDataVariables) =>
  portalFetch<Schemas.RestResponseBoolean, CollectWorkflowDataError, undefined, {}, CollectWorkflowDataQueryParams, {}>(
    { url: '/apm/collect-data', method: 'get', ...variables }
  )

export const useCollectWorkflowData = (
  variables: CollectWorkflowDataVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.RestResponseBoolean, CollectWorkflowDataError, Schemas.RestResponseBoolean>,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<Schemas.RestResponseBoolean, CollectWorkflowDataError, Schemas.RestResponseBoolean>(
    queryKeyFn({ path: '/apm/collect-data', operationId: 'collectWorkflowData', variables }),
    () => fetchCollectWorkflowData({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type GetCVCertifiedLabelsForWorkflowQueryParams = {
  accountId?: string
  appId?: string
  workflowExecutionId?: string
}

export type GetCVCertifiedLabelsForWorkflowError = Fetcher.ErrorWrapper<undefined>

export type GetCVCertifiedLabelsForWorkflowVariables = {
  queryParams?: GetCVCertifiedLabelsForWorkflowQueryParams
} & PortalContext['fetcherOptions']

export const fetchGetCVCertifiedLabelsForWorkflow = (variables: GetCVCertifiedLabelsForWorkflowVariables) =>
  portalFetch<
    Schemas.RestResponseListCVCertifiedDetailsForWorkflowState,
    GetCVCertifiedLabelsForWorkflowError,
    undefined,
    {},
    GetCVCertifiedLabelsForWorkflowQueryParams,
    {}
  >({ url: '/apm/cv-certified-details-workflow', method: 'get', ...variables })

export const useGetCVCertifiedLabelsForWorkflow = (
  variables: GetCVCertifiedLabelsForWorkflowVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponseListCVCertifiedDetailsForWorkflowState,
      GetCVCertifiedLabelsForWorkflowError,
      Schemas.RestResponseListCVCertifiedDetailsForWorkflowState
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponseListCVCertifiedDetailsForWorkflowState,
    GetCVCertifiedLabelsForWorkflowError,
    Schemas.RestResponseListCVCertifiedDetailsForWorkflowState
  >(
    queryKeyFn({
      path: '/apm/cv-certified-details-workflow',
      operationId: 'getCVCertifiedLabelsForWorkflow',
      variables
    }),
    () => fetchGetCVCertifiedLabelsForWorkflow({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type GetCVCertifiedLabelsForPipelineQueryParams = {
  accountId?: string
  appId?: string
  pipelineExecutionId?: string
}

export type GetCVCertifiedLabelsForPipelineError = Fetcher.ErrorWrapper<undefined>

export type GetCVCertifiedLabelsForPipelineVariables = {
  queryParams?: GetCVCertifiedLabelsForPipelineQueryParams
} & PortalContext['fetcherOptions']

export const fetchGetCVCertifiedLabelsForPipeline = (variables: GetCVCertifiedLabelsForPipelineVariables) =>
  portalFetch<
    Schemas.RestResponseListCVCertifiedDetailsForWorkflowState,
    GetCVCertifiedLabelsForPipelineError,
    undefined,
    {},
    GetCVCertifiedLabelsForPipelineQueryParams,
    {}
  >({ url: '/apm/cv-certified-details-pipeline', method: 'get', ...variables })

export const useGetCVCertifiedLabelsForPipeline = (
  variables: GetCVCertifiedLabelsForPipelineVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponseListCVCertifiedDetailsForWorkflowState,
      GetCVCertifiedLabelsForPipelineError,
      Schemas.RestResponseListCVCertifiedDetailsForWorkflowState
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponseListCVCertifiedDetailsForWorkflowState,
    GetCVCertifiedLabelsForPipelineError,
    Schemas.RestResponseListCVCertifiedDetailsForWorkflowState
  >(
    queryKeyFn({
      path: '/apm/cv-certified-details-pipeline',
      operationId: 'getCVCertifiedLabelsForPipeline',
      variables
    }),
    () => fetchGetCVCertifiedLabelsForPipeline({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type PercentileQueryParams = {
  accountId?: string
  /*
   * @format int64
   */
  fromTsMillis?: number
  /*
   * @format int64
   */
  toTsMillis?: number
  /*
   * @format double
   */
  percentile?: number
}

export type PercentileError = Fetcher.ErrorWrapper<undefined>

export type PercentileVariables = {
  queryParams?: PercentileQueryParams
} & PortalContext['fetcherOptions']

export const fetchPercentile = (variables: PercentileVariables) =>
  portalFetch<Schemas.RestResponseMapStringObject, PercentileError, undefined, {}, PercentileQueryParams, {}>({
    url: '/dash-stats/percentile',
    method: 'get',
    ...variables
  })

export const usePercentile = (
  variables: PercentileVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponseMapStringObject,
      PercentileError,
      Schemas.RestResponseMapStringObject
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<Schemas.RestResponseMapStringObject, PercentileError, Schemas.RestResponseMapStringObject>(
    queryKeyFn({ path: '/dash-stats/percentile', operationId: 'percentile', variables }),
    () => fetchPercentile({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type GetAppInstanceSummaryStatsQueryParams = {
  accountId?: string
  appId?: string[]
  groupBy?: string[]
  /*
   * @format int64
   */
  timestamp?: number
}

export type GetAppInstanceSummaryStatsError = Fetcher.ErrorWrapper<undefined>

export type GetAppInstanceSummaryStatsVariables = {
  queryParams?: GetAppInstanceSummaryStatsQueryParams
} & PortalContext['fetcherOptions']

export const fetchGetAppInstanceSummaryStats = (variables: GetAppInstanceSummaryStatsVariables) =>
  portalFetch<
    Schemas.RestResponseInstanceSummaryStats,
    GetAppInstanceSummaryStatsError,
    undefined,
    {},
    GetAppInstanceSummaryStatsQueryParams,
    {}
  >({ url: '/dash-stats/app-instance-summary-stats', method: 'get', ...variables })

export const useGetAppInstanceSummaryStats = (
  variables: GetAppInstanceSummaryStatsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponseInstanceSummaryStats,
      GetAppInstanceSummaryStatsError,
      Schemas.RestResponseInstanceSummaryStats
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponseInstanceSummaryStats,
    GetAppInstanceSummaryStatsError,
    Schemas.RestResponseInstanceSummaryStats
  >(
    queryKeyFn({
      path: '/dash-stats/app-instance-summary-stats',
      operationId: 'getAppInstanceSummaryStats',
      variables
    }),
    () => fetchGetAppInstanceSummaryStats({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type GetInstanceDetailsQueryParams = {
  accountId?: string
  instanceId?: string
}

export type GetInstanceDetailsError = Fetcher.ErrorWrapper<undefined>

export type GetInstanceDetailsVariables = {
  queryParams?: GetInstanceDetailsQueryParams
} & PortalContext['fetcherOptions']

export const fetchGetInstanceDetails = (variables: GetInstanceDetailsVariables) =>
  portalFetch<Schemas.RestResponseInstance, GetInstanceDetailsError, undefined, {}, GetInstanceDetailsQueryParams, {}>({
    url: '/dash-stats/instance-details',
    method: 'get',
    ...variables
  })

export const useGetInstanceDetails = (
  variables: GetInstanceDetailsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.RestResponseInstance, GetInstanceDetailsError, Schemas.RestResponseInstance>,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<Schemas.RestResponseInstance, GetInstanceDetailsError, Schemas.RestResponseInstance>(
    queryKeyFn({ path: '/dash-stats/instance-details', operationId: 'getInstanceDetails', variables }),
    () => fetchGetInstanceDetails({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type GetServiceInstanceStatsQueryParams = {
  accountId?: string
  serviceId?: string
  /*
   * @format int64
   */
  timestamp?: number
}

export type GetServiceInstanceStatsError = Fetcher.ErrorWrapper<undefined>

export type GetServiceInstanceStatsVariables = {
  queryParams?: GetServiceInstanceStatsQueryParams
} & PortalContext['fetcherOptions']

export const fetchGetServiceInstanceStats = (variables: GetServiceInstanceStatsVariables) =>
  portalFetch<
    Schemas.RestResponseListInstanceStatsByEnvironment,
    GetServiceInstanceStatsError,
    undefined,
    {},
    GetServiceInstanceStatsQueryParams,
    {}
  >({ url: '/dash-stats/service-instance-stats', method: 'get', ...variables })

export const useGetServiceInstanceStats = (
  variables: GetServiceInstanceStatsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponseListInstanceStatsByEnvironment,
      GetServiceInstanceStatsError,
      Schemas.RestResponseListInstanceStatsByEnvironment
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponseListInstanceStatsByEnvironment,
    GetServiceInstanceStatsError,
    Schemas.RestResponseListInstanceStatsByEnvironment
  >(
    queryKeyFn({ path: '/dash-stats/service-instance-stats', operationId: 'getServiceInstanceStats', variables }),
    () => fetchGetServiceInstanceStats({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type GetServiceInstanceSummaryStatsQueryParams = {
  accountId?: string
  serviceId?: string
  groupBy?: string[]
  /*
   * @format int64
   */
  timestamp?: number
}

export type GetServiceInstanceSummaryStatsError = Fetcher.ErrorWrapper<undefined>

export type GetServiceInstanceSummaryStatsVariables = {
  queryParams?: GetServiceInstanceSummaryStatsQueryParams
} & PortalContext['fetcherOptions']

export const fetchGetServiceInstanceSummaryStats = (variables: GetServiceInstanceSummaryStatsVariables) =>
  portalFetch<
    Schemas.RestResponseInstanceSummaryStats,
    GetServiceInstanceSummaryStatsError,
    undefined,
    {},
    GetServiceInstanceSummaryStatsQueryParams,
    {}
  >({ url: '/dash-stats/service-instance-summary-stats', method: 'get', ...variables })

export const useGetServiceInstanceSummaryStats = (
  variables: GetServiceInstanceSummaryStatsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponseInstanceSummaryStats,
      GetServiceInstanceSummaryStatsError,
      Schemas.RestResponseInstanceSummaryStats
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponseInstanceSummaryStats,
    GetServiceInstanceSummaryStatsError,
    Schemas.RestResponseInstanceSummaryStats
  >(
    queryKeyFn({
      path: '/dash-stats/service-instance-summary-stats',
      operationId: 'getServiceInstanceSummaryStats',
      variables
    }),
    () => fetchGetServiceInstanceSummaryStats({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type GetServiceInstanceDashboardQueryParams = {
  accountId?: string
  appId?: string
  serviceId?: string
}

export type GetServiceInstanceDashboardError = Fetcher.ErrorWrapper<undefined>

export type GetServiceInstanceDashboardVariables = {
  queryParams?: GetServiceInstanceDashboardQueryParams
} & PortalContext['fetcherOptions']

export const fetchGetServiceInstanceDashboard = (variables: GetServiceInstanceDashboardVariables) =>
  portalFetch<
    Schemas.RestResponseServiceInstanceDashboard,
    GetServiceInstanceDashboardError,
    undefined,
    {},
    GetServiceInstanceDashboardQueryParams,
    {}
  >({ url: '/dash-stats/service-instance-dash', method: 'get', ...variables })

export const useGetServiceInstanceDashboard = (
  variables: GetServiceInstanceDashboardVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponseServiceInstanceDashboard,
      GetServiceInstanceDashboardError,
      Schemas.RestResponseServiceInstanceDashboard
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponseServiceInstanceDashboard,
    GetServiceInstanceDashboardError,
    Schemas.RestResponseServiceInstanceDashboard
  >(
    queryKeyFn({ path: '/dash-stats/service-instance-dash', operationId: 'getServiceInstanceDashboard', variables }),
    () => fetchGetServiceInstanceDashboard({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type GetCompareServicesByEnvironmentQueryParams = {
  accountId?: string
  appId?: string
  envId1?: string
  envId2?: string
  /*
   * @format int32
   * @default -1
   */
  offset?: number
  /*
   * @format int32
   * @default -1
   */
  limit?: number
}

export type GetCompareServicesByEnvironmentError = Fetcher.ErrorWrapper<undefined>

export type GetCompareServicesByEnvironmentVariables = {
  queryParams?: GetCompareServicesByEnvironmentQueryParams
} & PortalContext['fetcherOptions']

export const fetchGetCompareServicesByEnvironment = (variables: GetCompareServicesByEnvironmentVariables) =>
  portalFetch<
    Schemas.RestResponsePageResponseCompareEnvironmentAggregationResponseInfo,
    GetCompareServicesByEnvironmentError,
    undefined,
    {},
    GetCompareServicesByEnvironmentQueryParams,
    {}
  >({ url: '/dash-stats/service-compare-environment', method: 'get', ...variables })

export const useGetCompareServicesByEnvironment = (
  variables: GetCompareServicesByEnvironmentVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponsePageResponseCompareEnvironmentAggregationResponseInfo,
      GetCompareServicesByEnvironmentError,
      Schemas.RestResponsePageResponseCompareEnvironmentAggregationResponseInfo
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponsePageResponseCompareEnvironmentAggregationResponseInfo,
    GetCompareServicesByEnvironmentError,
    Schemas.RestResponsePageResponseCompareEnvironmentAggregationResponseInfo
  >(
    queryKeyFn({
      path: '/dash-stats/service-compare-environment',
      operationId: 'getCompareServicesByEnvironment',
      variables
    }),
    () => fetchGetCompareServicesByEnvironment({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type GetAppInstanceStatsQueryParams = {
  accountId?: string
  appId?: string[]
  /*
   * @format int64
   */
  timestamp?: number
}

export type GetAppInstanceStatsError = Fetcher.ErrorWrapper<undefined>

export type GetAppInstanceStatsVariables = {
  queryParams?: GetAppInstanceStatsQueryParams
} & PortalContext['fetcherOptions']

export const fetchGetAppInstanceStats = (variables: GetAppInstanceStatsVariables) =>
  portalFetch<
    Schemas.RestResponseListInstanceStatsByService,
    GetAppInstanceStatsError,
    undefined,
    {},
    GetAppInstanceStatsQueryParams,
    {}
  >({ url: '/dash-stats/app-instance-stats', method: 'get', ...variables })

export const useGetAppInstanceStats = (
  variables: GetAppInstanceStatsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponseListInstanceStatsByService,
      GetAppInstanceStatsError,
      Schemas.RestResponseListInstanceStatsByService
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponseListInstanceStatsByService,
    GetAppInstanceStatsError,
    Schemas.RestResponseListInstanceStatsByService
  >(
    queryKeyFn({ path: '/dash-stats/app-instance-stats', operationId: 'getAppInstanceStats', variables }),
    () => fetchGetAppInstanceStats({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type GetAppInstanceCountStatsQueryParams = {
  accountId?: string
  appId?: string[]
  /*
   * @format int64
   */
  timestamp?: number
  /*
   * @format int32
   * @default -1
   */
  offset?: number
  /*
   * @format int32
   * @default -1
   */
  limit?: number
}

export type GetAppInstanceCountStatsError = Fetcher.ErrorWrapper<undefined>

export type GetAppInstanceCountStatsVariables = {
  queryParams?: GetAppInstanceCountStatsQueryParams
} & PortalContext['fetcherOptions']

export const fetchGetAppInstanceCountStats = (variables: GetAppInstanceCountStatsVariables) =>
  portalFetch<
    Schemas.RestResponsePageResponseInstanceSummaryStatsByService,
    GetAppInstanceCountStatsError,
    undefined,
    {},
    GetAppInstanceCountStatsQueryParams,
    {}
  >({ url: '/dash-stats/app-instance-count-stats', method: 'get', ...variables })

export const useGetAppInstanceCountStats = (
  variables: GetAppInstanceCountStatsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponsePageResponseInstanceSummaryStatsByService,
      GetAppInstanceCountStatsError,
      Schemas.RestResponsePageResponseInstanceSummaryStatsByService
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponsePageResponseInstanceSummaryStatsByService,
    GetAppInstanceCountStatsError,
    Schemas.RestResponsePageResponseInstanceSummaryStatsByService
  >(
    queryKeyFn({ path: '/dash-stats/app-instance-count-stats', operationId: 'getAppInstanceCountStats', variables }),
    () => fetchGetAppInstanceCountStats({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type ManualSyncQueryParams = {
  accountId?: string
  appId?: string
  inframappingId?: string
}

export type ManualSyncError = Fetcher.ErrorWrapper<undefined>

export type ManualSyncVariables = {
  queryParams?: ManualSyncQueryParams
} & PortalContext['fetcherOptions']

export const fetchManualSync = (variables: ManualSyncVariables) =>
  portalFetch<Schemas.RestResponseString, ManualSyncError, undefined, {}, ManualSyncQueryParams, {}>({
    url: '/dash-stats/manual-sync',
    method: 'put',
    ...variables
  })

export const useManualSync = (
  options?: Omit<
    reactQuery.UseMutationOptions<Schemas.RestResponseString, ManualSyncError, ManualSyncVariables>,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<Schemas.RestResponseString, ManualSyncError, ManualSyncVariables>(
    (variables: ManualSyncVariables) => fetchManualSync({ ...fetcherOptions, ...variables }),
    options
  )
}

export type GetManualSyncJobStatusQueryParams = {
  accountId?: string
  jobs?: string[]
}

export type GetManualSyncJobStatusError = Fetcher.ErrorWrapper<undefined>

export type GetManualSyncJobStatusVariables = {
  queryParams?: GetManualSyncJobStatusQueryParams
} & PortalContext['fetcherOptions']

export const fetchGetManualSyncJobStatus = (variables: GetManualSyncJobStatusVariables) =>
  portalFetch<
    Schemas.RestResponseListBoolean,
    GetManualSyncJobStatusError,
    undefined,
    {},
    GetManualSyncJobStatusQueryParams,
    {}
  >({ url: '/dash-stats/manual-sync-job', method: 'get', ...variables })

export const useGetManualSyncJobStatus = (
  variables: GetManualSyncJobStatusVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponseListBoolean,
      GetManualSyncJobStatusError,
      Schemas.RestResponseListBoolean
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponseListBoolean,
    GetManualSyncJobStatusError,
    Schemas.RestResponseListBoolean
  >(
    queryKeyFn({ path: '/dash-stats/manual-sync-job', operationId: 'getManualSyncJobStatus', variables }),
    () => fetchGetManualSyncJobStatus({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type GetInstanceStatsForGivenTimeQueryParams = {
  accountId?: string
  /*
   * @format int64
   */
  fromTsMillis?: number
  /*
   * @format int64
   */
  toTsMillis?: number
}

export type GetInstanceStatsForGivenTimeError = Fetcher.ErrorWrapper<undefined>

export type GetInstanceStatsForGivenTimeVariables = {
  queryParams?: GetInstanceStatsForGivenTimeQueryParams
} & PortalContext['fetcherOptions']

export const fetchGetInstanceStatsForGivenTime = (variables: GetInstanceStatsForGivenTimeVariables) =>
  portalFetch<
    Schemas.RestResponseInstanceTimeline,
    GetInstanceStatsForGivenTimeError,
    undefined,
    {},
    GetInstanceStatsForGivenTimeQueryParams,
    {}
  >({ url: '/dash-stats/timeline', method: 'get', ...variables })

export const useGetInstanceStatsForGivenTime = (
  variables: GetInstanceStatsForGivenTimeVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponseInstanceTimeline,
      GetInstanceStatsForGivenTimeError,
      Schemas.RestResponseInstanceTimeline
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponseInstanceTimeline,
    GetInstanceStatsForGivenTimeError,
    Schemas.RestResponseInstanceTimeline
  >(
    queryKeyFn({ path: '/dash-stats/timeline', operationId: 'getInstanceStatsForGivenTime', variables }),
    () => fetchGetInstanceStatsForGivenTime({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type GetTimeRangesQueryParams = {
  accountId?: string
}

export type GetTimeRangesError = Fetcher.ErrorWrapper<undefined>

export type GetTimeRangesVariables = {
  queryParams?: GetTimeRangesQueryParams
} & PortalContext['fetcherOptions']

export const fetchGetTimeRanges = (variables: GetTimeRangesVariables) =>
  portalFetch<Schemas.RestResponseListTimeRange, GetTimeRangesError, undefined, {}, GetTimeRangesQueryParams, {}>({
    url: '/dash-stats/instance-history-ranges',
    method: 'get',
    ...variables
  })

export const useGetTimeRanges = (
  variables: GetTimeRangesVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponseListTimeRange,
      GetTimeRangesError,
      Schemas.RestResponseListTimeRange
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<Schemas.RestResponseListTimeRange, GetTimeRangesError, Schemas.RestResponseListTimeRange>(
    queryKeyFn({ path: '/dash-stats/instance-history-ranges', operationId: 'getTimeRanges', variables }),
    () => fetchGetTimeRanges({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type GetAllMetricNamesQueryParams = {
  accountId?: string
}

export type GetAllMetricNamesError = Fetcher.ErrorWrapper<undefined>

export type GetAllMetricNamesVariables = {
  queryParams?: GetAllMetricNamesQueryParams
} & PortalContext['fetcherOptions']

export const fetchGetAllMetricNames = (variables: GetAllMetricNamesVariables) =>
  portalFetch<Schemas.RestResponseListMetric, GetAllMetricNamesError, undefined, {}, GetAllMetricNamesQueryParams, {}>({
    url: '/datadog/metric-names',
    method: 'get',
    ...variables
  })

export const useGetAllMetricNames = (
  variables: GetAllMetricNamesVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.RestResponseListMetric, GetAllMetricNamesError, Schemas.RestResponseListMetric>,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<Schemas.RestResponseListMetric, GetAllMetricNamesError, Schemas.RestResponseListMetric>(
    queryKeyFn({ path: '/datadog/metric-names', operationId: 'getAllMetricNames', variables }),
    () => fetchGetAllMetricNames({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type GetMetricsWithDataForNode3QueryParams = {
  accountId?: string
  serverConfigId?: string
}

export type GetMetricsWithDataForNode3Error = Fetcher.ErrorWrapper<undefined>

export type GetMetricsWithDataForNode3Variables = {
  body: Schemas.DataDogSetupTestNodeData
  queryParams?: GetMetricsWithDataForNode3QueryParams
} & PortalContext['fetcherOptions']

export const fetchGetMetricsWithDataForNode3 = (variables: GetMetricsWithDataForNode3Variables) =>
  portalFetch<
    Schemas.RestResponseVerificationNodeDataSetupResponse,
    GetMetricsWithDataForNode3Error,
    Schemas.DataDogSetupTestNodeData,
    {},
    GetMetricsWithDataForNode3QueryParams,
    {}
  >({ url: '/datadog/node-data', method: 'post', ...variables })

export const useGetMetricsWithDataForNode3 = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.RestResponseVerificationNodeDataSetupResponse,
      GetMetricsWithDataForNode3Error,
      GetMetricsWithDataForNode3Variables
    >,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<
    Schemas.RestResponseVerificationNodeDataSetupResponse,
    GetMetricsWithDataForNode3Error,
    GetMetricsWithDataForNode3Variables
  >(
    (variables: GetMetricsWithDataForNode3Variables) =>
      fetchGetMetricsWithDataForNode3({ ...fetcherOptions, ...variables }),
    options
  )
}

export type AddQueryParams = {
  accountId?: string
}

export type AddError = Fetcher.ErrorWrapper<undefined>

export type AddVariables = {
  body: RequestBodies.Delegate
  queryParams?: AddQueryParams
} & PortalContext['fetcherOptions']

export const fetchAdd = (variables: AddVariables) =>
  portalFetch<Schemas.RestResponseDelegate, AddError, RequestBodies.Delegate, {}, AddQueryParams, {}>({
    url: '/agent/delegates',
    method: 'post',
    ...variables
  })

export const useAdd = (
  options?: Omit<reactQuery.UseMutationOptions<Schemas.RestResponseDelegate, AddError, AddVariables>, 'mutationFn'>
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<Schemas.RestResponseDelegate, AddError, AddVariables>(
    (variables: AddVariables) => fetchAdd({ ...fetcherOptions, ...variables }),
    options
  )
}

export type RegisterQueryParams = {
  accountId?: string
}

export type RegisterError = Fetcher.ErrorWrapper<undefined>

export type RegisterVariables = {
  body?: RequestBodies.DelegateParams
  queryParams?: RegisterQueryParams
} & PortalContext['fetcherOptions']

export const fetchRegister = (variables: RegisterVariables) =>
  portalFetch<
    Schemas.RestResponseDelegateRegisterResponse,
    RegisterError,
    RequestBodies.DelegateParams,
    {},
    RegisterQueryParams,
    {}
  >({ url: '/agent/delegates/register', method: 'post', ...variables })

export const useRegister = (
  options?: Omit<
    reactQuery.UseMutationOptions<Schemas.RestResponseDelegateRegisterResponse, RegisterError, RegisterVariables>,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<Schemas.RestResponseDelegateRegisterResponse, RegisterError, RegisterVariables>(
    (variables: RegisterVariables) => fetchRegister({ ...fetcherOptions, ...variables }),
    options
  )
}

export type UnregisterQueryParams = {
  accountId?: string
}

export type UnregisterError = Fetcher.ErrorWrapper<undefined>

export type UnregisterVariables = {
  body?: Schemas.DelegateUnregisterRequest
  queryParams?: UnregisterQueryParams
} & PortalContext['fetcherOptions']

export const fetchUnregister = (variables: UnregisterVariables) =>
  portalFetch<
    Schemas.RestResponseVoid,
    UnregisterError,
    Schemas.DelegateUnregisterRequest,
    {},
    UnregisterQueryParams,
    {}
  >({ url: '/agent/delegates/unregister', method: 'post', ...variables })

export const useUnregister = (
  options?: Omit<
    reactQuery.UseMutationOptions<Schemas.RestResponseVoid, UnregisterError, UnregisterVariables>,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<Schemas.RestResponseVoid, UnregisterError, UnregisterVariables>(
    (variables: UnregisterVariables) => fetchUnregister({ ...fetcherOptions, ...variables }),
    options
  )
}

export type GetDelegateConfigurationQueryParams = {
  accountId?: string
}

export type GetDelegateConfigurationError = Fetcher.ErrorWrapper<undefined>

export type GetDelegateConfigurationVariables = {
  queryParams?: GetDelegateConfigurationQueryParams
} & PortalContext['fetcherOptions']

export const fetchGetDelegateConfiguration = (variables: GetDelegateConfigurationVariables) =>
  portalFetch<
    Schemas.RestResponseDelegateConfiguration,
    GetDelegateConfigurationError,
    undefined,
    {},
    GetDelegateConfigurationQueryParams,
    {}
  >({ url: '/agent/delegates/configuration', method: 'get', ...variables })

export const useGetDelegateConfiguration = (
  variables: GetDelegateConfigurationVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponseDelegateConfiguration,
      GetDelegateConfigurationError,
      Schemas.RestResponseDelegateConfiguration
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponseDelegateConfiguration,
    GetDelegateConfigurationError,
    Schemas.RestResponseDelegateConfiguration
  >(
    queryKeyFn({ path: '/agent/delegates/configuration', operationId: 'getDelegateConfiguration', variables }),
    () => fetchGetDelegateConfiguration({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type GetDelegatePropertiesQueryParams = {
  accountId?: string
}

export type GetDelegatePropertiesError = Fetcher.ErrorWrapper<undefined>

export type GetDelegatePropertiesVariables = {
  body?: RequestBodies.GetDelegatePropertiesBody
  queryParams?: GetDelegatePropertiesQueryParams
} & PortalContext['fetcherOptions']

export const fetchGetDelegateProperties = (variables: GetDelegatePropertiesVariables) =>
  portalFetch<
    Schemas.RestResponseString,
    GetDelegatePropertiesError,
    RequestBodies.GetDelegatePropertiesBody,
    {},
    GetDelegatePropertiesQueryParams,
    {}
  >({ url: '/agent/delegates/properties', method: 'post', ...variables })

export const useGetDelegateProperties = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.RestResponseString,
      GetDelegatePropertiesError,
      GetDelegatePropertiesVariables
    >,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<Schemas.RestResponseString, GetDelegatePropertiesError, GetDelegatePropertiesVariables>(
    (variables: GetDelegatePropertiesVariables) => fetchGetDelegateProperties({ ...fetcherOptions, ...variables }),
    options
  )
}

export type CheckForProfilePathParams = {
  delegateId: string
}

export type CheckForProfileQueryParams = {
  accountId?: string
  profileId?: string
  /*
   * @format int64
   */
  lastUpdatedAt?: number
}

export type CheckForProfileError = Fetcher.ErrorWrapper<undefined>

export type CheckForProfileVariables = {
  pathParams: CheckForProfilePathParams
  queryParams?: CheckForProfileQueryParams
} & PortalContext['fetcherOptions']

export const fetchCheckForProfile = (variables: CheckForProfileVariables) =>
  portalFetch<
    Schemas.RestResponseDelegateProfileParams,
    CheckForProfileError,
    undefined,
    {},
    CheckForProfileQueryParams,
    CheckForProfilePathParams
  >({ url: '/agent/delegates/{delegateId}/profile', method: 'get', ...variables })

export const useCheckForProfile = (
  variables: CheckForProfileVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponseDelegateProfileParams,
      CheckForProfileError,
      Schemas.RestResponseDelegateProfileParams
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponseDelegateProfileParams,
    CheckForProfileError,
    Schemas.RestResponseDelegateProfileParams
  >(
    queryKeyFn({ path: '/agent/delegates/{delegateId}/profile', operationId: 'checkForProfile', variables }),
    () => fetchCheckForProfile({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type ConnectionHeartbeatPathParams = {
  delegateId: string
}

export type ConnectionHeartbeatQueryParams = {
  accountId?: string
}

export type ConnectionHeartbeatError = Fetcher.ErrorWrapper<undefined>

export type ConnectionHeartbeatVariables = {
  body?: Schemas.DelegateConnectionHeartbeat
  pathParams: ConnectionHeartbeatPathParams
  queryParams?: ConnectionHeartbeatQueryParams
} & PortalContext['fetcherOptions']

export const fetchConnectionHeartbeat = (variables: ConnectionHeartbeatVariables) =>
  portalFetch<
    undefined,
    ConnectionHeartbeatError,
    Schemas.DelegateConnectionHeartbeat,
    {},
    ConnectionHeartbeatQueryParams,
    ConnectionHeartbeatPathParams
  >({ url: '/agent/delegates/connectionHeartbeat/{delegateId}', method: 'post', ...variables })

export const useConnectionHeartbeat = (
  options?: Omit<
    reactQuery.UseMutationOptions<undefined, ConnectionHeartbeatError, ConnectionHeartbeatVariables>,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<undefined, ConnectionHeartbeatError, ConnectionHeartbeatVariables>(
    (variables: ConnectionHeartbeatVariables) => fetchConnectionHeartbeat({ ...fetcherOptions, ...variables }),
    options
  )
}

export type AcquireDelegateTaskPathParams = {
  delegateId: string
  taskId: string
}

export type AcquireDelegateTaskQueryParams = {
  accountId?: string
  delegateInstanceId?: string
}

export type AcquireDelegateTaskError = Fetcher.ErrorWrapper<undefined>

export type AcquireDelegateTaskVariables = {
  pathParams: AcquireDelegateTaskPathParams
  queryParams?: AcquireDelegateTaskQueryParams
} & PortalContext['fetcherOptions']

export const fetchAcquireDelegateTask = (variables: AcquireDelegateTaskVariables) =>
  portalFetch<
    undefined,
    AcquireDelegateTaskError,
    undefined,
    {},
    AcquireDelegateTaskQueryParams,
    AcquireDelegateTaskPathParams
  >({ url: '/agent/delegates/{delegateId}/tasks/{taskId}/acquire', method: 'put', ...variables })

export const useAcquireDelegateTask = (
  options?: Omit<
    reactQuery.UseMutationOptions<undefined, AcquireDelegateTaskError, AcquireDelegateTaskVariables>,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<undefined, AcquireDelegateTaskError, AcquireDelegateTaskVariables>(
    (variables: AcquireDelegateTaskVariables) => fetchAcquireDelegateTask({ ...fetcherOptions, ...variables }),
    options
  )
}

export type ReportConnectionResultsPathParams = {
  delegateId: string
  taskId: string
}

export type ReportConnectionResultsQueryParams = {
  accountId?: string
  delegateInstanceId?: string
}

export type ReportConnectionResultsError = Fetcher.ErrorWrapper<undefined>

export type ReportConnectionResultsRequestBody = Schemas.DelegateConnectionResultDetail[]

export type ReportConnectionResultsVariables = {
  body?: ReportConnectionResultsRequestBody
  pathParams: ReportConnectionResultsPathParams
  queryParams?: ReportConnectionResultsQueryParams
} & PortalContext['fetcherOptions']

export const fetchReportConnectionResults = (variables: ReportConnectionResultsVariables) =>
  portalFetch<
    undefined,
    ReportConnectionResultsError,
    ReportConnectionResultsRequestBody,
    {},
    ReportConnectionResultsQueryParams,
    ReportConnectionResultsPathParams
  >({ url: '/agent/delegates/{delegateId}/tasks/{taskId}/report', method: 'post', ...variables })

export const useReportConnectionResults = (
  options?: Omit<
    reactQuery.UseMutationOptions<undefined, ReportConnectionResultsError, ReportConnectionResultsVariables>,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<undefined, ReportConnectionResultsError, ReportConnectionResultsVariables>(
    (variables: ReportConnectionResultsVariables) => fetchReportConnectionResults({ ...fetcherOptions, ...variables }),
    options
  )
}

export type FailIfAllDelegatesFailedPathParams = {
  delegateId: string
  taskId: string
}

export type FailIfAllDelegatesFailedQueryParams = {
  accountId?: string
  areClientToolsInstalled?: boolean
}

export type FailIfAllDelegatesFailedError = Fetcher.ErrorWrapper<undefined>

export type FailIfAllDelegatesFailedVariables = {
  pathParams: FailIfAllDelegatesFailedPathParams
  queryParams?: FailIfAllDelegatesFailedQueryParams
} & PortalContext['fetcherOptions']

export const fetchFailIfAllDelegatesFailed = (variables: FailIfAllDelegatesFailedVariables) =>
  portalFetch<
    undefined,
    FailIfAllDelegatesFailedError,
    undefined,
    {},
    FailIfAllDelegatesFailedQueryParams,
    FailIfAllDelegatesFailedPathParams
  >({ url: '/agent/delegates/{delegateId}/tasks/{taskId}/fail', method: 'get', ...variables })

export const useFailIfAllDelegatesFailed = (
  variables: FailIfAllDelegatesFailedVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<undefined, FailIfAllDelegatesFailedError, undefined>,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<undefined, FailIfAllDelegatesFailedError, undefined>(
    queryKeyFn({
      path: '/agent/delegates/{delegateId}/tasks/{taskId}/fail',
      operationId: 'failIfAllDelegatesFailed',
      variables
    }),
    () => fetchFailIfAllDelegatesFailed({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type CheckForUpgradePathParams = {
  delegateId: string
}

export type CheckForUpgradeQueryParams = {
  accountId?: string
  delegateName?: string
}

export type CheckForUpgradeHeaders = {
  Version?: string
}

export type CheckForUpgradeError = Fetcher.ErrorWrapper<undefined>

export type CheckForUpgradeVariables = {
  headers?: CheckForUpgradeHeaders
  pathParams: CheckForUpgradePathParams
  queryParams?: CheckForUpgradeQueryParams
} & PortalContext['fetcherOptions']

export const fetchCheckForUpgrade = (variables: CheckForUpgradeVariables) =>
  portalFetch<
    Schemas.RestResponseDelegateScripts,
    CheckForUpgradeError,
    undefined,
    CheckForUpgradeHeaders,
    CheckForUpgradeQueryParams,
    CheckForUpgradePathParams
  >({ url: '/agent/delegates/{delegateId}/upgrade', method: 'get', ...variables })

export const useCheckForUpgrade = (
  variables: CheckForUpgradeVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponseDelegateScripts,
      CheckForUpgradeError,
      Schemas.RestResponseDelegateScripts
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponseDelegateScripts,
    CheckForUpgradeError,
    Schemas.RestResponseDelegateScripts
  >(
    queryKeyFn({ path: '/agent/delegates/{delegateId}/upgrade', operationId: 'checkForUpgrade', variables }),
    () => fetchCheckForUpgrade({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type GetDelegateScriptsNgQueryParams = {
  accountId?: string
  delegateVersion?: string
  patchVersion?: string
  delegateType?: string
}

export type GetDelegateScriptsNgError = Fetcher.ErrorWrapper<undefined>

export type GetDelegateScriptsNgVariables = {
  queryParams?: GetDelegateScriptsNgQueryParams
} & PortalContext['fetcherOptions']

export const fetchGetDelegateScriptsNg = (variables: GetDelegateScriptsNgVariables) =>
  portalFetch<
    Schemas.RestResponseDelegateScripts,
    GetDelegateScriptsNgError,
    undefined,
    {},
    GetDelegateScriptsNgQueryParams,
    {}
  >({ url: '/agent/delegates/delegateScriptsNg', method: 'get', ...variables })

export const useGetDelegateScriptsNg = (
  variables: GetDelegateScriptsNgVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponseDelegateScripts,
      GetDelegateScriptsNgError,
      Schemas.RestResponseDelegateScripts
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponseDelegateScripts,
    GetDelegateScriptsNgError,
    Schemas.RestResponseDelegateScripts
  >(
    queryKeyFn({ path: '/agent/delegates/delegateScriptsNg', operationId: 'getDelegateScriptsNg', variables }),
    () => fetchGetDelegateScriptsNg({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type GetDelegateScriptsQueryParams = {
  accountId?: string
  delegateVersion?: string
  patchVersion?: string
  delegateName?: string
}

export type GetDelegateScriptsError = Fetcher.ErrorWrapper<undefined>

export type GetDelegateScriptsVariables = {
  queryParams?: GetDelegateScriptsQueryParams
} & PortalContext['fetcherOptions']

export const fetchGetDelegateScripts = (variables: GetDelegateScriptsVariables) =>
  portalFetch<
    Schemas.RestResponseDelegateScripts,
    GetDelegateScriptsError,
    undefined,
    {},
    GetDelegateScriptsQueryParams,
    {}
  >({ url: '/agent/delegates/delegateScripts', method: 'get', ...variables })

export const useGetDelegateScripts = (
  variables: GetDelegateScriptsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponseDelegateScripts,
      GetDelegateScriptsError,
      Schemas.RestResponseDelegateScripts
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponseDelegateScripts,
    GetDelegateScriptsError,
    Schemas.RestResponseDelegateScripts
  >(
    queryKeyFn({ path: '/agent/delegates/delegateScripts', operationId: 'getDelegateScripts', variables }),
    () => fetchGetDelegateScripts({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type GetDelegateTaskEventsPathParams = {
  delegateId: string
}

export type GetDelegateTaskEventsQueryParams = {
  accountId?: string
  syncOnly?: boolean
}

export type GetDelegateTaskEventsError = Fetcher.ErrorWrapper<undefined>

export type GetDelegateTaskEventsVariables = {
  pathParams: GetDelegateTaskEventsPathParams
  queryParams?: GetDelegateTaskEventsQueryParams
} & PortalContext['fetcherOptions']

export const fetchGetDelegateTaskEvents = (variables: GetDelegateTaskEventsVariables) =>
  portalFetch<
    Schemas.DelegateTaskEventsResponse,
    GetDelegateTaskEventsError,
    undefined,
    {},
    GetDelegateTaskEventsQueryParams,
    GetDelegateTaskEventsPathParams
  >({ url: '/agent/delegates/{delegateId}/task-events', method: 'get', ...variables })

export const useGetDelegateTaskEvents = (
  variables: GetDelegateTaskEventsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.DelegateTaskEventsResponse,
      GetDelegateTaskEventsError,
      Schemas.DelegateTaskEventsResponse
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.DelegateTaskEventsResponse,
    GetDelegateTaskEventsError,
    Schemas.DelegateTaskEventsResponse
  >(
    queryKeyFn({ path: '/agent/delegates/{delegateId}/task-events', operationId: 'getDelegateTaskEvents', variables }),
    () => fetchGetDelegateTaskEvents({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type UpdateDelegateHBQueryParams = {
  accountId?: string
}

export type UpdateDelegateHBError = Fetcher.ErrorWrapper<undefined>

export type UpdateDelegateHBVariables = {
  body?: RequestBodies.DelegateParams
  queryParams?: UpdateDelegateHBQueryParams
} & PortalContext['fetcherOptions']

export const fetchUpdateDelegateHB = (variables: UpdateDelegateHBVariables) =>
  portalFetch<
    Schemas.RestResponseDelegateHeartbeatResponse,
    UpdateDelegateHBError,
    RequestBodies.DelegateParams,
    {},
    UpdateDelegateHBQueryParams,
    {}
  >({ url: '/agent/delegates/heartbeat-with-polling', method: 'post', ...variables })

export const useUpdateDelegateHB = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.RestResponseDelegateHeartbeatResponse,
      UpdateDelegateHBError,
      UpdateDelegateHBVariables
    >,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<
    Schemas.RestResponseDelegateHeartbeatResponse,
    UpdateDelegateHBError,
    UpdateDelegateHBVariables
  >((variables: UpdateDelegateHBVariables) => fetchUpdateDelegateHB({ ...fetcherOptions, ...variables }), options)
}

export type SaveApiCallLogsPathParams = {
  delegateId: string
}

export type SaveApiCallLogsQueryParams = {
  accountId?: string
}

export type SaveApiCallLogsError = Fetcher.ErrorWrapper<undefined>

export type SaveApiCallLogsVariables = {
  body?: RequestBodies.GetDelegatePropertiesBody
  pathParams: SaveApiCallLogsPathParams
  queryParams?: SaveApiCallLogsQueryParams
} & PortalContext['fetcherOptions']

export const fetchSaveApiCallLogs = (variables: SaveApiCallLogsVariables) =>
  portalFetch<
    undefined,
    SaveApiCallLogsError,
    RequestBodies.GetDelegatePropertiesBody,
    {},
    SaveApiCallLogsQueryParams,
    SaveApiCallLogsPathParams
  >({ url: '/agent/delegates/{delegateId}/state-executions', method: 'post', ...variables })

export const useSaveApiCallLogs = (
  options?: Omit<reactQuery.UseMutationOptions<undefined, SaveApiCallLogsError, SaveApiCallLogsVariables>, 'mutationFn'>
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<undefined, SaveApiCallLogsError, SaveApiCallLogsVariables>(
    (variables: SaveApiCallLogsVariables) => fetchSaveApiCallLogs({ ...fetcherOptions, ...variables }),
    options
  )
}

export type ProcessArtifactCollectionResultPathParams = {
  perpetualTaskId: string
}

export type ProcessArtifactCollectionResultQueryParams = {
  accountId?: string
}

export type ProcessArtifactCollectionResultError = Fetcher.ErrorWrapper<undefined>

export type ProcessArtifactCollectionResultVariables = {
  body?: RequestBodies.GetDelegatePropertiesBody
  pathParams: ProcessArtifactCollectionResultPathParams
  queryParams?: ProcessArtifactCollectionResultQueryParams
} & PortalContext['fetcherOptions']

export const fetchProcessArtifactCollectionResult = (variables: ProcessArtifactCollectionResultVariables) =>
  portalFetch<
    Schemas.RestResponseBoolean,
    ProcessArtifactCollectionResultError,
    RequestBodies.GetDelegatePropertiesBody,
    {},
    ProcessArtifactCollectionResultQueryParams,
    ProcessArtifactCollectionResultPathParams
  >({ url: '/agent/delegates/artifact-collection/{perpetualTaskId}', method: 'post', ...variables })

export const useProcessArtifactCollectionResult = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.RestResponseBoolean,
      ProcessArtifactCollectionResultError,
      ProcessArtifactCollectionResultVariables
    >,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<
    Schemas.RestResponseBoolean,
    ProcessArtifactCollectionResultError,
    ProcessArtifactCollectionResultVariables
  >(
    (variables: ProcessArtifactCollectionResultVariables) =>
      fetchProcessArtifactCollectionResult({ ...fetcherOptions, ...variables }),
    options
  )
}

export type ProcessInstanceSyncResultPathParams = {
  perpetualTaskId: string
}

export type ProcessInstanceSyncResultQueryParams = {
  accountId?: string
}

export type ProcessInstanceSyncResultError = Fetcher.ErrorWrapper<undefined>

export type ProcessInstanceSyncResultVariables = {
  body?: RequestBodies.DelegateResponseData
  pathParams: ProcessInstanceSyncResultPathParams
  queryParams?: ProcessInstanceSyncResultQueryParams
} & PortalContext['fetcherOptions']

export const fetchProcessInstanceSyncResult = (variables: ProcessInstanceSyncResultVariables) =>
  portalFetch<
    Schemas.RestResponseBoolean,
    ProcessInstanceSyncResultError,
    RequestBodies.DelegateResponseData,
    {},
    ProcessInstanceSyncResultQueryParams,
    ProcessInstanceSyncResultPathParams
  >({ url: '/agent/delegates/instance-sync/{perpetualTaskId}', method: 'post', ...variables })

export const useProcessInstanceSyncResult = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.RestResponseBoolean,
      ProcessInstanceSyncResultError,
      ProcessInstanceSyncResultVariables
    >,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<
    Schemas.RestResponseBoolean,
    ProcessInstanceSyncResultError,
    ProcessInstanceSyncResultVariables
  >(
    (variables: ProcessInstanceSyncResultVariables) =>
      fetchProcessInstanceSyncResult({ ...fetcherOptions, ...variables }),
    options
  )
}

export type ProcessInstanceSyncNGResultPathParams = {
  perpetualTaskId: string
}

export type ProcessInstanceSyncNGResultQueryParams = {
  accountId?: string
}

export type ProcessInstanceSyncNGResultError = Fetcher.ErrorWrapper<undefined>

export type ProcessInstanceSyncNGResultVariables = {
  body?: RequestBodies.DelegateResponseData
  pathParams: ProcessInstanceSyncNGResultPathParams
  queryParams?: ProcessInstanceSyncNGResultQueryParams
} & PortalContext['fetcherOptions']

export const fetchProcessInstanceSyncNGResult = (variables: ProcessInstanceSyncNGResultVariables) =>
  portalFetch<
    Schemas.RestResponseBoolean,
    ProcessInstanceSyncNGResultError,
    RequestBodies.DelegateResponseData,
    {},
    ProcessInstanceSyncNGResultQueryParams,
    ProcessInstanceSyncNGResultPathParams
  >({ url: '/agent/delegates/instance-sync-ng/{perpetualTaskId}', method: 'post', ...variables })

export const useProcessInstanceSyncNGResult = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.RestResponseBoolean,
      ProcessInstanceSyncNGResultError,
      ProcessInstanceSyncNGResultVariables
    >,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<
    Schemas.RestResponseBoolean,
    ProcessInstanceSyncNGResultError,
    ProcessInstanceSyncNGResultVariables
  >(
    (variables: ProcessInstanceSyncNGResultVariables) =>
      fetchProcessInstanceSyncNGResult({ ...fetcherOptions, ...variables }),
    options
  )
}

export type ProcessManifestCollectionResultPathParams = {
  perpetualTaskId: string
}

export type ProcessManifestCollectionResultQueryParams = {
  accountId?: string
}

export type ProcessManifestCollectionResultError = Fetcher.ErrorWrapper<undefined>

export type ProcessManifestCollectionResultVariables = {
  body?: RequestBodies.GetDelegatePropertiesBody
  pathParams: ProcessManifestCollectionResultPathParams
  queryParams?: ProcessManifestCollectionResultQueryParams
} & PortalContext['fetcherOptions']

export const fetchProcessManifestCollectionResult = (variables: ProcessManifestCollectionResultVariables) =>
  portalFetch<
    Schemas.RestResponseBoolean,
    ProcessManifestCollectionResultError,
    RequestBodies.GetDelegatePropertiesBody,
    {},
    ProcessManifestCollectionResultQueryParams,
    ProcessManifestCollectionResultPathParams
  >({ url: '/agent/delegates/manifest-collection/{perpetualTaskId}', method: 'post', ...variables })

export const useProcessManifestCollectionResult = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.RestResponseBoolean,
      ProcessManifestCollectionResultError,
      ProcessManifestCollectionResultVariables
    >,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<
    Schemas.RestResponseBoolean,
    ProcessManifestCollectionResultError,
    ProcessManifestCollectionResultVariables
  >(
    (variables: ProcessManifestCollectionResultVariables) =>
      fetchProcessManifestCollectionResult({ ...fetcherOptions, ...variables }),
    options
  )
}

export type PublishNGConnectorHeartbeatResultPathParams = {
  perpetualTaskId: string
}

export type PublishNGConnectorHeartbeatResultQueryParams = {
  accountId?: string
}

export type PublishNGConnectorHeartbeatResultError = Fetcher.ErrorWrapper<undefined>

export type PublishNGConnectorHeartbeatResultVariables = {
  body?: Schemas.ConnectorHeartbeatDelegateResponse
  pathParams: PublishNGConnectorHeartbeatResultPathParams
  queryParams?: PublishNGConnectorHeartbeatResultQueryParams
} & PortalContext['fetcherOptions']

export const fetchPublishNGConnectorHeartbeatResult = (variables: PublishNGConnectorHeartbeatResultVariables) =>
  portalFetch<
    Schemas.RestResponseBoolean,
    PublishNGConnectorHeartbeatResultError,
    Schemas.ConnectorHeartbeatDelegateResponse,
    {},
    PublishNGConnectorHeartbeatResultQueryParams,
    PublishNGConnectorHeartbeatResultPathParams
  >({ url: '/agent/delegates/connectors/{perpetualTaskId}', method: 'post', ...variables })

export const usePublishNGConnectorHeartbeatResult = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.RestResponseBoolean,
      PublishNGConnectorHeartbeatResultError,
      PublishNGConnectorHeartbeatResultVariables
    >,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<
    Schemas.RestResponseBoolean,
    PublishNGConnectorHeartbeatResultError,
    PublishNGConnectorHeartbeatResultVariables
  >(
    (variables: PublishNGConnectorHeartbeatResultVariables) =>
      fetchPublishNGConnectorHeartbeatResult({ ...fetcherOptions, ...variables }),
    options
  )
}

export type ProcessPollingResultNgPathParams = {
  perpetualTaskId: string
}

export type ProcessPollingResultNgQueryParams = {
  accountId?: string
}

export type ProcessPollingResultNgError = Fetcher.ErrorWrapper<undefined>

export type ProcessPollingResultNgVariables = {
  body?: RequestBodies.GetDelegatePropertiesBody
  pathParams: ProcessPollingResultNgPathParams
  queryParams?: ProcessPollingResultNgQueryParams
} & PortalContext['fetcherOptions']

export const fetchProcessPollingResultNg = (variables: ProcessPollingResultNgVariables) =>
  portalFetch<
    Schemas.RestResponseBoolean,
    ProcessPollingResultNgError,
    RequestBodies.GetDelegatePropertiesBody,
    {},
    ProcessPollingResultNgQueryParams,
    ProcessPollingResultNgPathParams
  >({ url: '/agent/delegates/polling/{perpetualTaskId}', method: 'post', ...variables })

export const useProcessPollingResultNg = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.RestResponseBoolean,
      ProcessPollingResultNgError,
      ProcessPollingResultNgVariables
    >,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<
    Schemas.RestResponseBoolean,
    ProcessPollingResultNgError,
    ProcessPollingResultNgVariables
  >(
    (variables: ProcessPollingResultNgVariables) => fetchProcessPollingResultNg({ ...fetcherOptions, ...variables }),
    options
  )
}

export type UploadPathParams = {
  delegateId: string
  taskId: string
}

export type UploadQueryParams = {
  accountId?: string
  fileBucket?:
    | 'LOB'
    | 'ARTIFACTS'
    | 'AUDITS'
    | 'CONFIGS'
    | 'CUSTOM_MANIFEST'
    | 'LOGS'
    | 'PLATFORMS'
    | 'TERRAFORM_STATE'
    | 'PROFILE_RESULTS'
    | 'TERRAFORM_PLAN'
    | 'TERRAFORM_PLAN_JSON'
    | 'EXPORT_EXECUTIONS'
}

export type UploadError = Fetcher.ErrorWrapper<undefined>

export type UploadVariables = {
  body?: RequestBodies.ImportAccountData
  pathParams: UploadPathParams
  queryParams?: UploadQueryParams
} & PortalContext['fetcherOptions']

export const fetchUpload = (variables: UploadVariables) =>
  portalFetch<
    Schemas.RestResponseString,
    UploadError,
    RequestBodies.ImportAccountData,
    {},
    UploadQueryParams,
    UploadPathParams
  >({ url: '/agent/delegateFiles/{delegateId}/tasks/{taskId}', method: 'post', ...variables })

export const useUpload = (
  options?: Omit<reactQuery.UseMutationOptions<Schemas.RestResponseString, UploadError, UploadVariables>, 'mutationFn'>
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<Schemas.RestResponseString, UploadError, UploadVariables>(
    (variables: UploadVariables) => fetchUpload({ ...fetcherOptions, ...variables }),
    options
  )
}

export type GetFileIdQueryParams = {
  entityId?: string
  fileBucket:
    | 'LOB'
    | 'ARTIFACTS'
    | 'AUDITS'
    | 'CONFIGS'
    | 'CUSTOM_MANIFEST'
    | 'LOGS'
    | 'PLATFORMS'
    | 'TERRAFORM_STATE'
    | 'PROFILE_RESULTS'
    | 'TERRAFORM_PLAN'
    | 'TERRAFORM_PLAN_JSON'
    | 'EXPORT_EXECUTIONS'
  /*
   * @format int32
   */
  version?: number
  accountId?: string
}

export type GetFileIdError = Fetcher.ErrorWrapper<undefined>

export type GetFileIdVariables = {
  queryParams: GetFileIdQueryParams
} & PortalContext['fetcherOptions']

export const fetchGetFileId = (variables: GetFileIdVariables) =>
  portalFetch<Schemas.RestResponseString, GetFileIdError, undefined, {}, GetFileIdQueryParams, {}>({
    url: '/agent/delegateFiles/fileId',
    method: 'get',
    ...variables
  })

export const useGetFileId = (
  variables: GetFileIdVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.RestResponseString, GetFileIdError, Schemas.RestResponseString>,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<Schemas.RestResponseString, GetFileIdError, Schemas.RestResponseString>(
    queryKeyFn({ path: '/agent/delegateFiles/fileId', operationId: 'getFileId', variables }),
    () => fetchGetFileId({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type DownloadConfigFileQueryParams = {
  fileId?: string
  appId?: string
  accountId?: string
  activityId?: string
}

export type DownloadConfigFileError = Fetcher.ErrorWrapper<undefined>

export type DownloadConfigFileVariables = {
  queryParams?: DownloadConfigFileQueryParams
} & PortalContext['fetcherOptions']

export const fetchDownloadConfigFile = (variables: DownloadConfigFileVariables) =>
  portalFetch<Schemas.StreamingOutput, DownloadConfigFileError, undefined, {}, DownloadConfigFileQueryParams, {}>({
    url: '/agent/delegateFiles/downloadConfig',
    method: 'get',
    ...variables
  })

export const useDownloadConfigFile = (
  variables: DownloadConfigFileVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.StreamingOutput, DownloadConfigFileError, Schemas.StreamingOutput>,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<Schemas.StreamingOutput, DownloadConfigFileError, Schemas.StreamingOutput>(
    queryKeyFn({ path: '/agent/delegateFiles/downloadConfig', operationId: 'downloadConfigFile', variables }),
    () => fetchDownloadConfigFile({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type DownloadFileQueryParams = {
  fileId?: string
  fileBucket:
    | 'LOB'
    | 'ARTIFACTS'
    | 'AUDITS'
    | 'CONFIGS'
    | 'CUSTOM_MANIFEST'
    | 'LOGS'
    | 'PLATFORMS'
    | 'TERRAFORM_STATE'
    | 'PROFILE_RESULTS'
    | 'TERRAFORM_PLAN'
    | 'TERRAFORM_PLAN_JSON'
    | 'EXPORT_EXECUTIONS'
  accountId?: string
}

export type DownloadFileError = Fetcher.ErrorWrapper<undefined>

export type DownloadFileVariables = {
  queryParams: DownloadFileQueryParams
} & PortalContext['fetcherOptions']

export const fetchDownloadFile = (variables: DownloadFileVariables) =>
  portalFetch<Schemas.StreamingOutput, DownloadFileError, undefined, {}, DownloadFileQueryParams, {}>({
    url: '/agent/delegateFiles/download',
    method: 'get',
    ...variables
  })

export const useDownloadFile = (
  variables: DownloadFileVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.StreamingOutput, DownloadFileError, Schemas.StreamingOutput>,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<Schemas.StreamingOutput, DownloadFileError, Schemas.StreamingOutput>(
    queryKeyFn({ path: '/agent/delegateFiles/download', operationId: 'downloadFile', variables }),
    () => fetchDownloadFile({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type GetFileInfoQueryParams = {
  fileId?: string
  fileBucket:
    | 'LOB'
    | 'ARTIFACTS'
    | 'AUDITS'
    | 'CONFIGS'
    | 'CUSTOM_MANIFEST'
    | 'LOGS'
    | 'PLATFORMS'
    | 'TERRAFORM_STATE'
    | 'PROFILE_RESULTS'
    | 'TERRAFORM_PLAN'
    | 'TERRAFORM_PLAN_JSON'
    | 'EXPORT_EXECUTIONS'
  accountId?: string
}

export type GetFileInfoError = Fetcher.ErrorWrapper<undefined>

export type GetFileInfoVariables = {
  queryParams: GetFileInfoQueryParams
} & PortalContext['fetcherOptions']

export const fetchGetFileInfo = (variables: GetFileInfoVariables) =>
  portalFetch<Schemas.RestResponseDelegateFile, GetFileInfoError, undefined, {}, GetFileInfoQueryParams, {}>({
    url: '/agent/delegateFiles/metainfo',
    method: 'get',
    ...variables
  })

export const useGetFileInfo = (
  variables: GetFileInfoVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.RestResponseDelegateFile, GetFileInfoError, Schemas.RestResponseDelegateFile>,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<Schemas.RestResponseDelegateFile, GetFileInfoError, Schemas.RestResponseDelegateFile>(
    queryKeyFn({ path: '/agent/delegateFiles/metainfo', operationId: 'getFileInfo', variables }),
    () => fetchGetFileInfo({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type SaveProfileResultPathParams = {
  delegateId: string
}

export type SaveProfileResultQueryParams = {
  accountId?: string
  error?: boolean
  fileBucket?:
    | 'LOB'
    | 'ARTIFACTS'
    | 'AUDITS'
    | 'CONFIGS'
    | 'CUSTOM_MANIFEST'
    | 'LOGS'
    | 'PLATFORMS'
    | 'TERRAFORM_STATE'
    | 'PROFILE_RESULTS'
    | 'TERRAFORM_PLAN'
    | 'TERRAFORM_PLAN_JSON'
    | 'EXPORT_EXECUTIONS'
}

export type SaveProfileResultError = Fetcher.ErrorWrapper<undefined>

export type SaveProfileResultVariables = {
  pathParams: SaveProfileResultPathParams
  queryParams?: SaveProfileResultQueryParams
} & PortalContext['fetcherOptions']

export const fetchSaveProfileResult = (variables: SaveProfileResultVariables) =>
  portalFetch<
    undefined,
    SaveProfileResultError,
    undefined,
    {},
    SaveProfileResultQueryParams,
    SaveProfileResultPathParams
  >({ url: '/agent/delegateFiles/{delegateId}/profile-result', method: 'post', ...variables })

export const useSaveProfileResult = (
  options?: Omit<
    reactQuery.UseMutationOptions<undefined, SaveProfileResultError, SaveProfileResultVariables>,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<undefined, SaveProfileResultError, SaveProfileResultVariables>(
    (variables: SaveProfileResultVariables) => fetchSaveProfileResult({ ...fetcherOptions, ...variables }),
    options
  )
}

export type List18QueryParams = {
  /*
   * @default 0
   */
  offset?: string
  limit?: string
  fieldsIncluded?: string[]
  fieldsExcluded?: string[]
  accountId: string
}

export type List18Error = Fetcher.ErrorWrapper<undefined>

export type List18Variables = {
  queryParams: List18QueryParams
} & PortalContext['fetcherOptions']

export const fetchList18 = (variables: List18Variables) =>
  portalFetch<Schemas.RestResponsePageResponseDelegateProfile, List18Error, undefined, {}, List18QueryParams, {}>({
    url: '/delegate-profiles',
    method: 'get',
    ...variables
  })

export const useList18 = (
  variables: List18Variables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponsePageResponseDelegateProfile,
      List18Error,
      Schemas.RestResponsePageResponseDelegateProfile
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponsePageResponseDelegateProfile,
    List18Error,
    Schemas.RestResponsePageResponseDelegateProfile
  >(
    queryKeyFn({ path: '/delegate-profiles', operationId: 'list18', variables }),
    () => fetchList18({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type Add1QueryParams = {
  accountId?: string
}

export type Add1Error = Fetcher.ErrorWrapper<undefined>

export type Add1Variables = {
  body: RequestBodies.DelegateProfile
  queryParams?: Add1QueryParams
} & PortalContext['fetcherOptions']

export const fetchAdd1 = (variables: Add1Variables) =>
  portalFetch<Schemas.RestResponseDelegateProfile, Add1Error, RequestBodies.DelegateProfile, {}, Add1QueryParams, {}>({
    url: '/delegate-profiles',
    method: 'post',
    ...variables
  })

export const useAdd1 = (
  options?: Omit<
    reactQuery.UseMutationOptions<Schemas.RestResponseDelegateProfile, Add1Error, Add1Variables>,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<Schemas.RestResponseDelegateProfile, Add1Error, Add1Variables>(
    (variables: Add1Variables) => fetchAdd1({ ...fetcherOptions, ...variables }),
    options
  )
}

export type Get13PathParams = {
  delegateProfileId: string
}

export type Get13QueryParams = {
  accountId?: string
}

export type Get13Error = Fetcher.ErrorWrapper<undefined>

export type Get13Variables = {
  pathParams: Get13PathParams
  queryParams?: Get13QueryParams
} & PortalContext['fetcherOptions']

export const fetchGet13 = (variables: Get13Variables) =>
  portalFetch<Schemas.RestResponseDelegateProfile, Get13Error, undefined, {}, Get13QueryParams, Get13PathParams>({
    url: '/delegate-profiles/{delegateProfileId}',
    method: 'get',
    ...variables
  })

export const useGet13 = (
  variables: Get13Variables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.RestResponseDelegateProfile, Get13Error, Schemas.RestResponseDelegateProfile>,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<Schemas.RestResponseDelegateProfile, Get13Error, Schemas.RestResponseDelegateProfile>(
    queryKeyFn({ path: '/delegate-profiles/{delegateProfileId}', operationId: 'get13', variables }),
    () => fetchGet13({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type Update9PathParams = {
  delegateProfileId: string
}

export type Update9QueryParams = {
  accountId?: string
}

export type Update9Error = Fetcher.ErrorWrapper<undefined>

export type Update9Variables = {
  body: RequestBodies.DelegateProfile
  pathParams: Update9PathParams
  queryParams?: Update9QueryParams
} & PortalContext['fetcherOptions']

export const fetchUpdate9 = (variables: Update9Variables) =>
  portalFetch<
    Schemas.RestResponseDelegateProfile,
    Update9Error,
    RequestBodies.DelegateProfile,
    {},
    Update9QueryParams,
    Update9PathParams
  >({ url: '/delegate-profiles/{delegateProfileId}', method: 'put', ...variables })

export const useUpdate9 = (
  options?: Omit<
    reactQuery.UseMutationOptions<Schemas.RestResponseDelegateProfile, Update9Error, Update9Variables>,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<Schemas.RestResponseDelegateProfile, Update9Error, Update9Variables>(
    (variables: Update9Variables) => fetchUpdate9({ ...fetcherOptions, ...variables }),
    options
  )
}

export type Delete7PathParams = {
  delegateProfileId: string
}

export type Delete7QueryParams = {
  accountId?: string
}

export type Delete7Error = Fetcher.ErrorWrapper<undefined>

export type Delete7Variables = {
  pathParams: Delete7PathParams
  queryParams?: Delete7QueryParams
} & PortalContext['fetcherOptions']

export const fetchDelete7 = (variables: Delete7Variables) =>
  portalFetch<Schemas.RestResponseVoid, Delete7Error, undefined, {}, Delete7QueryParams, Delete7PathParams>({
    url: '/delegate-profiles/{delegateProfileId}',
    method: 'delete',
    ...variables
  })

export const useDelete7 = (
  options?: Omit<reactQuery.UseMutationOptions<Schemas.RestResponseVoid, Delete7Error, Delete7Variables>, 'mutationFn'>
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<Schemas.RestResponseVoid, Delete7Error, Delete7Variables>(
    (variables: Delete7Variables) => fetchDelete7({ ...fetcherOptions, ...variables }),
    options
  )
}

export type UpdateSelectorsPathParams = {
  delegateProfileId: string
}

export type UpdateSelectorsQueryParams = {
  accountId?: string
}

export type UpdateSelectorsError = Fetcher.ErrorWrapper<undefined>

export type UpdateSelectorsVariables = {
  body?: RequestBodies.UpdateWhitelistedDomainsBody
  pathParams: UpdateSelectorsPathParams
  queryParams?: UpdateSelectorsQueryParams
} & PortalContext['fetcherOptions']

export const fetchUpdateSelectors = (variables: UpdateSelectorsVariables) =>
  portalFetch<
    Schemas.RestResponseDelegateProfile,
    UpdateSelectorsError,
    RequestBodies.UpdateWhitelistedDomainsBody,
    {},
    UpdateSelectorsQueryParams,
    UpdateSelectorsPathParams
  >({ url: '/delegate-profiles/{delegateProfileId}/selectors', method: 'put', ...variables })

export const useUpdateSelectors = (
  options?: Omit<
    reactQuery.UseMutationOptions<Schemas.RestResponseDelegateProfile, UpdateSelectorsError, UpdateSelectorsVariables>,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<Schemas.RestResponseDelegateProfile, UpdateSelectorsError, UpdateSelectorsVariables>(
    (variables: UpdateSelectorsVariables) => fetchUpdateSelectors({ ...fetcherOptions, ...variables }),
    options
  )
}

export type GetV2PathParams = {
  delegateProfileId: string
}

export type GetV2QueryParams = {
  accountId?: string
}

export type GetV2Error = Fetcher.ErrorWrapper<undefined>

export type GetV2Variables = {
  pathParams: GetV2PathParams
  queryParams?: GetV2QueryParams
} & PortalContext['fetcherOptions']

export const fetchGetV2 = (variables: GetV2Variables) =>
  portalFetch<Schemas.RestResponseDelegateProfileDetails, GetV2Error, undefined, {}, GetV2QueryParams, GetV2PathParams>(
    { url: '/delegate-profiles/v2/{delegateProfileId}', method: 'get', ...variables }
  )

export const useGetV2 = (
  variables: GetV2Variables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponseDelegateProfileDetails,
      GetV2Error,
      Schemas.RestResponseDelegateProfileDetails
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponseDelegateProfileDetails,
    GetV2Error,
    Schemas.RestResponseDelegateProfileDetails
  >(
    queryKeyFn({ path: '/delegate-profiles/v2/{delegateProfileId}', operationId: 'getV2', variables }),
    () => fetchGetV2({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type UpdateV2PathParams = {
  delegateProfileId: string
}

export type UpdateV2QueryParams = {
  accountId?: string
}

export type UpdateV2Error = Fetcher.ErrorWrapper<undefined>

export type UpdateV2Variables = {
  body?: RequestBodies.DelegateProfileDetails
  pathParams: UpdateV2PathParams
  queryParams?: UpdateV2QueryParams
} & PortalContext['fetcherOptions']

export const fetchUpdateV2 = (variables: UpdateV2Variables) =>
  portalFetch<
    Schemas.RestResponseDelegateProfileDetails,
    UpdateV2Error,
    RequestBodies.DelegateProfileDetails,
    {},
    UpdateV2QueryParams,
    UpdateV2PathParams
  >({ url: '/delegate-profiles/v2/{delegateProfileId}', method: 'put', ...variables })

export const useUpdateV2 = (
  options?: Omit<
    reactQuery.UseMutationOptions<Schemas.RestResponseDelegateProfileDetails, UpdateV2Error, UpdateV2Variables>,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<Schemas.RestResponseDelegateProfileDetails, UpdateV2Error, UpdateV2Variables>(
    (variables: UpdateV2Variables) => fetchUpdateV2({ ...fetcherOptions, ...variables }),
    options
  )
}

export type DeleteV2PathParams = {
  delegateProfileId: string
}

export type DeleteV2QueryParams = {
  accountId?: string
}

export type DeleteV2Error = Fetcher.ErrorWrapper<undefined>

export type DeleteV2Variables = {
  pathParams: DeleteV2PathParams
  queryParams?: DeleteV2QueryParams
} & PortalContext['fetcherOptions']

export const fetchDeleteV2 = (variables: DeleteV2Variables) =>
  portalFetch<Schemas.RestResponseVoid, DeleteV2Error, undefined, {}, DeleteV2QueryParams, DeleteV2PathParams>({
    url: '/delegate-profiles/v2/{delegateProfileId}',
    method: 'delete',
    ...variables
  })

export const useDeleteV2 = (
  options?: Omit<
    reactQuery.UseMutationOptions<Schemas.RestResponseVoid, DeleteV2Error, DeleteV2Variables>,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<Schemas.RestResponseVoid, DeleteV2Error, DeleteV2Variables>(
    (variables: DeleteV2Variables) => fetchDeleteV2({ ...fetcherOptions, ...variables }),
    options
  )
}

export type ListV21QueryParams = {
  /*
   * @default 0
   */
  offset?: string
  limit?: string
  fieldsIncluded?: string[]
  fieldsExcluded?: string[]
  accountId?: string
}

export type ListV21Error = Fetcher.ErrorWrapper<undefined>

export type ListV21Variables = {
  queryParams?: ListV21QueryParams
} & PortalContext['fetcherOptions']

export const fetchListV21 = (variables: ListV21Variables) =>
  portalFetch<
    Schemas.RestResponsePageResponseDelegateProfileDetails,
    ListV21Error,
    undefined,
    {},
    ListV21QueryParams,
    {}
  >({ url: '/delegate-profiles/v2', method: 'get', ...variables })

export const useListV21 = (
  variables: ListV21Variables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponsePageResponseDelegateProfileDetails,
      ListV21Error,
      Schemas.RestResponsePageResponseDelegateProfileDetails
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponsePageResponseDelegateProfileDetails,
    ListV21Error,
    Schemas.RestResponsePageResponseDelegateProfileDetails
  >(
    queryKeyFn({ path: '/delegate-profiles/v2', operationId: 'listV21', variables }),
    () => fetchListV21({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type AddV2QueryParams = {
  accountId?: string
}

export type AddV2Error = Fetcher.ErrorWrapper<undefined>

export type AddV2Variables = {
  body?: RequestBodies.DelegateProfileDetails
  queryParams?: AddV2QueryParams
} & PortalContext['fetcherOptions']

export const fetchAddV2 = (variables: AddV2Variables) =>
  portalFetch<
    Schemas.RestResponseDelegateProfileDetails,
    AddV2Error,
    RequestBodies.DelegateProfileDetails,
    {},
    AddV2QueryParams,
    {}
  >({ url: '/delegate-profiles/v2', method: 'post', ...variables })

export const useAddV2 = (
  options?: Omit<
    reactQuery.UseMutationOptions<Schemas.RestResponseDelegateProfileDetails, AddV2Error, AddV2Variables>,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<Schemas.RestResponseDelegateProfileDetails, AddV2Error, AddV2Variables>(
    (variables: AddV2Variables) => fetchAddV2({ ...fetcherOptions, ...variables }),
    options
  )
}

export type UpdateScopingRulesV2PathParams = {
  delegateProfileId: string
}

export type UpdateScopingRulesV2QueryParams = {
  accountId?: string
}

export type UpdateScopingRulesV2Error = Fetcher.ErrorWrapper<undefined>

export type UpdateScopingRulesV2Variables = {
  body?: Schemas.ScopingRules
  pathParams: UpdateScopingRulesV2PathParams
  queryParams?: UpdateScopingRulesV2QueryParams
} & PortalContext['fetcherOptions']

export const fetchUpdateScopingRulesV2 = (variables: UpdateScopingRulesV2Variables) =>
  portalFetch<
    Schemas.RestResponseDelegateProfileDetails,
    UpdateScopingRulesV2Error,
    Schemas.ScopingRules,
    {},
    UpdateScopingRulesV2QueryParams,
    UpdateScopingRulesV2PathParams
  >({ url: '/delegate-profiles/v2/{delegateProfileId}/scoping-rules', method: 'put', ...variables })

export const useUpdateScopingRulesV2 = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.RestResponseDelegateProfileDetails,
      UpdateScopingRulesV2Error,
      UpdateScopingRulesV2Variables
    >,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<
    Schemas.RestResponseDelegateProfileDetails,
    UpdateScopingRulesV2Error,
    UpdateScopingRulesV2Variables
  >(
    (variables: UpdateScopingRulesV2Variables) => fetchUpdateScopingRulesV2({ ...fetcherOptions, ...variables }),
    options
  )
}

export type UpdateSelectorsV2PathParams = {
  delegateProfileId: string
}

export type UpdateSelectorsV2QueryParams = {
  accountId?: string
}

export type UpdateSelectorsV2Error = Fetcher.ErrorWrapper<undefined>

export type UpdateSelectorsV2Variables = {
  body?: RequestBodies.UpdateWhitelistedDomainsBody
  pathParams: UpdateSelectorsV2PathParams
  queryParams?: UpdateSelectorsV2QueryParams
} & PortalContext['fetcherOptions']

export const fetchUpdateSelectorsV2 = (variables: UpdateSelectorsV2Variables) =>
  portalFetch<
    Schemas.RestResponseDelegateProfileDetails,
    UpdateSelectorsV2Error,
    RequestBodies.UpdateWhitelistedDomainsBody,
    {},
    UpdateSelectorsV2QueryParams,
    UpdateSelectorsV2PathParams
  >({ url: '/delegate-profiles/v2/{delegateProfileId}/selectors', method: 'put', ...variables })

export const useUpdateSelectorsV2 = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.RestResponseDelegateProfileDetails,
      UpdateSelectorsV2Error,
      UpdateSelectorsV2Variables
    >,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<
    Schemas.RestResponseDelegateProfileDetails,
    UpdateSelectorsV2Error,
    UpdateSelectorsV2Variables
  >((variables: UpdateSelectorsV2Variables) => fetchUpdateSelectorsV2({ ...fetcherOptions, ...variables }), options)
}

export type List19QueryParams = {
  /*
   * @default 0
   */
  offset?: string
  limit?: string
  fieldsIncluded?: string[]
  fieldsExcluded?: string[]
  accountId: string
}

export type List19Error = Fetcher.ErrorWrapper<undefined>

export type List19Variables = {
  queryParams: List19QueryParams
} & PortalContext['fetcherOptions']

export const fetchList19 = (variables: List19Variables) =>
  portalFetch<Schemas.RestResponsePageResponseDelegateScope, List19Error, undefined, {}, List19QueryParams, {}>({
    url: '/delegate-scopes',
    method: 'get',
    ...variables
  })

export const useList19 = (
  variables: List19Variables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponsePageResponseDelegateScope,
      List19Error,
      Schemas.RestResponsePageResponseDelegateScope
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponsePageResponseDelegateScope,
    List19Error,
    Schemas.RestResponsePageResponseDelegateScope
  >(
    queryKeyFn({ path: '/delegate-scopes', operationId: 'list19', variables }),
    () => fetchList19({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type Add2QueryParams = {
  accountId?: string
}

export type Add2Error = Fetcher.ErrorWrapper<undefined>

export type Add2Variables = {
  body: RequestBodies.DelegateScope
  queryParams?: Add2QueryParams
} & PortalContext['fetcherOptions']

export const fetchAdd2 = (variables: Add2Variables) =>
  portalFetch<Schemas.RestResponseDelegateScope, Add2Error, RequestBodies.DelegateScope, {}, Add2QueryParams, {}>({
    url: '/delegate-scopes',
    method: 'post',
    ...variables
  })

export const useAdd2 = (
  options?: Omit<
    reactQuery.UseMutationOptions<Schemas.RestResponseDelegateScope, Add2Error, Add2Variables>,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<Schemas.RestResponseDelegateScope, Add2Error, Add2Variables>(
    (variables: Add2Variables) => fetchAdd2({ ...fetcherOptions, ...variables }),
    options
  )
}

export type Get14PathParams = {
  delegateScopeId: string
}

export type Get14QueryParams = {
  accountId?: string
}

export type Get14Error = Fetcher.ErrorWrapper<undefined>

export type Get14Variables = {
  pathParams: Get14PathParams
  queryParams?: Get14QueryParams
} & PortalContext['fetcherOptions']

export const fetchGet14 = (variables: Get14Variables) =>
  portalFetch<Schemas.RestResponseDelegateScope, Get14Error, undefined, {}, Get14QueryParams, Get14PathParams>({
    url: '/delegate-scopes/{delegateScopeId}',
    method: 'get',
    ...variables
  })

export const useGet14 = (
  variables: Get14Variables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.RestResponseDelegateScope, Get14Error, Schemas.RestResponseDelegateScope>,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<Schemas.RestResponseDelegateScope, Get14Error, Schemas.RestResponseDelegateScope>(
    queryKeyFn({ path: '/delegate-scopes/{delegateScopeId}', operationId: 'get14', variables }),
    () => fetchGet14({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type Update10PathParams = {
  delegateScopeId: string
}

export type Update10QueryParams = {
  accountId?: string
}

export type Update10Error = Fetcher.ErrorWrapper<undefined>

export type Update10Variables = {
  body: RequestBodies.DelegateScope
  pathParams: Update10PathParams
  queryParams?: Update10QueryParams
} & PortalContext['fetcherOptions']

export const fetchUpdate10 = (variables: Update10Variables) =>
  portalFetch<
    Schemas.RestResponseDelegateScope,
    Update10Error,
    RequestBodies.DelegateScope,
    {},
    Update10QueryParams,
    Update10PathParams
  >({ url: '/delegate-scopes/{delegateScopeId}', method: 'put', ...variables })

export const useUpdate10 = (
  options?: Omit<
    reactQuery.UseMutationOptions<Schemas.RestResponseDelegateScope, Update10Error, Update10Variables>,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<Schemas.RestResponseDelegateScope, Update10Error, Update10Variables>(
    (variables: Update10Variables) => fetchUpdate10({ ...fetcherOptions, ...variables }),
    options
  )
}

export type Delete8PathParams = {
  delegateScopeId: string
}

export type Delete8QueryParams = {
  accountId?: string
}

export type Delete8Error = Fetcher.ErrorWrapper<undefined>

export type Delete8Variables = {
  pathParams: Delete8PathParams
  queryParams?: Delete8QueryParams
} & PortalContext['fetcherOptions']

export const fetchDelete8 = (variables: Delete8Variables) =>
  portalFetch<Schemas.RestResponseVoid, Delete8Error, undefined, {}, Delete8QueryParams, Delete8PathParams>({
    url: '/delegate-scopes/{delegateScopeId}',
    method: 'delete',
    ...variables
  })

export const useDelete8 = (
  options?: Omit<reactQuery.UseMutationOptions<Schemas.RestResponseVoid, Delete8Error, Delete8Variables>, 'mutationFn'>
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<Schemas.RestResponseVoid, Delete8Error, Delete8Variables>(
    (variables: Delete8Variables) => fetchDelete8({ ...fetcherOptions, ...variables }),
    options
  )
}

export type GetSelectionLogsQueryParams = {
  accountId?: string
  taskId?: string
}

export type GetSelectionLogsError = Fetcher.ErrorWrapper<undefined>

export type GetSelectionLogsVariables = {
  queryParams?: GetSelectionLogsQueryParams
} & PortalContext['fetcherOptions']

export const fetchGetSelectionLogs = (variables: GetSelectionLogsVariables) =>
  portalFetch<
    Schemas.RestResponseListDelegateSelectionLogParams,
    GetSelectionLogsError,
    undefined,
    {},
    GetSelectionLogsQueryParams,
    {}
  >({ url: '/selection-logs', method: 'get', ...variables })

export const useGetSelectionLogs = (
  variables: GetSelectionLogsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponseListDelegateSelectionLogParams,
      GetSelectionLogsError,
      Schemas.RestResponseListDelegateSelectionLogParams
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponseListDelegateSelectionLogParams,
    GetSelectionLogsError,
    Schemas.RestResponseListDelegateSelectionLogParams
  >(
    queryKeyFn({ path: '/selection-logs', operationId: 'getSelectionLogs', variables }),
    () => fetchGetSelectionLogs({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type GetSelectionLogsV2QueryParams = {
  accountId?: string
  taskId?: string
}

export type GetSelectionLogsV2Error = Fetcher.ErrorWrapper<undefined>

export type GetSelectionLogsV2Variables = {
  queryParams?: GetSelectionLogsV2QueryParams
} & PortalContext['fetcherOptions']

export const fetchGetSelectionLogsV2 = (variables: GetSelectionLogsV2Variables) =>
  portalFetch<
    Schemas.RestResponseDelegateSelectionLogResponse,
    GetSelectionLogsV2Error,
    undefined,
    {},
    GetSelectionLogsV2QueryParams,
    {}
  >({ url: '/selection-logs/v2', method: 'get', ...variables })

export const useGetSelectionLogsV2 = (
  variables: GetSelectionLogsV2Variables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponseDelegateSelectionLogResponse,
      GetSelectionLogsV2Error,
      Schemas.RestResponseDelegateSelectionLogResponse
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponseDelegateSelectionLogResponse,
    GetSelectionLogsV2Error,
    Schemas.RestResponseDelegateSelectionLogResponse
  >(
    queryKeyFn({ path: '/selection-logs/v2', operationId: 'getSelectionLogsV2', variables }),
    () => fetchGetSelectionLogsV2({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type Get15QueryParams = {
  accountId?: string
}

export type Get15Error = Fetcher.ErrorWrapper<undefined>

export type Get15Variables = {
  queryParams?: Get15QueryParams
} & PortalContext['fetcherOptions']

export const fetchGet15 = (variables: Get15Variables) =>
  portalFetch<Schemas.RestResponseString, Get15Error, undefined, {}, Get15QueryParams, {}>({
    url: '/setup/delegates/latest',
    method: 'get',
    ...variables
  })

export const useGet15 = (
  variables: Get15Variables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.RestResponseString, Get15Error, Schemas.RestResponseString>,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<Schemas.RestResponseString, Get15Error, Schemas.RestResponseString>(
    queryKeyFn({ path: '/setup/delegates/latest', operationId: 'get15', variables }),
    () => fetchGet15({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type Get16PathParams = {
  delegateId: string
}

export type Get16QueryParams = {
  accountId?: string
}

export type Get16Error = Fetcher.ErrorWrapper<undefined>

export type Get16Variables = {
  pathParams: Get16PathParams
  queryParams?: Get16QueryParams
} & PortalContext['fetcherOptions']

export const fetchGet16 = (variables: Get16Variables) =>
  portalFetch<Schemas.RestResponseDelegate, Get16Error, undefined, {}, Get16QueryParams, Get16PathParams>({
    url: '/setup/delegates/{delegateId}',
    method: 'get',
    ...variables
  })

export const useGet16 = (
  variables: Get16Variables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.RestResponseDelegate, Get16Error, Schemas.RestResponseDelegate>,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<Schemas.RestResponseDelegate, Get16Error, Schemas.RestResponseDelegate>(
    queryKeyFn({ path: '/setup/delegates/{delegateId}', operationId: 'get16', variables }),
    () => fetchGet16({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type Update11PathParams = {
  delegateId: string
}

export type Update11QueryParams = {
  accountId?: string
}

export type Update11Error = Fetcher.ErrorWrapper<undefined>

export type Update11Variables = {
  body: RequestBodies.Delegate
  pathParams: Update11PathParams
  queryParams?: Update11QueryParams
} & PortalContext['fetcherOptions']

export const fetchUpdate11 = (variables: Update11Variables) =>
  portalFetch<
    Schemas.RestResponseDelegate,
    Update11Error,
    RequestBodies.Delegate,
    {},
    Update11QueryParams,
    Update11PathParams
  >({ url: '/setup/delegates/{delegateId}', method: 'put', ...variables })

export const useUpdate11 = (
  options?: Omit<
    reactQuery.UseMutationOptions<Schemas.RestResponseDelegate, Update11Error, Update11Variables>,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<Schemas.RestResponseDelegate, Update11Error, Update11Variables>(
    (variables: Update11Variables) => fetchUpdate11({ ...fetcherOptions, ...variables }),
    options
  )
}

export type Delete9PathParams = {
  delegateId: string
}

export type Delete9QueryParams = {
  accountId?: string
}

export type Delete9Error = Fetcher.ErrorWrapper<undefined>

export type Delete9Variables = {
  pathParams: Delete9PathParams
  queryParams?: Delete9QueryParams
} & PortalContext['fetcherOptions']

export const fetchDelete9 = (variables: Delete9Variables) =>
  portalFetch<Schemas.RestResponseVoid, Delete9Error, undefined, {}, Delete9QueryParams, Delete9PathParams>({
    url: '/setup/delegates/{delegateId}',
    method: 'delete',
    ...variables
  })

export const useDelete9 = (
  options?: Omit<reactQuery.UseMutationOptions<Schemas.RestResponseVoid, Delete9Error, Delete9Variables>, 'mutationFn'>
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<Schemas.RestResponseVoid, Delete9Error, Delete9Variables>(
    (variables: Delete9Variables) => fetchDelete9({ ...fetcherOptions, ...variables }),
    options
  )
}

export type List20QueryParams = {
  /*
   * @default 0
   */
  offset?: string
  limit?: string
  fieldsIncluded?: string[]
  fieldsExcluded?: string[]
  accountId: string
}

export type List20Error = Fetcher.ErrorWrapper<undefined>

export type List20Variables = {
  queryParams: List20QueryParams
} & PortalContext['fetcherOptions']

export const fetchList20 = (variables: List20Variables) =>
  portalFetch<Schemas.RestResponsePageResponseDelegate, List20Error, undefined, {}, List20QueryParams, {}>({
    url: '/setup/delegates',
    method: 'get',
    ...variables
  })

export const useList20 = (
  variables: List20Variables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponsePageResponseDelegate,
      List20Error,
      Schemas.RestResponsePageResponseDelegate
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponsePageResponseDelegate,
    List20Error,
    Schemas.RestResponsePageResponseDelegate
  >(
    queryKeyFn({ path: '/setup/delegates', operationId: 'list20', variables }),
    () => fetchList20({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type UpdateDescriptionPathParams = {
  delegateId: string
}

export type UpdateDescriptionQueryParams = {
  accountId?: string
}

export type UpdateDescriptionError = Fetcher.ErrorWrapper<undefined>

export type UpdateDescriptionVariables = {
  body?: RequestBodies.ValidateBody
  pathParams: UpdateDescriptionPathParams
  queryParams?: UpdateDescriptionQueryParams
} & PortalContext['fetcherOptions']

export const fetchUpdateDescription = (variables: UpdateDescriptionVariables) =>
  portalFetch<
    Schemas.RestResponseDelegate,
    UpdateDescriptionError,
    RequestBodies.ValidateBody,
    {},
    UpdateDescriptionQueryParams,
    UpdateDescriptionPathParams
  >({ url: '/setup/delegates/{delegateId}/description', method: 'put', ...variables })

export const useUpdateDescription = (
  options?: Omit<
    reactQuery.UseMutationOptions<Schemas.RestResponseDelegate, UpdateDescriptionError, UpdateDescriptionVariables>,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<Schemas.RestResponseDelegate, UpdateDescriptionError, UpdateDescriptionVariables>(
    (variables: UpdateDescriptionVariables) => fetchUpdateDescription({ ...fetcherOptions, ...variables }),
    options
  )
}

export type DelegateSelectorsQueryParams = {
  accountId?: string
}

export type DelegateSelectorsError = Fetcher.ErrorWrapper<undefined>

export type DelegateSelectorsVariables = {
  queryParams?: DelegateSelectorsQueryParams
} & PortalContext['fetcherOptions']

export const fetchDelegateSelectors = (variables: DelegateSelectorsVariables) =>
  portalFetch<Schemas.RestResponseSetString, DelegateSelectorsError, undefined, {}, DelegateSelectorsQueryParams, {}>({
    url: '/setup/delegates/delegate-selectors',
    method: 'get',
    ...variables
  })

export const useDelegateSelectors = (
  variables: DelegateSelectorsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.RestResponseSetString, DelegateSelectorsError, Schemas.RestResponseSetString>,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<Schemas.RestResponseSetString, DelegateSelectorsError, Schemas.RestResponseSetString>(
    queryKeyFn({ path: '/setup/delegates/delegate-selectors', operationId: 'delegateSelectors', variables }),
    () => fetchDelegateSelectors({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type GetAccountIdentifierQueryParams = {
  accountId?: string
}

export type GetAccountIdentifierError = Fetcher.ErrorWrapper<undefined>

export type GetAccountIdentifierVariables = {
  queryParams?: GetAccountIdentifierQueryParams
} & PortalContext['fetcherOptions']

export const fetchGetAccountIdentifier = (variables: GetAccountIdentifierVariables) =>
  portalFetch<
    Schemas.RestResponseString,
    GetAccountIdentifierError,
    undefined,
    {},
    GetAccountIdentifierQueryParams,
    {}
  >({ url: '/setup/delegates/kubernetes/account-identifier', method: 'get', ...variables })

export const useGetAccountIdentifier = (
  variables: GetAccountIdentifierVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.RestResponseString, GetAccountIdentifierError, Schemas.RestResponseString>,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<Schemas.RestResponseString, GetAccountIdentifierError, Schemas.RestResponseString>(
    queryKeyFn({
      path: '/setup/delegates/kubernetes/account-identifier',
      operationId: 'getAccountIdentifier',
      variables
    }),
    () => fetchGetAccountIdentifier({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type ListDelegateStatusWithScalingGroupsQueryParams = {
  accountId?: string
}

export type ListDelegateStatusWithScalingGroupsError = Fetcher.ErrorWrapper<undefined>

export type ListDelegateStatusWithScalingGroupsVariables = {
  queryParams?: ListDelegateStatusWithScalingGroupsQueryParams
} & PortalContext['fetcherOptions']

export const fetchListDelegateStatusWithScalingGroups = (variables: ListDelegateStatusWithScalingGroupsVariables) =>
  portalFetch<
    Schemas.RestResponseDelegateStatus,
    ListDelegateStatusWithScalingGroupsError,
    undefined,
    {},
    ListDelegateStatusWithScalingGroupsQueryParams,
    {}
  >({ url: '/setup/delegates/status2', method: 'get', ...variables })

export const useListDelegateStatusWithScalingGroups = (
  variables: ListDelegateStatusWithScalingGroupsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponseDelegateStatus,
      ListDelegateStatusWithScalingGroupsError,
      Schemas.RestResponseDelegateStatus
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponseDelegateStatus,
    ListDelegateStatusWithScalingGroupsError,
    Schemas.RestResponseDelegateStatus
  >(
    queryKeyFn({ path: '/setup/delegates/status2', operationId: 'listDelegateStatusWithScalingGroups', variables }),
    () => fetchListDelegateStatusWithScalingGroups({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type GetAvailableVersionsQueryParams = {
  accountId?: string
}

export type GetAvailableVersionsError = Fetcher.ErrorWrapper<undefined>

export type GetAvailableVersionsVariables = {
  queryParams?: GetAvailableVersionsQueryParams
} & PortalContext['fetcherOptions']

export const fetchGetAvailableVersions = (variables: GetAvailableVersionsVariables) =>
  portalFetch<
    Schemas.RestResponseListString,
    GetAvailableVersionsError,
    undefined,
    {},
    GetAvailableVersionsQueryParams,
    {}
  >({ url: '/setup/delegates/available-versions-for-verification', method: 'get', ...variables })

export const useGetAvailableVersions = (
  variables: GetAvailableVersionsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponseListString,
      GetAvailableVersionsError,
      Schemas.RestResponseListString
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<Schemas.RestResponseListString, GetAvailableVersionsError, Schemas.RestResponseListString>(
    queryKeyFn({
      path: '/setup/delegates/available-versions-for-verification',
      operationId: 'getAvailableVersions',
      variables
    }),
    () => fetchGetAvailableVersions({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type GetConnectedRatioWithPrimaryQueryParams = {
  targetVersion?: string
}

export type GetConnectedRatioWithPrimaryError = Fetcher.ErrorWrapper<undefined>

export type GetConnectedRatioWithPrimaryVariables = {
  queryParams?: GetConnectedRatioWithPrimaryQueryParams
} & PortalContext['fetcherOptions']

export const fetchGetConnectedRatioWithPrimary = (variables: GetConnectedRatioWithPrimaryVariables) =>
  portalFetch<
    Schemas.RestResponseDouble,
    GetConnectedRatioWithPrimaryError,
    undefined,
    {},
    GetConnectedRatioWithPrimaryQueryParams,
    {}
  >({ url: '/setup/delegates/connected-ratio-with-primary', method: 'get', ...variables })

export const useGetConnectedRatioWithPrimary = (
  variables: GetConnectedRatioWithPrimaryVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponseDouble,
      GetConnectedRatioWithPrimaryError,
      Schemas.RestResponseDouble
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<Schemas.RestResponseDouble, GetConnectedRatioWithPrimaryError, Schemas.RestResponseDouble>(
    queryKeyFn({
      path: '/setup/delegates/connected-ratio-with-primary',
      operationId: 'getConnectedRatioWithPrimary',
      variables
    }),
    () => fetchGetConnectedRatioWithPrimary({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type ValidateThatDelegateNameIsUniqueQueryParams = {
  accountId?: string
  delegateName?: string
}

export type ValidateThatDelegateNameIsUniqueError = Fetcher.ErrorWrapper<undefined>

export type ValidateThatDelegateNameIsUniqueVariables = {
  queryParams?: ValidateThatDelegateNameIsUniqueQueryParams
} & PortalContext['fetcherOptions']

export const fetchValidateThatDelegateNameIsUnique = (variables: ValidateThatDelegateNameIsUniqueVariables) =>
  portalFetch<
    Schemas.RestResponseBoolean,
    ValidateThatDelegateNameIsUniqueError,
    undefined,
    {},
    ValidateThatDelegateNameIsUniqueQueryParams,
    {}
  >({ url: '/setup/delegates/validateDelegateName', method: 'get', ...variables })

export const useValidateThatDelegateNameIsUnique = (
  variables: ValidateThatDelegateNameIsUniqueVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponseBoolean,
      ValidateThatDelegateNameIsUniqueError,
      Schemas.RestResponseBoolean
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponseBoolean,
    ValidateThatDelegateNameIsUniqueError,
    Schemas.RestResponseBoolean
  >(
    queryKeyFn({
      path: '/setup/delegates/validateDelegateName',
      operationId: 'validateThatDelegateNameIsUnique',
      variables
    }),
    () => fetchValidateThatDelegateNameIsUnique({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type ValidateCEDelegateQueryParams = {
  accountId?: string
  delegateName?: string
}

export type ValidateCEDelegateError = Fetcher.ErrorWrapper<undefined>

export type ValidateCEDelegateVariables = {
  queryParams?: ValidateCEDelegateQueryParams
} & PortalContext['fetcherOptions']

export const fetchValidateCEDelegate = (variables: ValidateCEDelegateVariables) =>
  portalFetch<
    Schemas.RestResponseCEDelegateStatus,
    ValidateCEDelegateError,
    undefined,
    {},
    ValidateCEDelegateQueryParams,
    {}
  >({ url: '/setup/delegates/validate-ce-delegate', method: 'get', ...variables })

export const useValidateCEDelegate = (
  variables: ValidateCEDelegateVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponseCEDelegateStatus,
      ValidateCEDelegateError,
      Schemas.RestResponseCEDelegateStatus
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponseCEDelegateStatus,
    ValidateCEDelegateError,
    Schemas.RestResponseCEDelegateStatus
  >(
    queryKeyFn({ path: '/setup/delegates/validate-ce-delegate', operationId: 'validateCEDelegate', variables }),
    () => fetchValidateCEDelegate({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type GetProfileResultPathParams = {
  delegateId: string
}

export type GetProfileResultQueryParams = {
  accountId?: string
}

export type GetProfileResultError = Fetcher.ErrorWrapper<undefined>

export type GetProfileResultVariables = {
  pathParams: GetProfileResultPathParams
  queryParams?: GetProfileResultQueryParams
} & PortalContext['fetcherOptions']

export const fetchGetProfileResult = (variables: GetProfileResultVariables) =>
  portalFetch<
    Schemas.RestResponseString,
    GetProfileResultError,
    undefined,
    {},
    GetProfileResultQueryParams,
    GetProfileResultPathParams
  >({ url: '/setup/delegates/{delegateId}/profile-result', method: 'get', ...variables })

export const useGetProfileResult = (
  variables: GetProfileResultVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.RestResponseString, GetProfileResultError, Schemas.RestResponseString>,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<Schemas.RestResponseString, GetProfileResultError, Schemas.RestResponseString>(
    queryKeyFn({ path: '/setup/delegates/{delegateId}/profile-result', operationId: 'getProfileResult', variables }),
    () => fetchGetProfileResult({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type DelegateSizesQueryParams = {
  accountId?: string
  orgId?: string
  projectId?: string
}

export type DelegateSizesError = Fetcher.ErrorWrapper<undefined>

export type DelegateSizesVariables = {
  queryParams?: DelegateSizesQueryParams
} & PortalContext['fetcherOptions']

export const fetchDelegateSizes = (variables: DelegateSizesVariables) =>
  portalFetch<
    Schemas.RestResponseListDelegateSizeDetails,
    DelegateSizesError,
    undefined,
    {},
    DelegateSizesQueryParams,
    {}
  >({ url: '/setup/delegates/delegate-sizes', method: 'get', ...variables })

export const useDelegateSizes = (
  variables: DelegateSizesVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponseListDelegateSizeDetails,
      DelegateSizesError,
      Schemas.RestResponseListDelegateSizeDetails
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponseListDelegateSizeDetails,
    DelegateSizesError,
    Schemas.RestResponseListDelegateSizeDetails
  >(
    queryKeyFn({ path: '/setup/delegates/delegate-sizes', operationId: 'delegateSizes', variables }),
    () => fetchDelegateSizes({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type UpdateScopesPathParams = {
  delegateId: string
}

export type UpdateScopesQueryParams = {
  accountId?: string
}

export type UpdateScopesError = Fetcher.ErrorWrapper<undefined>

export type UpdateScopesVariables = {
  body?: RequestBodies.DelegateScopes
  pathParams: UpdateScopesPathParams
  queryParams?: UpdateScopesQueryParams
} & PortalContext['fetcherOptions']

export const fetchUpdateScopes = (variables: UpdateScopesVariables) =>
  portalFetch<
    Schemas.RestResponseDelegate,
    UpdateScopesError,
    RequestBodies.DelegateScopes,
    {},
    UpdateScopesQueryParams,
    UpdateScopesPathParams
  >({ url: '/setup/delegates/{delegateId}/scopes', method: 'put', ...variables })

export const useUpdateScopes = (
  options?: Omit<
    reactQuery.UseMutationOptions<Schemas.RestResponseDelegate, UpdateScopesError, UpdateScopesVariables>,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<Schemas.RestResponseDelegate, UpdateScopesError, UpdateScopesVariables>(
    (variables: UpdateScopesVariables) => fetchUpdateScopes({ ...fetcherOptions, ...variables }),
    options
  )
}

export type UpdateTagsPathParams = {
  delegateId: string
}

export type UpdateTagsQueryParams = {
  accountId?: string
}

export type UpdateTagsError = Fetcher.ErrorWrapper<undefined>

export type UpdateTagsVariables = {
  body?: RequestBodies.DelegateTags
  pathParams: UpdateTagsPathParams
  queryParams?: UpdateTagsQueryParams
} & PortalContext['fetcherOptions']

export const fetchUpdateTags = (variables: UpdateTagsVariables) =>
  portalFetch<
    Schemas.RestResponseDelegate,
    UpdateTagsError,
    RequestBodies.DelegateTags,
    {},
    UpdateTagsQueryParams,
    UpdateTagsPathParams
  >({ url: '/setup/delegates/{delegateId}/tags', method: 'put', ...variables })

export const useUpdateTags = (
  options?: Omit<
    reactQuery.UseMutationOptions<Schemas.RestResponseDelegate, UpdateTagsError, UpdateTagsVariables>,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<Schemas.RestResponseDelegate, UpdateTagsError, UpdateTagsVariables>(
    (variables: UpdateTagsVariables) => fetchUpdateTags({ ...fetcherOptions, ...variables }),
    options
  )
}

export type DelegateTagsQueryParams = {
  accountId?: string
}

export type DelegateTagsError = Fetcher.ErrorWrapper<undefined>

export type DelegateTagsVariables = {
  queryParams?: DelegateTagsQueryParams
} & PortalContext['fetcherOptions']

export const fetchDelegateTags = (variables: DelegateTagsVariables) =>
  portalFetch<Schemas.RestResponseSetString, DelegateTagsError, undefined, {}, DelegateTagsQueryParams, {}>({
    url: '/setup/delegates/delegate-tags',
    method: 'get',
    ...variables
  })

export const useDelegateTags = (
  variables: DelegateTagsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.RestResponseSetString, DelegateTagsError, Schemas.RestResponseSetString>,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<Schemas.RestResponseSetString, DelegateTagsError, Schemas.RestResponseSetString>(
    queryKeyFn({ path: '/setup/delegates/delegate-tags', operationId: 'delegateTags', variables }),
    () => fetchDelegateTags({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type KubernetesDelegateNamesQueryParams = {
  accountId?: string
}

export type KubernetesDelegateNamesError = Fetcher.ErrorWrapper<undefined>

export type KubernetesDelegateNamesVariables = {
  queryParams?: KubernetesDelegateNamesQueryParams
} & PortalContext['fetcherOptions']

export const fetchKubernetesDelegateNames = (variables: KubernetesDelegateNamesVariables) =>
  portalFetch<
    Schemas.RestResponseListString,
    KubernetesDelegateNamesError,
    undefined,
    {},
    KubernetesDelegateNamesQueryParams,
    {}
  >({ url: '/setup/delegates/kubernetes-delegates', method: 'get', ...variables })

export const useKubernetesDelegateNames = (
  variables: KubernetesDelegateNamesVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponseListString,
      KubernetesDelegateNamesError,
      Schemas.RestResponseListString
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponseListString,
    KubernetesDelegateNamesError,
    Schemas.RestResponseListString
  >(
    queryKeyFn({ path: '/setup/delegates/kubernetes-delegates', operationId: 'kubernetesDelegateNames', variables }),
    () => fetchKubernetesDelegateNames({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type DelegateSelectorsUpTheHierarchyQueryParams = {
  accountId?: string
  orgId?: string
  projectId?: string
}

export type DelegateSelectorsUpTheHierarchyError = Fetcher.ErrorWrapper<undefined>

export type DelegateSelectorsUpTheHierarchyVariables = {
  queryParams?: DelegateSelectorsUpTheHierarchyQueryParams
} & PortalContext['fetcherOptions']

export const fetchDelegateSelectorsUpTheHierarchy = (variables: DelegateSelectorsUpTheHierarchyVariables) =>
  portalFetch<
    Schemas.RestResponseSetString,
    DelegateSelectorsUpTheHierarchyError,
    undefined,
    {},
    DelegateSelectorsUpTheHierarchyQueryParams,
    {}
  >({ url: '/setup/delegates/delegate-selectors-up-the-hierarchy', method: 'get', ...variables })

export const useDelegateSelectorsUpTheHierarchy = (
  variables: DelegateSelectorsUpTheHierarchyVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponseSetString,
      DelegateSelectorsUpTheHierarchyError,
      Schemas.RestResponseSetString
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponseSetString,
    DelegateSelectorsUpTheHierarchyError,
    Schemas.RestResponseSetString
  >(
    queryKeyFn({
      path: '/setup/delegates/delegate-selectors-up-the-hierarchy',
      operationId: 'delegateSelectorsUpTheHierarchy',
      variables
    }),
    () => fetchDelegateSelectorsUpTheHierarchy({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type ValidateKubernetesYamlQueryParams = {
  accountId?: string
  orgId?: string
  projectId?: string
}

export type ValidateKubernetesYamlError = Fetcher.ErrorWrapper<undefined>

export type ValidateKubernetesYamlVariables = {
  body: RequestBodies.DelegateSetupDetails
  queryParams?: ValidateKubernetesYamlQueryParams
} & PortalContext['fetcherOptions']

export const fetchValidateKubernetesYaml = (variables: ValidateKubernetesYamlVariables) =>
  portalFetch<
    Schemas.RestResponseDelegateSetupDetails,
    ValidateKubernetesYamlError,
    RequestBodies.DelegateSetupDetails,
    {},
    ValidateKubernetesYamlQueryParams,
    {}
  >({ url: '/setup/delegates/validate-kubernetes-yaml', method: 'post', ...variables })

export const useValidateKubernetesYaml = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.RestResponseDelegateSetupDetails,
      ValidateKubernetesYamlError,
      ValidateKubernetesYamlVariables
    >,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<
    Schemas.RestResponseDelegateSetupDetails,
    ValidateKubernetesYamlError,
    ValidateKubernetesYamlVariables
  >(
    (variables: ValidateKubernetesYamlVariables) => fetchValidateKubernetesYaml({ ...fetcherOptions, ...variables }),
    options
  )
}

export type GenerateKubernetesYamlQueryParams = {
  accountId?: string
  orgId?: string
  projectId?: string
}

export type GenerateKubernetesYamlError = Fetcher.ErrorWrapper<undefined>

export type GenerateKubernetesYamlVariables = {
  body: RequestBodies.DelegateSetupDetails
  queryParams?: GenerateKubernetesYamlQueryParams
} & PortalContext['fetcherOptions']

export const fetchGenerateKubernetesYaml = (variables: GenerateKubernetesYamlVariables) =>
  portalFetch<
    undefined,
    GenerateKubernetesYamlError,
    RequestBodies.DelegateSetupDetails,
    {},
    GenerateKubernetesYamlQueryParams,
    {}
  >({ url: '/setup/delegates/generate-kubernetes-yaml', method: 'post', ...variables })

export const useGenerateKubernetesYaml = (
  options?: Omit<
    reactQuery.UseMutationOptions<undefined, GenerateKubernetesYamlError, GenerateKubernetesYamlVariables>,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<undefined, GenerateKubernetesYamlError, GenerateKubernetesYamlVariables>(
    (variables: GenerateKubernetesYamlVariables) => fetchGenerateKubernetesYaml({ ...fetcherOptions, ...variables }),
    options
  )
}

export type UpdateApprovalStatusPathParams = {
  delegateId: string
}

export type UpdateApprovalStatusQueryParams = {
  accountId?: string
  action: 'ACTIVATE' | 'REJECT'
}

export type UpdateApprovalStatusError = Fetcher.ErrorWrapper<undefined>

export type UpdateApprovalStatusVariables = {
  pathParams: UpdateApprovalStatusPathParams
  queryParams: UpdateApprovalStatusQueryParams
} & PortalContext['fetcherOptions']

export const fetchUpdateApprovalStatus = (variables: UpdateApprovalStatusVariables) =>
  portalFetch<
    Schemas.RestResponseDelegate,
    UpdateApprovalStatusError,
    undefined,
    {},
    UpdateApprovalStatusQueryParams,
    UpdateApprovalStatusPathParams
  >({ url: '/setup/delegates/{delegateId}/approval', method: 'put', ...variables })

export const useUpdateApprovalStatus = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.RestResponseDelegate,
      UpdateApprovalStatusError,
      UpdateApprovalStatusVariables
    >,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<Schemas.RestResponseDelegate, UpdateApprovalStatusError, UpdateApprovalStatusVariables>(
    (variables: UpdateApprovalStatusVariables) => fetchUpdateApprovalStatus({ ...fetcherOptions, ...variables }),
    options
  )
}

export type DeleteAllExceptQueryParams = {
  accountId?: string
}

export type DeleteAllExceptError = Fetcher.ErrorWrapper<undefined>

export type DeleteAllExceptVariables = {
  body?: RequestBodies.UpdateWhitelistedDomainsBody
  queryParams?: DeleteAllExceptQueryParams
} & PortalContext['fetcherOptions']

export const fetchDeleteAllExcept = (variables: DeleteAllExceptVariables) =>
  portalFetch<
    Schemas.RestResponseVoid,
    DeleteAllExceptError,
    RequestBodies.UpdateWhitelistedDomainsBody,
    {},
    DeleteAllExceptQueryParams,
    {}
  >({ url: '/setup/delegates/delete-all-except', method: 'delete', ...variables })

export const useDeleteAllExcept = (
  options?: Omit<
    reactQuery.UseMutationOptions<Schemas.RestResponseVoid, DeleteAllExceptError, DeleteAllExceptVariables>,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<Schemas.RestResponseVoid, DeleteAllExceptError, DeleteAllExceptVariables>(
    (variables: DeleteAllExceptVariables) => fetchDeleteAllExcept({ ...fetcherOptions, ...variables }),
    options
  )
}

export type DeleteDelegateGroupPathParams = {
  delegateGroupId: string
}

export type DeleteDelegateGroupQueryParams = {
  accountId?: string
  orgId?: string
  projectId?: string
}

export type DeleteDelegateGroupError = Fetcher.ErrorWrapper<undefined>

export type DeleteDelegateGroupVariables = {
  pathParams: DeleteDelegateGroupPathParams
  queryParams?: DeleteDelegateGroupQueryParams
} & PortalContext['fetcherOptions']

export const fetchDeleteDelegateGroup = (variables: DeleteDelegateGroupVariables) =>
  portalFetch<
    Schemas.RestResponseVoid,
    DeleteDelegateGroupError,
    undefined,
    {},
    DeleteDelegateGroupQueryParams,
    DeleteDelegateGroupPathParams
  >({ url: '/setup/delegates/groups/{delegateGroupId}', method: 'delete', ...variables })

export const useDeleteDelegateGroup = (
  options?: Omit<
    reactQuery.UseMutationOptions<Schemas.RestResponseVoid, DeleteDelegateGroupError, DeleteDelegateGroupVariables>,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<Schemas.RestResponseVoid, DeleteDelegateGroupError, DeleteDelegateGroupVariables>(
    (variables: DeleteDelegateGroupVariables) => fetchDeleteDelegateGroup({ ...fetcherOptions, ...variables }),
    options
  )
}

export type DownloadUrlQueryParams = {
  accountId?: string
}

export type DownloadUrlError = Fetcher.ErrorWrapper<undefined>

export type DownloadUrlVariables = {
  queryParams?: DownloadUrlQueryParams
} & PortalContext['fetcherOptions']

export const fetchDownloadUrl = (variables: DownloadUrlVariables) =>
  portalFetch<Schemas.RestResponseMapStringString, DownloadUrlError, undefined, {}, DownloadUrlQueryParams, {}>({
    url: '/setup/delegates/downloadUrl',
    method: 'get',
    ...variables
  })

export const useDownloadUrl = (
  variables: DownloadUrlVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponseMapStringString,
      DownloadUrlError,
      Schemas.RestResponseMapStringString
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponseMapStringString,
    DownloadUrlError,
    Schemas.RestResponseMapStringString
  >(
    queryKeyFn({ path: '/setup/delegates/downloadUrl', operationId: 'downloadUrl', variables }),
    () => fetchDownloadUrl({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type DownloadScriptsQueryParams = {
  accountId?: string
  delegateName?: string
  delegateProfileId?: string
  token?: string
  tokenName?: string
}

export type DownloadScriptsError = Fetcher.ErrorWrapper<undefined>

export type DownloadScriptsVariables = {
  queryParams?: DownloadScriptsQueryParams
} & PortalContext['fetcherOptions']

export const fetchDownloadScripts = (variables: DownloadScriptsVariables) =>
  portalFetch<undefined, DownloadScriptsError, undefined, {}, DownloadScriptsQueryParams, {}>({
    url: '/setup/delegates/download',
    method: 'get',
    ...variables
  })

export const useDownloadScripts = (
  variables: DownloadScriptsVariables,
  options?: Omit<reactQuery.UseQueryOptions<undefined, DownloadScriptsError, undefined>, 'queryKey' | 'queryFn'>
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<undefined, DownloadScriptsError, undefined>(
    queryKeyFn({ path: '/setup/delegates/download', operationId: 'downloadScripts', variables }),
    () => fetchDownloadScripts({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type DownloadDockerQueryParams = {
  accountId?: string
  delegateName?: string
  delegateProfileId?: string
  token?: string
  tokenName?: string
}

export type DownloadDockerError = Fetcher.ErrorWrapper<undefined>

export type DownloadDockerVariables = {
  queryParams?: DownloadDockerQueryParams
} & PortalContext['fetcherOptions']

export const fetchDownloadDocker = (variables: DownloadDockerVariables) =>
  portalFetch<undefined, DownloadDockerError, undefined, {}, DownloadDockerQueryParams, {}>({
    url: '/setup/delegates/docker',
    method: 'get',
    ...variables
  })

export const useDownloadDocker = (
  variables: DownloadDockerVariables,
  options?: Omit<reactQuery.UseQueryOptions<undefined, DownloadDockerError, undefined>, 'queryKey' | 'queryFn'>
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<undefined, DownloadDockerError, undefined>(
    queryKeyFn({ path: '/setup/delegates/docker', operationId: 'downloadDocker', variables }),
    () => fetchDownloadDocker({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type DownloadKubernetesQueryParams = {
  accountId?: string
  delegateName?: string
  delegateProfileId?: string
  token?: string
  /*
   * @default false
   */
  isCeEnabled?: boolean
  tokenName?: string
}

export type DownloadKubernetesError = Fetcher.ErrorWrapper<undefined>

export type DownloadKubernetesVariables = {
  queryParams?: DownloadKubernetesQueryParams
} & PortalContext['fetcherOptions']

export const fetchDownloadKubernetes = (variables: DownloadKubernetesVariables) =>
  portalFetch<undefined, DownloadKubernetesError, undefined, {}, DownloadKubernetesQueryParams, {}>({
    url: '/setup/delegates/kubernetes',
    method: 'get',
    ...variables
  })

export const useDownloadKubernetes = (
  variables: DownloadKubernetesVariables,
  options?: Omit<reactQuery.UseQueryOptions<undefined, DownloadKubernetesError, undefined>, 'queryKey' | 'queryFn'>
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<undefined, DownloadKubernetesError, undefined>(
    queryKeyFn({ path: '/setup/delegates/kubernetes', operationId: 'downloadKubernetes', variables }),
    () => fetchDownloadKubernetes({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type DownloadEcsQueryParams = {
  accountId?: string
  delegateGroupName?: string
  awsVpcMode?: boolean
  hostname?: string
  delegateProfileId?: string
  token?: string
  tokenName?: string
}

export type DownloadEcsError = Fetcher.ErrorWrapper<undefined>

export type DownloadEcsVariables = {
  queryParams?: DownloadEcsQueryParams
} & PortalContext['fetcherOptions']

export const fetchDownloadEcs = (variables: DownloadEcsVariables) =>
  portalFetch<undefined, DownloadEcsError, undefined, {}, DownloadEcsQueryParams, {}>({
    url: '/setup/delegates/ecs',
    method: 'get',
    ...variables
  })

export const useDownloadEcs = (
  variables: DownloadEcsVariables,
  options?: Omit<reactQuery.UseQueryOptions<undefined, DownloadEcsError, undefined>, 'queryKey' | 'queryFn'>
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<undefined, DownloadEcsError, undefined>(
    queryKeyFn({ path: '/setup/delegates/ecs', operationId: 'downloadEcs', variables }),
    () => fetchDownloadEcs({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type DownloadDelegateValuesYamlQueryParams = {
  accountId?: string
  delegateName?: string
  delegateProfileId?: string
  token?: string
  tokenName?: string
}

export type DownloadDelegateValuesYamlError = Fetcher.ErrorWrapper<undefined>

export type DownloadDelegateValuesYamlVariables = {
  queryParams?: DownloadDelegateValuesYamlQueryParams
} & PortalContext['fetcherOptions']

export const fetchDownloadDelegateValuesYaml = (variables: DownloadDelegateValuesYamlVariables) =>
  portalFetch<undefined, DownloadDelegateValuesYamlError, undefined, {}, DownloadDelegateValuesYamlQueryParams, {}>({
    url: '/setup/delegates/delegate-helm-values-yaml',
    method: 'get',
    ...variables
  })

export const useDownloadDelegateValuesYaml = (
  variables: DownloadDelegateValuesYamlVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<undefined, DownloadDelegateValuesYamlError, undefined>,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<undefined, DownloadDelegateValuesYamlError, undefined>(
    queryKeyFn({
      path: '/setup/delegates/delegate-helm-values-yaml',
      operationId: 'downloadDelegateValuesYaml',
      variables
    }),
    () => fetchDownloadDelegateValuesYaml({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type ListDelegateStatusQueryParams = {
  accountId?: string
}

export type ListDelegateStatusError = Fetcher.ErrorWrapper<undefined>

export type ListDelegateStatusVariables = {
  queryParams?: ListDelegateStatusQueryParams
} & PortalContext['fetcherOptions']

export const fetchListDelegateStatus = (variables: ListDelegateStatusVariables) =>
  portalFetch<
    Schemas.RestResponseDelegateStatus,
    ListDelegateStatusError,
    undefined,
    {},
    ListDelegateStatusQueryParams,
    {}
  >({ url: '/setup/delegates/status', method: 'get', ...variables })

export const useListDelegateStatus = (
  variables: ListDelegateStatusVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponseDelegateStatus,
      ListDelegateStatusError,
      Schemas.RestResponseDelegateStatus
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponseDelegateStatus,
    ListDelegateStatusError,
    Schemas.RestResponseDelegateStatus
  >(
    queryKeyFn({ path: '/setup/delegates/status', operationId: 'listDelegateStatus', variables }),
    () => fetchListDelegateStatus({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type Get17QueryParams = {
  accountId?: string
}

export type Get17Error = Fetcher.ErrorWrapper<undefined>

export type Get17Variables = {
  queryParams?: Get17QueryParams
} & PortalContext['fetcherOptions']

export const fetchGet17 = (variables: Get17Variables) =>
  portalFetch<Schemas.RestResponseString, Get17Error, undefined, {}, Get17QueryParams, {}>({
    url: '/setup/delegates/v3/latest',
    method: 'get',
    ...variables
  })

export const useGet17 = (
  variables: Get17Variables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.RestResponseString, Get17Error, Schemas.RestResponseString>,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<Schemas.RestResponseString, Get17Error, Schemas.RestResponseString>(
    queryKeyFn({ path: '/setup/delegates/v3/latest', operationId: 'get17', variables }),
    () => fetchGet17({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type Get18PathParams = {
  delegateId: string
}

export type Get18QueryParams = {
  accountId?: string
}

export type Get18Error = Fetcher.ErrorWrapper<undefined>

export type Get18Variables = {
  pathParams: Get18PathParams
  queryParams?: Get18QueryParams
} & PortalContext['fetcherOptions']

export const fetchGet18 = (variables: Get18Variables) =>
  portalFetch<Schemas.RestResponseDelegate, Get18Error, undefined, {}, Get18QueryParams, Get18PathParams>({
    url: '/setup/delegates/v3/{delegateId}',
    method: 'get',
    ...variables
  })

export const useGet18 = (
  variables: Get18Variables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.RestResponseDelegate, Get18Error, Schemas.RestResponseDelegate>,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<Schemas.RestResponseDelegate, Get18Error, Schemas.RestResponseDelegate>(
    queryKeyFn({ path: '/setup/delegates/v3/{delegateId}', operationId: 'get18', variables }),
    () => fetchGet18({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type Update12PathParams = {
  delegateId: string
}

export type Update12QueryParams = {
  accountId?: string
}

export type Update12Error = Fetcher.ErrorWrapper<undefined>

export type Update12Variables = {
  body: RequestBodies.Delegate
  pathParams: Update12PathParams
  queryParams?: Update12QueryParams
} & PortalContext['fetcherOptions']

export const fetchUpdate12 = (variables: Update12Variables) =>
  portalFetch<
    Schemas.RestResponseDelegate,
    Update12Error,
    RequestBodies.Delegate,
    {},
    Update12QueryParams,
    Update12PathParams
  >({ url: '/setup/delegates/v3/{delegateId}', method: 'put', ...variables })

export const useUpdate12 = (
  options?: Omit<
    reactQuery.UseMutationOptions<Schemas.RestResponseDelegate, Update12Error, Update12Variables>,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<Schemas.RestResponseDelegate, Update12Error, Update12Variables>(
    (variables: Update12Variables) => fetchUpdate12({ ...fetcherOptions, ...variables }),
    options
  )
}

export type Delete10PathParams = {
  delegateId: string
}

export type Delete10QueryParams = {
  accountId?: string
}

export type Delete10Error = Fetcher.ErrorWrapper<undefined>

export type Delete10Variables = {
  pathParams: Delete10PathParams
  queryParams?: Delete10QueryParams
} & PortalContext['fetcherOptions']

export const fetchDelete10 = (variables: Delete10Variables) =>
  portalFetch<Schemas.RestResponseVoid, Delete10Error, undefined, {}, Delete10QueryParams, Delete10PathParams>({
    url: '/setup/delegates/v3/{delegateId}',
    method: 'delete',
    ...variables
  })

export const useDelete10 = (
  options?: Omit<
    reactQuery.UseMutationOptions<Schemas.RestResponseVoid, Delete10Error, Delete10Variables>,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<Schemas.RestResponseVoid, Delete10Error, Delete10Variables>(
    (variables: Delete10Variables) => fetchDelete10({ ...fetcherOptions, ...variables }),
    options
  )
}

export type List21QueryParams = {
  accountId: string
  orgIdentifier?: string
  projectIdentifier?: string
  delegateTokenName?: string
}

export type List21Error = Fetcher.ErrorWrapper<undefined>

export type List21Variables = {
  queryParams: List21QueryParams
} & PortalContext['fetcherOptions']

export const fetchList21 = (variables: List21Variables) =>
  portalFetch<Schemas.RestResponseDelegateGroupListing, List21Error, undefined, {}, List21QueryParams, {}>({
    url: '/setup/delegates/v3/ng/delegate-token',
    method: 'get',
    ...variables
  })

export const useList21 = (
  variables: List21Variables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponseDelegateGroupListing,
      List21Error,
      Schemas.RestResponseDelegateGroupListing
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponseDelegateGroupListing,
    List21Error,
    Schemas.RestResponseDelegateGroupListing
  >(
    queryKeyFn({ path: '/setup/delegates/v3/ng/delegate-token', operationId: 'list21', variables }),
    () => fetchList21({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type UpdateDescription1PathParams = {
  delegateId: string
}

export type UpdateDescription1QueryParams = {
  accountId?: string
}

export type UpdateDescription1Error = Fetcher.ErrorWrapper<undefined>

export type UpdateDescription1Variables = {
  body?: RequestBodies.ValidateBody
  pathParams: UpdateDescription1PathParams
  queryParams?: UpdateDescription1QueryParams
} & PortalContext['fetcherOptions']

export const fetchUpdateDescription1 = (variables: UpdateDescription1Variables) =>
  portalFetch<
    Schemas.RestResponseDelegate,
    UpdateDescription1Error,
    RequestBodies.ValidateBody,
    {},
    UpdateDescription1QueryParams,
    UpdateDescription1PathParams
  >({ url: '/setup/delegates/v3/{delegateId}/description', method: 'put', ...variables })

export const useUpdateDescription1 = (
  options?: Omit<
    reactQuery.UseMutationOptions<Schemas.RestResponseDelegate, UpdateDescription1Error, UpdateDescription1Variables>,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<Schemas.RestResponseDelegate, UpdateDescription1Error, UpdateDescription1Variables>(
    (variables: UpdateDescription1Variables) => fetchUpdateDescription1({ ...fetcherOptions, ...variables }),
    options
  )
}

export type DelegateSelectors1QueryParams = {
  accountId?: string
}

export type DelegateSelectors1Error = Fetcher.ErrorWrapper<undefined>

export type DelegateSelectors1Variables = {
  queryParams?: DelegateSelectors1QueryParams
} & PortalContext['fetcherOptions']

export const fetchDelegateSelectors1 = (variables: DelegateSelectors1Variables) =>
  portalFetch<Schemas.RestResponseSetString, DelegateSelectors1Error, undefined, {}, DelegateSelectors1QueryParams, {}>(
    { url: '/setup/delegates/v3/delegate-selectors', method: 'get', ...variables }
  )

export const useDelegateSelectors1 = (
  variables: DelegateSelectors1Variables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.RestResponseSetString, DelegateSelectors1Error, Schemas.RestResponseSetString>,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<Schemas.RestResponseSetString, DelegateSelectors1Error, Schemas.RestResponseSetString>(
    queryKeyFn({ path: '/setup/delegates/v3/delegate-selectors', operationId: 'delegateSelectors1', variables }),
    () => fetchDelegateSelectors1({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type GetAccountIdentifier1QueryParams = {
  accountId?: string
}

export type GetAccountIdentifier1Error = Fetcher.ErrorWrapper<undefined>

export type GetAccountIdentifier1Variables = {
  queryParams?: GetAccountIdentifier1QueryParams
} & PortalContext['fetcherOptions']

export const fetchGetAccountIdentifier1 = (variables: GetAccountIdentifier1Variables) =>
  portalFetch<
    Schemas.RestResponseString,
    GetAccountIdentifier1Error,
    undefined,
    {},
    GetAccountIdentifier1QueryParams,
    {}
  >({ url: '/setup/delegates/v3/kubernetes/account-identifier', method: 'get', ...variables })

export const useGetAccountIdentifier1 = (
  variables: GetAccountIdentifier1Variables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.RestResponseString, GetAccountIdentifier1Error, Schemas.RestResponseString>,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<Schemas.RestResponseString, GetAccountIdentifier1Error, Schemas.RestResponseString>(
    queryKeyFn({
      path: '/setup/delegates/v3/kubernetes/account-identifier',
      operationId: 'getAccountIdentifier1',
      variables
    }),
    () => fetchGetAccountIdentifier1({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type ListDelegateStatusWithScalingGroups1QueryParams = {
  accountId?: string
}

export type ListDelegateStatusWithScalingGroups1Error = Fetcher.ErrorWrapper<undefined>

export type ListDelegateStatusWithScalingGroups1Variables = {
  queryParams?: ListDelegateStatusWithScalingGroups1QueryParams
} & PortalContext['fetcherOptions']

export const fetchListDelegateStatusWithScalingGroups1 = (variables: ListDelegateStatusWithScalingGroups1Variables) =>
  portalFetch<
    Schemas.RestResponseDelegateStatus,
    ListDelegateStatusWithScalingGroups1Error,
    undefined,
    {},
    ListDelegateStatusWithScalingGroups1QueryParams,
    {}
  >({ url: '/setup/delegates/v3/status2', method: 'get', ...variables })

export const useListDelegateStatusWithScalingGroups1 = (
  variables: ListDelegateStatusWithScalingGroups1Variables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponseDelegateStatus,
      ListDelegateStatusWithScalingGroups1Error,
      Schemas.RestResponseDelegateStatus
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponseDelegateStatus,
    ListDelegateStatusWithScalingGroups1Error,
    Schemas.RestResponseDelegateStatus
  >(
    queryKeyFn({ path: '/setup/delegates/v3/status2', operationId: 'listDelegateStatusWithScalingGroups1', variables }),
    () => fetchListDelegateStatusWithScalingGroups1({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type GetAvailableVersions1QueryParams = {
  accountId?: string
}

export type GetAvailableVersions1Error = Fetcher.ErrorWrapper<undefined>

export type GetAvailableVersions1Variables = {
  queryParams?: GetAvailableVersions1QueryParams
} & PortalContext['fetcherOptions']

export const fetchGetAvailableVersions1 = (variables: GetAvailableVersions1Variables) =>
  portalFetch<
    Schemas.RestResponseListString,
    GetAvailableVersions1Error,
    undefined,
    {},
    GetAvailableVersions1QueryParams,
    {}
  >({ url: '/setup/delegates/v3/available-versions-for-verification', method: 'get', ...variables })

export const useGetAvailableVersions1 = (
  variables: GetAvailableVersions1Variables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponseListString,
      GetAvailableVersions1Error,
      Schemas.RestResponseListString
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponseListString,
    GetAvailableVersions1Error,
    Schemas.RestResponseListString
  >(
    queryKeyFn({
      path: '/setup/delegates/v3/available-versions-for-verification',
      operationId: 'getAvailableVersions1',
      variables
    }),
    () => fetchGetAvailableVersions1({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type GetConnectedRatioWithPrimary1QueryParams = {
  targetVersion?: string
}

export type GetConnectedRatioWithPrimary1Error = Fetcher.ErrorWrapper<undefined>

export type GetConnectedRatioWithPrimary1Variables = {
  queryParams?: GetConnectedRatioWithPrimary1QueryParams
} & PortalContext['fetcherOptions']

export const fetchGetConnectedRatioWithPrimary1 = (variables: GetConnectedRatioWithPrimary1Variables) =>
  portalFetch<
    Schemas.RestResponseDouble,
    GetConnectedRatioWithPrimary1Error,
    undefined,
    {},
    GetConnectedRatioWithPrimary1QueryParams,
    {}
  >({ url: '/setup/delegates/v3/connected-ratio-with-primary', method: 'get', ...variables })

export const useGetConnectedRatioWithPrimary1 = (
  variables: GetConnectedRatioWithPrimary1Variables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponseDouble,
      GetConnectedRatioWithPrimary1Error,
      Schemas.RestResponseDouble
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponseDouble,
    GetConnectedRatioWithPrimary1Error,
    Schemas.RestResponseDouble
  >(
    queryKeyFn({
      path: '/setup/delegates/v3/connected-ratio-with-primary',
      operationId: 'getConnectedRatioWithPrimary1',
      variables
    }),
    () => fetchGetConnectedRatioWithPrimary1({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type ValidateThatDelegateNameIsUnique1QueryParams = {
  accountId?: string
  delegateName?: string
}

export type ValidateThatDelegateNameIsUnique1Error = Fetcher.ErrorWrapper<undefined>

export type ValidateThatDelegateNameIsUnique1Variables = {
  queryParams?: ValidateThatDelegateNameIsUnique1QueryParams
} & PortalContext['fetcherOptions']

export const fetchValidateThatDelegateNameIsUnique1 = (variables: ValidateThatDelegateNameIsUnique1Variables) =>
  portalFetch<
    Schemas.RestResponseBoolean,
    ValidateThatDelegateNameIsUnique1Error,
    undefined,
    {},
    ValidateThatDelegateNameIsUnique1QueryParams,
    {}
  >({ url: '/setup/delegates/v3/validateDelegateName', method: 'get', ...variables })

export const useValidateThatDelegateNameIsUnique1 = (
  variables: ValidateThatDelegateNameIsUnique1Variables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponseBoolean,
      ValidateThatDelegateNameIsUnique1Error,
      Schemas.RestResponseBoolean
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponseBoolean,
    ValidateThatDelegateNameIsUnique1Error,
    Schemas.RestResponseBoolean
  >(
    queryKeyFn({
      path: '/setup/delegates/v3/validateDelegateName',
      operationId: 'validateThatDelegateNameIsUnique1',
      variables
    }),
    () => fetchValidateThatDelegateNameIsUnique1({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type ValidateCEDelegate1QueryParams = {
  accountId?: string
  delegateName?: string
}

export type ValidateCEDelegate1Error = Fetcher.ErrorWrapper<undefined>

export type ValidateCEDelegate1Variables = {
  queryParams?: ValidateCEDelegate1QueryParams
} & PortalContext['fetcherOptions']

export const fetchValidateCEDelegate1 = (variables: ValidateCEDelegate1Variables) =>
  portalFetch<
    Schemas.RestResponseCEDelegateStatus,
    ValidateCEDelegate1Error,
    undefined,
    {},
    ValidateCEDelegate1QueryParams,
    {}
  >({ url: '/setup/delegates/v3/validate-ce-delegate', method: 'get', ...variables })

export const useValidateCEDelegate1 = (
  variables: ValidateCEDelegate1Variables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponseCEDelegateStatus,
      ValidateCEDelegate1Error,
      Schemas.RestResponseCEDelegateStatus
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponseCEDelegateStatus,
    ValidateCEDelegate1Error,
    Schemas.RestResponseCEDelegateStatus
  >(
    queryKeyFn({ path: '/setup/delegates/v3/validate-ce-delegate', operationId: 'validateCEDelegate1', variables }),
    () => fetchValidateCEDelegate1({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type GetProfileResult1PathParams = {
  delegateId: string
}

export type GetProfileResult1QueryParams = {
  accountId?: string
}

export type GetProfileResult1Error = Fetcher.ErrorWrapper<undefined>

export type GetProfileResult1Variables = {
  pathParams: GetProfileResult1PathParams
  queryParams?: GetProfileResult1QueryParams
} & PortalContext['fetcherOptions']

export const fetchGetProfileResult1 = (variables: GetProfileResult1Variables) =>
  portalFetch<
    Schemas.RestResponseString,
    GetProfileResult1Error,
    undefined,
    {},
    GetProfileResult1QueryParams,
    GetProfileResult1PathParams
  >({ url: '/setup/delegates/v3/{delegateId}/profile-result', method: 'get', ...variables })

export const useGetProfileResult1 = (
  variables: GetProfileResult1Variables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.RestResponseString, GetProfileResult1Error, Schemas.RestResponseString>,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<Schemas.RestResponseString, GetProfileResult1Error, Schemas.RestResponseString>(
    queryKeyFn({
      path: '/setup/delegates/v3/{delegateId}/profile-result',
      operationId: 'getProfileResult1',
      variables
    }),
    () => fetchGetProfileResult1({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type DelegateSizes1QueryParams = {
  accountId?: string
  orgId?: string
  projectId?: string
}

export type DelegateSizes1Error = Fetcher.ErrorWrapper<undefined>

export type DelegateSizes1Variables = {
  queryParams?: DelegateSizes1QueryParams
} & PortalContext['fetcherOptions']

export const fetchDelegateSizes1 = (variables: DelegateSizes1Variables) =>
  portalFetch<
    Schemas.RestResponseListDelegateSizeDetails,
    DelegateSizes1Error,
    undefined,
    {},
    DelegateSizes1QueryParams,
    {}
  >({ url: '/setup/delegates/v3/delegate-sizes', method: 'get', ...variables })

export const useDelegateSizes1 = (
  variables: DelegateSizes1Variables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponseListDelegateSizeDetails,
      DelegateSizes1Error,
      Schemas.RestResponseListDelegateSizeDetails
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponseListDelegateSizeDetails,
    DelegateSizes1Error,
    Schemas.RestResponseListDelegateSizeDetails
  >(
    queryKeyFn({ path: '/setup/delegates/v3/delegate-sizes', operationId: 'delegateSizes1', variables }),
    () => fetchDelegateSizes1({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type UpdateScopes1PathParams = {
  delegateId: string
}

export type UpdateScopes1QueryParams = {
  accountId?: string
}

export type UpdateScopes1Error = Fetcher.ErrorWrapper<undefined>

export type UpdateScopes1Variables = {
  body?: RequestBodies.DelegateScopes
  pathParams: UpdateScopes1PathParams
  queryParams?: UpdateScopes1QueryParams
} & PortalContext['fetcherOptions']

export const fetchUpdateScopes1 = (variables: UpdateScopes1Variables) =>
  portalFetch<
    Schemas.RestResponseDelegate,
    UpdateScopes1Error,
    RequestBodies.DelegateScopes,
    {},
    UpdateScopes1QueryParams,
    UpdateScopes1PathParams
  >({ url: '/setup/delegates/v3/{delegateId}/scopes', method: 'put', ...variables })

export const useUpdateScopes1 = (
  options?: Omit<
    reactQuery.UseMutationOptions<Schemas.RestResponseDelegate, UpdateScopes1Error, UpdateScopes1Variables>,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<Schemas.RestResponseDelegate, UpdateScopes1Error, UpdateScopes1Variables>(
    (variables: UpdateScopes1Variables) => fetchUpdateScopes1({ ...fetcherOptions, ...variables }),
    options
  )
}

export type UpdateTags1PathParams = {
  delegateId: string
}

export type UpdateTags1QueryParams = {
  accountId?: string
}

export type UpdateTags1Error = Fetcher.ErrorWrapper<undefined>

export type UpdateTags1Variables = {
  body?: RequestBodies.DelegateTags
  pathParams: UpdateTags1PathParams
  queryParams?: UpdateTags1QueryParams
} & PortalContext['fetcherOptions']

export const fetchUpdateTags1 = (variables: UpdateTags1Variables) =>
  portalFetch<
    Schemas.RestResponseDelegate,
    UpdateTags1Error,
    RequestBodies.DelegateTags,
    {},
    UpdateTags1QueryParams,
    UpdateTags1PathParams
  >({ url: '/setup/delegates/v3/{delegateId}/tags', method: 'put', ...variables })

export const useUpdateTags1 = (
  options?: Omit<
    reactQuery.UseMutationOptions<Schemas.RestResponseDelegate, UpdateTags1Error, UpdateTags1Variables>,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<Schemas.RestResponseDelegate, UpdateTags1Error, UpdateTags1Variables>(
    (variables: UpdateTags1Variables) => fetchUpdateTags1({ ...fetcherOptions, ...variables }),
    options
  )
}

export type DelegateTags1QueryParams = {
  accountId?: string
}

export type DelegateTags1Error = Fetcher.ErrorWrapper<undefined>

export type DelegateTags1Variables = {
  queryParams?: DelegateTags1QueryParams
} & PortalContext['fetcherOptions']

export const fetchDelegateTags1 = (variables: DelegateTags1Variables) =>
  portalFetch<Schemas.RestResponseSetString, DelegateTags1Error, undefined, {}, DelegateTags1QueryParams, {}>({
    url: '/setup/delegates/v3/delegate-tags',
    method: 'get',
    ...variables
  })

export const useDelegateTags1 = (
  variables: DelegateTags1Variables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.RestResponseSetString, DelegateTags1Error, Schemas.RestResponseSetString>,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<Schemas.RestResponseSetString, DelegateTags1Error, Schemas.RestResponseSetString>(
    queryKeyFn({ path: '/setup/delegates/v3/delegate-tags', operationId: 'delegateTags1', variables }),
    () => fetchDelegateTags1({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type KubernetesDelegateNames1QueryParams = {
  accountId?: string
}

export type KubernetesDelegateNames1Error = Fetcher.ErrorWrapper<undefined>

export type KubernetesDelegateNames1Variables = {
  queryParams?: KubernetesDelegateNames1QueryParams
} & PortalContext['fetcherOptions']

export const fetchKubernetesDelegateNames1 = (variables: KubernetesDelegateNames1Variables) =>
  portalFetch<
    Schemas.RestResponseListString,
    KubernetesDelegateNames1Error,
    undefined,
    {},
    KubernetesDelegateNames1QueryParams,
    {}
  >({ url: '/setup/delegates/v3/kubernetes-delegates', method: 'get', ...variables })

export const useKubernetesDelegateNames1 = (
  variables: KubernetesDelegateNames1Variables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponseListString,
      KubernetesDelegateNames1Error,
      Schemas.RestResponseListString
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponseListString,
    KubernetesDelegateNames1Error,
    Schemas.RestResponseListString
  >(
    queryKeyFn({
      path: '/setup/delegates/v3/kubernetes-delegates',
      operationId: 'kubernetesDelegateNames1',
      variables
    }),
    () => fetchKubernetesDelegateNames1({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type DelegateSelectorsUpTheHierarchy1QueryParams = {
  accountId?: string
  orgId?: string
  projectId?: string
}

export type DelegateSelectorsUpTheHierarchy1Error = Fetcher.ErrorWrapper<undefined>

export type DelegateSelectorsUpTheHierarchy1Variables = {
  queryParams?: DelegateSelectorsUpTheHierarchy1QueryParams
} & PortalContext['fetcherOptions']

export const fetchDelegateSelectorsUpTheHierarchy1 = (variables: DelegateSelectorsUpTheHierarchy1Variables) =>
  portalFetch<
    Schemas.RestResponseSetString,
    DelegateSelectorsUpTheHierarchy1Error,
    undefined,
    {},
    DelegateSelectorsUpTheHierarchy1QueryParams,
    {}
  >({ url: '/setup/delegates/v3/delegate-selectors-up-the-hierarchy', method: 'get', ...variables })

export const useDelegateSelectorsUpTheHierarchy1 = (
  variables: DelegateSelectorsUpTheHierarchy1Variables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponseSetString,
      DelegateSelectorsUpTheHierarchy1Error,
      Schemas.RestResponseSetString
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponseSetString,
    DelegateSelectorsUpTheHierarchy1Error,
    Schemas.RestResponseSetString
  >(
    queryKeyFn({
      path: '/setup/delegates/v3/delegate-selectors-up-the-hierarchy',
      operationId: 'delegateSelectorsUpTheHierarchy1',
      variables
    }),
    () => fetchDelegateSelectorsUpTheHierarchy1({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type ValidateKubernetesYaml1QueryParams = {
  accountId?: string
  orgId?: string
  projectId?: string
}

export type ValidateKubernetesYaml1Error = Fetcher.ErrorWrapper<undefined>

export type ValidateKubernetesYaml1Variables = {
  body: RequestBodies.DelegateSetupDetails
  queryParams?: ValidateKubernetesYaml1QueryParams
} & PortalContext['fetcherOptions']

export const fetchValidateKubernetesYaml1 = (variables: ValidateKubernetesYaml1Variables) =>
  portalFetch<
    Schemas.RestResponseDelegateSetupDetails,
    ValidateKubernetesYaml1Error,
    RequestBodies.DelegateSetupDetails,
    {},
    ValidateKubernetesYaml1QueryParams,
    {}
  >({ url: '/setup/delegates/v3/validate-kubernetes-yaml', method: 'post', ...variables })

export const useValidateKubernetesYaml1 = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.RestResponseDelegateSetupDetails,
      ValidateKubernetesYaml1Error,
      ValidateKubernetesYaml1Variables
    >,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<
    Schemas.RestResponseDelegateSetupDetails,
    ValidateKubernetesYaml1Error,
    ValidateKubernetesYaml1Variables
  >(
    (variables: ValidateKubernetesYaml1Variables) => fetchValidateKubernetesYaml1({ ...fetcherOptions, ...variables }),
    options
  )
}

export type GenerateKubernetesYaml1QueryParams = {
  accountId?: string
  orgId?: string
  projectId?: string
}

export type GenerateKubernetesYaml1Error = Fetcher.ErrorWrapper<undefined>

export type GenerateKubernetesYaml1Variables = {
  body: RequestBodies.DelegateSetupDetails
  queryParams?: GenerateKubernetesYaml1QueryParams
} & PortalContext['fetcherOptions']

export const fetchGenerateKubernetesYaml1 = (variables: GenerateKubernetesYaml1Variables) =>
  portalFetch<
    undefined,
    GenerateKubernetesYaml1Error,
    RequestBodies.DelegateSetupDetails,
    {},
    GenerateKubernetesYaml1QueryParams,
    {}
  >({ url: '/setup/delegates/v3/generate-kubernetes-yaml', method: 'post', ...variables })

export const useGenerateKubernetesYaml1 = (
  options?: Omit<
    reactQuery.UseMutationOptions<undefined, GenerateKubernetesYaml1Error, GenerateKubernetesYaml1Variables>,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<undefined, GenerateKubernetesYaml1Error, GenerateKubernetesYaml1Variables>(
    (variables: GenerateKubernetesYaml1Variables) => fetchGenerateKubernetesYaml1({ ...fetcherOptions, ...variables }),
    options
  )
}

export type UpdateApprovalStatus1PathParams = {
  delegateId: string
}

export type UpdateApprovalStatus1QueryParams = {
  accountId?: string
  action: 'ACTIVATE' | 'REJECT'
}

export type UpdateApprovalStatus1Error = Fetcher.ErrorWrapper<undefined>

export type UpdateApprovalStatus1Variables = {
  pathParams: UpdateApprovalStatus1PathParams
  queryParams: UpdateApprovalStatus1QueryParams
} & PortalContext['fetcherOptions']

export const fetchUpdateApprovalStatus1 = (variables: UpdateApprovalStatus1Variables) =>
  portalFetch<
    Schemas.RestResponseDelegate,
    UpdateApprovalStatus1Error,
    undefined,
    {},
    UpdateApprovalStatus1QueryParams,
    UpdateApprovalStatus1PathParams
  >({ url: '/setup/delegates/v3/{delegateId}/approval', method: 'put', ...variables })

export const useUpdateApprovalStatus1 = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.RestResponseDelegate,
      UpdateApprovalStatus1Error,
      UpdateApprovalStatus1Variables
    >,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<
    Schemas.RestResponseDelegate,
    UpdateApprovalStatus1Error,
    UpdateApprovalStatus1Variables
  >(
    (variables: UpdateApprovalStatus1Variables) => fetchUpdateApprovalStatus1({ ...fetcherOptions, ...variables }),
    options
  )
}

export type DeleteAllExcept1QueryParams = {
  accountId?: string
}

export type DeleteAllExcept1Error = Fetcher.ErrorWrapper<undefined>

export type DeleteAllExcept1Variables = {
  body?: RequestBodies.UpdateWhitelistedDomainsBody
  queryParams?: DeleteAllExcept1QueryParams
} & PortalContext['fetcherOptions']

export const fetchDeleteAllExcept1 = (variables: DeleteAllExcept1Variables) =>
  portalFetch<
    Schemas.RestResponseVoid,
    DeleteAllExcept1Error,
    RequestBodies.UpdateWhitelistedDomainsBody,
    {},
    DeleteAllExcept1QueryParams,
    {}
  >({ url: '/setup/delegates/v3/delete-all-except', method: 'delete', ...variables })

export const useDeleteAllExcept1 = (
  options?: Omit<
    reactQuery.UseMutationOptions<Schemas.RestResponseVoid, DeleteAllExcept1Error, DeleteAllExcept1Variables>,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<Schemas.RestResponseVoid, DeleteAllExcept1Error, DeleteAllExcept1Variables>(
    (variables: DeleteAllExcept1Variables) => fetchDeleteAllExcept1({ ...fetcherOptions, ...variables }),
    options
  )
}

export type DeleteDelegateGroup1PathParams = {
  identifier: string
}

export type DeleteDelegateGroup1QueryParams = {
  accountId?: string
  orgId?: string
  projectId?: string
}

export type DeleteDelegateGroup1Error = Fetcher.ErrorWrapper<undefined>

export type DeleteDelegateGroup1Variables = {
  pathParams: DeleteDelegateGroup1PathParams
  queryParams?: DeleteDelegateGroup1QueryParams
} & PortalContext['fetcherOptions']

export const fetchDeleteDelegateGroup1 = (variables: DeleteDelegateGroup1Variables) =>
  portalFetch<
    Schemas.RestResponseVoid,
    DeleteDelegateGroup1Error,
    undefined,
    {},
    DeleteDelegateGroup1QueryParams,
    DeleteDelegateGroup1PathParams
  >({ url: '/setup/delegates/v3/groups/{identifier}', method: 'delete', ...variables })

export const useDeleteDelegateGroup1 = (
  options?: Omit<
    reactQuery.UseMutationOptions<Schemas.RestResponseVoid, DeleteDelegateGroup1Error, DeleteDelegateGroup1Variables>,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<Schemas.RestResponseVoid, DeleteDelegateGroup1Error, DeleteDelegateGroup1Variables>(
    (variables: DeleteDelegateGroup1Variables) => fetchDeleteDelegateGroup1({ ...fetcherOptions, ...variables }),
    options
  )
}

export type DownloadUrl1QueryParams = {
  accountId?: string
}

export type DownloadUrl1Error = Fetcher.ErrorWrapper<undefined>

export type DownloadUrl1Variables = {
  queryParams?: DownloadUrl1QueryParams
} & PortalContext['fetcherOptions']

export const fetchDownloadUrl1 = (variables: DownloadUrl1Variables) =>
  portalFetch<Schemas.RestResponseMapStringString, DownloadUrl1Error, undefined, {}, DownloadUrl1QueryParams, {}>({
    url: '/setup/delegates/v3/downloadUrl',
    method: 'get',
    ...variables
  })

export const useDownloadUrl1 = (
  variables: DownloadUrl1Variables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponseMapStringString,
      DownloadUrl1Error,
      Schemas.RestResponseMapStringString
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponseMapStringString,
    DownloadUrl1Error,
    Schemas.RestResponseMapStringString
  >(
    queryKeyFn({ path: '/setup/delegates/v3/downloadUrl', operationId: 'downloadUrl1', variables }),
    () => fetchDownloadUrl1({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type DownloadScripts1QueryParams = {
  accountId?: string
  delegateName?: string
  delegateProfileId?: string
  token?: string
  tokenName?: string
}

export type DownloadScripts1Error = Fetcher.ErrorWrapper<undefined>

export type DownloadScripts1Variables = {
  queryParams?: DownloadScripts1QueryParams
} & PortalContext['fetcherOptions']

export const fetchDownloadScripts1 = (variables: DownloadScripts1Variables) =>
  portalFetch<undefined, DownloadScripts1Error, undefined, {}, DownloadScripts1QueryParams, {}>({
    url: '/setup/delegates/v3/download',
    method: 'get',
    ...variables
  })

export const useDownloadScripts1 = (
  variables: DownloadScripts1Variables,
  options?: Omit<reactQuery.UseQueryOptions<undefined, DownloadScripts1Error, undefined>, 'queryKey' | 'queryFn'>
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<undefined, DownloadScripts1Error, undefined>(
    queryKeyFn({ path: '/setup/delegates/v3/download', operationId: 'downloadScripts1', variables }),
    () => fetchDownloadScripts1({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type DownloadDocker1QueryParams = {
  accountId?: string
  delegateName?: string
  delegateProfileId?: string
  token?: string
  tokenName?: string
}

export type DownloadDocker1Error = Fetcher.ErrorWrapper<undefined>

export type DownloadDocker1Variables = {
  queryParams?: DownloadDocker1QueryParams
} & PortalContext['fetcherOptions']

export const fetchDownloadDocker1 = (variables: DownloadDocker1Variables) =>
  portalFetch<undefined, DownloadDocker1Error, undefined, {}, DownloadDocker1QueryParams, {}>({
    url: '/setup/delegates/v3/docker',
    method: 'get',
    ...variables
  })

export const useDownloadDocker1 = (
  variables: DownloadDocker1Variables,
  options?: Omit<reactQuery.UseQueryOptions<undefined, DownloadDocker1Error, undefined>, 'queryKey' | 'queryFn'>
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<undefined, DownloadDocker1Error, undefined>(
    queryKeyFn({ path: '/setup/delegates/v3/docker', operationId: 'downloadDocker1', variables }),
    () => fetchDownloadDocker1({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type DownloadKubernetes1QueryParams = {
  accountId?: string
  delegateName?: string
  delegateProfileId?: string
  token?: string
  /*
   * @default false
   */
  isCeEnabled?: boolean
  tokenName?: string
}

export type DownloadKubernetes1Error = Fetcher.ErrorWrapper<undefined>

export type DownloadKubernetes1Variables = {
  queryParams?: DownloadKubernetes1QueryParams
} & PortalContext['fetcherOptions']

export const fetchDownloadKubernetes1 = (variables: DownloadKubernetes1Variables) =>
  portalFetch<undefined, DownloadKubernetes1Error, undefined, {}, DownloadKubernetes1QueryParams, {}>({
    url: '/setup/delegates/v3/kubernetes',
    method: 'get',
    ...variables
  })

export const useDownloadKubernetes1 = (
  variables: DownloadKubernetes1Variables,
  options?: Omit<reactQuery.UseQueryOptions<undefined, DownloadKubernetes1Error, undefined>, 'queryKey' | 'queryFn'>
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<undefined, DownloadKubernetes1Error, undefined>(
    queryKeyFn({ path: '/setup/delegates/v3/kubernetes', operationId: 'downloadKubernetes1', variables }),
    () => fetchDownloadKubernetes1({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type DownloadEcs1QueryParams = {
  accountId?: string
  delegateGroupName?: string
  awsVpcMode?: boolean
  hostname?: string
  delegateProfileId?: string
  token?: string
  tokenName?: string
}

export type DownloadEcs1Error = Fetcher.ErrorWrapper<undefined>

export type DownloadEcs1Variables = {
  queryParams?: DownloadEcs1QueryParams
} & PortalContext['fetcherOptions']

export const fetchDownloadEcs1 = (variables: DownloadEcs1Variables) =>
  portalFetch<undefined, DownloadEcs1Error, undefined, {}, DownloadEcs1QueryParams, {}>({
    url: '/setup/delegates/v3/ecs',
    method: 'get',
    ...variables
  })

export const useDownloadEcs1 = (
  variables: DownloadEcs1Variables,
  options?: Omit<reactQuery.UseQueryOptions<undefined, DownloadEcs1Error, undefined>, 'queryKey' | 'queryFn'>
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<undefined, DownloadEcs1Error, undefined>(
    queryKeyFn({ path: '/setup/delegates/v3/ecs', operationId: 'downloadEcs1', variables }),
    () => fetchDownloadEcs1({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type DownloadDelegateValuesYaml1QueryParams = {
  accountId?: string
  delegateName?: string
  delegateProfileId?: string
  token?: string
  tokenName?: string
}

export type DownloadDelegateValuesYaml1Error = Fetcher.ErrorWrapper<undefined>

export type DownloadDelegateValuesYaml1Variables = {
  queryParams?: DownloadDelegateValuesYaml1QueryParams
} & PortalContext['fetcherOptions']

export const fetchDownloadDelegateValuesYaml1 = (variables: DownloadDelegateValuesYaml1Variables) =>
  portalFetch<undefined, DownloadDelegateValuesYaml1Error, undefined, {}, DownloadDelegateValuesYaml1QueryParams, {}>({
    url: '/setup/delegates/v3/delegate-helm-values-yaml',
    method: 'get',
    ...variables
  })

export const useDownloadDelegateValuesYaml1 = (
  variables: DownloadDelegateValuesYaml1Variables,
  options?: Omit<
    reactQuery.UseQueryOptions<undefined, DownloadDelegateValuesYaml1Error, undefined>,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<undefined, DownloadDelegateValuesYaml1Error, undefined>(
    queryKeyFn({
      path: '/setup/delegates/v3/delegate-helm-values-yaml',
      operationId: 'downloadDelegateValuesYaml1',
      variables
    }),
    () => fetchDownloadDelegateValuesYaml1({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type ValidateDockerSetupDetailsQueryParams = {
  accountId?: string
  delegateName?: string
  tokenName?: string
}

export type ValidateDockerSetupDetailsError = Fetcher.ErrorWrapper<undefined>

export type ValidateDockerSetupDetailsVariables = {
  queryParams?: ValidateDockerSetupDetailsQueryParams
} & PortalContext['fetcherOptions']

export const fetchValidateDockerSetupDetails = (variables: ValidateDockerSetupDetailsVariables) =>
  portalFetch<
    Schemas.RestResponseVoid,
    ValidateDockerSetupDetailsError,
    undefined,
    {},
    ValidateDockerSetupDetailsQueryParams,
    {}
  >({ url: '/setup/delegates/v3/ng/validate-docker-delegate-details', method: 'get', ...variables })

export const useValidateDockerSetupDetails = (
  variables: ValidateDockerSetupDetailsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.RestResponseVoid, ValidateDockerSetupDetailsError, Schemas.RestResponseVoid>,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<Schemas.RestResponseVoid, ValidateDockerSetupDetailsError, Schemas.RestResponseVoid>(
    queryKeyFn({
      path: '/setup/delegates/v3/ng/validate-docker-delegate-details',
      operationId: 'validateDockerSetupDetails',
      variables
    }),
    () => fetchValidateDockerSetupDetails({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type DownloadNgDockerQueryParams = {
  accountId?: string
}

export type DownloadNgDockerError = Fetcher.ErrorWrapper<undefined>

export type DownloadNgDockerVariables = {
  body: RequestBodies.DelegateSetupDetails
  queryParams?: DownloadNgDockerQueryParams
} & PortalContext['fetcherOptions']

export const fetchDownloadNgDocker = (variables: DownloadNgDockerVariables) =>
  portalFetch<
    undefined,
    DownloadNgDockerError,
    RequestBodies.DelegateSetupDetails,
    {},
    DownloadNgDockerQueryParams,
    {}
  >({ url: '/setup/delegates/v3/ng/docker', method: 'post', ...variables })

export const useDownloadNgDocker = (
  options?: Omit<
    reactQuery.UseMutationOptions<undefined, DownloadNgDockerError, DownloadNgDockerVariables>,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<undefined, DownloadNgDockerError, DownloadNgDockerVariables>(
    (variables: DownloadNgDockerVariables) => fetchDownloadNgDocker({ ...fetcherOptions, ...variables }),
    options
  )
}

export type CreateDelegateGroupQueryParams = {
  accountId?: string
}

export type CreateDelegateGroupError = Fetcher.ErrorWrapper<undefined>

export type CreateDelegateGroupVariables = {
  body: RequestBodies.DelegateSetupDetails
  queryParams?: CreateDelegateGroupQueryParams
} & PortalContext['fetcherOptions']

export const fetchCreateDelegateGroup = (variables: CreateDelegateGroupVariables) =>
  portalFetch<
    undefined,
    CreateDelegateGroupError,
    RequestBodies.DelegateSetupDetails,
    {},
    CreateDelegateGroupQueryParams,
    {}
  >({ url: '/setup/delegates/v3/ng/delegate-group', method: 'post', ...variables })

export const useCreateDelegateGroup = (
  options?: Omit<
    reactQuery.UseMutationOptions<undefined, CreateDelegateGroupError, CreateDelegateGroupVariables>,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<undefined, CreateDelegateGroupError, CreateDelegateGroupVariables>(
    (variables: CreateDelegateGroupVariables) => fetchCreateDelegateGroup({ ...fetcherOptions, ...variables }),
    options
  )
}

export type List22QueryParams = {
  accountId?: string
}

export type List22Error = Fetcher.ErrorWrapper<undefined>

export type List22Variables = {
  queryParams?: List22QueryParams
} & PortalContext['fetcherOptions']

export const fetchList22 = (variables: List22Variables) =>
  portalFetch<Schemas.RestResponseListTaskSelectorMap, List22Error, undefined, {}, List22QueryParams, {}>({
    url: '/delegate-task-selector-map',
    method: 'get',
    ...variables
  })

export const useList22 = (
  variables: List22Variables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponseListTaskSelectorMap,
      List22Error,
      Schemas.RestResponseListTaskSelectorMap
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponseListTaskSelectorMap,
    List22Error,
    Schemas.RestResponseListTaskSelectorMap
  >(
    queryKeyFn({ path: '/delegate-task-selector-map', operationId: 'list22', variables }),
    () => fetchList22({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type Add3QueryParams = {
  accountId?: string
}

export type Add3Error = Fetcher.ErrorWrapper<undefined>

export type Add3Variables = {
  body: RequestBodies.TaskSelectorMap
  queryParams?: Add3QueryParams
} & PortalContext['fetcherOptions']

export const fetchAdd3 = (variables: Add3Variables) =>
  portalFetch<Schemas.RestResponseTaskSelectorMap, Add3Error, RequestBodies.TaskSelectorMap, {}, Add3QueryParams, {}>({
    url: '/delegate-task-selector-map',
    method: 'post',
    ...variables
  })

export const useAdd3 = (
  options?: Omit<
    reactQuery.UseMutationOptions<Schemas.RestResponseTaskSelectorMap, Add3Error, Add3Variables>,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<Schemas.RestResponseTaskSelectorMap, Add3Error, Add3Variables>(
    (variables: Add3Variables) => fetchAdd3({ ...fetcherOptions, ...variables }),
    options
  )
}

export type Update13PathParams = {
  taskSelectorMapId: string
}

export type Update13QueryParams = {
  accountId?: string
}

export type Update13Error = Fetcher.ErrorWrapper<undefined>

export type Update13Variables = {
  body: RequestBodies.TaskSelectorMap
  pathParams: Update13PathParams
  queryParams?: Update13QueryParams
} & PortalContext['fetcherOptions']

export const fetchUpdate13 = (variables: Update13Variables) =>
  portalFetch<
    Schemas.RestResponseTaskSelectorMap,
    Update13Error,
    RequestBodies.TaskSelectorMap,
    {},
    Update13QueryParams,
    Update13PathParams
  >({ url: '/delegate-task-selector-map/{taskSelectorMapId}', method: 'put', ...variables })

export const useUpdate13 = (
  options?: Omit<
    reactQuery.UseMutationOptions<Schemas.RestResponseTaskSelectorMap, Update13Error, Update13Variables>,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<Schemas.RestResponseTaskSelectorMap, Update13Error, Update13Variables>(
    (variables: Update13Variables) => fetchUpdate13({ ...fetcherOptions, ...variables }),
    options
  )
}

export type AddTaskSelectorPathParams = {
  taskSelectorMapId: string
}

export type AddTaskSelectorQueryParams = {
  accountId?: string
  selector?: string
}

export type AddTaskSelectorError = Fetcher.ErrorWrapper<undefined>

export type AddTaskSelectorVariables = {
  pathParams: AddTaskSelectorPathParams
  queryParams?: AddTaskSelectorQueryParams
} & PortalContext['fetcherOptions']

export const fetchAddTaskSelector = (variables: AddTaskSelectorVariables) =>
  portalFetch<
    Schemas.RestResponseTaskSelectorMap,
    AddTaskSelectorError,
    undefined,
    {},
    AddTaskSelectorQueryParams,
    AddTaskSelectorPathParams
  >({ url: '/delegate-task-selector-map/{taskSelectorMapId}/task-selectors', method: 'post', ...variables })

export const useAddTaskSelector = (
  options?: Omit<
    reactQuery.UseMutationOptions<Schemas.RestResponseTaskSelectorMap, AddTaskSelectorError, AddTaskSelectorVariables>,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<Schemas.RestResponseTaskSelectorMap, AddTaskSelectorError, AddTaskSelectorVariables>(
    (variables: AddTaskSelectorVariables) => fetchAddTaskSelector({ ...fetcherOptions, ...variables }),
    options
  )
}

export type DeleteTaskSelectorPathParams = {
  taskSelectorMapId: string
}

export type DeleteTaskSelectorQueryParams = {
  accountId?: string
  selector?: string
}

export type DeleteTaskSelectorError = Fetcher.ErrorWrapper<undefined>

export type DeleteTaskSelectorVariables = {
  pathParams: DeleteTaskSelectorPathParams
  queryParams?: DeleteTaskSelectorQueryParams
} & PortalContext['fetcherOptions']

export const fetchDeleteTaskSelector = (variables: DeleteTaskSelectorVariables) =>
  portalFetch<
    Schemas.RestResponseTaskSelectorMap,
    DeleteTaskSelectorError,
    undefined,
    {},
    DeleteTaskSelectorQueryParams,
    DeleteTaskSelectorPathParams
  >({ url: '/delegate-task-selector-map/{taskSelectorMapId}/task-selectors', method: 'delete', ...variables })

export const useDeleteTaskSelector = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.RestResponseTaskSelectorMap,
      DeleteTaskSelectorError,
      DeleteTaskSelectorVariables
    >,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<
    Schemas.RestResponseTaskSelectorMap,
    DeleteTaskSelectorError,
    DeleteTaskSelectorVariables
  >((variables: DeleteTaskSelectorVariables) => fetchDeleteTaskSelector({ ...fetcherOptions, ...variables }), options)
}

export type GetDelegatesHeartbeatDetailsV2QueryParams = {
  accountId?: string
  orgId?: string
  projectId?: string
  delegateName?: string
}

export type GetDelegatesHeartbeatDetailsV2Error = Fetcher.ErrorWrapper<undefined>

export type GetDelegatesHeartbeatDetailsV2Variables = {
  queryParams?: GetDelegatesHeartbeatDetailsV2QueryParams
} & PortalContext['fetcherOptions']

export const fetchGetDelegatesHeartbeatDetailsV2 = (variables: GetDelegatesHeartbeatDetailsV2Variables) =>
  portalFetch<
    Schemas.RestResponseDelegateHeartbeatDetails,
    GetDelegatesHeartbeatDetailsV2Error,
    undefined,
    {},
    GetDelegatesHeartbeatDetailsV2QueryParams,
    {}
  >({ url: '/delegates-verification/heartbeatV2', method: 'get', ...variables })

export const useGetDelegatesHeartbeatDetailsV2 = (
  variables: GetDelegatesHeartbeatDetailsV2Variables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponseDelegateHeartbeatDetails,
      GetDelegatesHeartbeatDetailsV2Error,
      Schemas.RestResponseDelegateHeartbeatDetails
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponseDelegateHeartbeatDetails,
    GetDelegatesHeartbeatDetailsV2Error,
    Schemas.RestResponseDelegateHeartbeatDetails
  >(
    queryKeyFn({
      path: '/delegates-verification/heartbeatV2',
      operationId: 'getDelegatesHeartbeatDetailsV2',
      variables
    }),
    () => fetchGetDelegatesHeartbeatDetailsV2({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type GetDelegatesInitializationDetailsV2QueryParams = {
  accountId?: string
  orgId?: string
  projectId?: string
  delegateName?: string
}

export type GetDelegatesInitializationDetailsV2Error = Fetcher.ErrorWrapper<undefined>

export type GetDelegatesInitializationDetailsV2Variables = {
  queryParams?: GetDelegatesInitializationDetailsV2QueryParams
} & PortalContext['fetcherOptions']

export const fetchGetDelegatesInitializationDetailsV2 = (variables: GetDelegatesInitializationDetailsV2Variables) =>
  portalFetch<
    Schemas.RestResponseListDelegateInitializationDetails,
    GetDelegatesInitializationDetailsV2Error,
    undefined,
    {},
    GetDelegatesInitializationDetailsV2QueryParams,
    {}
  >({ url: '/delegates-verification/initializedV2', method: 'get', ...variables })

export const useGetDelegatesInitializationDetailsV2 = (
  variables: GetDelegatesInitializationDetailsV2Variables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponseListDelegateInitializationDetails,
      GetDelegatesInitializationDetailsV2Error,
      Schemas.RestResponseListDelegateInitializationDetails
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponseListDelegateInitializationDetails,
    GetDelegatesInitializationDetailsV2Error,
    Schemas.RestResponseListDelegateInitializationDetails
  >(
    queryKeyFn({
      path: '/delegates-verification/initializedV2',
      operationId: 'getDelegatesInitializationDetailsV2',
      variables
    }),
    () => fetchGetDelegatesInitializationDetailsV2({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type GetMetricsWithDataForNode4QueryParams = {
  accountId?: string
}

export type GetMetricsWithDataForNode4Error = Fetcher.ErrorWrapper<undefined>

export type GetMetricsWithDataForNode4Variables = {
  body: Schemas.DynaTraceSetupTestNodeData
  queryParams?: GetMetricsWithDataForNode4QueryParams
} & PortalContext['fetcherOptions']

export const fetchGetMetricsWithDataForNode4 = (variables: GetMetricsWithDataForNode4Variables) =>
  portalFetch<
    Schemas.RestResponseVerificationNodeDataSetupResponse,
    GetMetricsWithDataForNode4Error,
    Schemas.DynaTraceSetupTestNodeData,
    {},
    GetMetricsWithDataForNode4QueryParams,
    {}
  >({ url: '/dynatrace/node-data', method: 'post', ...variables })

export const useGetMetricsWithDataForNode4 = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.RestResponseVerificationNodeDataSetupResponse,
      GetMetricsWithDataForNode4Error,
      GetMetricsWithDataForNode4Variables
    >,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<
    Schemas.RestResponseVerificationNodeDataSetupResponse,
    GetMetricsWithDataForNode4Error,
    GetMetricsWithDataForNode4Variables
  >(
    (variables: GetMetricsWithDataForNode4Variables) =>
      fetchGetMetricsWithDataForNode4({ ...fetcherOptions, ...variables }),
    options
  )
}

export type GetDynatraceServicesQueryParams = {
  settingId?: string
}

export type GetDynatraceServicesError = Fetcher.ErrorWrapper<undefined>

export type GetDynatraceServicesVariables = {
  queryParams?: GetDynatraceServicesQueryParams
} & PortalContext['fetcherOptions']

export const fetchGetDynatraceServices = (variables: GetDynatraceServicesVariables) =>
  portalFetch<
    Schemas.RestResponseListDynaTraceApplication,
    GetDynatraceServicesError,
    undefined,
    {},
    GetDynatraceServicesQueryParams,
    {}
  >({ url: '/dynatrace/services', method: 'get', ...variables })

export const useGetDynatraceServices = (
  variables: GetDynatraceServicesVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponseListDynaTraceApplication,
      GetDynatraceServicesError,
      Schemas.RestResponseListDynaTraceApplication
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponseListDynaTraceApplication,
    GetDynatraceServicesError,
    Schemas.RestResponseListDynaTraceApplication
  >(
    queryKeyFn({ path: '/dynatrace/services', operationId: 'getDynatraceServices', variables }),
    () => fetchGetDynatraceServices({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type GetIndicesQueryParams = {
  accountId?: string
  serverConfigId?: string
}

export type GetIndicesError = Fetcher.ErrorWrapper<undefined>

export type GetIndicesVariables = {
  queryParams?: GetIndicesQueryParams
} & PortalContext['fetcherOptions']

export const fetchGetIndices = (variables: GetIndicesVariables) =>
  portalFetch<Schemas.RestResponseMapStringElkIndexTemplate, GetIndicesError, undefined, {}, GetIndicesQueryParams, {}>(
    { url: '/elk/get-indices', method: 'get', ...variables }
  )

export const useGetIndices = (
  variables: GetIndicesVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponseMapStringElkIndexTemplate,
      GetIndicesError,
      Schemas.RestResponseMapStringElkIndexTemplate
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponseMapStringElkIndexTemplate,
    GetIndicesError,
    Schemas.RestResponseMapStringElkIndexTemplate
  >(
    queryKeyFn({ path: '/elk/get-indices', operationId: 'getIndices', variables }),
    () => fetchGetIndices({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type GetHostLogRecordQueryParams = {
  accountId?: string
  serverConfigId?: string
  index?: string
  hostNameField?: string
  hostName?: string
  queryType?: 'TERM' | 'MATCH' | 'MATCH_PHRASE'
  query?: string
  timeStampField?: string
  timeStampFieldFormat?: string
  messageField?: string
}

export type GetHostLogRecordError = Fetcher.ErrorWrapper<undefined>

export type GetHostLogRecordVariables = {
  queryParams?: GetHostLogRecordQueryParams
} & PortalContext['fetcherOptions']

export const fetchGetHostLogRecord = (variables: GetHostLogRecordVariables) =>
  portalFetch<Schemas.RestResponseObject, GetHostLogRecordError, undefined, {}, GetHostLogRecordQueryParams, {}>({
    url: '/elk/get-host-records',
    method: 'get',
    ...variables
  })

export const useGetHostLogRecord = (
  variables: GetHostLogRecordVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.RestResponseObject, GetHostLogRecordError, Schemas.RestResponseObject>,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<Schemas.RestResponseObject, GetHostLogRecordError, Schemas.RestResponseObject>(
    queryKeyFn({ path: '/elk/get-host-records', operationId: 'getHostLogRecord', variables }),
    () => fetchGetHostLogRecord({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type GetSampleLogRecordQueryParams = {
  accountId?: string
  serverConfigId?: string
  index?: string
}

export type GetSampleLogRecordError = Fetcher.ErrorWrapper<undefined>

export type GetSampleLogRecordVariables = {
  queryParams?: GetSampleLogRecordQueryParams
} & PortalContext['fetcherOptions']

export const fetchGetSampleLogRecord = (variables: GetSampleLogRecordVariables) =>
  portalFetch<Schemas.RestResponseObject, GetSampleLogRecordError, undefined, {}, GetSampleLogRecordQueryParams, {}>({
    url: '/elk/get-sample-record',
    method: 'get',
    ...variables
  })

export const useGetSampleLogRecord = (
  variables: GetSampleLogRecordVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.RestResponseObject, GetSampleLogRecordError, Schemas.RestResponseObject>,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<Schemas.RestResponseObject, GetSampleLogRecordError, Schemas.RestResponseObject>(
    queryKeyFn({ path: '/elk/get-sample-record', operationId: 'getSampleLogRecord', variables }),
    () => fetchGetSampleLogRecord({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type GetLogRecords1QueryParams = {
  accountId?: string
}

export type GetLogRecords1Error = Fetcher.ErrorWrapper<undefined>

export type GetLogRecords1Variables = {
  body: Schemas.ElkSetupTestNodeData
  queryParams?: GetLogRecords1QueryParams
} & PortalContext['fetcherOptions']

export const fetchGetLogRecords1 = (variables: GetLogRecords1Variables) =>
  portalFetch<
    Schemas.RestResponseVerificationNodeDataSetupResponse,
    GetLogRecords1Error,
    Schemas.ElkSetupTestNodeData,
    {},
    GetLogRecords1QueryParams,
    {}
  >({ url: '/elk/node-data', method: 'post', ...variables })

export const useGetLogRecords1 = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.RestResponseVerificationNodeDataSetupResponse,
      GetLogRecords1Error,
      GetLogRecords1Variables
    >,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<
    Schemas.RestResponseVerificationNodeDataSetupResponse,
    GetLogRecords1Error,
    GetLogRecords1Variables
  >((variables: GetLogRecords1Variables) => fetchGetLogRecords1({ ...fetcherOptions, ...variables }), options)
}

export type Get19PathParams = {
  envId: string
}

export type Get19QueryParams = {
  appId?: string
}

export type Get19Error = Fetcher.ErrorWrapper<undefined>

export type Get19Variables = {
  pathParams: Get19PathParams
  queryParams?: Get19QueryParams
} & PortalContext['fetcherOptions']

export const fetchGet19 = (variables: Get19Variables) =>
  portalFetch<Schemas.RestResponseEnvironment, Get19Error, undefined, {}, Get19QueryParams, Get19PathParams>({
    url: '/environments/{envId}',
    method: 'get',
    ...variables
  })

export const useGet19 = (
  variables: Get19Variables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.RestResponseEnvironment, Get19Error, Schemas.RestResponseEnvironment>,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<Schemas.RestResponseEnvironment, Get19Error, Schemas.RestResponseEnvironment>(
    queryKeyFn({ path: '/environments/{envId}', operationId: 'get19', variables }),
    () => fetchGet19({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type Update14PathParams = {
  envId: string
}

export type Update14QueryParams = {
  appId?: string
}

export type Update14Error = Fetcher.ErrorWrapper<undefined>

export type Update14Variables = {
  body: RequestBodies.Environment
  pathParams: Update14PathParams
  queryParams?: Update14QueryParams
} & PortalContext['fetcherOptions']

export const fetchUpdate14 = (variables: Update14Variables) =>
  portalFetch<
    Schemas.RestResponseEnvironment,
    Update14Error,
    RequestBodies.Environment,
    {},
    Update14QueryParams,
    Update14PathParams
  >({ url: '/environments/{envId}', method: 'put', ...variables })

export const useUpdate14 = (
  options?: Omit<
    reactQuery.UseMutationOptions<Schemas.RestResponseEnvironment, Update14Error, Update14Variables>,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<Schemas.RestResponseEnvironment, Update14Error, Update14Variables>(
    (variables: Update14Variables) => fetchUpdate14({ ...fetcherOptions, ...variables }),
    options
  )
}

export type Delete11PathParams = {
  envId: string
}

export type Delete11QueryParams = {
  appId?: string
}

export type Delete11Error = Fetcher.ErrorWrapper<undefined>

export type Delete11Variables = {
  pathParams: Delete11PathParams
  queryParams?: Delete11QueryParams
} & PortalContext['fetcherOptions']

export const fetchDelete11 = (variables: Delete11Variables) =>
  portalFetch<Schemas.RestResponse, Delete11Error, undefined, {}, Delete11QueryParams, Delete11PathParams>({
    url: '/environments/{envId}',
    method: 'delete',
    ...variables
  })

export const useDelete11 = (
  options?: Omit<reactQuery.UseMutationOptions<Schemas.RestResponse, Delete11Error, Delete11Variables>, 'mutationFn'>
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<Schemas.RestResponse, Delete11Error, Delete11Variables>(
    (variables: Delete11Variables) => fetchDelete11({ ...fetcherOptions, ...variables }),
    options
  )
}

export type List23QueryParams = {
  accountId?: string
  appId?: string[]
  /*
   * @default 0
   */
  offset?: string
  limit?: string
  fieldsIncluded?: string[]
  fieldsExcluded?: string[]
  /*
   * @default true
   */
  details?: boolean
  tagFilter?: string
  /*
   * @default false
   */
  withTags?: boolean
}

export type List23Error = Fetcher.ErrorWrapper<undefined>

export type List23Variables = {
  queryParams?: List23QueryParams
} & PortalContext['fetcherOptions']

export const fetchList23 = (variables: List23Variables) =>
  portalFetch<Schemas.RestResponsePageResponseEnvironment, List23Error, undefined, {}, List23QueryParams, {}>({
    url: '/environments',
    method: 'get',
    ...variables
  })

export const useList23 = (
  variables: List23Variables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponsePageResponseEnvironment,
      List23Error,
      Schemas.RestResponsePageResponseEnvironment
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponsePageResponseEnvironment,
    List23Error,
    Schemas.RestResponsePageResponseEnvironment
  >(
    queryKeyFn({ path: '/environments', operationId: 'list23', variables }),
    () => fetchList23({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type Save6QueryParams = {
  appId?: string
}

export type Save6Error = Fetcher.ErrorWrapper<undefined>

export type Save6Variables = {
  body: RequestBodies.Environment
  queryParams?: Save6QueryParams
} & PortalContext['fetcherOptions']

export const fetchSave6 = (variables: Save6Variables) =>
  portalFetch<Schemas.RestResponseEnvironment, Save6Error, RequestBodies.Environment, {}, Save6QueryParams, {}>({
    url: '/environments',
    method: 'post',
    ...variables
  })

export const useSave6 = (
  options?: Omit<
    reactQuery.UseMutationOptions<Schemas.RestResponseEnvironment, Save6Error, Save6Variables>,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<Schemas.RestResponseEnvironment, Save6Error, Save6Variables>(
    (variables: Save6Variables) => fetchSave6({ ...fetcherOptions, ...variables }),
    options
  )
}

export type CreateValuesPathParams = {
  envId: string
}

export type CreateValuesQueryParams = {
  appId?: string
  kind?:
    | 'VALUES'
    | 'KUSTOMIZE_PATCHES'
    | 'K8S_MANIFEST'
    | 'PCF_OVERRIDE'
    | 'AZURE_APP_SERVICE_MANIFEST'
    | 'AZURE_APP_SETTINGS_OVERRIDE'
    | 'AZURE_CONN_STRINGS_OVERRIDE'
    | 'HELM_CHART_OVERRIDE'
    | 'OC_PARAMS'
}

export type CreateValuesError = Fetcher.ErrorWrapper<undefined>

export type CreateValuesVariables = {
  body: RequestBodies.ManifestFile
  pathParams: CreateValuesPathParams
  queryParams?: CreateValuesQueryParams
} & PortalContext['fetcherOptions']

export const fetchCreateValues = (variables: CreateValuesVariables) =>
  portalFetch<
    Schemas.RestResponseManifestFile,
    CreateValuesError,
    RequestBodies.ManifestFile,
    {},
    CreateValuesQueryParams,
    CreateValuesPathParams
  >({ url: '/environments/{envId}/values', method: 'post', ...variables })

export const useCreateValues = (
  options?: Omit<
    reactQuery.UseMutationOptions<Schemas.RestResponseManifestFile, CreateValuesError, CreateValuesVariables>,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<Schemas.RestResponseManifestFile, CreateValuesError, CreateValuesVariables>(
    (variables: CreateValuesVariables) => fetchCreateValues({ ...fetcherOptions, ...variables }),
    options
  )
}

export type GetValuesPathParams = {
  envId: string
  manifestFileId: string
}

export type GetValuesQueryParams = {
  appId?: string
}

export type GetValuesError = Fetcher.ErrorWrapper<undefined>

export type GetValuesVariables = {
  pathParams: GetValuesPathParams
  queryParams?: GetValuesQueryParams
} & PortalContext['fetcherOptions']

export const fetchGetValues = (variables: GetValuesVariables) =>
  portalFetch<
    Schemas.RestResponseManifestFile,
    GetValuesError,
    undefined,
    {},
    GetValuesQueryParams,
    GetValuesPathParams
  >({ url: '/environments/{envId}/values/{manifestFileId}', method: 'get', ...variables })

export const useGetValues = (
  variables: GetValuesVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.RestResponseManifestFile, GetValuesError, Schemas.RestResponseManifestFile>,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<Schemas.RestResponseManifestFile, GetValuesError, Schemas.RestResponseManifestFile>(
    queryKeyFn({ path: '/environments/{envId}/values/{manifestFileId}', operationId: 'getValues', variables }),
    () => fetchGetValues({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type UpdateValuesPathParams = {
  envId: string
  manifestFileId: string
}

export type UpdateValuesQueryParams = {
  appId?: string
  kind?:
    | 'VALUES'
    | 'KUSTOMIZE_PATCHES'
    | 'K8S_MANIFEST'
    | 'PCF_OVERRIDE'
    | 'AZURE_APP_SERVICE_MANIFEST'
    | 'AZURE_APP_SETTINGS_OVERRIDE'
    | 'AZURE_CONN_STRINGS_OVERRIDE'
    | 'HELM_CHART_OVERRIDE'
    | 'OC_PARAMS'
}

export type UpdateValuesError = Fetcher.ErrorWrapper<undefined>

export type UpdateValuesVariables = {
  body: RequestBodies.ManifestFile
  pathParams: UpdateValuesPathParams
  queryParams?: UpdateValuesQueryParams
} & PortalContext['fetcherOptions']

export const fetchUpdateValues = (variables: UpdateValuesVariables) =>
  portalFetch<
    Schemas.RestResponseManifestFile,
    UpdateValuesError,
    RequestBodies.ManifestFile,
    {},
    UpdateValuesQueryParams,
    UpdateValuesPathParams
  >({ url: '/environments/{envId}/values/{manifestFileId}', method: 'put', ...variables })

export const useUpdateValues = (
  options?: Omit<
    reactQuery.UseMutationOptions<Schemas.RestResponseManifestFile, UpdateValuesError, UpdateValuesVariables>,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<Schemas.RestResponseManifestFile, UpdateValuesError, UpdateValuesVariables>(
    (variables: UpdateValuesVariables) => fetchUpdateValues({ ...fetcherOptions, ...variables }),
    options
  )
}

export type DeleteValuesPathParams = {
  envId: string
  manifestFileId: string
}

export type DeleteValuesQueryParams = {
  appId?: string
}

export type DeleteValuesError = Fetcher.ErrorWrapper<undefined>

export type DeleteValuesVariables = {
  pathParams: DeleteValuesPathParams
  queryParams?: DeleteValuesQueryParams
} & PortalContext['fetcherOptions']

export const fetchDeleteValues = (variables: DeleteValuesVariables) =>
  portalFetch<
    Schemas.RestResponseManifestFile,
    DeleteValuesError,
    undefined,
    {},
    DeleteValuesQueryParams,
    DeleteValuesPathParams
  >({ url: '/environments/{envId}/values/{manifestFileId}', method: 'delete', ...variables })

export const useDeleteValues = (
  options?: Omit<
    reactQuery.UseMutationOptions<Schemas.RestResponseManifestFile, DeleteValuesError, DeleteValuesVariables>,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<Schemas.RestResponseManifestFile, DeleteValuesError, DeleteValuesVariables>(
    (variables: DeleteValuesVariables) => fetchDeleteValues({ ...fetcherOptions, ...variables }),
    options
  )
}

export type GetServicesWithOverridesPathParams = {
  envId: string
}

export type GetServicesWithOverridesQueryParams = {
  appId?: string
}

export type GetServicesWithOverridesError = Fetcher.ErrorWrapper<undefined>

export type GetServicesWithOverridesVariables = {
  pathParams: GetServicesWithOverridesPathParams
  queryParams?: GetServicesWithOverridesQueryParams
} & PortalContext['fetcherOptions']

export const fetchGetServicesWithOverrides = (variables: GetServicesWithOverridesVariables) =>
  portalFetch<
    Schemas.RestResponseListService,
    GetServicesWithOverridesError,
    undefined,
    {},
    GetServicesWithOverridesQueryParams,
    GetServicesWithOverridesPathParams
  >({ url: '/environments/{envId}/services', method: 'get', ...variables })

export const useGetServicesWithOverrides = (
  variables: GetServicesWithOverridesVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponseListService,
      GetServicesWithOverridesError,
      Schemas.RestResponseListService
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponseListService,
    GetServicesWithOverridesError,
    Schemas.RestResponseListService
  >(
    queryKeyFn({ path: '/environments/{envId}/services', operationId: 'getServicesWithOverrides', variables }),
    () => fetchGetServicesWithOverrides({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type CloneEnvironmentPathParams = {
  envId: string
}

export type CloneEnvironmentQueryParams = {
  appId?: string
}

export type CloneEnvironmentError = Fetcher.ErrorWrapper<undefined>

export type CloneEnvironmentVariables = {
  body?: RequestBodies.CloneMetadata
  pathParams: CloneEnvironmentPathParams
  queryParams?: CloneEnvironmentQueryParams
} & PortalContext['fetcherOptions']

export const fetchCloneEnvironment = (variables: CloneEnvironmentVariables) =>
  portalFetch<
    Schemas.RestResponseEnvironment,
    CloneEnvironmentError,
    RequestBodies.CloneMetadata,
    {},
    CloneEnvironmentQueryParams,
    CloneEnvironmentPathParams
  >({ url: '/environments/{envId}/clone', method: 'post', ...variables })

export const useCloneEnvironment = (
  options?: Omit<
    reactQuery.UseMutationOptions<Schemas.RestResponseEnvironment, CloneEnvironmentError, CloneEnvironmentVariables>,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<Schemas.RestResponseEnvironment, CloneEnvironmentError, CloneEnvironmentVariables>(
    (variables: CloneEnvironmentVariables) => fetchCloneEnvironment({ ...fetcherOptions, ...variables }),
    options
  )
}

export type SetConfigMapYamlForServicePathParams = {
  envId: string
  templateId: string
}

export type SetConfigMapYamlForServiceQueryParams = {
  appId: string
}

export type SetConfigMapYamlForServiceError = Fetcher.ErrorWrapper<undefined>

export type SetConfigMapYamlForServiceVariables = {
  body?: RequestBodies.KubernetesPayload
  pathParams: SetConfigMapYamlForServicePathParams
  queryParams: SetConfigMapYamlForServiceQueryParams
} & PortalContext['fetcherOptions']

export const fetchSetConfigMapYamlForService = (variables: SetConfigMapYamlForServiceVariables) =>
  portalFetch<
    Schemas.RestResponseEnvironment,
    SetConfigMapYamlForServiceError,
    RequestBodies.KubernetesPayload,
    {},
    SetConfigMapYamlForServiceQueryParams,
    SetConfigMapYamlForServicePathParams
  >({ url: '/environments/{envId}/config-map-yaml/{templateId}', method: 'post', ...variables })

export const useSetConfigMapYamlForService = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.RestResponseEnvironment,
      SetConfigMapYamlForServiceError,
      SetConfigMapYamlForServiceVariables
    >,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<
    Schemas.RestResponseEnvironment,
    SetConfigMapYamlForServiceError,
    SetConfigMapYamlForServiceVariables
  >(
    (variables: SetConfigMapYamlForServiceVariables) =>
      fetchSetConfigMapYamlForService({ ...fetcherOptions, ...variables }),
    options
  )
}

export type UpdateConfigMapYamlForServicePathParams = {
  envId: string
  templateId: string
}

export type UpdateConfigMapYamlForServiceQueryParams = {
  appId: string
}

export type UpdateConfigMapYamlForServiceError = Fetcher.ErrorWrapper<undefined>

export type UpdateConfigMapYamlForServiceVariables = {
  body?: RequestBodies.KubernetesPayload
  pathParams: UpdateConfigMapYamlForServicePathParams
  queryParams: UpdateConfigMapYamlForServiceQueryParams
} & PortalContext['fetcherOptions']

export const fetchUpdateConfigMapYamlForService = (variables: UpdateConfigMapYamlForServiceVariables) =>
  portalFetch<
    Schemas.RestResponseEnvironment,
    UpdateConfigMapYamlForServiceError,
    RequestBodies.KubernetesPayload,
    {},
    UpdateConfigMapYamlForServiceQueryParams,
    UpdateConfigMapYamlForServicePathParams
  >({ url: '/environments/{envId}/config-map-yaml/{templateId}', method: 'put', ...variables })

export const useUpdateConfigMapYamlForService = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.RestResponseEnvironment,
      UpdateConfigMapYamlForServiceError,
      UpdateConfigMapYamlForServiceVariables
    >,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<
    Schemas.RestResponseEnvironment,
    UpdateConfigMapYamlForServiceError,
    UpdateConfigMapYamlForServiceVariables
  >(
    (variables: UpdateConfigMapYamlForServiceVariables) =>
      fetchUpdateConfigMapYamlForService({ ...fetcherOptions, ...variables }),
    options
  )
}

export type DeleteConfigMapYamlForServicePathParams = {
  envId: string
  templateId: string
}

export type DeleteConfigMapYamlForServiceQueryParams = {
  appId: string
}

export type DeleteConfigMapYamlForServiceError = Fetcher.ErrorWrapper<undefined>

export type DeleteConfigMapYamlForServiceVariables = {
  pathParams: DeleteConfigMapYamlForServicePathParams
  queryParams: DeleteConfigMapYamlForServiceQueryParams
} & PortalContext['fetcherOptions']

export const fetchDeleteConfigMapYamlForService = (variables: DeleteConfigMapYamlForServiceVariables) =>
  portalFetch<
    Schemas.RestResponseEnvironment,
    DeleteConfigMapYamlForServiceError,
    undefined,
    {},
    DeleteConfigMapYamlForServiceQueryParams,
    DeleteConfigMapYamlForServicePathParams
  >({ url: '/environments/{envId}/config-map-yaml/{templateId}', method: 'delete', ...variables })

export const useDeleteConfigMapYamlForService = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.RestResponseEnvironment,
      DeleteConfigMapYamlForServiceError,
      DeleteConfigMapYamlForServiceVariables
    >,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<
    Schemas.RestResponseEnvironment,
    DeleteConfigMapYamlForServiceError,
    DeleteConfigMapYamlForServiceVariables
  >(
    (variables: DeleteConfigMapYamlForServiceVariables) =>
      fetchDeleteConfigMapYamlForService({ ...fetcherOptions, ...variables }),
    options
  )
}

export type SetHelmValueYamlForServicePathParams = {
  envId: string
  templateId: string
}

export type SetHelmValueYamlForServiceQueryParams = {
  appId: string
}

export type SetHelmValueYamlForServiceError = Fetcher.ErrorWrapper<undefined>

export type SetHelmValueYamlForServiceVariables = {
  body?: RequestBodies.KubernetesPayload
  pathParams: SetHelmValueYamlForServicePathParams
  queryParams: SetHelmValueYamlForServiceQueryParams
} & PortalContext['fetcherOptions']

export const fetchSetHelmValueYamlForService = (variables: SetHelmValueYamlForServiceVariables) =>
  portalFetch<
    Schemas.RestResponseEnvironment,
    SetHelmValueYamlForServiceError,
    RequestBodies.KubernetesPayload,
    {},
    SetHelmValueYamlForServiceQueryParams,
    SetHelmValueYamlForServicePathParams
  >({ url: '/environments/{envId}/helm-value-yaml/{templateId}', method: 'post', ...variables })

export const useSetHelmValueYamlForService = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.RestResponseEnvironment,
      SetHelmValueYamlForServiceError,
      SetHelmValueYamlForServiceVariables
    >,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<
    Schemas.RestResponseEnvironment,
    SetHelmValueYamlForServiceError,
    SetHelmValueYamlForServiceVariables
  >(
    (variables: SetHelmValueYamlForServiceVariables) =>
      fetchSetHelmValueYamlForService({ ...fetcherOptions, ...variables }),
    options
  )
}

export type UpdateHelmValueYamlForServicePathParams = {
  envId: string
  templateId: string
}

export type UpdateHelmValueYamlForServiceQueryParams = {
  appId: string
}

export type UpdateHelmValueYamlForServiceError = Fetcher.ErrorWrapper<undefined>

export type UpdateHelmValueYamlForServiceVariables = {
  body?: RequestBodies.KubernetesPayload
  pathParams: UpdateHelmValueYamlForServicePathParams
  queryParams: UpdateHelmValueYamlForServiceQueryParams
} & PortalContext['fetcherOptions']

export const fetchUpdateHelmValueYamlForService = (variables: UpdateHelmValueYamlForServiceVariables) =>
  portalFetch<
    Schemas.RestResponseEnvironment,
    UpdateHelmValueYamlForServiceError,
    RequestBodies.KubernetesPayload,
    {},
    UpdateHelmValueYamlForServiceQueryParams,
    UpdateHelmValueYamlForServicePathParams
  >({ url: '/environments/{envId}/helm-value-yaml/{templateId}', method: 'put', ...variables })

export const useUpdateHelmValueYamlForService = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.RestResponseEnvironment,
      UpdateHelmValueYamlForServiceError,
      UpdateHelmValueYamlForServiceVariables
    >,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<
    Schemas.RestResponseEnvironment,
    UpdateHelmValueYamlForServiceError,
    UpdateHelmValueYamlForServiceVariables
  >(
    (variables: UpdateHelmValueYamlForServiceVariables) =>
      fetchUpdateHelmValueYamlForService({ ...fetcherOptions, ...variables }),
    options
  )
}

export type DeleteHelmValueYamlForServicePathParams = {
  envId: string
  templateId: string
}

export type DeleteHelmValueYamlForServiceQueryParams = {
  appId: string
}

export type DeleteHelmValueYamlForServiceError = Fetcher.ErrorWrapper<undefined>

export type DeleteHelmValueYamlForServiceVariables = {
  pathParams: DeleteHelmValueYamlForServicePathParams
  queryParams: DeleteHelmValueYamlForServiceQueryParams
} & PortalContext['fetcherOptions']

export const fetchDeleteHelmValueYamlForService = (variables: DeleteHelmValueYamlForServiceVariables) =>
  portalFetch<
    Schemas.RestResponseEnvironment,
    DeleteHelmValueYamlForServiceError,
    undefined,
    {},
    DeleteHelmValueYamlForServiceQueryParams,
    DeleteHelmValueYamlForServicePathParams
  >({ url: '/environments/{envId}/helm-value-yaml/{templateId}', method: 'delete', ...variables })

export const useDeleteHelmValueYamlForService = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.RestResponseEnvironment,
      DeleteHelmValueYamlForServiceError,
      DeleteHelmValueYamlForServiceVariables
    >,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<
    Schemas.RestResponseEnvironment,
    DeleteHelmValueYamlForServiceError,
    DeleteHelmValueYamlForServiceVariables
  >(
    (variables: DeleteHelmValueYamlForServiceVariables) =>
      fetchDeleteHelmValueYamlForService({ ...fetcherOptions, ...variables }),
    options
  )
}

export type CreateValuesForServicePathParams = {
  envId: string
  serviceId: string
}

export type CreateValuesForServiceQueryParams = {
  appId?: string
  kind?:
    | 'VALUES'
    | 'KUSTOMIZE_PATCHES'
    | 'K8S_MANIFEST'
    | 'PCF_OVERRIDE'
    | 'AZURE_APP_SERVICE_MANIFEST'
    | 'AZURE_APP_SETTINGS_OVERRIDE'
    | 'AZURE_CONN_STRINGS_OVERRIDE'
    | 'HELM_CHART_OVERRIDE'
    | 'OC_PARAMS'
}

export type CreateValuesForServiceError = Fetcher.ErrorWrapper<undefined>

export type CreateValuesForServiceVariables = {
  body: RequestBodies.ManifestFile
  pathParams: CreateValuesForServicePathParams
  queryParams?: CreateValuesForServiceQueryParams
} & PortalContext['fetcherOptions']

export const fetchCreateValuesForService = (variables: CreateValuesForServiceVariables) =>
  portalFetch<
    Schemas.RestResponseManifestFile,
    CreateValuesForServiceError,
    RequestBodies.ManifestFile,
    {},
    CreateValuesForServiceQueryParams,
    CreateValuesForServicePathParams
  >({ url: '/environments/{envId}/service/{serviceId}/values', method: 'post', ...variables })

export const useCreateValuesForService = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.RestResponseManifestFile,
      CreateValuesForServiceError,
      CreateValuesForServiceVariables
    >,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<
    Schemas.RestResponseManifestFile,
    CreateValuesForServiceError,
    CreateValuesForServiceVariables
  >(
    (variables: CreateValuesForServiceVariables) => fetchCreateValuesForService({ ...fetcherOptions, ...variables }),
    options
  )
}

export type GetValuesForServicePathParams = {
  envId: string
  serviceId: string
  manifestFileId: string
}

export type GetValuesForServiceQueryParams = {
  appId?: string
}

export type GetValuesForServiceError = Fetcher.ErrorWrapper<undefined>

export type GetValuesForServiceVariables = {
  pathParams: GetValuesForServicePathParams
  queryParams?: GetValuesForServiceQueryParams
} & PortalContext['fetcherOptions']

export const fetchGetValuesForService = (variables: GetValuesForServiceVariables) =>
  portalFetch<
    Schemas.RestResponseManifestFile,
    GetValuesForServiceError,
    undefined,
    {},
    GetValuesForServiceQueryParams,
    GetValuesForServicePathParams
  >({ url: '/environments/{envId}/service/{serviceId}/values/{manifestFileId}', method: 'get', ...variables })

export const useGetValuesForService = (
  variables: GetValuesForServiceVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponseManifestFile,
      GetValuesForServiceError,
      Schemas.RestResponseManifestFile
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponseManifestFile,
    GetValuesForServiceError,
    Schemas.RestResponseManifestFile
  >(
    queryKeyFn({
      path: '/environments/{envId}/service/{serviceId}/values/{manifestFileId}',
      operationId: 'getValuesForService',
      variables
    }),
    () => fetchGetValuesForService({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type UpdateValuesForServicePathParams = {
  envId: string
  serviceId: string
  manifestFileId: string
}

export type UpdateValuesForServiceQueryParams = {
  appId?: string
  kind?:
    | 'VALUES'
    | 'KUSTOMIZE_PATCHES'
    | 'K8S_MANIFEST'
    | 'PCF_OVERRIDE'
    | 'AZURE_APP_SERVICE_MANIFEST'
    | 'AZURE_APP_SETTINGS_OVERRIDE'
    | 'AZURE_CONN_STRINGS_OVERRIDE'
    | 'HELM_CHART_OVERRIDE'
    | 'OC_PARAMS'
}

export type UpdateValuesForServiceError = Fetcher.ErrorWrapper<undefined>

export type UpdateValuesForServiceVariables = {
  body: RequestBodies.ManifestFile
  pathParams: UpdateValuesForServicePathParams
  queryParams?: UpdateValuesForServiceQueryParams
} & PortalContext['fetcherOptions']

export const fetchUpdateValuesForService = (variables: UpdateValuesForServiceVariables) =>
  portalFetch<
    Schemas.RestResponseManifestFile,
    UpdateValuesForServiceError,
    RequestBodies.ManifestFile,
    {},
    UpdateValuesForServiceQueryParams,
    UpdateValuesForServicePathParams
  >({ url: '/environments/{envId}/service/{serviceId}/values/{manifestFileId}', method: 'put', ...variables })

export const useUpdateValuesForService = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.RestResponseManifestFile,
      UpdateValuesForServiceError,
      UpdateValuesForServiceVariables
    >,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<
    Schemas.RestResponseManifestFile,
    UpdateValuesForServiceError,
    UpdateValuesForServiceVariables
  >(
    (variables: UpdateValuesForServiceVariables) => fetchUpdateValuesForService({ ...fetcherOptions, ...variables }),
    options
  )
}

export type DeleteValuesForServicePathParams = {
  envId: string
  serviceId: string
  manifestFileId: string
}

export type DeleteValuesForServiceQueryParams = {
  appId?: string
}

export type DeleteValuesForServiceError = Fetcher.ErrorWrapper<undefined>

export type DeleteValuesForServiceVariables = {
  pathParams: DeleteValuesForServicePathParams
  queryParams?: DeleteValuesForServiceQueryParams
} & PortalContext['fetcherOptions']

export const fetchDeleteValuesForService = (variables: DeleteValuesForServiceVariables) =>
  portalFetch<
    Schemas.RestResponseManifestFile,
    DeleteValuesForServiceError,
    undefined,
    {},
    DeleteValuesForServiceQueryParams,
    DeleteValuesForServicePathParams
  >({ url: '/environments/{envId}/service/{serviceId}/values/{manifestFileId}', method: 'delete', ...variables })

export const useDeleteValuesForService = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.RestResponseManifestFile,
      DeleteValuesForServiceError,
      DeleteValuesForServiceVariables
    >,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<
    Schemas.RestResponseManifestFile,
    DeleteValuesForServiceError,
    DeleteValuesForServiceVariables
  >(
    (variables: DeleteValuesForServiceVariables) => fetchDeleteValuesForService({ ...fetcherOptions, ...variables }),
    options
  )
}

export type CreateValuesAppManifestForServicePathParams = {
  envId: string
  serviceId: string
}

export type CreateValuesAppManifestForServiceQueryParams = {
  appId?: string
}

export type CreateValuesAppManifestForServiceError = Fetcher.ErrorWrapper<undefined>

export type CreateValuesAppManifestForServiceVariables = {
  body: RequestBodies.ApplicationManifest
  pathParams: CreateValuesAppManifestForServicePathParams
  queryParams?: CreateValuesAppManifestForServiceQueryParams
} & PortalContext['fetcherOptions']

export const fetchCreateValuesAppManifestForService = (variables: CreateValuesAppManifestForServiceVariables) =>
  portalFetch<
    Schemas.RestResponseApplicationManifest,
    CreateValuesAppManifestForServiceError,
    RequestBodies.ApplicationManifest,
    {},
    CreateValuesAppManifestForServiceQueryParams,
    CreateValuesAppManifestForServicePathParams
  >({ url: '/environments/{envId}/service/{serviceId}/values/app-manifest', method: 'post', ...variables })

export const useCreateValuesAppManifestForService = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.RestResponseApplicationManifest,
      CreateValuesAppManifestForServiceError,
      CreateValuesAppManifestForServiceVariables
    >,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<
    Schemas.RestResponseApplicationManifest,
    CreateValuesAppManifestForServiceError,
    CreateValuesAppManifestForServiceVariables
  >(
    (variables: CreateValuesAppManifestForServiceVariables) =>
      fetchCreateValuesAppManifestForService({ ...fetcherOptions, ...variables }),
    options
  )
}

export type GetValuesAppManifestForServicePathParams = {
  envId: string
  serviceId: string
  appManifestId: string
}

export type GetValuesAppManifestForServiceQueryParams = {
  appId?: string
}

export type GetValuesAppManifestForServiceError = Fetcher.ErrorWrapper<undefined>

export type GetValuesAppManifestForServiceVariables = {
  pathParams: GetValuesAppManifestForServicePathParams
  queryParams?: GetValuesAppManifestForServiceQueryParams
} & PortalContext['fetcherOptions']

export const fetchGetValuesAppManifestForService = (variables: GetValuesAppManifestForServiceVariables) =>
  portalFetch<
    Schemas.RestResponseApplicationManifest,
    GetValuesAppManifestForServiceError,
    undefined,
    {},
    GetValuesAppManifestForServiceQueryParams,
    GetValuesAppManifestForServicePathParams
  >({
    url: '/environments/{envId}/service/{serviceId}/values/app-manifest/{appManifestId}',
    method: 'get',
    ...variables
  })

export const useGetValuesAppManifestForService = (
  variables: GetValuesAppManifestForServiceVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponseApplicationManifest,
      GetValuesAppManifestForServiceError,
      Schemas.RestResponseApplicationManifest
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponseApplicationManifest,
    GetValuesAppManifestForServiceError,
    Schemas.RestResponseApplicationManifest
  >(
    queryKeyFn({
      path: '/environments/{envId}/service/{serviceId}/values/app-manifest/{appManifestId}',
      operationId: 'getValuesAppManifestForService',
      variables
    }),
    () => fetchGetValuesAppManifestForService({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type UpdateValuesAppManifestForServicePathParams = {
  envId: string
  serviceId: string
  appManifestId: string
}

export type UpdateValuesAppManifestForServiceQueryParams = {
  appId?: string
}

export type UpdateValuesAppManifestForServiceError = Fetcher.ErrorWrapper<undefined>

export type UpdateValuesAppManifestForServiceVariables = {
  body: RequestBodies.ApplicationManifest
  pathParams: UpdateValuesAppManifestForServicePathParams
  queryParams?: UpdateValuesAppManifestForServiceQueryParams
} & PortalContext['fetcherOptions']

export const fetchUpdateValuesAppManifestForService = (variables: UpdateValuesAppManifestForServiceVariables) =>
  portalFetch<
    Schemas.RestResponseApplicationManifest,
    UpdateValuesAppManifestForServiceError,
    RequestBodies.ApplicationManifest,
    {},
    UpdateValuesAppManifestForServiceQueryParams,
    UpdateValuesAppManifestForServicePathParams
  >({
    url: '/environments/{envId}/service/{serviceId}/values/app-manifest/{appManifestId}',
    method: 'put',
    ...variables
  })

export const useUpdateValuesAppManifestForService = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.RestResponseApplicationManifest,
      UpdateValuesAppManifestForServiceError,
      UpdateValuesAppManifestForServiceVariables
    >,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<
    Schemas.RestResponseApplicationManifest,
    UpdateValuesAppManifestForServiceError,
    UpdateValuesAppManifestForServiceVariables
  >(
    (variables: UpdateValuesAppManifestForServiceVariables) =>
      fetchUpdateValuesAppManifestForService({ ...fetcherOptions, ...variables }),
    options
  )
}

export type DeleteValuesAppManifestForServicePathParams = {
  envId: string
  serviceId: string
  appManifestId: string
}

export type DeleteValuesAppManifestForServiceQueryParams = {
  appId?: string
}

export type DeleteValuesAppManifestForServiceError = Fetcher.ErrorWrapper<undefined>

export type DeleteValuesAppManifestForServiceVariables = {
  pathParams: DeleteValuesAppManifestForServicePathParams
  queryParams?: DeleteValuesAppManifestForServiceQueryParams
} & PortalContext['fetcherOptions']

export const fetchDeleteValuesAppManifestForService = (variables: DeleteValuesAppManifestForServiceVariables) =>
  portalFetch<
    Schemas.RestResponseApplicationManifest,
    DeleteValuesAppManifestForServiceError,
    undefined,
    {},
    DeleteValuesAppManifestForServiceQueryParams,
    DeleteValuesAppManifestForServicePathParams
  >({
    url: '/environments/{envId}/service/{serviceId}/values/app-manifest/{appManifestId}',
    method: 'delete',
    ...variables
  })

export const useDeleteValuesAppManifestForService = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.RestResponseApplicationManifest,
      DeleteValuesAppManifestForServiceError,
      DeleteValuesAppManifestForServiceVariables
    >,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<
    Schemas.RestResponseApplicationManifest,
    DeleteValuesAppManifestForServiceError,
    DeleteValuesAppManifestForServiceVariables
  >(
    (variables: DeleteValuesAppManifestForServiceVariables) =>
      fetchDeleteValuesAppManifestForService({ ...fetcherOptions, ...variables }),
    options
  )
}

export type GetValuesManifestFilePathParams = {
  envId: string
}

export type GetValuesManifestFileQueryParams = {
  appId?: string
}

export type GetValuesManifestFileError = Fetcher.ErrorWrapper<undefined>

export type GetValuesManifestFileVariables = {
  pathParams: GetValuesManifestFilePathParams
  queryParams?: GetValuesManifestFileQueryParams
} & PortalContext['fetcherOptions']

export const fetchGetValuesManifestFile = (variables: GetValuesManifestFileVariables) =>
  portalFetch<
    Schemas.RestResponseManifestFile,
    GetValuesManifestFileError,
    undefined,
    {},
    GetValuesManifestFileQueryParams,
    GetValuesManifestFilePathParams
  >({ url: '/environments/{envId}/values-manifest-file', method: 'get', ...variables })

export const useGetValuesManifestFile = (
  variables: GetValuesManifestFileVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponseManifestFile,
      GetValuesManifestFileError,
      Schemas.RestResponseManifestFile
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponseManifestFile,
    GetValuesManifestFileError,
    Schemas.RestResponseManifestFile
  >(
    queryKeyFn({ path: '/environments/{envId}/values-manifest-file', operationId: 'getValuesManifestFile', variables }),
    () => fetchGetValuesManifestFile({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type GetLocalOverrideManifestFilesPathParams = {
  envId: string
}

export type GetLocalOverrideManifestFilesQueryParams = {
  appId?: string
}

export type GetLocalOverrideManifestFilesError = Fetcher.ErrorWrapper<undefined>

export type GetLocalOverrideManifestFilesVariables = {
  pathParams: GetLocalOverrideManifestFilesPathParams
  queryParams?: GetLocalOverrideManifestFilesQueryParams
} & PortalContext['fetcherOptions']

export const fetchGetLocalOverrideManifestFiles = (variables: GetLocalOverrideManifestFilesVariables) =>
  portalFetch<
    Schemas.RestResponseListManifestFile,
    GetLocalOverrideManifestFilesError,
    undefined,
    {},
    GetLocalOverrideManifestFilesQueryParams,
    GetLocalOverrideManifestFilesPathParams
  >({ url: '/environments/{envId}/manifest-files', method: 'get', ...variables })

export const useGetLocalOverrideManifestFiles = (
  variables: GetLocalOverrideManifestFilesVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponseListManifestFile,
      GetLocalOverrideManifestFilesError,
      Schemas.RestResponseListManifestFile
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponseListManifestFile,
    GetLocalOverrideManifestFilesError,
    Schemas.RestResponseListManifestFile
  >(
    queryKeyFn({
      path: '/environments/{envId}/manifest-files',
      operationId: 'getLocalOverrideManifestFiles',
      variables
    }),
    () => fetchGetLocalOverrideManifestFiles({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type SetConfigMapYamlPathParams = {
  envId: string
}

export type SetConfigMapYamlQueryParams = {
  appId: string
}

export type SetConfigMapYamlError = Fetcher.ErrorWrapper<undefined>

export type SetConfigMapYamlVariables = {
  body?: RequestBodies.KubernetesPayload
  pathParams: SetConfigMapYamlPathParams
  queryParams: SetConfigMapYamlQueryParams
} & PortalContext['fetcherOptions']

export const fetchSetConfigMapYaml = (variables: SetConfigMapYamlVariables) =>
  portalFetch<
    Schemas.RestResponseEnvironment,
    SetConfigMapYamlError,
    RequestBodies.KubernetesPayload,
    {},
    SetConfigMapYamlQueryParams,
    SetConfigMapYamlPathParams
  >({ url: '/environments/{envId}/config-map-yaml', method: 'post', ...variables })

export const useSetConfigMapYaml = (
  options?: Omit<
    reactQuery.UseMutationOptions<Schemas.RestResponseEnvironment, SetConfigMapYamlError, SetConfigMapYamlVariables>,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<Schemas.RestResponseEnvironment, SetConfigMapYamlError, SetConfigMapYamlVariables>(
    (variables: SetConfigMapYamlVariables) => fetchSetConfigMapYaml({ ...fetcherOptions, ...variables }),
    options
  )
}

export type UpdateConfigMapYamlPathParams = {
  envId: string
}

export type UpdateConfigMapYamlQueryParams = {
  appId: string
}

export type UpdateConfigMapYamlError = Fetcher.ErrorWrapper<undefined>

export type UpdateConfigMapYamlVariables = {
  body?: RequestBodies.KubernetesPayload
  pathParams: UpdateConfigMapYamlPathParams
  queryParams: UpdateConfigMapYamlQueryParams
} & PortalContext['fetcherOptions']

export const fetchUpdateConfigMapYaml = (variables: UpdateConfigMapYamlVariables) =>
  portalFetch<
    Schemas.RestResponseEnvironment,
    UpdateConfigMapYamlError,
    RequestBodies.KubernetesPayload,
    {},
    UpdateConfigMapYamlQueryParams,
    UpdateConfigMapYamlPathParams
  >({ url: '/environments/{envId}/config-map-yaml', method: 'put', ...variables })

export const useUpdateConfigMapYaml = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.RestResponseEnvironment,
      UpdateConfigMapYamlError,
      UpdateConfigMapYamlVariables
    >,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<
    Schemas.RestResponseEnvironment,
    UpdateConfigMapYamlError,
    UpdateConfigMapYamlVariables
  >((variables: UpdateConfigMapYamlVariables) => fetchUpdateConfigMapYaml({ ...fetcherOptions, ...variables }), options)
}

export type DeleteConfigMapYamlPathParams = {
  envId: string
}

export type DeleteConfigMapYamlQueryParams = {
  appId: string
}

export type DeleteConfigMapYamlError = Fetcher.ErrorWrapper<undefined>

export type DeleteConfigMapYamlVariables = {
  pathParams: DeleteConfigMapYamlPathParams
  queryParams: DeleteConfigMapYamlQueryParams
} & PortalContext['fetcherOptions']

export const fetchDeleteConfigMapYaml = (variables: DeleteConfigMapYamlVariables) =>
  portalFetch<
    Schemas.RestResponseEnvironment,
    DeleteConfigMapYamlError,
    undefined,
    {},
    DeleteConfigMapYamlQueryParams,
    DeleteConfigMapYamlPathParams
  >({ url: '/environments/{envId}/config-map-yaml', method: 'delete', ...variables })

export const useDeleteConfigMapYaml = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.RestResponseEnvironment,
      DeleteConfigMapYamlError,
      DeleteConfigMapYamlVariables
    >,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<
    Schemas.RestResponseEnvironment,
    DeleteConfigMapYamlError,
    DeleteConfigMapYamlVariables
  >((variables: DeleteConfigMapYamlVariables) => fetchDeleteConfigMapYaml({ ...fetcherOptions, ...variables }), options)
}

export type SetHelmValueYamlPathParams = {
  envId: string
}

export type SetHelmValueYamlQueryParams = {
  appId: string
}

export type SetHelmValueYamlError = Fetcher.ErrorWrapper<undefined>

export type SetHelmValueYamlVariables = {
  body?: RequestBodies.KubernetesPayload
  pathParams: SetHelmValueYamlPathParams
  queryParams: SetHelmValueYamlQueryParams
} & PortalContext['fetcherOptions']

export const fetchSetHelmValueYaml = (variables: SetHelmValueYamlVariables) =>
  portalFetch<
    Schemas.RestResponseEnvironment,
    SetHelmValueYamlError,
    RequestBodies.KubernetesPayload,
    {},
    SetHelmValueYamlQueryParams,
    SetHelmValueYamlPathParams
  >({ url: '/environments/{envId}/helm-value-yaml', method: 'post', ...variables })

export const useSetHelmValueYaml = (
  options?: Omit<
    reactQuery.UseMutationOptions<Schemas.RestResponseEnvironment, SetHelmValueYamlError, SetHelmValueYamlVariables>,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<Schemas.RestResponseEnvironment, SetHelmValueYamlError, SetHelmValueYamlVariables>(
    (variables: SetHelmValueYamlVariables) => fetchSetHelmValueYaml({ ...fetcherOptions, ...variables }),
    options
  )
}

export type UpdateHelmValueYamlPathParams = {
  envId: string
}

export type UpdateHelmValueYamlQueryParams = {
  appId: string
}

export type UpdateHelmValueYamlError = Fetcher.ErrorWrapper<undefined>

export type UpdateHelmValueYamlVariables = {
  body?: RequestBodies.KubernetesPayload
  pathParams: UpdateHelmValueYamlPathParams
  queryParams: UpdateHelmValueYamlQueryParams
} & PortalContext['fetcherOptions']

export const fetchUpdateHelmValueYaml = (variables: UpdateHelmValueYamlVariables) =>
  portalFetch<
    Schemas.RestResponseEnvironment,
    UpdateHelmValueYamlError,
    RequestBodies.KubernetesPayload,
    {},
    UpdateHelmValueYamlQueryParams,
    UpdateHelmValueYamlPathParams
  >({ url: '/environments/{envId}/helm-value-yaml', method: 'put', ...variables })

export const useUpdateHelmValueYaml = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.RestResponseEnvironment,
      UpdateHelmValueYamlError,
      UpdateHelmValueYamlVariables
    >,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<
    Schemas.RestResponseEnvironment,
    UpdateHelmValueYamlError,
    UpdateHelmValueYamlVariables
  >((variables: UpdateHelmValueYamlVariables) => fetchUpdateHelmValueYaml({ ...fetcherOptions, ...variables }), options)
}

export type DeleteHelmValueYamlPathParams = {
  envId: string
}

export type DeleteHelmValueYamlQueryParams = {
  appId: string
}

export type DeleteHelmValueYamlError = Fetcher.ErrorWrapper<undefined>

export type DeleteHelmValueYamlVariables = {
  pathParams: DeleteHelmValueYamlPathParams
  queryParams: DeleteHelmValueYamlQueryParams
} & PortalContext['fetcherOptions']

export const fetchDeleteHelmValueYaml = (variables: DeleteHelmValueYamlVariables) =>
  portalFetch<
    Schemas.RestResponseEnvironment,
    DeleteHelmValueYamlError,
    undefined,
    {},
    DeleteHelmValueYamlQueryParams,
    DeleteHelmValueYamlPathParams
  >({ url: '/environments/{envId}/helm-value-yaml', method: 'delete', ...variables })

export const useDeleteHelmValueYaml = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.RestResponseEnvironment,
      DeleteHelmValueYamlError,
      DeleteHelmValueYamlVariables
    >,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<
    Schemas.RestResponseEnvironment,
    DeleteHelmValueYamlError,
    DeleteHelmValueYamlVariables
  >((variables: DeleteHelmValueYamlVariables) => fetchDeleteHelmValueYaml({ ...fetcherOptions, ...variables }), options)
}

export type CreateValuesAppManifestPathParams = {
  envId: string
}

export type CreateValuesAppManifestQueryParams = {
  appId?: string
}

export type CreateValuesAppManifestError = Fetcher.ErrorWrapper<undefined>

export type CreateValuesAppManifestVariables = {
  body: RequestBodies.ApplicationManifest
  pathParams: CreateValuesAppManifestPathParams
  queryParams?: CreateValuesAppManifestQueryParams
} & PortalContext['fetcherOptions']

export const fetchCreateValuesAppManifest = (variables: CreateValuesAppManifestVariables) =>
  portalFetch<
    Schemas.RestResponseApplicationManifest,
    CreateValuesAppManifestError,
    RequestBodies.ApplicationManifest,
    {},
    CreateValuesAppManifestQueryParams,
    CreateValuesAppManifestPathParams
  >({ url: '/environments/{envId}/values/app-manifest', method: 'post', ...variables })

export const useCreateValuesAppManifest = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.RestResponseApplicationManifest,
      CreateValuesAppManifestError,
      CreateValuesAppManifestVariables
    >,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<
    Schemas.RestResponseApplicationManifest,
    CreateValuesAppManifestError,
    CreateValuesAppManifestVariables
  >(
    (variables: CreateValuesAppManifestVariables) => fetchCreateValuesAppManifest({ ...fetcherOptions, ...variables }),
    options
  )
}

export type GetValuesAppManifestPathParams = {
  envId: string
  appManifestId: string
}

export type GetValuesAppManifestQueryParams = {
  appId?: string
}

export type GetValuesAppManifestError = Fetcher.ErrorWrapper<undefined>

export type GetValuesAppManifestVariables = {
  pathParams: GetValuesAppManifestPathParams
  queryParams?: GetValuesAppManifestQueryParams
} & PortalContext['fetcherOptions']

export const fetchGetValuesAppManifest = (variables: GetValuesAppManifestVariables) =>
  portalFetch<
    Schemas.RestResponseApplicationManifest,
    GetValuesAppManifestError,
    undefined,
    {},
    GetValuesAppManifestQueryParams,
    GetValuesAppManifestPathParams
  >({ url: '/environments/{envId}/values/app-manifest/{appManifestId}', method: 'get', ...variables })

export const useGetValuesAppManifest = (
  variables: GetValuesAppManifestVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponseApplicationManifest,
      GetValuesAppManifestError,
      Schemas.RestResponseApplicationManifest
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponseApplicationManifest,
    GetValuesAppManifestError,
    Schemas.RestResponseApplicationManifest
  >(
    queryKeyFn({
      path: '/environments/{envId}/values/app-manifest/{appManifestId}',
      operationId: 'getValuesAppManifest',
      variables
    }),
    () => fetchGetValuesAppManifest({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type UpdateValuesAppManifestPathParams = {
  envId: string
  appManifestId: string
}

export type UpdateValuesAppManifestQueryParams = {
  appId?: string
}

export type UpdateValuesAppManifestError = Fetcher.ErrorWrapper<undefined>

export type UpdateValuesAppManifestVariables = {
  body: RequestBodies.ApplicationManifest
  pathParams: UpdateValuesAppManifestPathParams
  queryParams?: UpdateValuesAppManifestQueryParams
} & PortalContext['fetcherOptions']

export const fetchUpdateValuesAppManifest = (variables: UpdateValuesAppManifestVariables) =>
  portalFetch<
    Schemas.RestResponseApplicationManifest,
    UpdateValuesAppManifestError,
    RequestBodies.ApplicationManifest,
    {},
    UpdateValuesAppManifestQueryParams,
    UpdateValuesAppManifestPathParams
  >({ url: '/environments/{envId}/values/app-manifest/{appManifestId}', method: 'put', ...variables })

export const useUpdateValuesAppManifest = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.RestResponseApplicationManifest,
      UpdateValuesAppManifestError,
      UpdateValuesAppManifestVariables
    >,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<
    Schemas.RestResponseApplicationManifest,
    UpdateValuesAppManifestError,
    UpdateValuesAppManifestVariables
  >(
    (variables: UpdateValuesAppManifestVariables) => fetchUpdateValuesAppManifest({ ...fetcherOptions, ...variables }),
    options
  )
}

export type DeleteValuesAppManifestPathParams = {
  envId: string
  appManifestId: string
}

export type DeleteValuesAppManifestQueryParams = {
  appId?: string
}

export type DeleteValuesAppManifestError = Fetcher.ErrorWrapper<undefined>

export type DeleteValuesAppManifestVariables = {
  pathParams: DeleteValuesAppManifestPathParams
  queryParams?: DeleteValuesAppManifestQueryParams
} & PortalContext['fetcherOptions']

export const fetchDeleteValuesAppManifest = (variables: DeleteValuesAppManifestVariables) =>
  portalFetch<
    Schemas.RestResponseApplicationManifest,
    DeleteValuesAppManifestError,
    undefined,
    {},
    DeleteValuesAppManifestQueryParams,
    DeleteValuesAppManifestPathParams
  >({ url: '/environments/{envId}/values/app-manifest/{appManifestId}', method: 'delete', ...variables })

export const useDeleteValuesAppManifest = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.RestResponseApplicationManifest,
      DeleteValuesAppManifestError,
      DeleteValuesAppManifestVariables
    >,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<
    Schemas.RestResponseApplicationManifest,
    DeleteValuesAppManifestError,
    DeleteValuesAppManifestVariables
  >(
    (variables: DeleteValuesAppManifestVariables) => fetchDeleteValuesAppManifest({ ...fetcherOptions, ...variables }),
    options
  )
}

export type GetValuesAppManifest1PathParams = {
  envId: string
}

export type GetValuesAppManifest1QueryParams = {
  appId?: string
}

export type GetValuesAppManifest1Error = Fetcher.ErrorWrapper<undefined>

export type GetValuesAppManifest1Variables = {
  pathParams: GetValuesAppManifest1PathParams
  queryParams?: GetValuesAppManifest1QueryParams
} & PortalContext['fetcherOptions']

export const fetchGetValuesAppManifest1 = (variables: GetValuesAppManifest1Variables) =>
  portalFetch<
    Schemas.RestResponseApplicationManifest,
    GetValuesAppManifest1Error,
    undefined,
    {},
    GetValuesAppManifest1QueryParams,
    GetValuesAppManifest1PathParams
  >({ url: '/environments/{envId}/values-app-manifest', method: 'get', ...variables })

export const useGetValuesAppManifest1 = (
  variables: GetValuesAppManifest1Variables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponseApplicationManifest,
      GetValuesAppManifest1Error,
      Schemas.RestResponseApplicationManifest
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponseApplicationManifest,
    GetValuesAppManifest1Error,
    Schemas.RestResponseApplicationManifest
  >(
    queryKeyFn({ path: '/environments/{envId}/values-app-manifest', operationId: 'getValuesAppManifest1', variables }),
    () => fetchGetValuesAppManifest1({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type GetWorkflowVariablesQueryParams = {
  appId?: string
  workflowExecutionId?: string
  pipelineStageElementId?: string
}

export type GetWorkflowVariablesError = Fetcher.ErrorWrapper<undefined>

export type GetWorkflowVariablesVariables = {
  body?: RequestBodies.ExecutionArgs
  queryParams?: GetWorkflowVariablesQueryParams
} & PortalContext['fetcherOptions']

export const fetchGetWorkflowVariables = (variables: GetWorkflowVariablesVariables) =>
  portalFetch<
    Schemas.RestResponseWorkflowVariablesMetadata,
    GetWorkflowVariablesError,
    RequestBodies.ExecutionArgs,
    {},
    GetWorkflowVariablesQueryParams,
    {}
  >({ url: '/executions/workflow-variables', method: 'post', ...variables })

export const useGetWorkflowVariables = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.RestResponseWorkflowVariablesMetadata,
      GetWorkflowVariablesError,
      GetWorkflowVariablesVariables
    >,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<
    Schemas.RestResponseWorkflowVariablesMetadata,
    GetWorkflowVariablesError,
    GetWorkflowVariablesVariables
  >(
    (variables: GetWorkflowVariablesVariables) => fetchGetWorkflowVariables({ ...fetcherOptions, ...variables }),
    options
  )
}

export type ListExecutionsQueryParams = {
  accountId?: string
  appId?: string[]
  envId?: string
  orchestrationId?: string
  /*
   * @default 0
   */
  offset?: string
  limit?: string
  fieldsIncluded?: string[]
  fieldsExcluded?: string[]
  /*
   * @default false
   */
  includeGraph?: boolean
  workflowType?: string[]
  /*
   * @default false
   */
  includeIndirectExecutions?: boolean
  tagFilter?: string
  /*
   * @default false
   */
  withTags?: boolean
}

export type ListExecutionsError = Fetcher.ErrorWrapper<undefined>

export type ListExecutionsVariables = {
  queryParams?: ListExecutionsQueryParams
} & PortalContext['fetcherOptions']

export const fetchListExecutions = (variables: ListExecutionsVariables) =>
  portalFetch<
    Schemas.RestResponsePageResponseWorkflowExecution,
    ListExecutionsError,
    undefined,
    {},
    ListExecutionsQueryParams,
    {}
  >({ url: '/executions', method: 'get', ...variables })

export const useListExecutions = (
  variables: ListExecutionsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponsePageResponseWorkflowExecution,
      ListExecutionsError,
      Schemas.RestResponsePageResponseWorkflowExecution
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponsePageResponseWorkflowExecution,
    ListExecutionsError,
    Schemas.RestResponsePageResponseWorkflowExecution
  >(
    queryKeyFn({ path: '/executions', operationId: 'listExecutions', variables }),
    () => fetchListExecutions({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type TriggerExecutionQueryParams = {
  appId?: string
  envId?: string
  pipelineId?: string
}

export type TriggerExecutionError = Fetcher.ErrorWrapper<undefined>

export type TriggerExecutionVariables = {
  body?: RequestBodies.ExecutionArgs
  queryParams?: TriggerExecutionQueryParams
} & PortalContext['fetcherOptions']

export const fetchTriggerExecution = (variables: TriggerExecutionVariables) =>
  portalFetch<
    Schemas.RestResponseWorkflowExecution,
    TriggerExecutionError,
    RequestBodies.ExecutionArgs,
    {},
    TriggerExecutionQueryParams,
    {}
  >({ url: '/executions', method: 'post', ...variables })

export const useTriggerExecution = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.RestResponseWorkflowExecution,
      TriggerExecutionError,
      TriggerExecutionVariables
    >,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<
    Schemas.RestResponseWorkflowExecution,
    TriggerExecutionError,
    TriggerExecutionVariables
  >((variables: TriggerExecutionVariables) => fetchTriggerExecution({ ...fetcherOptions, ...variables }), options)
}

export type GetExecutionDetailsPathParams = {
  workflowExecutionId: string
}

export type GetExecutionDetailsQueryParams = {
  appId?: string
  envId?: string
}

export type GetExecutionDetailsError = Fetcher.ErrorWrapper<undefined>

export type GetExecutionDetailsVariables = {
  pathParams: GetExecutionDetailsPathParams
  queryParams?: GetExecutionDetailsQueryParams
} & PortalContext['fetcherOptions']

export const fetchGetExecutionDetails = (variables: GetExecutionDetailsVariables) =>
  portalFetch<
    Schemas.RestResponseWorkflowExecution,
    GetExecutionDetailsError,
    undefined,
    {},
    GetExecutionDetailsQueryParams,
    GetExecutionDetailsPathParams
  >({ url: '/executions/{workflowExecutionId}', method: 'get', ...variables })

export const useGetExecutionDetails = (
  variables: GetExecutionDetailsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponseWorkflowExecution,
      GetExecutionDetailsError,
      Schemas.RestResponseWorkflowExecution
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponseWorkflowExecution,
    GetExecutionDetailsError,
    Schemas.RestResponseWorkflowExecution
  >(
    queryKeyFn({ path: '/executions/{workflowExecutionId}', operationId: 'getExecutionDetails', variables }),
    () => fetchGetExecutionDetails({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type TriggerWorkflowExecutionInterruptPathParams = {
  workflowExecutionId: string
}

export type TriggerWorkflowExecutionInterruptQueryParams = {
  appId?: string
}

export type TriggerWorkflowExecutionInterruptError = Fetcher.ErrorWrapper<undefined>

export type TriggerWorkflowExecutionInterruptVariables = {
  body: Schemas.ExecutionInterrupt
  pathParams: TriggerWorkflowExecutionInterruptPathParams
  queryParams?: TriggerWorkflowExecutionInterruptQueryParams
} & PortalContext['fetcherOptions']

export const fetchTriggerWorkflowExecutionInterrupt = (variables: TriggerWorkflowExecutionInterruptVariables) =>
  portalFetch<
    Schemas.RestResponseExecutionInterrupt,
    TriggerWorkflowExecutionInterruptError,
    Schemas.ExecutionInterrupt,
    {},
    TriggerWorkflowExecutionInterruptQueryParams,
    TriggerWorkflowExecutionInterruptPathParams
  >({ url: '/executions/{workflowExecutionId}', method: 'put', ...variables })

export const useTriggerWorkflowExecutionInterrupt = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.RestResponseExecutionInterrupt,
      TriggerWorkflowExecutionInterruptError,
      TriggerWorkflowExecutionInterruptVariables
    >,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<
    Schemas.RestResponseExecutionInterrupt,
    TriggerWorkflowExecutionInterruptError,
    TriggerWorkflowExecutionInterruptVariables
  >(
    (variables: TriggerWorkflowExecutionInterruptVariables) =>
      fetchTriggerWorkflowExecutionInterrupt({ ...fetcherOptions, ...variables }),
    options
  )
}

export type ContinueExecutionQueryParams = {
  appId?: string
  pipelineStageElementId?: string
  pipelineExecutionId?: string
}

export type ContinueExecutionError = Fetcher.ErrorWrapper<undefined>

export type ContinueExecutionVariables = {
  body?: RequestBodies.ExecutionArgs
  queryParams?: ContinueExecutionQueryParams
} & PortalContext['fetcherOptions']

export const fetchContinueExecution = (variables: ContinueExecutionVariables) =>
  portalFetch<
    Schemas.RestResponseBoolean,
    ContinueExecutionError,
    RequestBodies.ExecutionArgs,
    {},
    ContinueExecutionQueryParams,
    {}
  >({ url: '/executions/continueExecution', method: 'post', ...variables })

export const useContinueExecution = (
  options?: Omit<
    reactQuery.UseMutationOptions<Schemas.RestResponseBoolean, ContinueExecutionError, ContinueExecutionVariables>,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<Schemas.RestResponseBoolean, ContinueExecutionError, ContinueExecutionVariables>(
    (variables: ContinueExecutionVariables) => fetchContinueExecution({ ...fetcherOptions, ...variables }),
    options
  )
}

export type TriggerPipelineResumeExecutionQueryParams = {
  appId?: string
  /*
   * @format int32
   */
  parallelIndexToResume?: number
  workflowExecutionId?: string
}

export type TriggerPipelineResumeExecutionError = Fetcher.ErrorWrapper<undefined>

export type TriggerPipelineResumeExecutionVariables = {
  queryParams?: TriggerPipelineResumeExecutionQueryParams
} & PortalContext['fetcherOptions']

export const fetchTriggerPipelineResumeExecution = (variables: TriggerPipelineResumeExecutionVariables) =>
  portalFetch<
    Schemas.RestResponseWorkflowExecution,
    TriggerPipelineResumeExecutionError,
    undefined,
    {},
    TriggerPipelineResumeExecutionQueryParams,
    {}
  >({ url: '/executions/triggerResume', method: 'post', ...variables })

export const useTriggerPipelineResumeExecution = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.RestResponseWorkflowExecution,
      TriggerPipelineResumeExecutionError,
      TriggerPipelineResumeExecutionVariables
    >,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<
    Schemas.RestResponseWorkflowExecution,
    TriggerPipelineResumeExecutionError,
    TriggerPipelineResumeExecutionVariables
  >(
    (variables: TriggerPipelineResumeExecutionVariables) =>
      fetchTriggerPipelineResumeExecution({ ...fetcherOptions, ...variables }),
    options
  )
}

export type GetResumeStagesQueryParams = {
  appId?: string
  workflowExecutionId?: string
}

export type GetResumeStagesError = Fetcher.ErrorWrapper<undefined>

export type GetResumeStagesVariables = {
  queryParams?: GetResumeStagesQueryParams
} & PortalContext['fetcherOptions']

export const fetchGetResumeStages = (variables: GetResumeStagesVariables) =>
  portalFetch<
    Schemas.RestResponseListPipelineStageGroupedInfo,
    GetResumeStagesError,
    undefined,
    {},
    GetResumeStagesQueryParams,
    {}
  >({ url: '/executions/resumeStages', method: 'get', ...variables })

export const useGetResumeStages = (
  variables: GetResumeStagesVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponseListPipelineStageGroupedInfo,
      GetResumeStagesError,
      Schemas.RestResponseListPipelineStageGroupedInfo
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponseListPipelineStageGroupedInfo,
    GetResumeStagesError,
    Schemas.RestResponseListPipelineStageGroupedInfo
  >(
    queryKeyFn({ path: '/executions/resumeStages', operationId: 'getResumeStages', variables }),
    () => fetchGetResumeStages({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type GetResumeHistoryQueryParams = {
  appId?: string
  workflowExecutionId?: string
}

export type GetResumeHistoryError = Fetcher.ErrorWrapper<undefined>

export type GetResumeHistoryVariables = {
  queryParams?: GetResumeHistoryQueryParams
} & PortalContext['fetcherOptions']

export const fetchGetResumeHistory = (variables: GetResumeHistoryVariables) =>
  portalFetch<
    Schemas.RestResponseListWorkflowExecution,
    GetResumeHistoryError,
    undefined,
    {},
    GetResumeHistoryQueryParams,
    {}
  >({ url: '/executions/resumeHistory', method: 'get', ...variables })

export const useGetResumeHistory = (
  variables: GetResumeHistoryVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponseListWorkflowExecution,
      GetResumeHistoryError,
      Schemas.RestResponseListWorkflowExecution
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponseListWorkflowExecution,
    GetResumeHistoryError,
    Schemas.RestResponseListWorkflowExecution
  >(
    queryKeyFn({ path: '/executions/resumeHistory', operationId: 'getResumeHistory', variables }),
    () => fetchGetResumeHistory({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type TriggerRollbackExecutionQueryParams = {
  appId?: string
  workflowExecutionId?: string
}

export type TriggerRollbackExecutionError = Fetcher.ErrorWrapper<undefined>

export type TriggerRollbackExecutionVariables = {
  queryParams?: TriggerRollbackExecutionQueryParams
} & PortalContext['fetcherOptions']

export const fetchTriggerRollbackExecution = (variables: TriggerRollbackExecutionVariables) =>
  portalFetch<
    Schemas.RestResponseWorkflowExecution,
    TriggerRollbackExecutionError,
    undefined,
    {},
    TriggerRollbackExecutionQueryParams,
    {}
  >({ url: '/executions/triggerRollback', method: 'post', ...variables })

export const useTriggerRollbackExecution = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.RestResponseWorkflowExecution,
      TriggerRollbackExecutionError,
      TriggerRollbackExecutionVariables
    >,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<
    Schemas.RestResponseWorkflowExecution,
    TriggerRollbackExecutionError,
    TriggerRollbackExecutionVariables
  >(
    (variables: TriggerRollbackExecutionVariables) =>
      fetchTriggerRollbackExecution({ ...fetcherOptions, ...variables }),
    options
  )
}

export type GetRollbackConfirmationQueryParams = {
  appId?: string
  workflowExecutionId?: string
}

export type GetRollbackConfirmationError = Fetcher.ErrorWrapper<undefined>

export type GetRollbackConfirmationVariables = {
  queryParams?: GetRollbackConfirmationQueryParams
} & PortalContext['fetcherOptions']

export const fetchGetRollbackConfirmation = (variables: GetRollbackConfirmationVariables) =>
  portalFetch<
    Schemas.RestResponseRollbackConfirmation,
    GetRollbackConfirmationError,
    undefined,
    {},
    GetRollbackConfirmationQueryParams,
    {}
  >({ url: '/executions/rollbackConfirmation', method: 'get', ...variables })

export const useGetRollbackConfirmation = (
  variables: GetRollbackConfirmationVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponseRollbackConfirmation,
      GetRollbackConfirmationError,
      Schemas.RestResponseRollbackConfirmation
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponseRollbackConfirmation,
    GetRollbackConfirmationError,
    Schemas.RestResponseRollbackConfirmation
  >(
    queryKeyFn({ path: '/executions/rollbackConfirmation', operationId: 'getRollbackConfirmation', variables }),
    () => fetchGetRollbackConfirmation({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type UpdateNotesPathParams = {
  workflowExecutionId: string
}

export type UpdateNotesQueryParams = {
  appId?: string
}

export type UpdateNotesError = Fetcher.ErrorWrapper<undefined>

export type UpdateNotesVariables = {
  body?: RequestBodies.ExecutionArgs
  pathParams: UpdateNotesPathParams
  queryParams?: UpdateNotesQueryParams
} & PortalContext['fetcherOptions']

export const fetchUpdateNotes = (variables: UpdateNotesVariables) =>
  portalFetch<
    Schemas.RestResponseBoolean,
    UpdateNotesError,
    RequestBodies.ExecutionArgs,
    {},
    UpdateNotesQueryParams,
    UpdateNotesPathParams
  >({ url: '/executions/{workflowExecutionId}/notes', method: 'put', ...variables })

export const useUpdateNotes = (
  options?: Omit<
    reactQuery.UseMutationOptions<Schemas.RestResponseBoolean, UpdateNotesError, UpdateNotesVariables>,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<Schemas.RestResponseBoolean, UpdateNotesError, UpdateNotesVariables>(
    (variables: UpdateNotesVariables) => fetchUpdateNotes({ ...fetcherOptions, ...variables }),
    options
  )
}

export type ApproveOrRejectExecutionPathParams = {
  workflowExecutionId: string
}

export type ApproveOrRejectExecutionQueryParams = {
  appId?: string
  stateExecutionId?: string
}

export type ApproveOrRejectExecutionError = Fetcher.ErrorWrapper<undefined>

export type ApproveOrRejectExecutionVariables = {
  body?: Schemas.ApprovalDetails
  pathParams: ApproveOrRejectExecutionPathParams
  queryParams?: ApproveOrRejectExecutionQueryParams
} & PortalContext['fetcherOptions']

export const fetchApproveOrRejectExecution = (variables: ApproveOrRejectExecutionVariables) =>
  portalFetch<
    Schemas.RestResponse,
    ApproveOrRejectExecutionError,
    Schemas.ApprovalDetails,
    {},
    ApproveOrRejectExecutionQueryParams,
    ApproveOrRejectExecutionPathParams
  >({ url: '/executions/{workflowExecutionId}/approval', method: 'put', ...variables })

export const useApproveOrRejectExecution = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.RestResponse,
      ApproveOrRejectExecutionError,
      ApproveOrRejectExecutionVariables
    >,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<Schemas.RestResponse, ApproveOrRejectExecutionError, ApproveOrRejectExecutionVariables>(
    (variables: ApproveOrRejectExecutionVariables) =>
      fetchApproveOrRejectExecution({ ...fetcherOptions, ...variables }),
    options
  )
}

export type RequiredArgsQueryParams = {
  appId?: string
  envId?: string
}

export type RequiredArgsError = Fetcher.ErrorWrapper<undefined>

export type RequiredArgsVariables = {
  body?: RequestBodies.ExecutionArgs
  queryParams?: RequiredArgsQueryParams
} & PortalContext['fetcherOptions']

export const fetchRequiredArgs = (variables: RequiredArgsVariables) =>
  portalFetch<
    Schemas.RestResponseRequiredExecutionArgs,
    RequiredArgsError,
    RequestBodies.ExecutionArgs,
    {},
    RequiredArgsQueryParams,
    {}
  >({ url: '/executions/required-args', method: 'post', ...variables })

export const useRequiredArgs = (
  options?: Omit<
    reactQuery.UseMutationOptions<Schemas.RestResponseRequiredExecutionArgs, RequiredArgsError, RequiredArgsVariables>,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<Schemas.RestResponseRequiredExecutionArgs, RequiredArgsError, RequiredArgsVariables>(
    (variables: RequiredArgsVariables) => fetchRequiredArgs({ ...fetcherOptions, ...variables }),
    options
  )
}

export type GetDeploymentMetadataQueryParams = {
  appId?: string
  withDefaultArtifact?: boolean
  workflowExecutionId?: string
  /*
   * @default false
   */
  isRunningExecution?: boolean
  pipelineStageElementId?: string
  withLastDeployedInfo?: boolean
}

export type GetDeploymentMetadataError = Fetcher.ErrorWrapper<undefined>

export type GetDeploymentMetadataVariables = {
  body?: RequestBodies.ExecutionArgs
  queryParams?: GetDeploymentMetadataQueryParams
} & PortalContext['fetcherOptions']

export const fetchGetDeploymentMetadata = (variables: GetDeploymentMetadataVariables) =>
  portalFetch<
    Schemas.RestResponseDeploymentMetadata,
    GetDeploymentMetadataError,
    RequestBodies.ExecutionArgs,
    {},
    GetDeploymentMetadataQueryParams,
    {}
  >({ url: '/executions/deployment-metadata', method: 'post', ...variables })

export const useGetDeploymentMetadata = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.RestResponseDeploymentMetadata,
      GetDeploymentMetadataError,
      GetDeploymentMetadataVariables
    >,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<
    Schemas.RestResponseDeploymentMetadata,
    GetDeploymentMetadataError,
    GetDeploymentMetadataVariables
  >(
    (variables: GetDeploymentMetadataVariables) => fetchGetDeploymentMetadata({ ...fetcherOptions, ...variables }),
    options
  )
}

export type GetExecutionNodeDetailsPathParams = {
  workflowExecutionId: string
  stateExecutionInstanceId: string
}

export type GetExecutionNodeDetailsQueryParams = {
  appId?: string
  envId?: string
}

export type GetExecutionNodeDetailsError = Fetcher.ErrorWrapper<undefined>

export type GetExecutionNodeDetailsVariables = {
  pathParams: GetExecutionNodeDetailsPathParams
  queryParams?: GetExecutionNodeDetailsQueryParams
} & PortalContext['fetcherOptions']

export const fetchGetExecutionNodeDetails = (variables: GetExecutionNodeDetailsVariables) =>
  portalFetch<
    Schemas.RestResponseGraphNode,
    GetExecutionNodeDetailsError,
    undefined,
    {},
    GetExecutionNodeDetailsQueryParams,
    GetExecutionNodeDetailsPathParams
  >({ url: '/executions/{workflowExecutionId}/node/{stateExecutionInstanceId}', method: 'get', ...variables })

export const useGetExecutionNodeDetails = (
  variables: GetExecutionNodeDetailsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponseGraphNode,
      GetExecutionNodeDetailsError,
      Schemas.RestResponseGraphNode
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponseGraphNode,
    GetExecutionNodeDetailsError,
    Schemas.RestResponseGraphNode
  >(
    queryKeyFn({
      path: '/executions/{workflowExecutionId}/node/{stateExecutionInstanceId}',
      operationId: 'getExecutionNodeDetails',
      variables
    }),
    () => fetchGetExecutionNodeDetails({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type GetExecutionHistoryPathParams = {
  workflowExecutionId: string
  stateExecutionInstanceId: string
}

export type GetExecutionHistoryQueryParams = {
  appId?: string
}

export type GetExecutionHistoryError = Fetcher.ErrorWrapper<undefined>

export type GetExecutionHistoryVariables = {
  pathParams: GetExecutionHistoryPathParams
  queryParams?: GetExecutionHistoryQueryParams
} & PortalContext['fetcherOptions']

export const fetchGetExecutionHistory = (variables: GetExecutionHistoryVariables) =>
  portalFetch<
    Schemas.RestResponseListStateExecutionData,
    GetExecutionHistoryError,
    undefined,
    {},
    GetExecutionHistoryQueryParams,
    GetExecutionHistoryPathParams
  >({ url: '/executions/{workflowExecutionId}/history/{stateExecutionInstanceId}', method: 'get', ...variables })

export const useGetExecutionHistory = (
  variables: GetExecutionHistoryVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponseListStateExecutionData,
      GetExecutionHistoryError,
      Schemas.RestResponseListStateExecutionData
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponseListStateExecutionData,
    GetExecutionHistoryError,
    Schemas.RestResponseListStateExecutionData
  >(
    queryKeyFn({
      path: '/executions/{workflowExecutionId}/history/{stateExecutionInstanceId}',
      operationId: 'getExecutionHistory',
      variables
    }),
    () => fetchGetExecutionHistory({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type GetExecutionInterruptPathParams = {
  workflowExecutionId: string
  stateExecutionInstanceId: string
}

export type GetExecutionInterruptQueryParams = {
  appId?: string
}

export type GetExecutionInterruptError = Fetcher.ErrorWrapper<undefined>

export type GetExecutionInterruptVariables = {
  pathParams: GetExecutionInterruptPathParams
  queryParams?: GetExecutionInterruptQueryParams
} & PortalContext['fetcherOptions']

export const fetchGetExecutionInterrupt = (variables: GetExecutionInterruptVariables) =>
  portalFetch<
    Schemas.RestResponseListStateExecutionInterrupt,
    GetExecutionInterruptError,
    undefined,
    {},
    GetExecutionInterruptQueryParams,
    GetExecutionInterruptPathParams
  >({ url: '/executions/{workflowExecutionId}/interruption/{stateExecutionInstanceId}', method: 'get', ...variables })

export const useGetExecutionInterrupt = (
  variables: GetExecutionInterruptVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponseListStateExecutionInterrupt,
      GetExecutionInterruptError,
      Schemas.RestResponseListStateExecutionInterrupt
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponseListStateExecutionInterrupt,
    GetExecutionInterruptError,
    Schemas.RestResponseListStateExecutionInterrupt
  >(
    queryKeyFn({
      path: '/executions/{workflowExecutionId}/interruption/{stateExecutionInstanceId}',
      operationId: 'getExecutionInterrupt',
      variables
    }),
    () => fetchGetExecutionInterrupt({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type GetExecutionInspectionPathParams = {
  workflowExecutionId: string
  stateExecutionInstanceId: string
}

export type GetExecutionInspectionQueryParams = {
  appId?: string
}

export type GetExecutionInspectionError = Fetcher.ErrorWrapper<undefined>

export type GetExecutionInspectionVariables = {
  pathParams: GetExecutionInspectionPathParams
  queryParams?: GetExecutionInspectionQueryParams
} & PortalContext['fetcherOptions']

export const fetchGetExecutionInspection = (variables: GetExecutionInspectionVariables) =>
  portalFetch<
    Schemas.RestResponseStateInspection,
    GetExecutionInspectionError,
    undefined,
    {},
    GetExecutionInspectionQueryParams,
    GetExecutionInspectionPathParams
  >({ url: '/executions/{workflowExecutionId}/inspection/{stateExecutionInstanceId}', method: 'get', ...variables })

export const useGetExecutionInspection = (
  variables: GetExecutionInspectionVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponseStateInspection,
      GetExecutionInspectionError,
      Schemas.RestResponseStateInspection
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponseStateInspection,
    GetExecutionInspectionError,
    Schemas.RestResponseStateInspection
  >(
    queryKeyFn({
      path: '/executions/{workflowExecutionId}/inspection/{stateExecutionInstanceId}',
      operationId: 'getExecutionInspection',
      variables
    }),
    () => fetchGetExecutionInspection({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type GetExecutionElementPathParams = {
  workflowExecutionId: string
  stateExecutionInstanceId: string
}

export type GetExecutionElementQueryParams = {
  appId?: string
}

export type GetExecutionElementError = Fetcher.ErrorWrapper<undefined>

export type GetExecutionElementVariables = {
  pathParams: GetExecutionElementPathParams
  queryParams?: GetExecutionElementQueryParams
} & PortalContext['fetcherOptions']

export const fetchGetExecutionElement = (variables: GetExecutionElementVariables) =>
  portalFetch<
    Schemas.RestResponseListStateExecutionElement,
    GetExecutionElementError,
    undefined,
    {},
    GetExecutionElementQueryParams,
    GetExecutionElementPathParams
  >({ url: '/executions/{workflowExecutionId}/element/{stateExecutionInstanceId}', method: 'get', ...variables })

export const useGetExecutionElement = (
  variables: GetExecutionElementVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponseListStateExecutionElement,
      GetExecutionElementError,
      Schemas.RestResponseListStateExecutionElement
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponseListStateExecutionElement,
    GetExecutionElementError,
    Schemas.RestResponseListStateExecutionElement
  >(
    queryKeyFn({
      path: '/executions/{workflowExecutionId}/element/{stateExecutionInstanceId}',
      operationId: 'getExecutionElement',
      variables
    }),
    () => fetchGetExecutionElement({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type MarkAsBaselinePathParams = {
  workflowExecutionId: string
}

export type MarkAsBaselineQueryParams = {
  appId?: string
  isBaseline?: boolean
}

export type MarkAsBaselineError = Fetcher.ErrorWrapper<undefined>

export type MarkAsBaselineVariables = {
  pathParams: MarkAsBaselinePathParams
  queryParams?: MarkAsBaselineQueryParams
} & PortalContext['fetcherOptions']

export const fetchMarkAsBaseline = (variables: MarkAsBaselineVariables) =>
  portalFetch<
    Schemas.RestResponseSetWorkflowExecutionBaseline,
    MarkAsBaselineError,
    undefined,
    {},
    MarkAsBaselineQueryParams,
    MarkAsBaselinePathParams
  >({ url: '/executions/{workflowExecutionId}/mark-baseline', method: 'get', ...variables })

export const useMarkAsBaseline = (
  variables: MarkAsBaselineVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponseSetWorkflowExecutionBaseline,
      MarkAsBaselineError,
      Schemas.RestResponseSetWorkflowExecutionBaseline
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponseSetWorkflowExecutionBaseline,
    MarkAsBaselineError,
    Schemas.RestResponseSetWorkflowExecutionBaseline
  >(
    queryKeyFn({ path: '/executions/{workflowExecutionId}/mark-baseline', operationId: 'markAsBaseline', variables }),
    () => fetchMarkAsBaseline({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type GetBaselineDetailsPathParams = {
  workflowExecutionId: string
}

export type GetBaselineDetailsQueryParams = {
  appId?: string
  stateExecutionId?: string
  currentExecId?: string
}

export type GetBaselineDetailsError = Fetcher.ErrorWrapper<undefined>

export type GetBaselineDetailsVariables = {
  pathParams: GetBaselineDetailsPathParams
  queryParams?: GetBaselineDetailsQueryParams
} & PortalContext['fetcherOptions']

export const fetchGetBaselineDetails = (variables: GetBaselineDetailsVariables) =>
  portalFetch<
    Schemas.RestResponseWorkflowExecutionBaseline,
    GetBaselineDetailsError,
    undefined,
    {},
    GetBaselineDetailsQueryParams,
    GetBaselineDetailsPathParams
  >({ url: '/executions/{workflowExecutionId}/get-baseline', method: 'get', ...variables })

export const useGetBaselineDetails = (
  variables: GetBaselineDetailsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponseWorkflowExecutionBaseline,
      GetBaselineDetailsError,
      Schemas.RestResponseWorkflowExecutionBaseline
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponseWorkflowExecutionBaseline,
    GetBaselineDetailsError,
    Schemas.RestResponseWorkflowExecutionBaseline
  >(
    queryKeyFn({
      path: '/executions/{workflowExecutionId}/get-baseline',
      operationId: 'getBaselineDetails',
      variables
    }),
    () => fetchGetBaselineDetails({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type GetLastDeployedArtifactsQueryParams = {
  appId?: string
  workflowId?: string
}

export type GetLastDeployedArtifactsError = Fetcher.ErrorWrapper<undefined>

export type GetLastDeployedArtifactsVariables = {
  queryParams?: GetLastDeployedArtifactsQueryParams
} & PortalContext['fetcherOptions']

export const fetchGetLastDeployedArtifacts = (variables: GetLastDeployedArtifactsVariables) =>
  portalFetch<
    Schemas.RestResponseListArtifact,
    GetLastDeployedArtifactsError,
    undefined,
    {},
    GetLastDeployedArtifactsQueryParams,
    {}
  >({ url: '/executions/artifacts', method: 'get', ...variables })

export const useGetLastDeployedArtifacts = (
  variables: GetLastDeployedArtifactsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponseListArtifact,
      GetLastDeployedArtifactsError,
      Schemas.RestResponseListArtifact
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponseListArtifact,
    GetLastDeployedArtifactsError,
    Schemas.RestResponseListArtifact
  >(
    queryKeyFn({ path: '/executions/artifacts', operationId: 'getLastDeployedArtifacts', variables }),
    () => fetchGetLastDeployedArtifacts({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type GetWaitingOnDeploymentsPathParams = {
  workflowExecutionId: string
}

export type GetWaitingOnDeploymentsQueryParams = {
  appId?: string
}

export type GetWaitingOnDeploymentsError = Fetcher.ErrorWrapper<undefined>

export type GetWaitingOnDeploymentsVariables = {
  pathParams: GetWaitingOnDeploymentsPathParams
  queryParams?: GetWaitingOnDeploymentsQueryParams
} & PortalContext['fetcherOptions']

export const fetchGetWaitingOnDeployments = (variables: GetWaitingOnDeploymentsVariables) =>
  portalFetch<
    Schemas.RestResponseListWorkflowExecution,
    GetWaitingOnDeploymentsError,
    undefined,
    {},
    GetWaitingOnDeploymentsQueryParams,
    GetWaitingOnDeploymentsPathParams
  >({ url: '/executions/{workflowExecutionId}/waitingOnDeployments', method: 'get', ...variables })

export const useGetWaitingOnDeployments = (
  variables: GetWaitingOnDeploymentsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponseListWorkflowExecution,
      GetWaitingOnDeploymentsError,
      Schemas.RestResponseListWorkflowExecution
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponseListWorkflowExecution,
    GetWaitingOnDeploymentsError,
    Schemas.RestResponseListWorkflowExecution
  >(
    queryKeyFn({
      path: '/executions/{workflowExecutionId}/waitingOnDeployments',
      operationId: 'getWaitingOnDeployments',
      variables
    }),
    () => fetchGetWaitingOnDeployments({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type GetApprovalAuthorizationPathParams = {
  workflowExecutionId: string
}

export type GetApprovalAuthorizationQueryParams = {
  appId?: string
  userGroups?: string[]
}

export type GetApprovalAuthorizationError = Fetcher.ErrorWrapper<undefined>

export type GetApprovalAuthorizationVariables = {
  pathParams: GetApprovalAuthorizationPathParams
  queryParams?: GetApprovalAuthorizationQueryParams
} & PortalContext['fetcherOptions']

export const fetchGetApprovalAuthorization = (variables: GetApprovalAuthorizationVariables) =>
  portalFetch<
    Schemas.RestResponseApprovalAuthorization,
    GetApprovalAuthorizationError,
    undefined,
    {},
    GetApprovalAuthorizationQueryParams,
    GetApprovalAuthorizationPathParams
  >({ url: '/executions/{workflowExecutionId}/approvalAuthorization', method: 'get', ...variables })

export const useGetApprovalAuthorization = (
  variables: GetApprovalAuthorizationVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponseApprovalAuthorization,
      GetApprovalAuthorizationError,
      Schemas.RestResponseApprovalAuthorization
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponseApprovalAuthorization,
    GetApprovalAuthorizationError,
    Schemas.RestResponseApprovalAuthorization
  >(
    queryKeyFn({
      path: '/executions/{workflowExecutionId}/approvalAuthorization',
      operationId: 'getApprovalAuthorization',
      variables
    }),
    () => fetchGetApprovalAuthorization({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type GetExecutionsForConstraintPathParams = {
  workflowExecutionId: string
}

export type GetExecutionsForConstraintQueryParams = {
  appId?: string
  unit?: string
  resourceConstraintName?: string
}

export type GetExecutionsForConstraintError = Fetcher.ErrorWrapper<undefined>

export type GetExecutionsForConstraintVariables = {
  pathParams: GetExecutionsForConstraintPathParams
  queryParams?: GetExecutionsForConstraintQueryParams
} & PortalContext['fetcherOptions']

export const fetchGetExecutionsForConstraint = (variables: GetExecutionsForConstraintVariables) =>
  portalFetch<
    Schemas.RestResponseConcurrentExecutionResponse,
    GetExecutionsForConstraintError,
    undefined,
    {},
    GetExecutionsForConstraintQueryParams,
    GetExecutionsForConstraintPathParams
  >({ url: '/executions/{workflowExecutionId}/constraint-executions', method: 'get', ...variables })

export const useGetExecutionsForConstraint = (
  variables: GetExecutionsForConstraintVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponseConcurrentExecutionResponse,
      GetExecutionsForConstraintError,
      Schemas.RestResponseConcurrentExecutionResponse
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponseConcurrentExecutionResponse,
    GetExecutionsForConstraintError,
    Schemas.RestResponseConcurrentExecutionResponse
  >(
    queryKeyFn({
      path: '/executions/{workflowExecutionId}/constraint-executions',
      operationId: 'getExecutionsForConstraint',
      variables
    }),
    () => fetchGetExecutionsForConstraint({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type GetNodeSubGraphsPathParams = {
  workflowExecutionId: string
}

export type GetNodeSubGraphsQueryParams = {
  appId?: string
}

export type GetNodeSubGraphsError = Fetcher.ErrorWrapper<undefined>

export type GetNodeSubGraphsRequestBody = {
  [key: string]: string[]
}

export type GetNodeSubGraphsVariables = {
  body?: GetNodeSubGraphsRequestBody
  pathParams: GetNodeSubGraphsPathParams
  queryParams?: GetNodeSubGraphsQueryParams
} & PortalContext['fetcherOptions']

export const fetchGetNodeSubGraphs = (variables: GetNodeSubGraphsVariables) =>
  portalFetch<
    Schemas.RestResponseMapStringGraphGroup,
    GetNodeSubGraphsError,
    GetNodeSubGraphsRequestBody,
    {},
    GetNodeSubGraphsQueryParams,
    GetNodeSubGraphsPathParams
  >({ url: '/executions/nodeSubGraphs/{workflowExecutionId}', method: 'post', ...variables })

export const useGetNodeSubGraphs = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.RestResponseMapStringGraphGroup,
      GetNodeSubGraphsError,
      GetNodeSubGraphsVariables
    >,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<
    Schemas.RestResponseMapStringGraphGroup,
    GetNodeSubGraphsError,
    GetNodeSubGraphsVariables
  >((variables: GetNodeSubGraphsVariables) => fetchGetNodeSubGraphs({ ...fetcherOptions, ...variables }), options)
}

export type GetWorkflowExecutionInfoPathParams = {
  workflowExecutionId: string
}

export type GetWorkflowExecutionInfoError = Fetcher.ErrorWrapper<undefined>

export type GetWorkflowExecutionInfoVariables = {
  pathParams: GetWorkflowExecutionInfoPathParams
} & PortalContext['fetcherOptions']

export const fetchGetWorkflowExecutionInfo = (variables: GetWorkflowExecutionInfoVariables) =>
  portalFetch<
    Schemas.RestResponseWorkflowExecutionInfo,
    GetWorkflowExecutionInfoError,
    undefined,
    {},
    {},
    GetWorkflowExecutionInfoPathParams
  >({ url: '/executions/info/{workflowExecutionId}', method: 'get', ...variables })

export const useGetWorkflowExecutionInfo = (
  variables: GetWorkflowExecutionInfoVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponseWorkflowExecutionInfo,
      GetWorkflowExecutionInfoError,
      Schemas.RestResponseWorkflowExecutionInfo
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponseWorkflowExecutionInfo,
    GetWorkflowExecutionInfoError,
    Schemas.RestResponseWorkflowExecutionInfo
  >(
    queryKeyFn({ path: '/executions/info/{workflowExecutionId}', operationId: 'getWorkflowExecutionInfo', variables }),
    () => fetchGetWorkflowExecutionInfo({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type GetLogExpAnalysisInfoQueryParams = {
  accountId?: string
}

export type GetLogExpAnalysisInfoError = Fetcher.ErrorWrapper<undefined>

export type GetLogExpAnalysisInfoVariables = {
  queryParams?: GetLogExpAnalysisInfoQueryParams
} & PortalContext['fetcherOptions']

export const fetchGetLogExpAnalysisInfo = (variables: GetLogExpAnalysisInfoVariables) =>
  portalFetch<
    Schemas.RestResponseListExpAnalysisInfo,
    GetLogExpAnalysisInfoError,
    undefined,
    {},
    GetLogExpAnalysisInfoQueryParams,
    {}
  >({ url: '/learning-exp/get-exp-analysis-info', method: 'get', ...variables })

export const useGetLogExpAnalysisInfo = (
  variables: GetLogExpAnalysisInfoVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponseListExpAnalysisInfo,
      GetLogExpAnalysisInfoError,
      Schemas.RestResponseListExpAnalysisInfo
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponseListExpAnalysisInfo,
    GetLogExpAnalysisInfoError,
    Schemas.RestResponseListExpAnalysisInfo
  >(
    queryKeyFn({ path: '/learning-exp/get-exp-analysis-info', operationId: 'getLogExpAnalysisInfo', variables }),
    () => fetchGetLogExpAnalysisInfo({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type GetLogAnalysisSummaryQueryParams = {
  accountId?: string
  applicationId?: string
  stateExecutionId?: string
  stateType?:
    | 'SUB_WORKFLOW'
    | 'REPEAT'
    | 'FORK'
    | 'WAIT'
    | 'PAUSE'
    | 'BARRIER'
    | 'RESOURCE_CONSTRAINT'
    | 'SHELL_SCRIPT'
    | 'HTTP'
    | 'TEMPLATIZED_SECRET_MANAGER'
    | 'EMAIL'
    | 'APP_DYNAMICS'
    | 'NEW_RELIC'
    | 'NEW_RELIC_DEPLOYMENT_MARKER'
    | 'DYNA_TRACE'
    | 'PROMETHEUS'
    | 'SPLUNKV2'
    | 'ELK'
    | 'LOGZ'
    | 'SUMO'
    | 'DATA_DOG'
    | 'DATA_DOG_LOG'
    | 'CVNG'
    | 'CLOUD_WATCH'
    | 'AWS_LAMBDA_VERIFICATION'
    | 'APM_VERIFICATION'
    | 'LOG_VERIFICATION'
    | 'BUG_SNAG'
    | 'STACK_DRIVER'
    | 'STACK_DRIVER_LOG'
    | 'INSTANA'
    | 'SCALYR'
    | 'ENV_STATE'
    | 'ENV_LOOP_STATE'
    | 'ENV_RESUME_STATE'
    | 'ENV_LOOP_RESUME_STATE'
    | 'COMMAND'
    | 'APPROVAL'
    | 'APPROVAL_RESUME'
    | 'ELASTIC_LOAD_BALANCER'
    | 'JENKINS'
    | 'GCB'
    | 'BAMBOO'
    | 'ARTIFACT_COLLECTION'
    | 'ARTIFACT_CHECK'
    | 'AZURE_NODE_SELECT'
    | 'AZURE_VMSS_SETUP'
    | 'AZURE_VMSS_DEPLOY'
    | 'AZURE_VMSS_ROLLBACK'
    | 'AZURE_VMSS_SWITCH_ROUTES'
    | 'AZURE_VMSS_SWITCH_ROUTES_ROLLBACK'
    | 'AZURE_WEBAPP_SLOT_SETUP'
    | 'AZURE_WEBAPP_SLOT_SWAP'
    | 'AZURE_WEBAPP_SLOT_SHIFT_TRAFFIC'
    | 'AZURE_WEBAPP_SLOT_ROLLBACK'
    | 'AWS_NODE_SELECT'
    | 'DC_NODE_SELECT'
    | 'ROLLING_NODE_SELECT'
    | 'PHASE'
    | 'PHASE_STEP'
    | 'STAGING_ORIGINAL_EXECUTION'
    | 'AWS_CODEDEPLOY_STATE'
    | 'AWS_CODEDEPLOY_ROLLBACK'
    | 'AWS_LAMBDA_STATE'
    | 'AWS_LAMBDA_ROLLBACK'
    | 'AWS_AMI_SERVICE_SETUP'
    | 'ASG_AMI_SERVICE_ALB_SHIFT_SETUP'
    | 'AWS_AMI_SERVICE_DEPLOY'
    | 'ASG_AMI_SERVICE_ALB_SHIFT_DEPLOY'
    | 'AWS_AMI_SWITCH_ROUTES'
    | 'ASG_AMI_ALB_SHIFT_SWITCH_ROUTES'
    | 'AWS_AMI_ROLLBACK_SWITCH_ROUTES'
    | 'ASG_AMI_ROLLBACK_ALB_SHIFT_SWITCH_ROUTES'
    | 'AWS_AMI_SERVICE_ROLLBACK'
    | 'ECS_SERVICE_SETUP'
    | 'SPOTINST_SETUP'
    | 'SPOTINST_ALB_SHIFT_SETUP'
    | 'SPOTINST_DEPLOY'
    | 'SPOTINST_ALB_SHIFT_DEPLOY'
    | 'SPOTINST_LISTENER_UPDATE'
    | 'SPOTINST_LISTENER_ALB_SHIFT'
    | 'SPOTINST_ROLLBACK'
    | 'SPOTINST_LISTENER_UPDATE_ROLLBACK'
    | 'SPOTINST_LISTENER_ALB_SHIFT_ROLLBACK'
    | 'ECS_SERVICE_SETUP_ROLLBACK'
    | 'ECS_DAEMON_SERVICE_SETUP'
    | 'ECS_BG_SERVICE_SETUP'
    | 'ECS_BG_SERVICE_SETUP_ROUTE53'
    | 'ECS_SERVICE_DEPLOY'
    | 'ECS_SERVICE_ROLLBACK'
    | 'ECS_LISTENER_UPDATE'
    | 'ECS_LISTENER_UPDATE_ROLLBACK'
    | 'ECS_ROUTE53_DNS_WEIGHT_UPDATE'
    | 'ECS_ROUTE53_DNS_WEIGHT_UPDATE_ROLLBACK'
    | 'KUBERNETES_SETUP'
    | 'KUBERNETES_SETUP_ROLLBACK'
    | 'KUBERNETES_DEPLOY'
    | 'KUBERNETES_DEPLOY_ROLLBACK'
    | 'KUBERNETES_STEADY_STATE_CHECK'
    | 'ECS_STEADY_STATE_CHECK'
    | 'ECS_RUN_TASK'
    | 'GCP_CLUSTER_SETUP'
    | 'HELM_DEPLOY'
    | 'HELM_ROLLBACK'
    | 'PCF_SETUP'
    | 'PCF_RESIZE'
    | 'PCF_ROLLBACK'
    | 'PCF_MAP_ROUTE'
    | 'PCF_UNMAP_ROUTE'
    | 'PCF_BG_MAP_ROUTE'
    | 'PCF_PLUGIN'
    | 'TERRAFORM_PROVISION'
    | 'TERRAFORM_APPLY'
    | 'TERRAGRUNT_PROVISION'
    | 'TERRAGRUNT_DESTROY'
    | 'TERRAGRUNT_ROLLBACK'
    | 'ARM_CREATE_RESOURCE'
    | 'ARM_ROLLBACK'
    | 'SHELL_SCRIPT_PROVISION'
    | 'TERRAFORM_DESTROY'
    | 'CLOUD_FORMATION_CREATE_STACK'
    | 'CLOUD_FORMATION_DELETE_STACK'
    | 'KUBERNETES_SWAP_SERVICE_SELECTORS'
    | 'CLOUD_FORMATION_ROLLBACK_STACK'
    | 'TERRAFORM_ROLLBACK'
    | 'K8S_DEPLOYMENT_ROLLING'
    | 'K8S_SCALE'
    | 'K8S_DEPLOYMENT_ROLLING_ROLLBACK'
    | 'K8S_BLUE_GREEN_DEPLOY'
    | 'K8S_CANARY_DEPLOY'
    | 'K8S_DELETE'
    | 'RANCHER_RESOLVE'
    | 'RANCHER_K8S_DEPLOYMENT_ROLLING'
    | 'RANCHER_K8S_CANARY_DEPLOY'
    | 'RANCHER_K8S_BLUE_GREEN_DEPLOY'
    | 'RANCHER_KUBERNETES_SWAP_SERVICE_SELECTORS'
    | 'RANCHER_K8S_DELETE'
    | 'RANCHER_K8S_DEPLOYMENT_ROLLING_ROLLBACK'
    | 'JIRA_CREATE_UPDATE'
    | 'SERVICENOW_CREATE_UPDATE'
    | 'K8S_TRAFFIC_SPLIT'
    | 'K8S_APPLY'
    | 'CUSTOM_DEPLOYMENT_FETCH_INSTANCES'
  expName?: string
}

export type GetLogAnalysisSummaryError = Fetcher.ErrorWrapper<undefined>

export type GetLogAnalysisSummaryVariables = {
  queryParams?: GetLogAnalysisSummaryQueryParams
} & PortalContext['fetcherOptions']

export const fetchGetLogAnalysisSummary = (variables: GetLogAnalysisSummaryVariables) =>
  portalFetch<
    Schemas.RestResponseLogMLAnalysisSummary,
    GetLogAnalysisSummaryError,
    undefined,
    {},
    GetLogAnalysisSummaryQueryParams,
    {}
  >({ url: '/learning-exp/get-analysis-summary', method: 'get', ...variables })

export const useGetLogAnalysisSummary = (
  variables: GetLogAnalysisSummaryVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponseLogMLAnalysisSummary,
      GetLogAnalysisSummaryError,
      Schemas.RestResponseLogMLAnalysisSummary
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponseLogMLAnalysisSummary,
    GetLogAnalysisSummaryError,
    Schemas.RestResponseLogMLAnalysisSummary
  >(
    queryKeyFn({ path: '/learning-exp/get-analysis-summary', operationId: 'getLogAnalysisSummary', variables }),
    () => fetchGetLogAnalysisSummary({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type GetMessageComparisonListQueryParams = {
  accountId?: string
  serviceId?: string
}

export type GetMessageComparisonListError = Fetcher.ErrorWrapper<undefined>

export type GetMessageComparisonListVariables = {
  queryParams?: GetMessageComparisonListQueryParams
} & PortalContext['fetcherOptions']

export const fetchGetMessageComparisonList = (variables: GetMessageComparisonListVariables) =>
  portalFetch<
    Schemas.RestResponseListExperimentalMessageComparisonResult,
    GetMessageComparisonListError,
    undefined,
    {},
    GetMessageComparisonListQueryParams,
    {}
  >({ url: '/learning-exp/msg-pairs-to-vote', method: 'get', ...variables })

export const useGetMessageComparisonList = (
  variables: GetMessageComparisonListVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponseListExperimentalMessageComparisonResult,
      GetMessageComparisonListError,
      Schemas.RestResponseListExperimentalMessageComparisonResult
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponseListExperimentalMessageComparisonResult,
    GetMessageComparisonListError,
    Schemas.RestResponseListExperimentalMessageComparisonResult
  >(
    queryKeyFn({ path: '/learning-exp/msg-pairs-to-vote', operationId: 'getMessageComparisonList', variables }),
    () => fetchGetMessageComparisonList({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type SaveMessageComparisonListQueryParams = {
  accountId?: string
  serviceId?: string
}

export type SaveMessageComparisonListError = Fetcher.ErrorWrapper<undefined>

export type SaveMessageComparisonListVariables = {
  body?: RequestBodies.SaveMessageComparisonListBody
  queryParams?: SaveMessageComparisonListQueryParams
} & PortalContext['fetcherOptions']

export const fetchSaveMessageComparisonList = (variables: SaveMessageComparisonListVariables) =>
  portalFetch<
    Schemas.RestResponseBoolean,
    SaveMessageComparisonListError,
    RequestBodies.SaveMessageComparisonListBody,
    {},
    SaveMessageComparisonListQueryParams,
    {}
  >({ url: '/learning-exp/msg-pairs-to-vote', method: 'put', ...variables })

export const useSaveMessageComparisonList = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.RestResponseBoolean,
      SaveMessageComparisonListError,
      SaveMessageComparisonListVariables
    >,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<
    Schemas.RestResponseBoolean,
    SaveMessageComparisonListError,
    SaveMessageComparisonListVariables
  >(
    (variables: SaveMessageComparisonListVariables) =>
      fetchSaveMessageComparisonList({ ...fetcherOptions, ...variables }),
    options
  )
}

export type MarkExperimentStatusQueryParams = {
  stateExecutionId?: string
  stateType?:
    | 'SUB_WORKFLOW'
    | 'REPEAT'
    | 'FORK'
    | 'WAIT'
    | 'PAUSE'
    | 'BARRIER'
    | 'RESOURCE_CONSTRAINT'
    | 'SHELL_SCRIPT'
    | 'HTTP'
    | 'TEMPLATIZED_SECRET_MANAGER'
    | 'EMAIL'
    | 'APP_DYNAMICS'
    | 'NEW_RELIC'
    | 'NEW_RELIC_DEPLOYMENT_MARKER'
    | 'DYNA_TRACE'
    | 'PROMETHEUS'
    | 'SPLUNKV2'
    | 'ELK'
    | 'LOGZ'
    | 'SUMO'
    | 'DATA_DOG'
    | 'DATA_DOG_LOG'
    | 'CVNG'
    | 'CLOUD_WATCH'
    | 'AWS_LAMBDA_VERIFICATION'
    | 'APM_VERIFICATION'
    | 'LOG_VERIFICATION'
    | 'BUG_SNAG'
    | 'STACK_DRIVER'
    | 'STACK_DRIVER_LOG'
    | 'INSTANA'
    | 'SCALYR'
    | 'ENV_STATE'
    | 'ENV_LOOP_STATE'
    | 'ENV_RESUME_STATE'
    | 'ENV_LOOP_RESUME_STATE'
    | 'COMMAND'
    | 'APPROVAL'
    | 'APPROVAL_RESUME'
    | 'ELASTIC_LOAD_BALANCER'
    | 'JENKINS'
    | 'GCB'
    | 'BAMBOO'
    | 'ARTIFACT_COLLECTION'
    | 'ARTIFACT_CHECK'
    | 'AZURE_NODE_SELECT'
    | 'AZURE_VMSS_SETUP'
    | 'AZURE_VMSS_DEPLOY'
    | 'AZURE_VMSS_ROLLBACK'
    | 'AZURE_VMSS_SWITCH_ROUTES'
    | 'AZURE_VMSS_SWITCH_ROUTES_ROLLBACK'
    | 'AZURE_WEBAPP_SLOT_SETUP'
    | 'AZURE_WEBAPP_SLOT_SWAP'
    | 'AZURE_WEBAPP_SLOT_SHIFT_TRAFFIC'
    | 'AZURE_WEBAPP_SLOT_ROLLBACK'
    | 'AWS_NODE_SELECT'
    | 'DC_NODE_SELECT'
    | 'ROLLING_NODE_SELECT'
    | 'PHASE'
    | 'PHASE_STEP'
    | 'STAGING_ORIGINAL_EXECUTION'
    | 'AWS_CODEDEPLOY_STATE'
    | 'AWS_CODEDEPLOY_ROLLBACK'
    | 'AWS_LAMBDA_STATE'
    | 'AWS_LAMBDA_ROLLBACK'
    | 'AWS_AMI_SERVICE_SETUP'
    | 'ASG_AMI_SERVICE_ALB_SHIFT_SETUP'
    | 'AWS_AMI_SERVICE_DEPLOY'
    | 'ASG_AMI_SERVICE_ALB_SHIFT_DEPLOY'
    | 'AWS_AMI_SWITCH_ROUTES'
    | 'ASG_AMI_ALB_SHIFT_SWITCH_ROUTES'
    | 'AWS_AMI_ROLLBACK_SWITCH_ROUTES'
    | 'ASG_AMI_ROLLBACK_ALB_SHIFT_SWITCH_ROUTES'
    | 'AWS_AMI_SERVICE_ROLLBACK'
    | 'ECS_SERVICE_SETUP'
    | 'SPOTINST_SETUP'
    | 'SPOTINST_ALB_SHIFT_SETUP'
    | 'SPOTINST_DEPLOY'
    | 'SPOTINST_ALB_SHIFT_DEPLOY'
    | 'SPOTINST_LISTENER_UPDATE'
    | 'SPOTINST_LISTENER_ALB_SHIFT'
    | 'SPOTINST_ROLLBACK'
    | 'SPOTINST_LISTENER_UPDATE_ROLLBACK'
    | 'SPOTINST_LISTENER_ALB_SHIFT_ROLLBACK'
    | 'ECS_SERVICE_SETUP_ROLLBACK'
    | 'ECS_DAEMON_SERVICE_SETUP'
    | 'ECS_BG_SERVICE_SETUP'
    | 'ECS_BG_SERVICE_SETUP_ROUTE53'
    | 'ECS_SERVICE_DEPLOY'
    | 'ECS_SERVICE_ROLLBACK'
    | 'ECS_LISTENER_UPDATE'
    | 'ECS_LISTENER_UPDATE_ROLLBACK'
    | 'ECS_ROUTE53_DNS_WEIGHT_UPDATE'
    | 'ECS_ROUTE53_DNS_WEIGHT_UPDATE_ROLLBACK'
    | 'KUBERNETES_SETUP'
    | 'KUBERNETES_SETUP_ROLLBACK'
    | 'KUBERNETES_DEPLOY'
    | 'KUBERNETES_DEPLOY_ROLLBACK'
    | 'KUBERNETES_STEADY_STATE_CHECK'
    | 'ECS_STEADY_STATE_CHECK'
    | 'ECS_RUN_TASK'
    | 'GCP_CLUSTER_SETUP'
    | 'HELM_DEPLOY'
    | 'HELM_ROLLBACK'
    | 'PCF_SETUP'
    | 'PCF_RESIZE'
    | 'PCF_ROLLBACK'
    | 'PCF_MAP_ROUTE'
    | 'PCF_UNMAP_ROUTE'
    | 'PCF_BG_MAP_ROUTE'
    | 'PCF_PLUGIN'
    | 'TERRAFORM_PROVISION'
    | 'TERRAFORM_APPLY'
    | 'TERRAGRUNT_PROVISION'
    | 'TERRAGRUNT_DESTROY'
    | 'TERRAGRUNT_ROLLBACK'
    | 'ARM_CREATE_RESOURCE'
    | 'ARM_ROLLBACK'
    | 'SHELL_SCRIPT_PROVISION'
    | 'TERRAFORM_DESTROY'
    | 'CLOUD_FORMATION_CREATE_STACK'
    | 'CLOUD_FORMATION_DELETE_STACK'
    | 'KUBERNETES_SWAP_SERVICE_SELECTORS'
    | 'CLOUD_FORMATION_ROLLBACK_STACK'
    | 'TERRAFORM_ROLLBACK'
    | 'K8S_DEPLOYMENT_ROLLING'
    | 'K8S_SCALE'
    | 'K8S_DEPLOYMENT_ROLLING_ROLLBACK'
    | 'K8S_BLUE_GREEN_DEPLOY'
    | 'K8S_CANARY_DEPLOY'
    | 'K8S_DELETE'
    | 'RANCHER_RESOLVE'
    | 'RANCHER_K8S_DEPLOYMENT_ROLLING'
    | 'RANCHER_K8S_CANARY_DEPLOY'
    | 'RANCHER_K8S_BLUE_GREEN_DEPLOY'
    | 'RANCHER_KUBERNETES_SWAP_SERVICE_SELECTORS'
    | 'RANCHER_K8S_DELETE'
    | 'RANCHER_K8S_DEPLOYMENT_ROLLING_ROLLBACK'
    | 'JIRA_CREATE_UPDATE'
    | 'SERVICENOW_CREATE_UPDATE'
    | 'K8S_TRAFFIC_SPLIT'
    | 'K8S_APPLY'
    | 'CUSTOM_DEPLOYMENT_FETCH_INSTANCES'
  expName?: string
  expStatus?: string
}

export type MarkExperimentStatusError = Fetcher.ErrorWrapper<undefined>

export type MarkExperimentStatusVariables = {
  queryParams?: MarkExperimentStatusQueryParams
} & PortalContext['fetcherOptions']

export const fetchMarkExperimentStatus = (variables: MarkExperimentStatusVariables) =>
  portalFetch<
    Schemas.RestResponseExperimentalMetricRecord,
    MarkExperimentStatusError,
    undefined,
    {},
    MarkExperimentStatusQueryParams,
    {}
  >({ url: '/learning-exp-metric/mark-exp-status', method: 'get', ...variables })

export const useMarkExperimentStatus = (
  variables: MarkExperimentStatusVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponseExperimentalMetricRecord,
      MarkExperimentStatusError,
      Schemas.RestResponseExperimentalMetricRecord
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponseExperimentalMetricRecord,
    MarkExperimentStatusError,
    Schemas.RestResponseExperimentalMetricRecord
  >(
    queryKeyFn({ path: '/learning-exp-metric/mark-exp-status', operationId: 'markExperimentStatus', variables }),
    () => fetchMarkExperimentStatus({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type GetExperimentalAnalysisSummaryQueryParams = {
  stateExecutionId?: string
  stateType?:
    | 'SUB_WORKFLOW'
    | 'REPEAT'
    | 'FORK'
    | 'WAIT'
    | 'PAUSE'
    | 'BARRIER'
    | 'RESOURCE_CONSTRAINT'
    | 'SHELL_SCRIPT'
    | 'HTTP'
    | 'TEMPLATIZED_SECRET_MANAGER'
    | 'EMAIL'
    | 'APP_DYNAMICS'
    | 'NEW_RELIC'
    | 'NEW_RELIC_DEPLOYMENT_MARKER'
    | 'DYNA_TRACE'
    | 'PROMETHEUS'
    | 'SPLUNKV2'
    | 'ELK'
    | 'LOGZ'
    | 'SUMO'
    | 'DATA_DOG'
    | 'DATA_DOG_LOG'
    | 'CVNG'
    | 'CLOUD_WATCH'
    | 'AWS_LAMBDA_VERIFICATION'
    | 'APM_VERIFICATION'
    | 'LOG_VERIFICATION'
    | 'BUG_SNAG'
    | 'STACK_DRIVER'
    | 'STACK_DRIVER_LOG'
    | 'INSTANA'
    | 'SCALYR'
    | 'ENV_STATE'
    | 'ENV_LOOP_STATE'
    | 'ENV_RESUME_STATE'
    | 'ENV_LOOP_RESUME_STATE'
    | 'COMMAND'
    | 'APPROVAL'
    | 'APPROVAL_RESUME'
    | 'ELASTIC_LOAD_BALANCER'
    | 'JENKINS'
    | 'GCB'
    | 'BAMBOO'
    | 'ARTIFACT_COLLECTION'
    | 'ARTIFACT_CHECK'
    | 'AZURE_NODE_SELECT'
    | 'AZURE_VMSS_SETUP'
    | 'AZURE_VMSS_DEPLOY'
    | 'AZURE_VMSS_ROLLBACK'
    | 'AZURE_VMSS_SWITCH_ROUTES'
    | 'AZURE_VMSS_SWITCH_ROUTES_ROLLBACK'
    | 'AZURE_WEBAPP_SLOT_SETUP'
    | 'AZURE_WEBAPP_SLOT_SWAP'
    | 'AZURE_WEBAPP_SLOT_SHIFT_TRAFFIC'
    | 'AZURE_WEBAPP_SLOT_ROLLBACK'
    | 'AWS_NODE_SELECT'
    | 'DC_NODE_SELECT'
    | 'ROLLING_NODE_SELECT'
    | 'PHASE'
    | 'PHASE_STEP'
    | 'STAGING_ORIGINAL_EXECUTION'
    | 'AWS_CODEDEPLOY_STATE'
    | 'AWS_CODEDEPLOY_ROLLBACK'
    | 'AWS_LAMBDA_STATE'
    | 'AWS_LAMBDA_ROLLBACK'
    | 'AWS_AMI_SERVICE_SETUP'
    | 'ASG_AMI_SERVICE_ALB_SHIFT_SETUP'
    | 'AWS_AMI_SERVICE_DEPLOY'
    | 'ASG_AMI_SERVICE_ALB_SHIFT_DEPLOY'
    | 'AWS_AMI_SWITCH_ROUTES'
    | 'ASG_AMI_ALB_SHIFT_SWITCH_ROUTES'
    | 'AWS_AMI_ROLLBACK_SWITCH_ROUTES'
    | 'ASG_AMI_ROLLBACK_ALB_SHIFT_SWITCH_ROUTES'
    | 'AWS_AMI_SERVICE_ROLLBACK'
    | 'ECS_SERVICE_SETUP'
    | 'SPOTINST_SETUP'
    | 'SPOTINST_ALB_SHIFT_SETUP'
    | 'SPOTINST_DEPLOY'
    | 'SPOTINST_ALB_SHIFT_DEPLOY'
    | 'SPOTINST_LISTENER_UPDATE'
    | 'SPOTINST_LISTENER_ALB_SHIFT'
    | 'SPOTINST_ROLLBACK'
    | 'SPOTINST_LISTENER_UPDATE_ROLLBACK'
    | 'SPOTINST_LISTENER_ALB_SHIFT_ROLLBACK'
    | 'ECS_SERVICE_SETUP_ROLLBACK'
    | 'ECS_DAEMON_SERVICE_SETUP'
    | 'ECS_BG_SERVICE_SETUP'
    | 'ECS_BG_SERVICE_SETUP_ROUTE53'
    | 'ECS_SERVICE_DEPLOY'
    | 'ECS_SERVICE_ROLLBACK'
    | 'ECS_LISTENER_UPDATE'
    | 'ECS_LISTENER_UPDATE_ROLLBACK'
    | 'ECS_ROUTE53_DNS_WEIGHT_UPDATE'
    | 'ECS_ROUTE53_DNS_WEIGHT_UPDATE_ROLLBACK'
    | 'KUBERNETES_SETUP'
    | 'KUBERNETES_SETUP_ROLLBACK'
    | 'KUBERNETES_DEPLOY'
    | 'KUBERNETES_DEPLOY_ROLLBACK'
    | 'KUBERNETES_STEADY_STATE_CHECK'
    | 'ECS_STEADY_STATE_CHECK'
    | 'ECS_RUN_TASK'
    | 'GCP_CLUSTER_SETUP'
    | 'HELM_DEPLOY'
    | 'HELM_ROLLBACK'
    | 'PCF_SETUP'
    | 'PCF_RESIZE'
    | 'PCF_ROLLBACK'
    | 'PCF_MAP_ROUTE'
    | 'PCF_UNMAP_ROUTE'
    | 'PCF_BG_MAP_ROUTE'
    | 'PCF_PLUGIN'
    | 'TERRAFORM_PROVISION'
    | 'TERRAFORM_APPLY'
    | 'TERRAGRUNT_PROVISION'
    | 'TERRAGRUNT_DESTROY'
    | 'TERRAGRUNT_ROLLBACK'
    | 'ARM_CREATE_RESOURCE'
    | 'ARM_ROLLBACK'
    | 'SHELL_SCRIPT_PROVISION'
    | 'TERRAFORM_DESTROY'
    | 'CLOUD_FORMATION_CREATE_STACK'
    | 'CLOUD_FORMATION_DELETE_STACK'
    | 'KUBERNETES_SWAP_SERVICE_SELECTORS'
    | 'CLOUD_FORMATION_ROLLBACK_STACK'
    | 'TERRAFORM_ROLLBACK'
    | 'K8S_DEPLOYMENT_ROLLING'
    | 'K8S_SCALE'
    | 'K8S_DEPLOYMENT_ROLLING_ROLLBACK'
    | 'K8S_BLUE_GREEN_DEPLOY'
    | 'K8S_CANARY_DEPLOY'
    | 'K8S_DELETE'
    | 'RANCHER_RESOLVE'
    | 'RANCHER_K8S_DEPLOYMENT_ROLLING'
    | 'RANCHER_K8S_CANARY_DEPLOY'
    | 'RANCHER_K8S_BLUE_GREEN_DEPLOY'
    | 'RANCHER_KUBERNETES_SWAP_SERVICE_SELECTORS'
    | 'RANCHER_K8S_DELETE'
    | 'RANCHER_K8S_DEPLOYMENT_ROLLING_ROLLBACK'
    | 'JIRA_CREATE_UPDATE'
    | 'SERVICENOW_CREATE_UPDATE'
    | 'K8S_TRAFFIC_SPLIT'
    | 'K8S_APPLY'
    | 'CUSTOM_DEPLOYMENT_FETCH_INSTANCES'
  expName?: string
}

export type GetExperimentalAnalysisSummaryError = Fetcher.ErrorWrapper<undefined>

export type GetExperimentalAnalysisSummaryVariables = {
  queryParams?: GetExperimentalAnalysisSummaryQueryParams
} & PortalContext['fetcherOptions']

export const fetchGetExperimentalAnalysisSummary = (variables: GetExperimentalAnalysisSummaryVariables) =>
  portalFetch<
    Schemas.RestResponseExperimentalMetricRecord,
    GetExperimentalAnalysisSummaryError,
    undefined,
    {},
    GetExperimentalAnalysisSummaryQueryParams,
    {}
  >({ url: '/learning-exp-metric/get-analysis-summary', method: 'get', ...variables })

export const useGetExperimentalAnalysisSummary = (
  variables: GetExperimentalAnalysisSummaryVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponseExperimentalMetricRecord,
      GetExperimentalAnalysisSummaryError,
      Schemas.RestResponseExperimentalMetricRecord
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponseExperimentalMetricRecord,
    GetExperimentalAnalysisSummaryError,
    Schemas.RestResponseExperimentalMetricRecord
  >(
    queryKeyFn({
      path: '/learning-exp-metric/get-analysis-summary',
      operationId: 'getExperimentalAnalysisSummary',
      variables
    }),
    () => fetchGetExperimentalAnalysisSummary({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type GetMetricExpAnalysisAccuracyImprovementQueryParams = {
  experimentName?: string
  /*
   * @format int64
   */
  startTime?: number
  /*
   * @format int64
   */
  endTime?: number
}

export type GetMetricExpAnalysisAccuracyImprovementError = Fetcher.ErrorWrapper<undefined>

export type GetMetricExpAnalysisAccuracyImprovementVariables = {
  queryParams?: GetMetricExpAnalysisAccuracyImprovementQueryParams
} & PortalContext['fetcherOptions']

export const fetchGetMetricExpAnalysisAccuracyImprovement = (
  variables: GetMetricExpAnalysisAccuracyImprovementVariables
) =>
  portalFetch<
    Schemas.RestResponseExperimentPerformance,
    GetMetricExpAnalysisAccuracyImprovementError,
    undefined,
    {},
    GetMetricExpAnalysisAccuracyImprovementQueryParams,
    {}
  >({ url: '/learning-exp-metric/get-exp-performance', method: 'get', ...variables })

export const useGetMetricExpAnalysisAccuracyImprovement = (
  variables: GetMetricExpAnalysisAccuracyImprovementVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponseExperimentPerformance,
      GetMetricExpAnalysisAccuracyImprovementError,
      Schemas.RestResponseExperimentPerformance
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponseExperimentPerformance,
    GetMetricExpAnalysisAccuracyImprovementError,
    Schemas.RestResponseExperimentPerformance
  >(
    queryKeyFn({
      path: '/learning-exp-metric/get-exp-performance',
      operationId: 'getMetricExpAnalysisAccuracyImprovement',
      variables
    }),
    () => fetchGetMetricExpAnalysisAccuracyImprovement({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type GetMetricExpAnalysisInfoQueryParams = {
  offset?: string
  stateExecutionId?: string
  experimentName?: string
  /*
   * @format int64
   */
  startTime?: number
  /*
   * @format int64
   */
  endTime?: number
  mismatch?: boolean
  experimentStatus?: string
}

export type GetMetricExpAnalysisInfoError = Fetcher.ErrorWrapper<undefined>

export type GetMetricExpAnalysisInfoVariables = {
  queryParams?: GetMetricExpAnalysisInfoQueryParams
} & PortalContext['fetcherOptions']

export const fetchGetMetricExpAnalysisInfo = (variables: GetMetricExpAnalysisInfoVariables) =>
  portalFetch<
    Schemas.RestResponsePageResponseExpAnalysisInfo,
    GetMetricExpAnalysisInfoError,
    undefined,
    {},
    GetMetricExpAnalysisInfoQueryParams,
    {}
  >({ url: '/learning-exp-metric/get-exp-analysis-info', method: 'get', ...variables })

export const useGetMetricExpAnalysisInfo = (
  variables: GetMetricExpAnalysisInfoVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponsePageResponseExpAnalysisInfo,
      GetMetricExpAnalysisInfoError,
      Schemas.RestResponsePageResponseExpAnalysisInfo
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponsePageResponseExpAnalysisInfo,
    GetMetricExpAnalysisInfoError,
    Schemas.RestResponsePageResponseExpAnalysisInfo
  >(
    queryKeyFn({
      path: '/learning-exp-metric/get-exp-analysis-info',
      operationId: 'getMetricExpAnalysisInfo',
      variables
    }),
    () => fetchGetMetricExpAnalysisInfo({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type UpdateMismatchStateQueryParams = {
  stateExecutionId?: string
  /*
   * @format int32
   */
  analysisMinute?: number
}

export type UpdateMismatchStateError = Fetcher.ErrorWrapper<undefined>

export type UpdateMismatchStateVariables = {
  queryParams?: UpdateMismatchStateQueryParams
} & PortalContext['fetcherOptions']

export const fetchUpdateMismatchState = (variables: UpdateMismatchStateVariables) =>
  portalFetch<Schemas.RestResponseBoolean, UpdateMismatchStateError, undefined, {}, UpdateMismatchStateQueryParams, {}>(
    { url: '/learning-exp-metric/update-mismatch', method: 'post', ...variables }
  )

export const useUpdateMismatchState = (
  options?: Omit<
    reactQuery.UseMutationOptions<Schemas.RestResponseBoolean, UpdateMismatchStateError, UpdateMismatchStateVariables>,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<Schemas.RestResponseBoolean, UpdateMismatchStateError, UpdateMismatchStateVariables>(
    (variables: UpdateMismatchStateVariables) => fetchUpdateMismatchState({ ...fetcherOptions, ...variables }),
    options
  )
}

export type GetStatus2PathParams = {
  requestId: string
}

export type GetStatus2QueryParams = {
  accountId?: string
}

export type GetStatus2Error = Fetcher.ErrorWrapper<undefined>

export type GetStatus2Variables = {
  pathParams: GetStatus2PathParams
  queryParams?: GetStatus2QueryParams
} & PortalContext['fetcherOptions']

export const fetchGetStatus2 = (variables: GetStatus2Variables) =>
  portalFetch<undefined, GetStatus2Error, undefined, {}, GetStatus2QueryParams, GetStatus2PathParams>({
    url: '/export-executions/status/{requestId}',
    method: 'get',
    ...variables
  })

export const useGetStatus2 = (
  variables: GetStatus2Variables,
  options?: Omit<reactQuery.UseQueryOptions<undefined, GetStatus2Error, undefined>, 'queryKey' | 'queryFn'>
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<undefined, GetStatus2Error, undefined>(
    queryKeyFn({ path: '/export-executions/status/{requestId}', operationId: 'getStatus2', variables }),
    () => fetchGetStatus2({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type DownloadFile1PathParams = {
  requestId: string
}

export type DownloadFile1QueryParams = {
  accountId?: string
}

export type DownloadFile1Error = Fetcher.ErrorWrapper<undefined>

export type DownloadFile1Variables = {
  pathParams: DownloadFile1PathParams
  queryParams?: DownloadFile1QueryParams
} & PortalContext['fetcherOptions']

export const fetchDownloadFile1 = (variables: DownloadFile1Variables) =>
  portalFetch<undefined, DownloadFile1Error, undefined, {}, DownloadFile1QueryParams, DownloadFile1PathParams>({
    url: '/export-executions/download/{requestId}',
    method: 'get',
    ...variables
  })

export const useDownloadFile1 = (
  variables: DownloadFile1Variables,
  options?: Omit<reactQuery.UseQueryOptions<undefined, DownloadFile1Error, undefined>, 'queryKey' | 'queryFn'>
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<undefined, DownloadFile1Error, undefined>(
    queryKeyFn({ path: '/export-executions/download/{requestId}', operationId: 'downloadFile1', variables }),
    () => fetchDownloadFile1({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type GetLimitChecksQueryParams = {
  accountId?: string
  tagFilter?: string
  /*
   * @default 0
   */
  offset?: string
  limit?: string
  fieldsIncluded?: string[]
  fieldsExcluded?: string[]
}

export type GetLimitChecksError = Fetcher.ErrorWrapper<undefined>

export type GetLimitChecksVariables = {
  queryParams?: GetLimitChecksQueryParams
} & PortalContext['fetcherOptions']

export const fetchGetLimitChecks = (variables: GetLimitChecksVariables) =>
  portalFetch<
    Schemas.RestResponseExportExecutionsRequestLimitChecks,
    GetLimitChecksError,
    undefined,
    {},
    GetLimitChecksQueryParams,
    {}
  >({ url: '/export-executions/limit-checks', method: 'get', ...variables })

export const useGetLimitChecks = (
  variables: GetLimitChecksVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponseExportExecutionsRequestLimitChecks,
      GetLimitChecksError,
      Schemas.RestResponseExportExecutionsRequestLimitChecks
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponseExportExecutionsRequestLimitChecks,
    GetLimitChecksError,
    Schemas.RestResponseExportExecutionsRequestLimitChecks
  >(
    queryKeyFn({ path: '/export-executions/limit-checks', operationId: 'getLimitChecks', variables }),
    () => fetchGetLimitChecks({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type ExportQueryParams = {
  accountId?: string
  tagFilter?: string
  /*
   * @default 0
   */
  offset?: string
  limit?: string
  fieldsIncluded?: string[]
  fieldsExcluded?: string[]
}

export type ExportError = Fetcher.ErrorWrapper<undefined>

export type ExportVariables = {
  body?: Schemas.ExportExecutionsUserParams
  queryParams?: ExportQueryParams
} & PortalContext['fetcherOptions']

export const fetchExport = (variables: ExportVariables) =>
  portalFetch<
    Schemas.RestResponseExportExecutionsRequestSummary,
    ExportError,
    Schemas.ExportExecutionsUserParams,
    {},
    ExportQueryParams,
    {}
  >({ url: '/export-executions/export', method: 'post', ...variables })

export const useExport = (
  options?: Omit<
    reactQuery.UseMutationOptions<Schemas.RestResponseExportExecutionsRequestSummary, ExportError, ExportVariables>,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<Schemas.RestResponseExportExecutionsRequestSummary, ExportError, ExportVariables>(
    (variables: ExportVariables) => fetchExport({ ...fetcherOptions, ...variables }),
    options
  )
}

export type ListExpressionsQueryParams = {
  appId?: string
  entityId?: string
  entityType?:
    | 'SERVICE'
    | 'PROVISIONER'
    | 'ENVIRONMENT'
    | 'HOST'
    | 'RELEASE'
    | 'ARTIFACT'
    | 'SSH_USER'
    | 'SSH_PASSWORD'
    | 'SSH_APP_ACCOUNT'
    | 'SSH_KEY_PASSPHRASE'
    | 'SSH_APP_ACCOUNT_PASSOWRD'
    | 'SIMPLE_DEPLOYMENT'
    | 'ORCHESTRATED_DEPLOYMENT'
    | 'PIPELINE'
    | 'WORKFLOW'
    | 'DEPLOYMENT'
    | 'INSTANCE'
    | 'APPLICATION'
    | 'COMMAND'
    | 'CONFIG'
    | 'SERVICE_TEMPLATE'
    | 'INFRASTRUCTURE_MAPPING'
    | 'INFRASTRUCTURE_DEFINITION'
    | 'USER'
    | 'ARTIFACT_STREAM'
    | 'APPDYNAMICS_CONFIGID'
    | 'APPDYNAMICS_APPID'
    | 'APPDYNAMICS_TIERID'
    | 'ELK_CONFIGID'
    | 'ELK_INDICES'
    | 'NEWRELIC_CONFIGID'
    | 'NEWRELIC_APPID'
    | 'SS_SSH_CONNECTION_ATTRIBUTE'
    | 'SS_WINRM_CONNECTION_ATTRIBUTE'
    | 'SUMOLOGIC_CONFIGID'
    | 'SPLUNK_CONFIGID'
    | 'NEWRELIC_MARKER_CONFIGID'
    | 'NEWRELIC_MARKER_APPID'
    | 'API_KEY'
    | 'ACCOUNT'
    | 'APPLICATION_MANIFEST'
    | 'USER_GROUP'
    | 'WHITELISTED_IP'
    | 'CF_AWS_CONFIG_ID'
    | 'VERIFICATION_CONFIGURATION'
    | 'HELM_GIT_CONFIG_ID'
    | 'NOTIFICATION_GROUP'
    | 'HELM_CHART_SPECIFICATION'
    | 'PCF_SERVICE_SPECIFICATION'
    | 'LAMBDA_SPECIFICATION'
    | 'USER_DATA_SPECIFICATION'
    | 'ECS_CONTAINER_SPECIFICATION'
    | 'ECS_SERVICE_SPECIFICATION'
    | 'K8S_CONTAINER_SPECIFICATION'
    | 'CONFIG_FILE'
    | 'SERVICE_COMMAND'
    | 'MANIFEST_FILE'
    | 'SERVICE_VARIABLE'
    | 'TRIGGER'
    | 'ROLE'
    | 'TEMPLATE'
    | 'TEMPLATE_FOLDER'
    | 'SETTING_ATTRIBUTE'
    | 'ENCRYPTED_RECORDS'
    | 'CV_CONFIGURATION'
    | 'TAG'
    | 'CUSTOM_DASHBOARD'
    | 'PIPELINE_GOVERNANCE_STANDARD'
    | 'WORKFLOW_EXECUTION'
    | 'SERVERLESS_INSTANCE'
    | 'USER_INVITE'
    | 'LOGIN_SETTINGS'
    | 'SSO_SETTINGS'
    | 'DELEGATE'
    | 'DELEGATE_SCOPE'
    | 'DELEGATE_PROFILE'
    | 'EXPORT_EXECUTIONS_REQUEST'
    | 'GCP_CONFIG'
    | 'GIT_CONFIG'
    | 'JENKINS_SERVER'
    | 'SECRETS_MANAGER'
    | 'HELM_CHART'
    | 'SECRET'
    | 'CONNECTOR'
    | 'CLOUD_PROVIDER'
    | 'GOVERNANCE_FREEZE_CONFIG'
    | 'GOVERNANCE_CONFIG'
    | 'EVENT_RULE'
  serviceId?: string
  stateType?: string
  subEntityType?: string
  /*
   * @default false
   */
  forTags?: boolean
}

export type ListExpressionsError = Fetcher.ErrorWrapper<undefined>

export type ListExpressionsVariables = {
  queryParams?: ListExpressionsQueryParams
} & PortalContext['fetcherOptions']

export const fetchListExpressions = (variables: ListExpressionsVariables) =>
  portalFetch<Schemas.RestResponseSetString, ListExpressionsError, undefined, {}, ListExpressionsQueryParams, {}>({
    url: '/expression-builder',
    method: 'get',
    ...variables
  })

export const useListExpressions = (
  variables: ListExpressionsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.RestResponseSetString, ListExpressionsError, Schemas.RestResponseSetString>,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<Schemas.RestResponseSetString, ListExpressionsError, Schemas.RestResponseSetString>(
    queryKeyFn({ path: '/expression-builder', operationId: 'listExpressions', variables }),
    () => fetchListExpressions({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type ListExpressionsFromValuesQueryParams = {
  appId?: string
  serviceId?: string
}

export type ListExpressionsFromValuesError = Fetcher.ErrorWrapper<undefined>

export type ListExpressionsFromValuesVariables = {
  queryParams?: ListExpressionsFromValuesQueryParams
} & PortalContext['fetcherOptions']

export const fetchListExpressionsFromValues = (variables: ListExpressionsFromValuesVariables) =>
  portalFetch<
    Schemas.RestResponseSetString,
    ListExpressionsFromValuesError,
    undefined,
    {},
    ListExpressionsFromValuesQueryParams,
    {}
  >({ url: '/expression-builder/values', method: 'get', ...variables })

export const useListExpressionsFromValues = (
  variables: ListExpressionsFromValuesVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponseSetString,
      ListExpressionsFromValuesError,
      Schemas.RestResponseSetString
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponseSetString,
    ListExpressionsFromValuesError,
    Schemas.RestResponseSetString
  >(
    queryKeyFn({ path: '/expression-builder/values', operationId: 'listExpressionsFromValues', variables }),
    () => fetchListExpressionsFromValues({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type GetWorkflowExecutionStatusPathParams = {
  workflowExecutionId: string
}

export type GetWorkflowExecutionStatusQueryParams = {
  accountId?: string
  appId?: string
}

export type GetWorkflowExecutionStatusError = Fetcher.ErrorWrapper<undefined>

export type GetWorkflowExecutionStatusVariables = {
  pathParams: GetWorkflowExecutionStatusPathParams
  queryParams?: GetWorkflowExecutionStatusQueryParams
} & PortalContext['fetcherOptions']

export const fetchGetWorkflowExecutionStatus = (variables: GetWorkflowExecutionStatusVariables) =>
  portalFetch<
    Schemas.ExecutionStatusResponse,
    GetWorkflowExecutionStatusError,
    undefined,
    {},
    GetWorkflowExecutionStatusQueryParams,
    GetWorkflowExecutionStatusPathParams
  >({ url: '/external/{version}/executions/{workflowExecutionId}/status', method: 'get', ...variables })

export const useGetWorkflowExecutionStatus = (
  variables: GetWorkflowExecutionStatusVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.ExecutionStatusResponse,
      GetWorkflowExecutionStatusError,
      Schemas.ExecutionStatusResponse
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.ExecutionStatusResponse,
    GetWorkflowExecutionStatusError,
    Schemas.ExecutionStatusResponse
  >(
    queryKeyFn({
      path: '/external/{version}/executions/{workflowExecutionId}/status',
      operationId: 'getWorkflowExecutionStatus',
      variables
    }),
    () => fetchGetWorkflowExecutionStatus({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type GetFeatureFlagPathParams = {
  featureFlagName: string
}

export type GetFeatureFlagError = Fetcher.ErrorWrapper<undefined>

export type GetFeatureFlagVariables = {
  pathParams: GetFeatureFlagPathParams
} & PortalContext['fetcherOptions']

export const fetchGetFeatureFlag = (variables: GetFeatureFlagVariables) =>
  portalFetch<Schemas.RestResponseFeatureFlag, GetFeatureFlagError, undefined, {}, {}, GetFeatureFlagPathParams>({
    url: '/feature-flag/{featureFlagName}',
    method: 'get',
    ...variables
  })

export const useGetFeatureFlag = (
  variables: GetFeatureFlagVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.RestResponseFeatureFlag, GetFeatureFlagError, Schemas.RestResponseFeatureFlag>,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<Schemas.RestResponseFeatureFlag, GetFeatureFlagError, Schemas.RestResponseFeatureFlag>(
    queryKeyFn({ path: '/feature-flag/{featureFlagName}', operationId: 'getFeatureFlag', variables }),
    () => fetchGetFeatureFlag({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type GetGloballyEnabledFlagsError = Fetcher.ErrorWrapper<undefined>

export type GetGloballyEnabledFlagsVariables = PortalContext['fetcherOptions']

export const fetchGetGloballyEnabledFlags = (variables: GetGloballyEnabledFlagsVariables) =>
  portalFetch<Schemas.RestResponseListFeatureFlag, GetGloballyEnabledFlagsError, undefined, {}, {}, {}>({
    url: '/feature-flag/globally-enabled-feature-flags',
    method: 'get',
    ...variables
  })

export const useGetGloballyEnabledFlags = (
  variables: GetGloballyEnabledFlagsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponseListFeatureFlag,
      GetGloballyEnabledFlagsError,
      Schemas.RestResponseListFeatureFlag
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponseListFeatureFlag,
    GetGloballyEnabledFlagsError,
    Schemas.RestResponseListFeatureFlag
  >(
    queryKeyFn({
      path: '/feature-flag/globally-enabled-feature-flags',
      operationId: 'getGloballyEnabledFlags',
      variables
    }),
    () => fetchGetGloballyEnabledFlags({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type GetFeaturesUsageComplianceReportQueryParams = {
  accountId?: string
  targetAccountType?: string
}

export type GetFeaturesUsageComplianceReportError = Fetcher.ErrorWrapper<undefined>

export type GetFeaturesUsageComplianceReportVariables = {
  queryParams?: GetFeaturesUsageComplianceReportQueryParams
} & PortalContext['fetcherOptions']

export const fetchGetFeaturesUsageComplianceReport = (variables: GetFeaturesUsageComplianceReportVariables) =>
  portalFetch<
    Schemas.RestResponseFeaturesUsageComplianceReport,
    GetFeaturesUsageComplianceReportError,
    undefined,
    {},
    GetFeaturesUsageComplianceReportQueryParams,
    {}
  >({ url: '/features/usage-compliance-report', method: 'get', ...variables })

export const useGetFeaturesUsageComplianceReport = (
  variables: GetFeaturesUsageComplianceReportVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponseFeaturesUsageComplianceReport,
      GetFeaturesUsageComplianceReportError,
      Schemas.RestResponseFeaturesUsageComplianceReport
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponseFeaturesUsageComplianceReport,
    GetFeaturesUsageComplianceReportError,
    Schemas.RestResponseFeaturesUsageComplianceReport
  >(
    queryKeyFn({
      path: '/features/usage-compliance-report',
      operationId: 'getFeaturesUsageComplianceReport',
      variables
    }),
    () => fetchGetFeaturesUsageComplianceReport({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type GetFeatureRestrictionsQueryParams = {
  accountId?: string
}

export type GetFeatureRestrictionsError = Fetcher.ErrorWrapper<undefined>

export type GetFeatureRestrictionsVariables = {
  queryParams?: GetFeatureRestrictionsQueryParams
} & PortalContext['fetcherOptions']

export const fetchGetFeatureRestrictions = (variables: GetFeatureRestrictionsVariables) =>
  portalFetch<
    Schemas.RestResponseFeatureRestrictions,
    GetFeatureRestrictionsError,
    undefined,
    {},
    GetFeatureRestrictionsQueryParams,
    {}
  >({ url: '/features/restrictions', method: 'get', ...variables })

export const useGetFeatureRestrictions = (
  variables: GetFeatureRestrictionsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponseFeatureRestrictions,
      GetFeatureRestrictionsError,
      Schemas.RestResponseFeatureRestrictions
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponseFeatureRestrictions,
    GetFeatureRestrictionsError,
    Schemas.RestResponseFeatureRestrictions
  >(
    queryKeyFn({ path: '/features/restrictions', operationId: 'getFeatureRestrictions', variables }),
    () => fetchGetFeatureRestrictions({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type VerifyAccessQueryParams = {
  accountId?: string
  settingId?: string
}

export type VerifyAccessError = Fetcher.ErrorWrapper<undefined>

export type VerifyAccessVariables = {
  queryParams?: VerifyAccessQueryParams
} & PortalContext['fetcherOptions']

export const fetchVerifyAccess = (variables: VerifyAccessVariables) =>
  portalFetch<Schemas.RestResponse, VerifyAccessError, undefined, {}, VerifyAccessQueryParams, {}>({
    url: '/billing-accounts/verify-account',
    method: 'post',
    ...variables
  })

export const useVerifyAccess = (
  options?: Omit<
    reactQuery.UseMutationOptions<Schemas.RestResponse, VerifyAccessError, VerifyAccessVariables>,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<Schemas.RestResponse, VerifyAccessError, VerifyAccessVariables>(
    (variables: VerifyAccessVariables) => fetchVerifyAccess({ ...fetcherOptions, ...variables }),
    options
  )
}

export type Get20PathParams = {
  id: string
}

export type Get20QueryParams = {
  accountId?: string
}

export type Get20Error = Fetcher.ErrorWrapper<undefined>

export type Get20Variables = {
  pathParams: Get20PathParams
  queryParams?: Get20QueryParams
} & PortalContext['fetcherOptions']

export const fetchGet20 = (variables: Get20Variables) =>
  portalFetch<Schemas.RestResponseGcpBillingAccount, Get20Error, undefined, {}, Get20QueryParams, Get20PathParams>({
    url: '/billing-accounts/{id}',
    method: 'get',
    ...variables
  })

export const useGet20 = (
  variables: Get20Variables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponseGcpBillingAccount,
      Get20Error,
      Schemas.RestResponseGcpBillingAccount
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<Schemas.RestResponseGcpBillingAccount, Get20Error, Schemas.RestResponseGcpBillingAccount>(
    queryKeyFn({ path: '/billing-accounts/{id}', operationId: 'get20', variables }),
    () => fetchGet20({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type Update15PathParams = {
  id: string
}

export type Update15Error = Fetcher.ErrorWrapper<undefined>

export type Update15Variables = {
  body?: RequestBodies.GcpBillingAccount
  pathParams: Update15PathParams
} & PortalContext['fetcherOptions']

export const fetchUpdate15 = (variables: Update15Variables) =>
  portalFetch<Schemas.RestResponse, Update15Error, RequestBodies.GcpBillingAccount, {}, {}, Update15PathParams>({
    url: '/billing-accounts/{id}',
    method: 'put',
    ...variables
  })

export const useUpdate15 = (
  options?: Omit<reactQuery.UseMutationOptions<Schemas.RestResponse, Update15Error, Update15Variables>, 'mutationFn'>
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<Schemas.RestResponse, Update15Error, Update15Variables>(
    (variables: Update15Variables) => fetchUpdate15({ ...fetcherOptions, ...variables }),
    options
  )
}

export type Delete12PathParams = {
  id: string
}

export type Delete12QueryParams = {
  accountId?: string
}

export type Delete12Error = Fetcher.ErrorWrapper<undefined>

export type Delete12Variables = {
  pathParams: Delete12PathParams
  queryParams?: Delete12QueryParams
} & PortalContext['fetcherOptions']

export const fetchDelete12 = (variables: Delete12Variables) =>
  portalFetch<Schemas.RestResponse, Delete12Error, undefined, {}, Delete12QueryParams, Delete12PathParams>({
    url: '/billing-accounts/{id}',
    method: 'delete',
    ...variables
  })

export const useDelete12 = (
  options?: Omit<reactQuery.UseMutationOptions<Schemas.RestResponse, Delete12Error, Delete12Variables>, 'mutationFn'>
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<Schemas.RestResponse, Delete12Error, Delete12Variables>(
    (variables: Delete12Variables) => fetchDelete12({ ...fetcherOptions, ...variables }),
    options
  )
}

export type List24QueryParams = {
  accountId?: string
  organizationSettingId?: string
}

export type List24Error = Fetcher.ErrorWrapper<undefined>

export type List24Variables = {
  queryParams?: List24QueryParams
} & PortalContext['fetcherOptions']

export const fetchList24 = (variables: List24Variables) =>
  portalFetch<Schemas.RestResponseListGcpBillingAccount, List24Error, undefined, {}, List24QueryParams, {}>({
    url: '/billing-accounts',
    method: 'get',
    ...variables
  })

export const useList24 = (
  variables: List24Variables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponseListGcpBillingAccount,
      List24Error,
      Schemas.RestResponseListGcpBillingAccount
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponseListGcpBillingAccount,
    List24Error,
    Schemas.RestResponseListGcpBillingAccount
  >(
    queryKeyFn({ path: '/billing-accounts', operationId: 'list24', variables }),
    () => fetchList24({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type Save7QueryParams = {
  accountId?: string
}

export type Save7Error = Fetcher.ErrorWrapper<undefined>

export type Save7Variables = {
  body?: RequestBodies.GcpBillingAccount
  queryParams?: Save7QueryParams
} & PortalContext['fetcherOptions']

export const fetchSave7 = (variables: Save7Variables) =>
  portalFetch<
    Schemas.RestResponseGcpBillingAccount,
    Save7Error,
    RequestBodies.GcpBillingAccount,
    {},
    Save7QueryParams,
    {}
  >({ url: '/billing-accounts', method: 'post', ...variables })

export const useSave7 = (
  options?: Omit<
    reactQuery.UseMutationOptions<Schemas.RestResponseGcpBillingAccount, Save7Error, Save7Variables>,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<Schemas.RestResponseGcpBillingAccount, Save7Error, Save7Variables>(
    (variables: Save7Variables) => fetchSave7({ ...fetcherOptions, ...variables }),
    options
  )
}

export type Delete13PathParams = {
  uuid: string
}

export type Delete13QueryParams = {
  accountId?: string
}

export type Delete13Error = Fetcher.ErrorWrapper<undefined>

export type Delete13Variables = {
  pathParams: Delete13PathParams
  queryParams?: Delete13QueryParams
} & PortalContext['fetcherOptions']

export const fetchDelete13 = (variables: Delete13Variables) =>
  portalFetch<Schemas.RestResponse, Delete13Error, undefined, {}, Delete13QueryParams, Delete13PathParams>({
    url: '/gcp-organizations/{uuid}',
    method: 'delete',
    ...variables
  })

export const useDelete13 = (
  options?: Omit<reactQuery.UseMutationOptions<Schemas.RestResponse, Delete13Error, Delete13Variables>, 'mutationFn'>
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<Schemas.RestResponse, Delete13Error, Delete13Variables>(
    (variables: Delete13Variables) => fetchDelete13({ ...fetcherOptions, ...variables }),
    options
  )
}

export type Save8QueryParams = {
  accountId?: string
}

export type Save8Error = Fetcher.ErrorWrapper<undefined>

export type Save8Variables = {
  body?: RequestBodies.GcpOrganization
  queryParams?: Save8QueryParams
} & PortalContext['fetcherOptions']

export const fetchSave8 = (variables: Save8Variables) =>
  portalFetch<Schemas.RestResponseGcpOrganization, Save8Error, RequestBodies.GcpOrganization, {}, Save8QueryParams, {}>(
    { url: '/gcp-organizations', method: 'post', ...variables }
  )

export const useSave8 = (
  options?: Omit<
    reactQuery.UseMutationOptions<Schemas.RestResponseGcpOrganization, Save8Error, Save8Variables>,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<Schemas.RestResponseGcpOrganization, Save8Error, Save8Variables>(
    (variables: Save8Variables) => fetchSave8({ ...fetcherOptions, ...variables }),
    options
  )
}

export type ValidatePermissionQueryParams = {
  accountId?: string
}

export type ValidatePermissionError = Fetcher.ErrorWrapper<undefined>

export type ValidatePermissionVariables = {
  body?: RequestBodies.GcpOrganization
  queryParams?: ValidatePermissionQueryParams
} & PortalContext['fetcherOptions']

export const fetchValidatePermission = (variables: ValidatePermissionVariables) =>
  portalFetch<
    Schemas.RestResponse,
    ValidatePermissionError,
    RequestBodies.GcpOrganization,
    {},
    ValidatePermissionQueryParams,
    {}
  >({ url: '/gcp-organizations/validate-serviceaccount', method: 'post', ...variables })

export const useValidatePermission = (
  options?: Omit<
    reactQuery.UseMutationOptions<Schemas.RestResponse, ValidatePermissionError, ValidatePermissionVariables>,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<Schemas.RestResponse, ValidatePermissionError, ValidatePermissionVariables>(
    (variables: ValidatePermissionVariables) => fetchValidatePermission({ ...fetcherOptions, ...variables }),
    options
  )
}

export type ListGitToHarnessErrorsCommitsQueryParams = {
  /*
   * @default 0
   */
  offset?: string
  limit?: string
  fieldsIncluded?: string[]
  fieldsExcluded?: string[]
  accountId?: string
  appId?: string
  /*
   * @format int32
   * @default 0
   */
  numberOfErrorsInSummary?: number
}

export type ListGitToHarnessErrorsCommitsError = Fetcher.ErrorWrapper<undefined>

export type ListGitToHarnessErrorsCommitsVariables = {
  queryParams?: ListGitToHarnessErrorsCommitsQueryParams
} & PortalContext['fetcherOptions']

export const fetchListGitToHarnessErrorsCommits = (variables: ListGitToHarnessErrorsCommitsVariables) =>
  portalFetch<
    Schemas.RestResponsePageResponseGitToHarnessErrorCommitStats,
    ListGitToHarnessErrorsCommitsError,
    undefined,
    {},
    ListGitToHarnessErrorsCommitsQueryParams,
    {}
  >({ url: '/git-sync/errors/gitToHarness/commits', method: 'get', ...variables })

export const useListGitToHarnessErrorsCommits = (
  variables: ListGitToHarnessErrorsCommitsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponsePageResponseGitToHarnessErrorCommitStats,
      ListGitToHarnessErrorsCommitsError,
      Schemas.RestResponsePageResponseGitToHarnessErrorCommitStats
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponsePageResponseGitToHarnessErrorCommitStats,
    ListGitToHarnessErrorsCommitsError,
    Schemas.RestResponsePageResponseGitToHarnessErrorCommitStats
  >(
    queryKeyFn({
      path: '/git-sync/errors/gitToHarness/commits',
      operationId: 'listGitToHarnessErrorsCommits',
      variables
    }),
    () => fetchListGitToHarnessErrorsCommits({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type ListGitToHarnessErrorsCommits1QueryParams = {
  accountId?: string
  appId?: string
}

export type ListGitToHarnessErrorsCommits1Error = Fetcher.ErrorWrapper<undefined>

export type ListGitToHarnessErrorsCommits1Variables = {
  queryParams?: ListGitToHarnessErrorsCommits1QueryParams
} & PortalContext['fetcherOptions']

export const fetchListGitToHarnessErrorsCommits1 = (variables: ListGitToHarnessErrorsCommits1Variables) =>
  portalFetch<
    Schemas.RestResponseInteger,
    ListGitToHarnessErrorsCommits1Error,
    undefined,
    {},
    ListGitToHarnessErrorsCommits1QueryParams,
    {}
  >({ url: '/git-sync/errors/gitToHarness/commits/count', method: 'get', ...variables })

export const useListGitToHarnessErrorsCommits1 = (
  variables: ListGitToHarnessErrorsCommits1Variables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponseInteger,
      ListGitToHarnessErrorsCommits1Error,
      Schemas.RestResponseInteger
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponseInteger,
    ListGitToHarnessErrorsCommits1Error,
    Schemas.RestResponseInteger
  >(
    queryKeyFn({
      path: '/git-sync/errors/gitToHarness/commits/count',
      operationId: 'listGitToHarnessErrorsCommits1',
      variables
    }),
    () => fetchListGitToHarnessErrorsCommits1({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type ListRepositories1QueryParams = {
  accountId?: string
}

export type ListRepositories1Error = Fetcher.ErrorWrapper<undefined>

export type ListRepositories1Variables = {
  queryParams?: ListRepositories1QueryParams
} & PortalContext['fetcherOptions']

export const fetchListRepositories1 = (variables: ListRepositories1Variables) =>
  portalFetch<
    Schemas.RestResponseListGitDetail,
    ListRepositories1Error,
    undefined,
    {},
    ListRepositories1QueryParams,
    {}
  >({ url: '/git-sync/repos', method: 'get', ...variables })

export const useListRepositories1 = (
  variables: ListRepositories1Variables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponseListGitDetail,
      ListRepositories1Error,
      Schemas.RestResponseListGitDetail
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponseListGitDetail,
    ListRepositories1Error,
    Schemas.RestResponseListGitDetail
  >(
    queryKeyFn({ path: '/git-sync/repos', operationId: 'listRepositories1', variables }),
    () => fetchListRepositories1({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type ListCommitsQueryParams = {
  /*
   * @default 0
   */
  offset?: string
  limit?: string
  fieldsIncluded?: string[]
  fieldsExcluded?: string[]
  gitToharness?: boolean
  accountId?: string
  appId?: string
}

export type ListCommitsError = Fetcher.ErrorWrapper<undefined>

export type ListCommitsVariables = {
  queryParams?: ListCommitsQueryParams
} & PortalContext['fetcherOptions']

export const fetchListCommits = (variables: ListCommitsVariables) =>
  portalFetch<
    Schemas.RestResponsePageResponseGitFileActivitySummary,
    ListCommitsError,
    undefined,
    {},
    ListCommitsQueryParams,
    {}
  >({ url: '/git-sync/commits', method: 'get', ...variables })

export const useListCommits = (
  variables: ListCommitsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponsePageResponseGitFileActivitySummary,
      ListCommitsError,
      Schemas.RestResponsePageResponseGitFileActivitySummary
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponsePageResponseGitFileActivitySummary,
    ListCommitsError,
    Schemas.RestResponsePageResponseGitFileActivitySummary
  >(
    queryKeyFn({ path: '/git-sync/commits', operationId: 'listCommits', variables }),
    () => fetchListCommits({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type GitSyncErrorCountQueryParams = {
  accountId?: string
}

export type GitSyncErrorCountError = Fetcher.ErrorWrapper<undefined>

export type GitSyncErrorCountVariables = {
  queryParams?: GitSyncErrorCountQueryParams
} & PortalContext['fetcherOptions']

export const fetchGitSyncErrorCount = (variables: GitSyncErrorCountVariables) =>
  portalFetch<Schemas.RestResponseLong, GitSyncErrorCountError, undefined, {}, GitSyncErrorCountQueryParams, {}>({
    url: '/git-sync/errors/count',
    method: 'get',
    ...variables
  })

export const useGitSyncErrorCount = (
  variables: GitSyncErrorCountVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.RestResponseLong, GitSyncErrorCountError, Schemas.RestResponseLong>,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<Schemas.RestResponseLong, GitSyncErrorCountError, Schemas.RestResponseLong>(
    queryKeyFn({ path: '/git-sync/errors/count', operationId: 'gitSyncErrorCount', variables }),
    () => fetchGitSyncErrorCount({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type ListErrorsQueryParams = {
  /*
   * @default 0
   */
  offset?: string
  limit?: string
  fieldsIncluded?: string[]
  fieldsExcluded?: string[]
  accountId?: string
}

export type ListErrorsError = Fetcher.ErrorWrapper<undefined>

export type ListErrorsVariables = {
  queryParams?: ListErrorsQueryParams
} & PortalContext['fetcherOptions']

export const fetchListErrors = (variables: ListErrorsVariables) =>
  portalFetch<Schemas.RestResponsePageResponseGitSyncError, ListErrorsError, undefined, {}, ListErrorsQueryParams, {}>({
    url: '/git-sync/errors',
    method: 'get',
    ...variables
  })

export const useListErrors = (
  variables: ListErrorsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponsePageResponseGitSyncError,
      ListErrorsError,
      Schemas.RestResponsePageResponseGitSyncError
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponsePageResponseGitSyncError,
    ListErrorsError,
    Schemas.RestResponsePageResponseGitSyncError
  >(
    queryKeyFn({ path: '/git-sync/errors', operationId: 'listErrors', variables }),
    () => fetchListErrors({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type ListGitToHarnessErrorsQueryParams = {
  /*
   * @default 0
   */
  offset?: string
  limit?: string
  fieldsIncluded?: string[]
  fieldsExcluded?: string[]
  accountId?: string
  appId?: string
  yamlFilePathPattern?: string
}

export type ListGitToHarnessErrorsError = Fetcher.ErrorWrapper<undefined>

export type ListGitToHarnessErrorsVariables = {
  queryParams?: ListGitToHarnessErrorsQueryParams
} & PortalContext['fetcherOptions']

export const fetchListGitToHarnessErrors = (variables: ListGitToHarnessErrorsVariables) =>
  portalFetch<
    Schemas.RestResponsePageResponseGitSyncError,
    ListGitToHarnessErrorsError,
    undefined,
    {},
    ListGitToHarnessErrorsQueryParams,
    {}
  >({ url: '/git-sync/errors/gitToHarness/listAllErrors', method: 'get', ...variables })

export const useListGitToHarnessErrors = (
  variables: ListGitToHarnessErrorsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponsePageResponseGitSyncError,
      ListGitToHarnessErrorsError,
      Schemas.RestResponsePageResponseGitSyncError
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponsePageResponseGitSyncError,
    ListGitToHarnessErrorsError,
    Schemas.RestResponsePageResponseGitSyncError
  >(
    queryKeyFn({
      path: '/git-sync/errors/gitToHarness/listAllErrors',
      operationId: 'listGitToHarnessErrors',
      variables
    }),
    () => fetchListGitToHarnessErrors({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type ListGitToHarnessErrorsForACommitPathParams = {
  commitId: string
}

export type ListGitToHarnessErrorsForACommitQueryParams = {
  /*
   * @default 0
   */
  offset?: string
  limit?: string
  fieldsIncluded?: string[]
  fieldsExcluded?: string[]
  accountId?: string
  appId?: string
  includeData?: string[]
  yamlFilePathPattern?: string
}

export type ListGitToHarnessErrorsForACommitError = Fetcher.ErrorWrapper<undefined>

export type ListGitToHarnessErrorsForACommitVariables = {
  pathParams: ListGitToHarnessErrorsForACommitPathParams
  queryParams?: ListGitToHarnessErrorsForACommitQueryParams
} & PortalContext['fetcherOptions']

export const fetchListGitToHarnessErrorsForACommit = (variables: ListGitToHarnessErrorsForACommitVariables) =>
  portalFetch<
    Schemas.RestResponsePageResponseGitSyncError,
    ListGitToHarnessErrorsForACommitError,
    undefined,
    {},
    ListGitToHarnessErrorsForACommitQueryParams,
    ListGitToHarnessErrorsForACommitPathParams
  >({ url: '/git-sync/errors/gitToHarness/{commitId}', method: 'get', ...variables })

export const useListGitToHarnessErrorsForACommit = (
  variables: ListGitToHarnessErrorsForACommitVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponsePageResponseGitSyncError,
      ListGitToHarnessErrorsForACommitError,
      Schemas.RestResponsePageResponseGitSyncError
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponsePageResponseGitSyncError,
    ListGitToHarnessErrorsForACommitError,
    Schemas.RestResponsePageResponseGitSyncError
  >(
    queryKeyFn({
      path: '/git-sync/errors/gitToHarness/{commitId}',
      operationId: 'listGitToHarnessErrorsForACommit',
      variables
    }),
    () => fetchListGitToHarnessErrorsForACommit({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type ListHarnessToGitErrorsQueryParams = {
  /*
   * @default 0
   */
  offset?: string
  limit?: string
  fieldsIncluded?: string[]
  fieldsExcluded?: string[]
  accountId?: string
  appId?: string
}

export type ListHarnessToGitErrorsError = Fetcher.ErrorWrapper<undefined>

export type ListHarnessToGitErrorsVariables = {
  queryParams?: ListHarnessToGitErrorsQueryParams
} & PortalContext['fetcherOptions']

export const fetchListHarnessToGitErrors = (variables: ListHarnessToGitErrorsVariables) =>
  portalFetch<
    Schemas.RestResponsePageResponseGitSyncError,
    ListHarnessToGitErrorsError,
    undefined,
    {},
    ListHarnessToGitErrorsQueryParams,
    {}
  >({ url: '/git-sync/errors/harnessToGit', method: 'get', ...variables })

export const useListHarnessToGitErrors = (
  variables: ListHarnessToGitErrorsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponsePageResponseGitSyncError,
      ListHarnessToGitErrorsError,
      Schemas.RestResponsePageResponseGitSyncError
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponsePageResponseGitSyncError,
    ListHarnessToGitErrorsError,
    Schemas.RestResponsePageResponseGitSyncError
  >(
    queryKeyFn({ path: '/git-sync/errors/harnessToGit', operationId: 'listHarnessToGitErrors', variables }),
    () => fetchListHarnessToGitErrors({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type ListGitConnectivityIssuesQueryParams = {
  /*
   * @default 0
   */
  offset?: string
  limit?: string
  fieldsIncluded?: string[]
  fieldsExcluded?: string[]
  accountId?: string
}

export type ListGitConnectivityIssuesError = Fetcher.ErrorWrapper<undefined>

export type ListGitConnectivityIssuesVariables = {
  queryParams?: ListGitConnectivityIssuesQueryParams
} & PortalContext['fetcherOptions']

export const fetchListGitConnectivityIssues = (variables: ListGitConnectivityIssuesVariables) =>
  portalFetch<
    Schemas.RestResponsePageResponseGitProcessingError,
    ListGitConnectivityIssuesError,
    undefined,
    {},
    ListGitConnectivityIssuesQueryParams,
    {}
  >({ url: '/git-sync/errors/connectivityIssue', method: 'get', ...variables })

export const useListGitConnectivityIssues = (
  variables: ListGitConnectivityIssuesVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponsePageResponseGitProcessingError,
      ListGitConnectivityIssuesError,
      Schemas.RestResponsePageResponseGitProcessingError
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponsePageResponseGitProcessingError,
    ListGitConnectivityIssuesError,
    Schemas.RestResponsePageResponseGitProcessingError
  >(
    queryKeyFn({ path: '/git-sync/errors/connectivityIssue', operationId: 'listGitConnectivityIssues', variables }),
    () => fetchListGitConnectivityIssues({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type ListGitFileActivityQueryParams = {
  /*
   * @default 0
   */
  offset?: string
  limit?: string
  fieldsIncluded?: string[]
  fieldsExcluded?: string[]
  accountId?: string
  appId?: string
  /*
   * @default false
   */
  activityForFileHistory?: boolean
}

export type ListGitFileActivityError = Fetcher.ErrorWrapper<undefined>

export type ListGitFileActivityVariables = {
  queryParams?: ListGitFileActivityQueryParams
} & PortalContext['fetcherOptions']

export const fetchListGitFileActivity = (variables: ListGitFileActivityVariables) =>
  portalFetch<
    Schemas.RestResponsePageResponseGitFileActivity,
    ListGitFileActivityError,
    undefined,
    {},
    ListGitFileActivityQueryParams,
    {}
  >({ url: '/git-sync/activities', method: 'get', ...variables })

export const useListGitFileActivity = (
  variables: ListGitFileActivityVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponsePageResponseGitFileActivity,
      ListGitFileActivityError,
      Schemas.RestResponsePageResponseGitFileActivity
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponsePageResponseGitFileActivity,
    ListGitFileActivityError,
    Schemas.RestResponsePageResponseGitFileActivity
  >(
    queryKeyFn({ path: '/git-sync/activities', operationId: 'listGitFileActivity', variables }),
    () => fetchListGitFileActivity({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type DiscardGitSyncErrorV2QueryParams = {
  accountId?: string
}

export type DiscardGitSyncErrorV2Error = Fetcher.ErrorWrapper<undefined>

export type DiscardGitSyncErrorV2Variables = {
  body?: RequestBodies.UpdateWhitelistedDomainsBody
  queryParams?: DiscardGitSyncErrorV2QueryParams
} & PortalContext['fetcherOptions']

export const fetchDiscardGitSyncErrorV2 = (variables: DiscardGitSyncErrorV2Variables) =>
  portalFetch<
    Schemas.RestResponse,
    DiscardGitSyncErrorV2Error,
    RequestBodies.UpdateWhitelistedDomainsBody,
    {},
    DiscardGitSyncErrorV2QueryParams,
    {}
  >({ url: '/git-sync/errors/_discard', method: 'post', ...variables })

export const useDiscardGitSyncErrorV2 = (
  options?: Omit<
    reactQuery.UseMutationOptions<Schemas.RestResponse, DiscardGitSyncErrorV2Error, DiscardGitSyncErrorV2Variables>,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<Schemas.RestResponse, DiscardGitSyncErrorV2Error, DiscardGitSyncErrorV2Variables>(
    (variables: DiscardGitSyncErrorV2Variables) => fetchDiscardGitSyncErrorV2({ ...fetcherOptions, ...variables }),
    options
  )
}

export type ListCommitsBeingProcessedQueryParams = {
  accountId?: string
  /*
   * @format int32
   */
  count?: number
  appId?: string
  gitToHarness?: boolean
}

export type ListCommitsBeingProcessedError = Fetcher.ErrorWrapper<undefined>

export type ListCommitsBeingProcessedVariables = {
  queryParams?: ListCommitsBeingProcessedQueryParams
} & PortalContext['fetcherOptions']

export const fetchListCommitsBeingProcessed = (variables: ListCommitsBeingProcessedVariables) =>
  portalFetch<
    Schemas.RestResponseListChangeSetDTO,
    ListCommitsBeingProcessedError,
    undefined,
    {},
    ListCommitsBeingProcessedQueryParams,
    {}
  >({ url: '/git-sync/commits/processing', method: 'get', ...variables })

export const useListCommitsBeingProcessed = (
  variables: ListCommitsBeingProcessedVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponseListChangeSetDTO,
      ListCommitsBeingProcessedError,
      Schemas.RestResponseListChangeSetDTO
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponseListChangeSetDTO,
    ListCommitsBeingProcessedError,
    Schemas.RestResponseListChangeSetDTO
  >(
    queryKeyFn({ path: '/git-sync/commits/processing', operationId: 'listCommitsBeingProcessed', variables }),
    () => fetchListCommitsBeingProcessed({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type Get21PathParams = {
  clientType: string
}

export type Get21Error = Fetcher.ErrorWrapper<undefined>

export type Get21Variables = {
  pathParams: Get21PathParams
} & PortalContext['fetcherOptions']

export const fetchGet21 = (variables: Get21Variables) =>
  portalFetch<Schemas.RestResponseString, Get21Error, undefined, {}, {}, Get21PathParams>({
    url: '/harness-api-keys/{clientType}',
    method: 'get',
    ...variables
  })

export const useGet21 = (
  variables: Get21Variables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.RestResponseString, Get21Error, Schemas.RestResponseString>,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<Schemas.RestResponseString, Get21Error, Schemas.RestResponseString>(
    queryKeyFn({ path: '/harness-api-keys/{clientType}', operationId: 'get21', variables }),
    () => fetchGet21({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type Delete14PathParams = {
  clientType: string
}

export type Delete14Error = Fetcher.ErrorWrapper<undefined>

export type Delete14Variables = {
  pathParams: Delete14PathParams
} & PortalContext['fetcherOptions']

export const fetchDelete14 = (variables: Delete14Variables) =>
  portalFetch<Schemas.RestResponseBoolean, Delete14Error, undefined, {}, {}, Delete14PathParams>({
    url: '/harness-api-keys/{clientType}',
    method: 'delete',
    ...variables
  })

export const useDelete14 = (
  options?: Omit<
    reactQuery.UseMutationOptions<Schemas.RestResponseBoolean, Delete14Error, Delete14Variables>,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<Schemas.RestResponseBoolean, Delete14Error, Delete14Variables>(
    (variables: Delete14Variables) => fetchDelete14({ ...fetcherOptions, ...variables }),
    options
  )
}

export type Validate1QueryParams = {
  clientType?: string
  apiKey?: string
}

export type Validate1Error = Fetcher.ErrorWrapper<undefined>

export type Validate1Variables = {
  queryParams?: Validate1QueryParams
} & PortalContext['fetcherOptions']

export const fetchValidate1 = (variables: Validate1Variables) =>
  portalFetch<Schemas.RestResponseBoolean, Validate1Error, undefined, {}, Validate1QueryParams, {}>({
    url: '/harness-api-keys/validate',
    method: 'get',
    ...variables
  })

export const useValidate1 = (
  variables: Validate1Variables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.RestResponseBoolean, Validate1Error, Schemas.RestResponseBoolean>,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<Schemas.RestResponseBoolean, Validate1Error, Schemas.RestResponseBoolean>(
    queryKeyFn({ path: '/harness-api-keys/validate', operationId: 'validate1', variables }),
    () => fetchValidate1({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type Generate1Error = Fetcher.ErrorWrapper<undefined>

export type Generate1Variables = {
  body?: RequestBodies.ValidateBody
} & PortalContext['fetcherOptions']

export const fetchGenerate1 = (variables: Generate1Variables) =>
  portalFetch<Schemas.RestResponseString, Generate1Error, RequestBodies.ValidateBody, {}, {}, {}>({
    url: '/harness-api-keys',
    method: 'post',
    ...variables
  })

export const useGenerate1 = (
  options?: Omit<
    reactQuery.UseMutationOptions<Schemas.RestResponseString, Generate1Error, Generate1Variables>,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<Schemas.RestResponseString, Generate1Error, Generate1Variables>(
    (variables: Generate1Variables) => fetchGenerate1({ ...fetcherOptions, ...variables }),
    options
  )
}

export type GetWatcherDownloadUrlFromDelegatePathParams = {
  version: string
}

export type GetWatcherDownloadUrlFromDelegateError = Fetcher.ErrorWrapper<undefined>

export type GetWatcherDownloadUrlFromDelegateVariables = {
  pathParams: GetWatcherDownloadUrlFromDelegatePathParams
} & PortalContext['fetcherOptions']

export const fetchGetWatcherDownloadUrlFromDelegate = (variables: GetWatcherDownloadUrlFromDelegateVariables) =>
  portalFetch<
    Schemas.RestResponseString,
    GetWatcherDownloadUrlFromDelegateError,
    undefined,
    {},
    {},
    GetWatcherDownloadUrlFromDelegatePathParams
  >({ url: '/agent/infra-download/delegate-auth/watcher/{version}', method: 'get', ...variables })

export const useGetWatcherDownloadUrlFromDelegate = (
  variables: GetWatcherDownloadUrlFromDelegateVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponseString,
      GetWatcherDownloadUrlFromDelegateError,
      Schemas.RestResponseString
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponseString,
    GetWatcherDownloadUrlFromDelegateError,
    Schemas.RestResponseString
  >(
    queryKeyFn({
      path: '/agent/infra-download/delegate-auth/watcher/{version}',
      operationId: 'getWatcherDownloadUrlFromDelegate',
      variables
    }),
    () => fetchGetWatcherDownloadUrlFromDelegate({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type GetDelegateDownloadUrlFromDelegatePathParams = {
  version: string
}

export type GetDelegateDownloadUrlFromDelegateQueryParams = {
  accountId?: string
}

export type GetDelegateDownloadUrlFromDelegateError = Fetcher.ErrorWrapper<undefined>

export type GetDelegateDownloadUrlFromDelegateVariables = {
  pathParams: GetDelegateDownloadUrlFromDelegatePathParams
  queryParams?: GetDelegateDownloadUrlFromDelegateQueryParams
} & PortalContext['fetcherOptions']

export const fetchGetDelegateDownloadUrlFromDelegate = (variables: GetDelegateDownloadUrlFromDelegateVariables) =>
  portalFetch<
    Schemas.RestResponseString,
    GetDelegateDownloadUrlFromDelegateError,
    undefined,
    {},
    GetDelegateDownloadUrlFromDelegateQueryParams,
    GetDelegateDownloadUrlFromDelegatePathParams
  >({ url: '/agent/infra-download/delegate-auth/delegate/{version}', method: 'get', ...variables })

export const useGetDelegateDownloadUrlFromDelegate = (
  variables: GetDelegateDownloadUrlFromDelegateVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponseString,
      GetDelegateDownloadUrlFromDelegateError,
      Schemas.RestResponseString
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponseString,
    GetDelegateDownloadUrlFromDelegateError,
    Schemas.RestResponseString
  >(
    queryKeyFn({
      path: '/agent/infra-download/delegate-auth/delegate/{version}',
      operationId: 'getDelegateDownloadUrlFromDelegate',
      variables
    }),
    () => fetchGetDelegateDownloadUrlFromDelegate({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type GetWatcherDownloadUrlFromDefaultAuthPathParams = {
  version: string
}

export type GetWatcherDownloadUrlFromDefaultAuthQueryParams = {
  accountId?: string
  env?: string
}

export type GetWatcherDownloadUrlFromDefaultAuthError = Fetcher.ErrorWrapper<undefined>

export type GetWatcherDownloadUrlFromDefaultAuthVariables = {
  pathParams: GetWatcherDownloadUrlFromDefaultAuthPathParams
  queryParams?: GetWatcherDownloadUrlFromDefaultAuthQueryParams
} & PortalContext['fetcherOptions']

export const fetchGetWatcherDownloadUrlFromDefaultAuth = (variables: GetWatcherDownloadUrlFromDefaultAuthVariables) =>
  portalFetch<
    Schemas.RestResponseString,
    GetWatcherDownloadUrlFromDefaultAuthError,
    undefined,
    {},
    GetWatcherDownloadUrlFromDefaultAuthQueryParams,
    GetWatcherDownloadUrlFromDefaultAuthPathParams
  >({ url: '/agent/infra-download/default/watcher/{version}', method: 'get', ...variables })

export const useGetWatcherDownloadUrlFromDefaultAuth = (
  variables: GetWatcherDownloadUrlFromDefaultAuthVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponseString,
      GetWatcherDownloadUrlFromDefaultAuthError,
      Schemas.RestResponseString
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponseString,
    GetWatcherDownloadUrlFromDefaultAuthError,
    Schemas.RestResponseString
  >(
    queryKeyFn({
      path: '/agent/infra-download/default/watcher/{version}',
      operationId: 'getWatcherDownloadUrlFromDefaultAuth',
      variables
    }),
    () => fetchGetWatcherDownloadUrlFromDefaultAuth({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type GetDelegateDownloadUrlFromDefaultAuthPathParams = {
  version: string
}

export type GetDelegateDownloadUrlFromDefaultAuthQueryParams = {
  accountId?: string
  env?: string
}

export type GetDelegateDownloadUrlFromDefaultAuthError = Fetcher.ErrorWrapper<undefined>

export type GetDelegateDownloadUrlFromDefaultAuthVariables = {
  pathParams: GetDelegateDownloadUrlFromDefaultAuthPathParams
  queryParams?: GetDelegateDownloadUrlFromDefaultAuthQueryParams
} & PortalContext['fetcherOptions']

export const fetchGetDelegateDownloadUrlFromDefaultAuth = (variables: GetDelegateDownloadUrlFromDefaultAuthVariables) =>
  portalFetch<
    Schemas.RestResponseString,
    GetDelegateDownloadUrlFromDefaultAuthError,
    undefined,
    {},
    GetDelegateDownloadUrlFromDefaultAuthQueryParams,
    GetDelegateDownloadUrlFromDefaultAuthPathParams
  >({ url: '/agent/infra-download/default/delegate/{version}', method: 'get', ...variables })

export const useGetDelegateDownloadUrlFromDefaultAuth = (
  variables: GetDelegateDownloadUrlFromDefaultAuthVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponseString,
      GetDelegateDownloadUrlFromDefaultAuthError,
      Schemas.RestResponseString
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponseString,
    GetDelegateDownloadUrlFromDefaultAuthError,
    Schemas.RestResponseString
  >(
    queryKeyFn({
      path: '/agent/infra-download/default/delegate/{version}',
      operationId: 'getDelegateDownloadUrlFromDefaultAuth',
      variables
    }),
    () => fetchGetDelegateDownloadUrlFromDefaultAuth({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type GetDelegateLoggingTokenFromDelegateQueryParams = {
  accountId?: string
}

export type GetDelegateLoggingTokenFromDelegateError = Fetcher.ErrorWrapper<undefined>

export type GetDelegateLoggingTokenFromDelegateVariables = {
  queryParams?: GetDelegateLoggingTokenFromDelegateQueryParams
} & PortalContext['fetcherOptions']

export const fetchGetDelegateLoggingTokenFromDelegate = (variables: GetDelegateLoggingTokenFromDelegateVariables) =>
  portalFetch<
    Schemas.RestResponseAccessTokenBean,
    GetDelegateLoggingTokenFromDelegateError,
    undefined,
    {},
    GetDelegateLoggingTokenFromDelegateQueryParams,
    {}
  >({ url: '/agent/infra-download/delegate-auth/delegate/logging-token', method: 'get', ...variables })

export const useGetDelegateLoggingTokenFromDelegate = (
  variables: GetDelegateLoggingTokenFromDelegateVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponseAccessTokenBean,
      GetDelegateLoggingTokenFromDelegateError,
      Schemas.RestResponseAccessTokenBean
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponseAccessTokenBean,
    GetDelegateLoggingTokenFromDelegateError,
    Schemas.RestResponseAccessTokenBean
  >(
    queryKeyFn({
      path: '/agent/infra-download/delegate-auth/delegate/logging-token',
      operationId: 'getDelegateLoggingTokenFromDelegate',
      variables
    }),
    () => fetchGetDelegateLoggingTokenFromDelegate({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type GetHealthQueryParams = {
  accountId?: string
  deploymentType?: string
}

export type GetHealthError = Fetcher.ErrorWrapper<undefined>

export type GetHealthVariables = {
  queryParams?: GetHealthQueryParams
} & PortalContext['fetcherOptions']

export const fetchGetHealth = (variables: GetHealthVariables) =>
  portalFetch<Schemas.RestResponseSampleAppStatus, GetHealthError, undefined, {}, GetHealthQueryParams, {}>({
    url: '/sampleapps/health',
    method: 'get',
    ...variables
  })

export const useGetHealth = (
  variables: GetHealthVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponseSampleAppStatus,
      GetHealthError,
      Schemas.RestResponseSampleAppStatus
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<Schemas.RestResponseSampleAppStatus, GetHealthError, Schemas.RestResponseSampleAppStatus>(
    queryKeyFn({ path: '/sampleapps/health', operationId: 'getHealth', variables }),
    () => fetchGetHealth({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type RestoreAppQueryParams = {
  accountId?: string
  deploymentType?: string
}

export type RestoreAppError = Fetcher.ErrorWrapper<undefined>

export type RestoreAppVariables = {
  queryParams?: RestoreAppQueryParams
} & PortalContext['fetcherOptions']

export const fetchRestoreApp = (variables: RestoreAppVariables) =>
  portalFetch<Schemas.RestResponseApplication, RestoreAppError, undefined, {}, RestoreAppQueryParams, {}>({
    url: '/sampleapps/restore',
    method: 'post',
    ...variables
  })

export const useRestoreApp = (
  options?: Omit<
    reactQuery.UseMutationOptions<Schemas.RestResponseApplication, RestoreAppError, RestoreAppVariables>,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<Schemas.RestResponseApplication, RestoreAppError, RestoreAppVariables>(
    (variables: RestoreAppVariables) => fetchRestoreApp({ ...fetcherOptions, ...variables }),
    options
  )
}

export type AttachTagQueryParams = {
  accountId?: string
  appId?: string
}

export type AttachTagError = Fetcher.ErrorWrapper<undefined>

export type AttachTagVariables = {
  body: RequestBodies.HarnessTagLink
  queryParams?: AttachTagQueryParams
} & PortalContext['fetcherOptions']

export const fetchAttachTag = (variables: AttachTagVariables) =>
  portalFetch<Schemas.RestResponse, AttachTagError, RequestBodies.HarnessTagLink, {}, AttachTagQueryParams, {}>({
    url: '/tags/attach',
    method: 'post',
    ...variables
  })

export const useAttachTag = (
  options?: Omit<reactQuery.UseMutationOptions<Schemas.RestResponse, AttachTagError, AttachTagVariables>, 'mutationFn'>
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<Schemas.RestResponse, AttachTagError, AttachTagVariables>(
    (variables: AttachTagVariables) => fetchAttachTag({ ...fetcherOptions, ...variables }),
    options
  )
}

export type DetachTagQueryParams = {
  accountId?: string
  appId?: string
}

export type DetachTagError = Fetcher.ErrorWrapper<undefined>

export type DetachTagVariables = {
  body: RequestBodies.HarnessTagLink
  queryParams?: DetachTagQueryParams
} & PortalContext['fetcherOptions']

export const fetchDetachTag = (variables: DetachTagVariables) =>
  portalFetch<Schemas.RestResponse, DetachTagError, RequestBodies.HarnessTagLink, {}, DetachTagQueryParams, {}>({
    url: '/tags/detach',
    method: 'post',
    ...variables
  })

export const useDetachTag = (
  options?: Omit<reactQuery.UseMutationOptions<Schemas.RestResponse, DetachTagError, DetachTagVariables>, 'mutationFn'>
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<Schemas.RestResponse, DetachTagError, DetachTagVariables>(
    (variables: DetachTagVariables) => fetchDetachTag({ ...fetcherOptions, ...variables }),
    options
  )
}

export type ListResourcesWithTagQueryParams = {
  accountId?: string
  /*
   * @default 0
   */
  offset?: string
  limit?: string
  fieldsIncluded?: string[]
  fieldsExcluded?: string[]
}

export type ListResourcesWithTagError = Fetcher.ErrorWrapper<undefined>

export type ListResourcesWithTagVariables = {
  queryParams?: ListResourcesWithTagQueryParams
} & PortalContext['fetcherOptions']

export const fetchListResourcesWithTag = (variables: ListResourcesWithTagVariables) =>
  portalFetch<
    Schemas.RestResponsePageResponseHarnessTagLink,
    ListResourcesWithTagError,
    undefined,
    {},
    ListResourcesWithTagQueryParams,
    {}
  >({ url: '/tags/links', method: 'get', ...variables })

export const useListResourcesWithTag = (
  variables: ListResourcesWithTagVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponsePageResponseHarnessTagLink,
      ListResourcesWithTagError,
      Schemas.RestResponsePageResponseHarnessTagLink
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponsePageResponseHarnessTagLink,
    ListResourcesWithTagError,
    Schemas.RestResponsePageResponseHarnessTagLink
  >(
    queryKeyFn({ path: '/tags/links', operationId: 'listResourcesWithTag', variables }),
    () => fetchListResourcesWithTag({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type Get22QueryParams = {
  accountId?: string
  includeInUseValues?: boolean
  key: string
}

export type Get22Error = Fetcher.ErrorWrapper<undefined>

export type Get22Variables = {
  queryParams: Get22QueryParams
} & PortalContext['fetcherOptions']

export const fetchGet22 = (variables: Get22Variables) =>
  portalFetch<Schemas.RestResponseHarnessTag, Get22Error, undefined, {}, Get22QueryParams, {}>({
    url: '/tags/for-key',
    method: 'get',
    ...variables
  })

export const useGet22 = (
  variables: Get22Variables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.RestResponseHarnessTag, Get22Error, Schemas.RestResponseHarnessTag>,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<Schemas.RestResponseHarnessTag, Get22Error, Schemas.RestResponseHarnessTag>(
    queryKeyFn({ path: '/tags/for-key', operationId: 'get22', variables }),
    () => fetchGet22({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type List25QueryParams = {
  accountId?: string
  includeInUseValues?: boolean
  /*
   * @default 0
   */
  offset?: string
  limit?: string
  fieldsIncluded?: string[]
  fieldsExcluded?: string[]
}

export type List25Error = Fetcher.ErrorWrapper<undefined>

export type List25Variables = {
  queryParams?: List25QueryParams
} & PortalContext['fetcherOptions']

export const fetchList25 = (variables: List25Variables) =>
  portalFetch<Schemas.RestResponsePageResponseHarnessTag, List25Error, undefined, {}, List25QueryParams, {}>({
    url: '/tags',
    method: 'get',
    ...variables
  })

export const useList25 = (
  variables: List25Variables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponsePageResponseHarnessTag,
      List25Error,
      Schemas.RestResponsePageResponseHarnessTag
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponsePageResponseHarnessTag,
    List25Error,
    Schemas.RestResponsePageResponseHarnessTag
  >(
    queryKeyFn({ path: '/tags', operationId: 'list25', variables }),
    () => fetchList25({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type Create1QueryParams = {
  accountId?: string
}

export type Create1Error = Fetcher.ErrorWrapper<undefined>

export type Create1Variables = {
  body: RequestBodies.HarnessTag
  queryParams?: Create1QueryParams
} & PortalContext['fetcherOptions']

export const fetchCreate1 = (variables: Create1Variables) =>
  portalFetch<Schemas.RestResponseHarnessTag, Create1Error, RequestBodies.HarnessTag, {}, Create1QueryParams, {}>({
    url: '/tags',
    method: 'post',
    ...variables
  })

export const useCreate1 = (
  options?: Omit<
    reactQuery.UseMutationOptions<Schemas.RestResponseHarnessTag, Create1Error, Create1Variables>,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<Schemas.RestResponseHarnessTag, Create1Error, Create1Variables>(
    (variables: Create1Variables) => fetchCreate1({ ...fetcherOptions, ...variables }),
    options
  )
}

export type Update16QueryParams = {
  accountId?: string
  key: string
}

export type Update16Error = Fetcher.ErrorWrapper<undefined>

export type Update16Variables = {
  body: RequestBodies.HarnessTag
  queryParams: Update16QueryParams
} & PortalContext['fetcherOptions']

export const fetchUpdate16 = (variables: Update16Variables) =>
  portalFetch<Schemas.RestResponseHarnessTag, Update16Error, RequestBodies.HarnessTag, {}, Update16QueryParams, {}>({
    url: '/tags',
    method: 'put',
    ...variables
  })

export const useUpdate16 = (
  options?: Omit<
    reactQuery.UseMutationOptions<Schemas.RestResponseHarnessTag, Update16Error, Update16Variables>,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<Schemas.RestResponseHarnessTag, Update16Error, Update16Variables>(
    (variables: Update16Variables) => fetchUpdate16({ ...fetcherOptions, ...variables }),
    options
  )
}

export type Delete15QueryParams = {
  accountId?: string
  key: string
}

export type Delete15Error = Fetcher.ErrorWrapper<undefined>

export type Delete15Variables = {
  queryParams: Delete15QueryParams
} & PortalContext['fetcherOptions']

export const fetchDelete15 = (variables: Delete15Variables) =>
  portalFetch<Schemas.RestResponse, Delete15Error, undefined, {}, Delete15QueryParams, {}>({
    url: '/tags',
    method: 'delete',
    ...variables
  })

export const useDelete15 = (
  options?: Omit<reactQuery.UseMutationOptions<Schemas.RestResponse, Delete15Error, Delete15Variables>, 'mutationFn'>
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<Schemas.RestResponse, Delete15Error, Delete15Variables>(
    (variables: Delete15Variables) => fetchDelete15({ ...fetcherOptions, ...variables }),
    options
  )
}

export type Create2PathParams = {
  accountId: string
}

export type Create2Error = Fetcher.ErrorWrapper<undefined>

export type Create2Variables = {
  body?: RequestBodies.HarnessUserGroupDTO
  pathParams: Create2PathParams
} & PortalContext['fetcherOptions']

export const fetchCreate2 = (variables: Create2Variables) =>
  portalFetch<
    Schemas.RestResponseHarnessUserGroup,
    Create2Error,
    RequestBodies.HarnessUserGroupDTO,
    {},
    {},
    Create2PathParams
  >({ url: '/harnessUserGroup/{accountId}', method: 'post', ...variables })

export const useCreate2 = (
  options?: Omit<
    reactQuery.UseMutationOptions<Schemas.RestResponseHarnessUserGroup, Create2Error, Create2Variables>,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<Schemas.RestResponseHarnessUserGroup, Create2Error, Create2Variables>(
    (variables: Create2Variables) => fetchCreate2({ ...fetcherOptions, ...variables }),
    options
  )
}

export type ListHarnessUserGroupQueryParams = {
  accountId?: string
}

export type ListHarnessUserGroupError = Fetcher.ErrorWrapper<undefined>

export type ListHarnessUserGroupVariables = {
  queryParams?: ListHarnessUserGroupQueryParams
} & PortalContext['fetcherOptions']

export const fetchListHarnessUserGroup = (variables: ListHarnessUserGroupVariables) =>
  portalFetch<
    Schemas.RestResponseListHarnessUserGroup,
    ListHarnessUserGroupError,
    undefined,
    {},
    ListHarnessUserGroupQueryParams,
    {}
  >({ url: '/harnessUserGroup/listHarnessUserGroupForAccount', method: 'get', ...variables })

export const useListHarnessUserGroup = (
  variables: ListHarnessUserGroupVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponseListHarnessUserGroup,
      ListHarnessUserGroupError,
      Schemas.RestResponseListHarnessUserGroup
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponseListHarnessUserGroup,
    ListHarnessUserGroupError,
    Schemas.RestResponseListHarnessUserGroup
  >(
    queryKeyFn({
      path: '/harnessUserGroup/listHarnessUserGroupForAccount',
      operationId: 'listHarnessUserGroup',
      variables
    }),
    () => fetchListHarnessUserGroup({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type ListAllHarnessSupportUsersQueryParams = {
  accountId?: string
}

export type ListAllHarnessSupportUsersError = Fetcher.ErrorWrapper<undefined>

export type ListAllHarnessSupportUsersVariables = {
  queryParams?: ListAllHarnessSupportUsersQueryParams
} & PortalContext['fetcherOptions']

export const fetchListAllHarnessSupportUsers = (variables: ListAllHarnessSupportUsersVariables) =>
  portalFetch<
    Schemas.RestResponseListHarnessSupportUserDTO,
    ListAllHarnessSupportUsersError,
    undefined,
    {},
    ListAllHarnessSupportUsersQueryParams,
    {}
  >({ url: '/harnessUserGroup/listAllHarnessSupportUsers', method: 'get', ...variables })

export const useListAllHarnessSupportUsers = (
  variables: ListAllHarnessSupportUsersVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponseListHarnessSupportUserDTO,
      ListAllHarnessSupportUsersError,
      Schemas.RestResponseListHarnessSupportUserDTO
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponseListHarnessSupportUserDTO,
    ListAllHarnessSupportUsersError,
    Schemas.RestResponseListHarnessSupportUserDTO
  >(
    queryKeyFn({
      path: '/harnessUserGroup/listAllHarnessSupportUsers',
      operationId: 'listAllHarnessSupportUsers',
      variables
    }),
    () => fetchListAllHarnessSupportUsers({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type UpdateHarnessUserGroupMembersPathParams = {
  accountId: string
  harnessUserGroupId: string
}

export type UpdateHarnessUserGroupMembersError = Fetcher.ErrorWrapper<undefined>

export type UpdateHarnessUserGroupMembersVariables = {
  body?: RequestBodies.HarnessUserGroupDTO
  pathParams: UpdateHarnessUserGroupMembersPathParams
} & PortalContext['fetcherOptions']

export const fetchUpdateHarnessUserGroupMembers = (variables: UpdateHarnessUserGroupMembersVariables) =>
  portalFetch<
    Schemas.RestResponseHarnessUserGroup,
    UpdateHarnessUserGroupMembersError,
    RequestBodies.HarnessUserGroupDTO,
    {},
    {},
    UpdateHarnessUserGroupMembersPathParams
  >({ url: '/harnessUserGroup/{accountId}/{harnessUserGroupId}', method: 'put', ...variables })

export const useUpdateHarnessUserGroupMembers = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.RestResponseHarnessUserGroup,
      UpdateHarnessUserGroupMembersError,
      UpdateHarnessUserGroupMembersVariables
    >,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<
    Schemas.RestResponseHarnessUserGroup,
    UpdateHarnessUserGroupMembersError,
    UpdateHarnessUserGroupMembersVariables
  >(
    (variables: UpdateHarnessUserGroupMembersVariables) =>
      fetchUpdateHarnessUserGroupMembers({ ...fetcherOptions, ...variables }),
    options
  )
}

export type DeleteHarnessUserGroupPathParams = {
  accountId: string
  harnessUserGroupId: string
}

export type DeleteHarnessUserGroupError = Fetcher.ErrorWrapper<undefined>

export type DeleteHarnessUserGroupVariables = {
  pathParams: DeleteHarnessUserGroupPathParams
} & PortalContext['fetcherOptions']

export const fetchDeleteHarnessUserGroup = (variables: DeleteHarnessUserGroupVariables) =>
  portalFetch<
    Schemas.RestResponseBoolean,
    DeleteHarnessUserGroupError,
    undefined,
    {},
    {},
    DeleteHarnessUserGroupPathParams
  >({ url: '/harnessUserGroup/{accountId}/{harnessUserGroupId}', method: 'delete', ...variables })

export const useDeleteHarnessUserGroup = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.RestResponseBoolean,
      DeleteHarnessUserGroupError,
      DeleteHarnessUserGroupVariables
    >,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<
    Schemas.RestResponseBoolean,
    DeleteHarnessUserGroupError,
    DeleteHarnessUserGroupVariables
  >(
    (variables: DeleteHarnessUserGroupVariables) => fetchDeleteHarnessUserGroup({ ...fetcherOptions, ...variables }),
    options
  )
}

export type DeleteHarnessUserGroupWorkflowPathParams = {
  accountId: string
  harnessGroupAccountId: string
  harnessUserGroupId: string
}

export type DeleteHarnessUserGroupWorkflowError = Fetcher.ErrorWrapper<undefined>

export type DeleteHarnessUserGroupWorkflowVariables = {
  pathParams: DeleteHarnessUserGroupWorkflowPathParams
} & PortalContext['fetcherOptions']

export const fetchDeleteHarnessUserGroupWorkflow = (variables: DeleteHarnessUserGroupWorkflowVariables) =>
  portalFetch<
    Schemas.RestResponseBoolean,
    DeleteHarnessUserGroupWorkflowError,
    undefined,
    {},
    {},
    DeleteHarnessUserGroupWorkflowPathParams
  >({
    url: '/harnessUserGroup/{accountId}/deleteHarnessUserGroupWorkflow/{harnessGroupAccountId}/{harnessUserGroupId}',
    method: 'delete',
    ...variables
  })

export const useDeleteHarnessUserGroupWorkflow = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.RestResponseBoolean,
      DeleteHarnessUserGroupWorkflowError,
      DeleteHarnessUserGroupWorkflowVariables
    >,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<
    Schemas.RestResponseBoolean,
    DeleteHarnessUserGroupWorkflowError,
    DeleteHarnessUserGroupWorkflowVariables
  >(
    (variables: DeleteHarnessUserGroupWorkflowVariables) =>
      fetchDeleteHarnessUserGroupWorkflow({ ...fetcherOptions, ...variables }),
    options
  )
}

export type CheckIfHarnessSupportEnabledForAccountQueryParams = {
  accountId?: string
}

export type CheckIfHarnessSupportEnabledForAccountError = Fetcher.ErrorWrapper<undefined>

export type CheckIfHarnessSupportEnabledForAccountVariables = {
  queryParams?: CheckIfHarnessSupportEnabledForAccountQueryParams
} & PortalContext['fetcherOptions']

export const fetchCheckIfHarnessSupportEnabledForAccount = (
  variables: CheckIfHarnessSupportEnabledForAccountVariables
) =>
  portalFetch<
    Schemas.RestResponseBoolean,
    CheckIfHarnessSupportEnabledForAccountError,
    undefined,
    {},
    CheckIfHarnessSupportEnabledForAccountQueryParams,
    {}
  >({ url: '/harnessUserGroup/checkIfHarnessSupportEnabledForAccount', method: 'get', ...variables })

export const useCheckIfHarnessSupportEnabledForAccount = (
  variables: CheckIfHarnessSupportEnabledForAccountVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponseBoolean,
      CheckIfHarnessSupportEnabledForAccountError,
      Schemas.RestResponseBoolean
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponseBoolean,
    CheckIfHarnessSupportEnabledForAccountError,
    Schemas.RestResponseBoolean
  >(
    queryKeyFn({
      path: '/harnessUserGroup/checkIfHarnessSupportEnabledForAccount',
      operationId: 'checkIfHarnessSupportEnabledForAccount',
      variables
    }),
    () => fetchCheckIfHarnessSupportEnabledForAccount({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type CheckIfHarnessSupportEnabledForAccountInternalQueryParams = {
  accountId?: string
}

export type CheckIfHarnessSupportEnabledForAccountInternalError = Fetcher.ErrorWrapper<undefined>

export type CheckIfHarnessSupportEnabledForAccountInternalVariables = {
  queryParams?: CheckIfHarnessSupportEnabledForAccountInternalQueryParams
} & PortalContext['fetcherOptions']

export const fetchCheckIfHarnessSupportEnabledForAccountInternal = (
  variables: CheckIfHarnessSupportEnabledForAccountInternalVariables
) =>
  portalFetch<
    Schemas.RestResponseBoolean,
    CheckIfHarnessSupportEnabledForAccountInternalError,
    undefined,
    {},
    CheckIfHarnessSupportEnabledForAccountInternalQueryParams,
    {}
  >({ url: '/harnessUserGroup/supportEnabledStatus', method: 'get', ...variables })

export const useCheckIfHarnessSupportEnabledForAccountInternal = (
  variables: CheckIfHarnessSupportEnabledForAccountInternalVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponseBoolean,
      CheckIfHarnessSupportEnabledForAccountInternalError,
      Schemas.RestResponseBoolean
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponseBoolean,
    CheckIfHarnessSupportEnabledForAccountInternalError,
    Schemas.RestResponseBoolean
  >(
    queryKeyFn({
      path: '/harnessUserGroup/supportEnabledStatus',
      operationId: 'checkIfHarnessSupportEnabledForAccountInternal',
      variables
    }),
    () => fetchCheckIfHarnessSupportEnabledForAccountInternal({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type GetSupportUsersInternalError = Fetcher.ErrorWrapper<undefined>

export type GetSupportUsersInternalVariables = PortalContext['fetcherOptions']

export const fetchGetSupportUsersInternal = (variables: GetSupportUsersInternalVariables) =>
  portalFetch<Schemas.RestResponseListHarnessSupportUserDTO, GetSupportUsersInternalError, undefined, {}, {}, {}>({
    url: '/harnessUserGroup/supportUsers',
    method: 'get',
    ...variables
  })

export const useGetSupportUsersInternal = (
  variables: GetSupportUsersInternalVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponseListHarnessSupportUserDTO,
      GetSupportUsersInternalError,
      Schemas.RestResponseListHarnessSupportUserDTO
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponseListHarnessSupportUserDTO,
    GetSupportUsersInternalError,
    Schemas.RestResponseListHarnessSupportUserDTO
  >(
    queryKeyFn({ path: '/harnessUserGroup/supportUsers', operationId: 'getSupportUsersInternal', variables }),
    () => fetchGetSupportUsersInternal({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type Get23Error = Fetcher.ErrorWrapper<undefined>

export type Get23Variables = PortalContext['fetcherOptions']

export const fetchGet23 = (variables: Get23Variables) =>
  portalFetch<Schemas.RestResponseString, Get23Error, undefined, {}, {}, {}>({
    url: '/health',
    method: 'get',
    ...variables
  })

export const useGet23 = (
  variables: Get23Variables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.RestResponseString, Get23Error, Schemas.RestResponseString>,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<Schemas.RestResponseString, Get23Error, Schemas.RestResponseString>(
    queryKeyFn({ path: '/health', operationId: 'get23', variables }),
    () => fetchGet23({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type GetConfiguration1QueryParams = {
  configurationType?: 'MONGO' | 'ELASTICSEARCH' | 'SEARCH_ENABLED'
}

export type GetConfiguration1Error = Fetcher.ErrorWrapper<undefined>

export type GetConfiguration1Variables = {
  queryParams?: GetConfiguration1QueryParams
} & PortalContext['fetcherOptions']

export const fetchGetConfiguration1 = (variables: GetConfiguration1Variables) =>
  portalFetch<Schemas.RestResponseObject, GetConfiguration1Error, undefined, {}, GetConfiguration1QueryParams, {}>({
    url: '/health/configuration',
    method: 'get',
    ...variables
  })

export const useGetConfiguration1 = (
  variables: GetConfiguration1Variables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.RestResponseObject, GetConfiguration1Error, Schemas.RestResponseObject>,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<Schemas.RestResponseObject, GetConfiguration1Error, Schemas.RestResponseObject>(
    queryKeyFn({ path: '/health/configuration', operationId: 'getConfiguration1', variables }),
    () => fetchGetConfiguration1({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type List26QueryParams = {
  accountId?: string
  appId?: string
  serviceId?: string
  applicationManifestId?: string
}

export type List26Error = Fetcher.ErrorWrapper<undefined>

export type List26Variables = {
  queryParams?: List26QueryParams
} & PortalContext['fetcherOptions']

export const fetchList26 = (variables: List26Variables) =>
  portalFetch<Schemas.RestResponseListHelmChart, List26Error, undefined, {}, List26QueryParams, {}>({
    url: '/helm-charts',
    method: 'get',
    ...variables
  })

export const useList26 = (
  variables: List26Variables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.RestResponseListHelmChart, List26Error, Schemas.RestResponseListHelmChart>,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<Schemas.RestResponseListHelmChart, List26Error, Schemas.RestResponseListHelmChart>(
    queryKeyFn({ path: '/helm-charts', operationId: 'list26', variables }),
    () => fetchList26({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type Save9QueryParams = {
  appId?: string
  serviceId?: string
}

export type Save9Error = Fetcher.ErrorWrapper<undefined>

export type Save9Variables = {
  body?: Schemas.HelmChart
  queryParams?: Save9QueryParams
} & PortalContext['fetcherOptions']

export const fetchSave9 = (variables: Save9Variables) =>
  portalFetch<Schemas.RestResponseHelmChart, Save9Error, Schemas.HelmChart, {}, Save9QueryParams, {}>({
    url: '/helm-charts',
    method: 'post',
    ...variables
  })

export const useSave9 = (
  options?: Omit<reactQuery.UseMutationOptions<Schemas.RestResponseHelmChart, Save9Error, Save9Variables>, 'mutationFn'>
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<Schemas.RestResponseHelmChart, Save9Error, Save9Variables>(
    (variables: Save9Variables) => fetchSave9({ ...fetcherOptions, ...variables }),
    options
  )
}

export type GetHelmChartsQueryParams = {
  accountId?: string
  appId?: string
  serviceId?: string
  applicationManifestId?: string
}

export type GetHelmChartsError = Fetcher.ErrorWrapper<undefined>

export type GetHelmChartsVariables = {
  queryParams?: GetHelmChartsQueryParams
} & PortalContext['fetcherOptions']

export const fetchGetHelmCharts = (variables: GetHelmChartsVariables) =>
  portalFetch<Schemas.RestResponseListHelmChart, GetHelmChartsError, undefined, {}, GetHelmChartsQueryParams, {}>({
    url: '/helm-charts/collectIfCollectionDisabled',
    method: 'get',
    ...variables
  })

export const useGetHelmCharts = (
  variables: GetHelmChartsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponseListHelmChart,
      GetHelmChartsError,
      Schemas.RestResponseListHelmChart
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<Schemas.RestResponseListHelmChart, GetHelmChartsError, Schemas.RestResponseListHelmChart>(
    queryKeyFn({ path: '/helm-charts/collectIfCollectionDisabled', operationId: 'getHelmCharts', variables }),
    () => fetchGetHelmCharts({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type Get24PathParams = {
  hostId: string
}

export type Get24QueryParams = {
  appId?: string
  envId?: string
}

export type Get24Error = Fetcher.ErrorWrapper<undefined>

export type Get24Variables = {
  pathParams: Get24PathParams
  queryParams?: Get24QueryParams
} & PortalContext['fetcherOptions']

export const fetchGet24 = (variables: Get24Variables) =>
  portalFetch<Schemas.RestResponseHost, Get24Error, undefined, {}, Get24QueryParams, Get24PathParams>({
    url: '/hosts/{hostId}',
    method: 'get',
    ...variables
  })

export const useGet24 = (
  variables: Get24Variables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.RestResponseHost, Get24Error, Schemas.RestResponseHost>,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<Schemas.RestResponseHost, Get24Error, Schemas.RestResponseHost>(
    queryKeyFn({ path: '/hosts/{hostId}', operationId: 'get24', variables }),
    () => fetchGet24({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type Update17PathParams = {
  hostId: string
}

export type Update17QueryParams = {
  appId?: string
  envId?: string
}

export type Update17Error = Fetcher.ErrorWrapper<undefined>

export type Update17Variables = {
  body: Schemas.Host
  pathParams: Update17PathParams
  queryParams?: Update17QueryParams
} & PortalContext['fetcherOptions']

export const fetchUpdate17 = (variables: Update17Variables) =>
  portalFetch<Schemas.RestResponseHost, Update17Error, Schemas.Host, {}, Update17QueryParams, Update17PathParams>({
    url: '/hosts/{hostId}',
    method: 'put',
    ...variables
  })

export const useUpdate17 = (
  options?: Omit<
    reactQuery.UseMutationOptions<Schemas.RestResponseHost, Update17Error, Update17Variables>,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<Schemas.RestResponseHost, Update17Error, Update17Variables>(
    (variables: Update17Variables) => fetchUpdate17({ ...fetcherOptions, ...variables }),
    options
  )
}

export type Delete16PathParams = {
  hostId: string
}

export type Delete16QueryParams = {
  appId?: string
  envId?: string
}

export type Delete16Error = Fetcher.ErrorWrapper<undefined>

export type Delete16Variables = {
  pathParams: Delete16PathParams
  queryParams?: Delete16QueryParams
} & PortalContext['fetcherOptions']

export const fetchDelete16 = (variables: Delete16Variables) =>
  portalFetch<Schemas.RestResponse, Delete16Error, undefined, {}, Delete16QueryParams, Delete16PathParams>({
    url: '/hosts/{hostId}',
    method: 'delete',
    ...variables
  })

export const useDelete16 = (
  options?: Omit<reactQuery.UseMutationOptions<Schemas.RestResponse, Delete16Error, Delete16Variables>, 'mutationFn'>
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<Schemas.RestResponse, Delete16Error, Delete16Variables>(
    (variables: Delete16Variables) => fetchDelete16({ ...fetcherOptions, ...variables }),
    options
  )
}

export type List27QueryParams = {
  /*
   * @default 0
   */
  offset?: string
  limit?: string
  fieldsIncluded?: string[]
  fieldsExcluded?: string[]
}

export type List27Error = Fetcher.ErrorWrapper<undefined>

export type List27Variables = {
  queryParams?: List27QueryParams
} & PortalContext['fetcherOptions']

export const fetchList27 = (variables: List27Variables) =>
  portalFetch<Schemas.RestResponsePageResponseHost, List27Error, undefined, {}, List27QueryParams, {}>({
    url: '/hosts',
    method: 'get',
    ...variables
  })

export const useList27 = (
  variables: List27Variables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.RestResponsePageResponseHost, List27Error, Schemas.RestResponsePageResponseHost>,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<Schemas.RestResponsePageResponseHost, List27Error, Schemas.RestResponsePageResponseHost>(
    queryKeyFn({ path: '/hosts', operationId: 'list27', variables }),
    () => fetchList27({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type ImportHostsQueryParams = {
  appId?: string
  infraId?: string
  envId?: string
}

export type ImportHostsError = Fetcher.ErrorWrapper<undefined>

export type ImportHostsVariables = {
  body?: RequestBodies.ImportAccountData
  queryParams?: ImportHostsQueryParams
} & PortalContext['fetcherOptions']

export const fetchImportHosts = (variables: ImportHostsVariables) =>
  portalFetch<Schemas.RestResponse, ImportHostsError, RequestBodies.ImportAccountData, {}, ImportHostsQueryParams, {}>({
    url: '/hosts/import',
    method: 'post',
    ...variables
  })

export const useImportHosts = (
  options?: Omit<
    reactQuery.UseMutationOptions<Schemas.RestResponse, ImportHostsError, ImportHostsVariables>,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<Schemas.RestResponse, ImportHostsError, ImportHostsVariables>(
    (variables: ImportHostsVariables) => fetchImportHosts({ ...fetcherOptions, ...variables }),
    options
  )
}

export type ExportHostsQueryParams = {
  appId?: string
  infraId?: string
  envId?: string
}

export type ExportHostsError = Fetcher.ErrorWrapper<undefined>

export type ExportHostsVariables = {
  queryParams?: ExportHostsQueryParams
} & PortalContext['fetcherOptions']

export const fetchExportHosts = (variables: ExportHostsVariables) =>
  portalFetch<undefined, ExportHostsError, undefined, {}, ExportHostsQueryParams, {}>({
    url: '/hosts/export',
    method: 'get',
    ...variables
  })

export const useExportHosts = (
  variables: ExportHostsVariables,
  options?: Omit<reactQuery.UseQueryOptions<undefined, ExportHostsError, undefined>, 'queryKey' | 'queryFn'>
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<undefined, ExportHostsError, undefined>(
    queryKeyFn({ path: '/hosts/export', operationId: 'exportHosts', variables }),
    () => fetchExportHosts({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type GetAccount1PathParams = {
  accountId: string
}

export type GetAccount1Error = Fetcher.ErrorWrapper<undefined>

export type GetAccount1Variables = {
  pathParams: GetAccount1PathParams
} & PortalContext['fetcherOptions']

export const fetchGetAccount1 = (variables: GetAccount1Variables) =>
  portalFetch<Schemas.RestResponseAccount, GetAccount1Error, undefined, {}, {}, GetAccount1PathParams>({
    url: '/identity/accounts/{accountId}',
    method: 'get',
    ...variables
  })

export const useGetAccount1 = (
  variables: GetAccount1Variables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.RestResponseAccount, GetAccount1Error, Schemas.RestResponseAccount>,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<Schemas.RestResponseAccount, GetAccount1Error, Schemas.RestResponseAccount>(
    queryKeyFn({ path: '/identity/accounts/{accountId}', operationId: 'getAccount1', variables }),
    () => fetchGetAccount1({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type ListAccountsQueryParams = {
  /*
   * @default 0
   */
  offset?: string
  limit?: string
  fieldsIncluded?: string[]
  fieldsExcluded?: string[]
}

export type ListAccountsError = Fetcher.ErrorWrapper<undefined>

export type ListAccountsVariables = {
  queryParams?: ListAccountsQueryParams
} & PortalContext['fetcherOptions']

export const fetchListAccounts = (variables: ListAccountsVariables) =>
  portalFetch<Schemas.RestResponseListAccount, ListAccountsError, undefined, {}, ListAccountsQueryParams, {}>({
    url: '/identity/accounts',
    method: 'get',
    ...variables
  })

export const useListAccounts = (
  variables: ListAccountsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.RestResponseListAccount, ListAccountsError, Schemas.RestResponseListAccount>,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<Schemas.RestResponseListAccount, ListAccountsError, Schemas.RestResponseListAccount>(
    queryKeyFn({ path: '/identity/accounts', operationId: 'listAccounts', variables }),
    () => fetchListAccounts({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type GetUserError = Fetcher.ErrorWrapper<undefined>

export type GetUserVariables = PortalContext['fetcherOptions']

export const fetchGetUser = (variables: GetUserVariables) =>
  portalFetch<Schemas.RestResponseUser, GetUserError, undefined, {}, {}, {}>({
    url: '/identity/user',
    method: 'get',
    ...variables
  })

export const useGetUser = (
  variables: GetUserVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.RestResponseUser, GetUserError, Schemas.RestResponseUser>,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<Schemas.RestResponseUser, GetUserError, Schemas.RestResponseUser>(
    queryKeyFn({ path: '/identity/user', operationId: 'getUser', variables }),
    () => fetchGetUser({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type LogoutQueryParams = {
  accountId?: string
  userId?: string
}

export type LogoutError = Fetcher.ErrorWrapper<undefined>

export type LogoutVariables = {
  queryParams?: LogoutQueryParams
} & PortalContext['fetcherOptions']

export const fetchLogout = (variables: LogoutVariables) =>
  portalFetch<Schemas.RestResponseLogoutResponse, LogoutError, undefined, {}, LogoutQueryParams, {}>({
    url: '/identity/user/logout',
    method: 'get',
    ...variables
  })

export const useLogout = (
  variables: LogoutVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.RestResponseLogoutResponse, LogoutError, Schemas.RestResponseLogoutResponse>,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<Schemas.RestResponseLogoutResponse, LogoutError, Schemas.RestResponseLogoutResponse>(
    queryKeyFn({ path: '/identity/user/logout', operationId: 'logout', variables }),
    () => fetchLogout({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type LoginUserQueryParams = {
  email?: string
}

export type LoginUserError = Fetcher.ErrorWrapper<undefined>

export type LoginUserVariables = {
  queryParams?: LoginUserQueryParams
} & PortalContext['fetcherOptions']

export const fetchLoginUser = (variables: LoginUserVariables) =>
  portalFetch<Schemas.RestResponseUser, LoginUserError, undefined, {}, LoginUserQueryParams, {}>({
    url: '/identity/user/login',
    method: 'get',
    ...variables
  })

export const useLoginUser = (
  variables: LoginUserVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.RestResponseUser, LoginUserError, Schemas.RestResponseUser>,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<Schemas.RestResponseUser, LoginUserError, Schemas.RestResponseUser>(
    queryKeyFn({ path: '/identity/user/login', operationId: 'loginUser', variables }),
    () => fetchLoginUser({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type GetAccountSettingsQueryParams = {
  accountId?: string
}

export type GetAccountSettingsError = Fetcher.ErrorWrapper<undefined>

export type GetAccountSettingsVariables = {
  queryParams?: GetAccountSettingsQueryParams
} & PortalContext['fetcherOptions']

export const fetchGetAccountSettings = (variables: GetAccountSettingsVariables) =>
  portalFetch<
    Schemas.RestResponseAccountSettingsResponse,
    GetAccountSettingsError,
    undefined,
    {},
    GetAccountSettingsQueryParams,
    {}
  >({ url: '/identity/account-settings', method: 'get', ...variables })

export const useGetAccountSettings = (
  variables: GetAccountSettingsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponseAccountSettingsResponse,
      GetAccountSettingsError,
      Schemas.RestResponseAccountSettingsResponse
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponseAccountSettingsResponse,
    GetAccountSettingsError,
    Schemas.RestResponseAccountSettingsResponse
  >(
    queryKeyFn({ path: '/identity/account-settings', operationId: 'getAccountSettings', variables }),
    () => fetchGetAccountSettings({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type SignupOAuthUserQueryParams = {
  provider?: string
}

export type SignupOAuthUserError = Fetcher.ErrorWrapper<undefined>

export type SignupOAuthUserVariables = {
  body?: Schemas.OauthUserInfo
  queryParams?: SignupOAuthUserQueryParams
} & PortalContext['fetcherOptions']

export const fetchSignupOAuthUser = (variables: SignupOAuthUserVariables) =>
  portalFetch<
    Schemas.RestResponseUser,
    SignupOAuthUserError,
    Schemas.OauthUserInfo,
    {},
    SignupOAuthUserQueryParams,
    {}
  >({ url: '/identity/oauth/signup-user', method: 'post', ...variables })

export const useSignupOAuthUser = (
  options?: Omit<
    reactQuery.UseMutationOptions<Schemas.RestResponseUser, SignupOAuthUserError, SignupOAuthUserVariables>,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<Schemas.RestResponseUser, SignupOAuthUserError, SignupOAuthUserVariables>(
    (variables: SignupOAuthUserVariables) => fetchSignupOAuthUser({ ...fetcherOptions, ...variables }),
    options
  )
}

export type GetSwitchAccountInfoQueryParams = {
  accountId?: string
  userId?: string
}

export type GetSwitchAccountInfoError = Fetcher.ErrorWrapper<undefined>

export type GetSwitchAccountInfoVariables = {
  queryParams?: GetSwitchAccountInfoQueryParams
} & PortalContext['fetcherOptions']

export const fetchGetSwitchAccountInfo = (variables: GetSwitchAccountInfoVariables) =>
  portalFetch<
    Schemas.RestResponseRestrictedSwitchAccountInfo,
    GetSwitchAccountInfoError,
    undefined,
    {},
    GetSwitchAccountInfoQueryParams,
    {}
  >({ url: '/identity/restricted-switch-account-info', method: 'get', ...variables })

export const useGetSwitchAccountInfo = (
  variables: GetSwitchAccountInfoVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponseRestrictedSwitchAccountInfo,
      GetSwitchAccountInfoError,
      Schemas.RestResponseRestrictedSwitchAccountInfo
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponseRestrictedSwitchAccountInfo,
    GetSwitchAccountInfoError,
    Schemas.RestResponseRestrictedSwitchAccountInfo
  >(
    queryKeyFn({ path: '/identity/restricted-switch-account-info', operationId: 'getSwitchAccountInfo', variables }),
    () => fetchGetSwitchAccountInfo({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type ListUsersQueryParams = {
  /*
   * @default 0
   */
  offset?: string
  limit?: string
  fieldsIncluded?: string[]
  fieldsExcluded?: string[]
}

export type ListUsersError = Fetcher.ErrorWrapper<undefined>

export type ListUsersVariables = {
  queryParams?: ListUsersQueryParams
} & PortalContext['fetcherOptions']

export const fetchListUsers = (variables: ListUsersVariables) =>
  portalFetch<Schemas.RestResponseListUser, ListUsersError, undefined, {}, ListUsersQueryParams, {}>({
    url: '/identity/users',
    method: 'get',
    ...variables
  })

export const useListUsers = (
  variables: ListUsersVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.RestResponseListUser, ListUsersError, Schemas.RestResponseListUser>,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<Schemas.RestResponseListUser, ListUsersError, Schemas.RestResponseListUser>(
    queryKeyFn({ path: '/identity/users', operationId: 'listUsers', variables }),
    () => fetchListUsers({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type GetElastigroupJsonPathParams = {
  computeProviderId: string
  elastigroupId: string
}

export type GetElastigroupJsonQueryParams = {
  appId?: string
}

export type GetElastigroupJsonError = Fetcher.ErrorWrapper<undefined>

export type GetElastigroupJsonVariables = {
  pathParams: GetElastigroupJsonPathParams
  queryParams?: GetElastigroupJsonQueryParams
} & PortalContext['fetcherOptions']

export const fetchGetElastigroupJson = (variables: GetElastigroupJsonVariables) =>
  portalFetch<
    Schemas.RestResponseString,
    GetElastigroupJsonError,
    undefined,
    {},
    GetElastigroupJsonQueryParams,
    GetElastigroupJsonPathParams
  >({
    url: '/infrastructure-definitions/compute-providers/{computeProviderId}/elasti-groups/{elastigroupId}/json',
    method: 'get',
    ...variables
  })

export const useGetElastigroupJson = (
  variables: GetElastigroupJsonVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.RestResponseString, GetElastigroupJsonError, Schemas.RestResponseString>,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<Schemas.RestResponseString, GetElastigroupJsonError, Schemas.RestResponseString>(
    queryKeyFn({
      path: '/infrastructure-definitions/compute-providers/{computeProviderId}/elasti-groups/{elastigroupId}/json',
      operationId: 'getElastigroupJson',
      variables
    }),
    () => fetchGetElastigroupJson({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type Get25PathParams = {
  infraDefinitionId: string
}

export type Get25QueryParams = {
  appId?: string
  envId?: string
}

export type Get25Error = Fetcher.ErrorWrapper<undefined>

export type Get25Variables = {
  pathParams: Get25PathParams
  queryParams?: Get25QueryParams
} & PortalContext['fetcherOptions']

export const fetchGet25 = (variables: Get25Variables) =>
  portalFetch<
    Schemas.RestResponseInfrastructureDefinition,
    Get25Error,
    undefined,
    {},
    Get25QueryParams,
    Get25PathParams
  >({ url: '/infrastructure-definitions/{infraDefinitionId}', method: 'get', ...variables })

export const useGet25 = (
  variables: Get25Variables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponseInfrastructureDefinition,
      Get25Error,
      Schemas.RestResponseInfrastructureDefinition
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponseInfrastructureDefinition,
    Get25Error,
    Schemas.RestResponseInfrastructureDefinition
  >(
    queryKeyFn({ path: '/infrastructure-definitions/{infraDefinitionId}', operationId: 'get25', variables }),
    () => fetchGet25({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type Update18PathParams = {
  infraDefinitionId: string
}

export type Update18QueryParams = {
  appId?: string
  envId?: string
}

export type Update18Error = Fetcher.ErrorWrapper<undefined>

export type Update18Variables = {
  body: RequestBodies.InfrastructureDefinition
  pathParams: Update18PathParams
  queryParams?: Update18QueryParams
} & PortalContext['fetcherOptions']

export const fetchUpdate18 = (variables: Update18Variables) =>
  portalFetch<
    Schemas.RestResponseInfrastructureDefinition,
    Update18Error,
    RequestBodies.InfrastructureDefinition,
    {},
    Update18QueryParams,
    Update18PathParams
  >({ url: '/infrastructure-definitions/{infraDefinitionId}', method: 'put', ...variables })

export const useUpdate18 = (
  options?: Omit<
    reactQuery.UseMutationOptions<Schemas.RestResponseInfrastructureDefinition, Update18Error, Update18Variables>,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<Schemas.RestResponseInfrastructureDefinition, Update18Error, Update18Variables>(
    (variables: Update18Variables) => fetchUpdate18({ ...fetcherOptions, ...variables }),
    options
  )
}

export type Delete17PathParams = {
  infraDefinitionId: string
}

export type Delete17QueryParams = {
  appId?: string
  envId?: string
}

export type Delete17Error = Fetcher.ErrorWrapper<undefined>

export type Delete17Variables = {
  pathParams: Delete17PathParams
  queryParams?: Delete17QueryParams
} & PortalContext['fetcherOptions']

export const fetchDelete17 = (variables: Delete17Variables) =>
  portalFetch<Schemas.RestResponse, Delete17Error, undefined, {}, Delete17QueryParams, Delete17PathParams>({
    url: '/infrastructure-definitions/{infraDefinitionId}',
    method: 'delete',
    ...variables
  })

export const useDelete17 = (
  options?: Omit<reactQuery.UseMutationOptions<Schemas.RestResponse, Delete17Error, Delete17Variables>, 'mutationFn'>
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<Schemas.RestResponse, Delete17Error, Delete17Variables>(
    (variables: Delete17Variables) => fetchDelete17({ ...fetcherOptions, ...variables }),
    options
  )
}

export type List28QueryParams = {
  /*
   * @default 0
   */
  offset?: string
  limit?: string
  fieldsIncluded?: string[]
  fieldsExcluded?: string[]
}

export type List28Error = Fetcher.ErrorWrapper<undefined>

export type List28Variables = {
  queryParams?: List28QueryParams
} & PortalContext['fetcherOptions']

export const fetchList28 = (variables: List28Variables) =>
  portalFetch<
    Schemas.RestResponsePageResponseInfrastructureDefinition,
    List28Error,
    undefined,
    {},
    List28QueryParams,
    {}
  >({ url: '/infrastructure-definitions', method: 'get', ...variables })

export const useList28 = (
  variables: List28Variables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponsePageResponseInfrastructureDefinition,
      List28Error,
      Schemas.RestResponsePageResponseInfrastructureDefinition
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponsePageResponseInfrastructureDefinition,
    List28Error,
    Schemas.RestResponsePageResponseInfrastructureDefinition
  >(
    queryKeyFn({ path: '/infrastructure-definitions', operationId: 'list28', variables }),
    () => fetchList28({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type Save10QueryParams = {
  appId?: string
  envId?: string
}

export type Save10Error = Fetcher.ErrorWrapper<undefined>

export type Save10Variables = {
  body: RequestBodies.InfrastructureDefinition
  queryParams?: Save10QueryParams
} & PortalContext['fetcherOptions']

export const fetchSave10 = (variables: Save10Variables) =>
  portalFetch<
    Schemas.RestResponseInfrastructureDefinition,
    Save10Error,
    RequestBodies.InfrastructureDefinition,
    {},
    Save10QueryParams,
    {}
  >({ url: '/infrastructure-definitions', method: 'post', ...variables })

export const useSave10 = (
  options?: Omit<
    reactQuery.UseMutationOptions<Schemas.RestResponseInfrastructureDefinition, Save10Error, Save10Variables>,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<Schemas.RestResponseInfrastructureDefinition, Save10Error, Save10Variables>(
    (variables: Save10Variables) => fetchSave10({ ...fetcherOptions, ...variables }),
    options
  )
}

export type GetAppServiceNamesByResourceGroupPathParams = {
  computeProviderId: string
}

export type GetAppServiceNamesByResourceGroupQueryParams = {
  appId?: string
  subscriptionId?: string
  resourceGroupName?: string
  appType?: string
}

export type GetAppServiceNamesByResourceGroupError = Fetcher.ErrorWrapper<undefined>

export type GetAppServiceNamesByResourceGroupVariables = {
  pathParams: GetAppServiceNamesByResourceGroupPathParams
  queryParams?: GetAppServiceNamesByResourceGroupQueryParams
} & PortalContext['fetcherOptions']

export const fetchGetAppServiceNamesByResourceGroup = (variables: GetAppServiceNamesByResourceGroupVariables) =>
  portalFetch<
    Schemas.RestResponseListString,
    GetAppServiceNamesByResourceGroupError,
    undefined,
    {},
    GetAppServiceNamesByResourceGroupQueryParams,
    GetAppServiceNamesByResourceGroupPathParams
  >({
    url: '/infrastructure-definitions/compute-providers/{computeProviderId}/azure-app-services',
    method: 'get',
    ...variables
  })

export const useGetAppServiceNamesByResourceGroup = (
  variables: GetAppServiceNamesByResourceGroupVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponseListString,
      GetAppServiceNamesByResourceGroupError,
      Schemas.RestResponseListString
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponseListString,
    GetAppServiceNamesByResourceGroupError,
    Schemas.RestResponseListString
  >(
    queryKeyFn({
      path: '/infrastructure-definitions/compute-providers/{computeProviderId}/azure-app-services',
      operationId: 'getAppServiceNamesByResourceGroup',
      variables
    }),
    () => fetchGetAppServiceNamesByResourceGroup({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type ListPostError = Fetcher.ErrorWrapper<undefined>

export type ListPostVariables = {
  body?: Schemas.ListInfraDefinitionParams
} & PortalContext['fetcherOptions']

export const fetchListPost = (variables: ListPostVariables) =>
  portalFetch<
    Schemas.RestResponsePageResponseInfrastructureDefinition,
    ListPostError,
    Schemas.ListInfraDefinitionParams,
    {},
    {},
    {}
  >({ url: '/infrastructure-definitions/list', method: 'post', ...variables })

export const useListPost = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.RestResponsePageResponseInfrastructureDefinition,
      ListPostError,
      ListPostVariables
    >,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<
    Schemas.RestResponsePageResponseInfrastructureDefinition,
    ListPostError,
    ListPostVariables
  >((variables: ListPostVariables) => fetchListPost({ ...fetcherOptions, ...variables }), options)
}

export type GetDetailPathParams = {
  infraDefinitionId: string
}

export type GetDetailQueryParams = {
  appId?: string
  envId?: string
}

export type GetDetailError = Fetcher.ErrorWrapper<undefined>

export type GetDetailVariables = {
  pathParams: GetDetailPathParams
  queryParams?: GetDetailQueryParams
} & PortalContext['fetcherOptions']

export const fetchGetDetail = (variables: GetDetailVariables) =>
  portalFetch<
    Schemas.RestResponseInfraDefinitionDetail,
    GetDetailError,
    undefined,
    {},
    GetDetailQueryParams,
    GetDetailPathParams
  >({ url: '/infrastructure-definitions/detail/{infraDefinitionId}', method: 'get', ...variables })

export const useGetDetail = (
  variables: GetDetailVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponseInfraDefinitionDetail,
      GetDetailError,
      Schemas.RestResponseInfraDefinitionDetail
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponseInfraDefinitionDetail,
    GetDetailError,
    Schemas.RestResponseInfraDefinitionDetail
  >(
    queryKeyFn({ path: '/infrastructure-definitions/detail/{infraDefinitionId}', operationId: 'getDetail', variables }),
    () => fetchGetDetail({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type GetAwsLoadBalancerDetailsPathParams = {
  infraDefinitionId: string
}

export type GetAwsLoadBalancerDetailsQueryParams = {
  appId?: string
}

export type GetAwsLoadBalancerDetailsError = Fetcher.ErrorWrapper<undefined>

export type GetAwsLoadBalancerDetailsVariables = {
  pathParams: GetAwsLoadBalancerDetailsPathParams
  queryParams?: GetAwsLoadBalancerDetailsQueryParams
} & PortalContext['fetcherOptions']

export const fetchGetAwsLoadBalancerDetails = (variables: GetAwsLoadBalancerDetailsVariables) =>
  portalFetch<
    Schemas.RestResponseListAwsLoadBalancerDetails,
    GetAwsLoadBalancerDetailsError,
    undefined,
    {},
    GetAwsLoadBalancerDetailsQueryParams,
    GetAwsLoadBalancerDetailsPathParams
  >({
    url: '/infrastructure-definitions/{infraDefinitionId}/aws-elastic-balancers-details',
    method: 'get',
    ...variables
  })

export const useGetAwsLoadBalancerDetails = (
  variables: GetAwsLoadBalancerDetailsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponseListAwsLoadBalancerDetails,
      GetAwsLoadBalancerDetailsError,
      Schemas.RestResponseListAwsLoadBalancerDetails
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponseListAwsLoadBalancerDetails,
    GetAwsLoadBalancerDetailsError,
    Schemas.RestResponseListAwsLoadBalancerDetails
  >(
    queryKeyFn({
      path: '/infrastructure-definitions/{infraDefinitionId}/aws-elastic-balancers-details',
      operationId: 'getAwsLoadBalancerDetails',
      variables
    }),
    () => fetchGetAwsLoadBalancerDetails({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type GetAwsNetworkLoadBalancerDetailsPathParams = {
  infraDefinitionId: string
}

export type GetAwsNetworkLoadBalancerDetailsQueryParams = {
  appId?: string
}

export type GetAwsNetworkLoadBalancerDetailsError = Fetcher.ErrorWrapper<undefined>

export type GetAwsNetworkLoadBalancerDetailsVariables = {
  pathParams: GetAwsNetworkLoadBalancerDetailsPathParams
  queryParams?: GetAwsNetworkLoadBalancerDetailsQueryParams
} & PortalContext['fetcherOptions']

export const fetchGetAwsNetworkLoadBalancerDetails = (variables: GetAwsNetworkLoadBalancerDetailsVariables) =>
  portalFetch<
    Schemas.RestResponseListAwsLoadBalancerDetails,
    GetAwsNetworkLoadBalancerDetailsError,
    undefined,
    {},
    GetAwsNetworkLoadBalancerDetailsQueryParams,
    GetAwsNetworkLoadBalancerDetailsPathParams
  >({
    url: '/infrastructure-definitions/{infraDefinitionId}/aws-network-balancers-details',
    method: 'get',
    ...variables
  })

export const useGetAwsNetworkLoadBalancerDetails = (
  variables: GetAwsNetworkLoadBalancerDetailsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponseListAwsLoadBalancerDetails,
      GetAwsNetworkLoadBalancerDetailsError,
      Schemas.RestResponseListAwsLoadBalancerDetails
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponseListAwsLoadBalancerDetails,
    GetAwsNetworkLoadBalancerDetailsError,
    Schemas.RestResponseListAwsLoadBalancerDetails
  >(
    queryKeyFn({
      path: '/infrastructure-definitions/{infraDefinitionId}/aws-network-balancers-details',
      operationId: 'getAwsNetworkLoadBalancerDetails',
      variables
    }),
    () => fetchGetAwsNetworkLoadBalancerDetails({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type ListElastgroupsPathParams = {
  computeProviderId: string
}

export type ListElastgroupsQueryParams = {
  appId?: string
}

export type ListElastgroupsError = Fetcher.ErrorWrapper<undefined>

export type ListElastgroupsVariables = {
  pathParams: ListElastgroupsPathParams
  queryParams?: ListElastgroupsQueryParams
} & PortalContext['fetcherOptions']

export const fetchListElastgroups = (variables: ListElastgroupsVariables) =>
  portalFetch<
    Schemas.RestResponseListElastiGroup,
    ListElastgroupsError,
    undefined,
    {},
    ListElastgroupsQueryParams,
    ListElastgroupsPathParams
  >({
    url: '/infrastructure-definitions/compute-providers/{computeProviderId}/elasti-groups',
    method: 'get',
    ...variables
  })

export const useListElastgroups = (
  variables: ListElastgroupsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponseListElastiGroup,
      ListElastgroupsError,
      Schemas.RestResponseListElastiGroup
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponseListElastiGroup,
    ListElastgroupsError,
    Schemas.RestResponseListElastiGroup
  >(
    queryKeyFn({
      path: '/infrastructure-definitions/compute-providers/{computeProviderId}/elasti-groups',
      operationId: 'listElastgroups',
      variables
    }),
    () => fetchListElastgroups({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type GetRunningCountForSpotinstPathParams = {
  infraDefinitionId: string
}

export type GetRunningCountForSpotinstQueryParams = {
  appId?: string
  serviceId?: string
  blueGreen?: boolean
  groupNameExpr?: string
}

export type GetRunningCountForSpotinstError = Fetcher.ErrorWrapper<undefined>

export type GetRunningCountForSpotinstVariables = {
  pathParams: GetRunningCountForSpotinstPathParams
  queryParams?: GetRunningCountForSpotinstQueryParams
} & PortalContext['fetcherOptions']

export const fetchGetRunningCountForSpotinst = (variables: GetRunningCountForSpotinstVariables) =>
  portalFetch<
    Schemas.RestResponseSpotinstElastigroupRunningCountData,
    GetRunningCountForSpotinstError,
    undefined,
    {},
    GetRunningCountForSpotinstQueryParams,
    GetRunningCountForSpotinstPathParams
  >({ url: '/infrastructure-definitions/{infraDefinitionId}/elastigroup/runningcount', method: 'get', ...variables })

export const useGetRunningCountForSpotinst = (
  variables: GetRunningCountForSpotinstVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponseSpotinstElastigroupRunningCountData,
      GetRunningCountForSpotinstError,
      Schemas.RestResponseSpotinstElastigroupRunningCountData
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponseSpotinstElastigroupRunningCountData,
    GetRunningCountForSpotinstError,
    Schemas.RestResponseSpotinstElastigroupRunningCountData
  >(
    queryKeyFn({
      path: '/infrastructure-definitions/{infraDefinitionId}/elastigroup/runningcount',
      operationId: 'getRunningCountForSpotinst',
      variables
    }),
    () => fetchGetRunningCountForSpotinst({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type GetAzureLoadBalancersPathParams = {
  infraDefinitionId: string
}

export type GetAzureLoadBalancersQueryParams = {
  appId?: string
}

export type GetAzureLoadBalancersError = Fetcher.ErrorWrapper<undefined>

export type GetAzureLoadBalancersVariables = {
  pathParams: GetAzureLoadBalancersPathParams
  queryParams?: GetAzureLoadBalancersQueryParams
} & PortalContext['fetcherOptions']

export const fetchGetAzureLoadBalancers = (variables: GetAzureLoadBalancersVariables) =>
  portalFetch<
    Schemas.RestResponseListString,
    GetAzureLoadBalancersError,
    undefined,
    {},
    GetAzureLoadBalancersQueryParams,
    GetAzureLoadBalancersPathParams
  >({ url: '/infrastructure-definitions/{infraDefinitionId}/azure-load-balancers', method: 'get', ...variables })

export const useGetAzureLoadBalancers = (
  variables: GetAzureLoadBalancersVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponseListString,
      GetAzureLoadBalancersError,
      Schemas.RestResponseListString
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponseListString,
    GetAzureLoadBalancersError,
    Schemas.RestResponseListString
  >(
    queryKeyFn({
      path: '/infrastructure-definitions/{infraDefinitionId}/azure-load-balancers',
      operationId: 'getAzureLoadBalancers',
      variables
    }),
    () => fetchGetAzureLoadBalancers({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type GetAzureLoadBalancerBackendPoolsPathParams = {
  infraDefinitionId: string
  loadBalancerName: string
}

export type GetAzureLoadBalancerBackendPoolsQueryParams = {
  appId?: string
}

export type GetAzureLoadBalancerBackendPoolsError = Fetcher.ErrorWrapper<undefined>

export type GetAzureLoadBalancerBackendPoolsVariables = {
  pathParams: GetAzureLoadBalancerBackendPoolsPathParams
  queryParams?: GetAzureLoadBalancerBackendPoolsQueryParams
} & PortalContext['fetcherOptions']

export const fetchGetAzureLoadBalancerBackendPools = (variables: GetAzureLoadBalancerBackendPoolsVariables) =>
  portalFetch<
    Schemas.RestResponseListString,
    GetAzureLoadBalancerBackendPoolsError,
    undefined,
    {},
    GetAzureLoadBalancerBackendPoolsQueryParams,
    GetAzureLoadBalancerBackendPoolsPathParams
  >({
    url: '/infrastructure-definitions/{infraDefinitionId}/azure-load-balancers/{loadBalancerName}/backend-pools',
    method: 'get',
    ...variables
  })

export const useGetAzureLoadBalancerBackendPools = (
  variables: GetAzureLoadBalancerBackendPoolsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponseListString,
      GetAzureLoadBalancerBackendPoolsError,
      Schemas.RestResponseListString
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponseListString,
    GetAzureLoadBalancerBackendPoolsError,
    Schemas.RestResponseListString
  >(
    queryKeyFn({
      path: '/infrastructure-definitions/{infraDefinitionId}/azure-load-balancers/{loadBalancerName}/backend-pools',
      operationId: 'getAzureLoadBalancerBackendPools',
      variables
    }),
    () => fetchGetAzureLoadBalancerBackendPools({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type GetAzureSubscriptionsPathParams = {
  computeProviderId: string
}

export type GetAzureSubscriptionsQueryParams = {
  appId?: string
  deploymentType?: string
}

export type GetAzureSubscriptionsError = Fetcher.ErrorWrapper<undefined>

export type GetAzureSubscriptionsVariables = {
  pathParams: GetAzureSubscriptionsPathParams
  queryParams?: GetAzureSubscriptionsQueryParams
} & PortalContext['fetcherOptions']

export const fetchGetAzureSubscriptions = (variables: GetAzureSubscriptionsVariables) =>
  portalFetch<
    Schemas.RestResponseMapStringString,
    GetAzureSubscriptionsError,
    undefined,
    {},
    GetAzureSubscriptionsQueryParams,
    GetAzureSubscriptionsPathParams
  >({
    url: '/infrastructure-definitions/compute-providers/{computeProviderId}/subscriptions',
    method: 'get',
    ...variables
  })

export const useGetAzureSubscriptions = (
  variables: GetAzureSubscriptionsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponseMapStringString,
      GetAzureSubscriptionsError,
      Schemas.RestResponseMapStringString
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponseMapStringString,
    GetAzureSubscriptionsError,
    Schemas.RestResponseMapStringString
  >(
    queryKeyFn({
      path: '/infrastructure-definitions/compute-providers/{computeProviderId}/subscriptions',
      operationId: 'getAzureSubscriptions',
      variables
    }),
    () => fetchGetAzureSubscriptions({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type GetAzureResourceGroupsNamesPathParams = {
  computeProviderId: string
}

export type GetAzureResourceGroupsNamesQueryParams = {
  appId?: string
  deploymentType?: string
  subscriptionId?: string
}

export type GetAzureResourceGroupsNamesError = Fetcher.ErrorWrapper<undefined>

export type GetAzureResourceGroupsNamesVariables = {
  pathParams: GetAzureResourceGroupsNamesPathParams
  queryParams?: GetAzureResourceGroupsNamesQueryParams
} & PortalContext['fetcherOptions']

export const fetchGetAzureResourceGroupsNames = (variables: GetAzureResourceGroupsNamesVariables) =>
  portalFetch<
    Schemas.RestResponseListString,
    GetAzureResourceGroupsNamesError,
    undefined,
    {},
    GetAzureResourceGroupsNamesQueryParams,
    GetAzureResourceGroupsNamesPathParams
  >({
    url: '/infrastructure-definitions/compute-providers/{computeProviderId}/resource-groups',
    method: 'get',
    ...variables
  })

export const useGetAzureResourceGroupsNames = (
  variables: GetAzureResourceGroupsNamesVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponseListString,
      GetAzureResourceGroupsNamesError,
      Schemas.RestResponseListString
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponseListString,
    GetAzureResourceGroupsNamesError,
    Schemas.RestResponseListString
  >(
    queryKeyFn({
      path: '/infrastructure-definitions/compute-providers/{computeProviderId}/resource-groups',
      operationId: 'getAzureResourceGroupsNames',
      variables
    }),
    () => fetchGetAzureResourceGroupsNames({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type GetSubscriptionLocationsPathParams = {
  computeProviderId: string
  subscriptionId: string
}

export type GetSubscriptionLocationsQueryParams = {
  appId?: string
}

export type GetSubscriptionLocationsError = Fetcher.ErrorWrapper<undefined>

export type GetSubscriptionLocationsVariables = {
  pathParams: GetSubscriptionLocationsPathParams
  queryParams?: GetSubscriptionLocationsQueryParams
} & PortalContext['fetcherOptions']

export const fetchGetSubscriptionLocations = (variables: GetSubscriptionLocationsVariables) =>
  portalFetch<
    Schemas.RestResponseListString,
    GetSubscriptionLocationsError,
    undefined,
    {},
    GetSubscriptionLocationsQueryParams,
    GetSubscriptionLocationsPathParams
  >({
    url: '/infrastructure-definitions/compute-providers/{computeProviderId}/subscriptions/{subscriptionId}/locations',
    method: 'get',
    ...variables
  })

export const useGetSubscriptionLocations = (
  variables: GetSubscriptionLocationsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponseListString,
      GetSubscriptionLocationsError,
      Schemas.RestResponseListString
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponseListString,
    GetSubscriptionLocationsError,
    Schemas.RestResponseListString
  >(
    queryKeyFn({
      path: '/infrastructure-definitions/compute-providers/{computeProviderId}/subscriptions/{subscriptionId}/locations',
      operationId: 'getSubscriptionLocations',
      variables
    }),
    () => fetchGetSubscriptionLocations({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type GetCloudProviderLocationsPathParams = {
  computeProviderId: string
}

export type GetCloudProviderLocationsQueryParams = {
  appId?: string
}

export type GetCloudProviderLocationsError = Fetcher.ErrorWrapper<undefined>

export type GetCloudProviderLocationsVariables = {
  pathParams: GetCloudProviderLocationsPathParams
  queryParams?: GetCloudProviderLocationsQueryParams
} & PortalContext['fetcherOptions']

export const fetchGetCloudProviderLocations = (variables: GetCloudProviderLocationsVariables) =>
  portalFetch<
    Schemas.RestResponseListString,
    GetCloudProviderLocationsError,
    undefined,
    {},
    GetCloudProviderLocationsQueryParams,
    GetCloudProviderLocationsPathParams
  >({ url: '/infrastructure-definitions/compute-providers/{computeProviderId}/locations', method: 'get', ...variables })

export const useGetCloudProviderLocations = (
  variables: GetCloudProviderLocationsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponseListString,
      GetCloudProviderLocationsError,
      Schemas.RestResponseListString
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponseListString,
    GetCloudProviderLocationsError,
    Schemas.RestResponseListString
  >(
    queryKeyFn({
      path: '/infrastructure-definitions/compute-providers/{computeProviderId}/locations',
      operationId: 'getCloudProviderLocations',
      variables
    }),
    () => fetchGetCloudProviderLocations({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type GetManagementGroupsPathParams = {
  computeProviderId: string
}

export type GetManagementGroupsQueryParams = {
  appId?: string
}

export type GetManagementGroupsError = Fetcher.ErrorWrapper<undefined>

export type GetManagementGroupsVariables = {
  pathParams: GetManagementGroupsPathParams
  queryParams?: GetManagementGroupsQueryParams
} & PortalContext['fetcherOptions']

export const fetchGetManagementGroups = (variables: GetManagementGroupsVariables) =>
  portalFetch<
    Schemas.RestResponseMapStringString,
    GetManagementGroupsError,
    undefined,
    {},
    GetManagementGroupsQueryParams,
    GetManagementGroupsPathParams
  >({
    url: '/infrastructure-definitions/compute-providers/{computeProviderId}/management-groups',
    method: 'get',
    ...variables
  })

export const useGetManagementGroups = (
  variables: GetManagementGroupsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponseMapStringString,
      GetManagementGroupsError,
      Schemas.RestResponseMapStringString
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponseMapStringString,
    GetManagementGroupsError,
    Schemas.RestResponseMapStringString
  >(
    queryKeyFn({
      path: '/infrastructure-definitions/compute-providers/{computeProviderId}/management-groups',
      operationId: 'getManagementGroups',
      variables
    }),
    () => fetchGetManagementGroups({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type GetAzureVirtualMachineScaleSetsPathParams = {
  computeProviderId: string
}

export type GetAzureVirtualMachineScaleSetsQueryParams = {
  appId?: string
  subscriptionId?: string
  resourceGroupName?: string
  deploymentType?: string
}

export type GetAzureVirtualMachineScaleSetsError = Fetcher.ErrorWrapper<undefined>

export type GetAzureVirtualMachineScaleSetsVariables = {
  pathParams: GetAzureVirtualMachineScaleSetsPathParams
  queryParams?: GetAzureVirtualMachineScaleSetsQueryParams
} & PortalContext['fetcherOptions']

export const fetchGetAzureVirtualMachineScaleSets = (variables: GetAzureVirtualMachineScaleSetsVariables) =>
  portalFetch<
    Schemas.RestResponseMapStringString,
    GetAzureVirtualMachineScaleSetsError,
    undefined,
    {},
    GetAzureVirtualMachineScaleSetsQueryParams,
    GetAzureVirtualMachineScaleSetsPathParams
  >({
    url: '/infrastructure-definitions/compute-providers/{computeProviderId}/vm-scale-sets',
    method: 'get',
    ...variables
  })

export const useGetAzureVirtualMachineScaleSets = (
  variables: GetAzureVirtualMachineScaleSetsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponseMapStringString,
      GetAzureVirtualMachineScaleSetsError,
      Schemas.RestResponseMapStringString
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponseMapStringString,
    GetAzureVirtualMachineScaleSetsError,
    Schemas.RestResponseMapStringString
  >(
    queryKeyFn({
      path: '/infrastructure-definitions/compute-providers/{computeProviderId}/vm-scale-sets',
      operationId: 'getAzureVirtualMachineScaleSets',
      variables
    }),
    () => fetchGetAzureVirtualMachineScaleSets({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type GetAzureVirtualMachineScaleSetByNamePathParams = {
  vmssName: string
  computeProviderId: string
}

export type GetAzureVirtualMachineScaleSetByNameQueryParams = {
  appId?: string
  subscriptionId?: string
  resourceGroupName?: string
  deploymentType?: string
}

export type GetAzureVirtualMachineScaleSetByNameError = Fetcher.ErrorWrapper<undefined>

export type GetAzureVirtualMachineScaleSetByNameVariables = {
  pathParams: GetAzureVirtualMachineScaleSetByNamePathParams
  queryParams?: GetAzureVirtualMachineScaleSetByNameQueryParams
} & PortalContext['fetcherOptions']

export const fetchGetAzureVirtualMachineScaleSetByName = (variables: GetAzureVirtualMachineScaleSetByNameVariables) =>
  portalFetch<
    Schemas.RestResponseVirtualMachineScaleSetData,
    GetAzureVirtualMachineScaleSetByNameError,
    undefined,
    {},
    GetAzureVirtualMachineScaleSetByNameQueryParams,
    GetAzureVirtualMachineScaleSetByNamePathParams
  >({
    url: '/infrastructure-definitions/compute-providers/{computeProviderId}/vm-scale-sets/{vmssName}',
    method: 'get',
    ...variables
  })

export const useGetAzureVirtualMachineScaleSetByName = (
  variables: GetAzureVirtualMachineScaleSetByNameVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponseVirtualMachineScaleSetData,
      GetAzureVirtualMachineScaleSetByNameError,
      Schemas.RestResponseVirtualMachineScaleSetData
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponseVirtualMachineScaleSetData,
    GetAzureVirtualMachineScaleSetByNameError,
    Schemas.RestResponseVirtualMachineScaleSetData
  >(
    queryKeyFn({
      path: '/infrastructure-definitions/compute-providers/{computeProviderId}/vm-scale-sets/{vmssName}',
      operationId: 'getAzureVirtualMachineScaleSetByName',
      variables
    }),
    () => fetchGetAzureVirtualMachineScaleSetByName({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type GetAppServiceNamesPathParams = {
  infraDefinitionId: string
}

export type GetAppServiceNamesQueryParams = {
  appId?: string
  appType?: string
}

export type GetAppServiceNamesError = Fetcher.ErrorWrapper<undefined>

export type GetAppServiceNamesVariables = {
  pathParams: GetAppServiceNamesPathParams
  queryParams?: GetAppServiceNamesQueryParams
} & PortalContext['fetcherOptions']

export const fetchGetAppServiceNames = (variables: GetAppServiceNamesVariables) =>
  portalFetch<
    Schemas.RestResponseListString,
    GetAppServiceNamesError,
    undefined,
    {},
    GetAppServiceNamesQueryParams,
    GetAppServiceNamesPathParams
  >({ url: '/infrastructure-definitions/{infraDefinitionId}/azure-app-services', method: 'get', ...variables })

export const useGetAppServiceNames = (
  variables: GetAppServiceNamesVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.RestResponseListString, GetAppServiceNamesError, Schemas.RestResponseListString>,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<Schemas.RestResponseListString, GetAppServiceNamesError, Schemas.RestResponseListString>(
    queryKeyFn({
      path: '/infrastructure-definitions/{infraDefinitionId}/azure-app-services',
      operationId: 'getAppServiceNames',
      variables
    }),
    () => fetchGetAppServiceNames({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type GetAppServiceDeploymentSlotNamesPathParams = {
  computeProviderId: string
  appName: string
}

export type GetAppServiceDeploymentSlotNamesQueryParams = {
  appId?: string
  subscriptionId?: string
  resourceGroupName?: string
  appType?: string
}

export type GetAppServiceDeploymentSlotNamesError = Fetcher.ErrorWrapper<undefined>

export type GetAppServiceDeploymentSlotNamesVariables = {
  pathParams: GetAppServiceDeploymentSlotNamesPathParams
  queryParams?: GetAppServiceDeploymentSlotNamesQueryParams
} & PortalContext['fetcherOptions']

export const fetchGetAppServiceDeploymentSlotNames = (variables: GetAppServiceDeploymentSlotNamesVariables) =>
  portalFetch<
    Schemas.RestResponseListDeploymentSlotData,
    GetAppServiceDeploymentSlotNamesError,
    undefined,
    {},
    GetAppServiceDeploymentSlotNamesQueryParams,
    GetAppServiceDeploymentSlotNamesPathParams
  >({
    url: '/infrastructure-definitions/compute-providers/{computeProviderId}/azure-app-services/{appName}/slots',
    method: 'get',
    ...variables
  })

export const useGetAppServiceDeploymentSlotNames = (
  variables: GetAppServiceDeploymentSlotNamesVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponseListDeploymentSlotData,
      GetAppServiceDeploymentSlotNamesError,
      Schemas.RestResponseListDeploymentSlotData
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponseListDeploymentSlotData,
    GetAppServiceDeploymentSlotNamesError,
    Schemas.RestResponseListDeploymentSlotData
  >(
    queryKeyFn({
      path: '/infrastructure-definitions/compute-providers/{computeProviderId}/azure-app-services/{appName}/slots',
      operationId: 'getAppServiceDeploymentSlotNames',
      variables
    }),
    () => fetchGetAppServiceDeploymentSlotNames({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type GetDeploymentSlotNamesPathParams = {
  infraDefinitionId: string
  appName: string
}

export type GetDeploymentSlotNamesQueryParams = {
  appId?: string
  appType?: string
}

export type GetDeploymentSlotNamesError = Fetcher.ErrorWrapper<undefined>

export type GetDeploymentSlotNamesVariables = {
  pathParams: GetDeploymentSlotNamesPathParams
  queryParams?: GetDeploymentSlotNamesQueryParams
} & PortalContext['fetcherOptions']

export const fetchGetDeploymentSlotNames = (variables: GetDeploymentSlotNamesVariables) =>
  portalFetch<
    Schemas.RestResponseListDeploymentSlotData,
    GetDeploymentSlotNamesError,
    undefined,
    {},
    GetDeploymentSlotNamesQueryParams,
    GetDeploymentSlotNamesPathParams
  >({
    url: '/infrastructure-definitions/{infraDefinitionId}/azure-app-services/{appName}/slots',
    method: 'get',
    ...variables
  })

export const useGetDeploymentSlotNames = (
  variables: GetDeploymentSlotNamesVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponseListDeploymentSlotData,
      GetDeploymentSlotNamesError,
      Schemas.RestResponseListDeploymentSlotData
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponseListDeploymentSlotData,
    GetDeploymentSlotNamesError,
    Schemas.RestResponseListDeploymentSlotData
  >(
    queryKeyFn({
      path: '/infrastructure-definitions/{infraDefinitionId}/azure-app-services/{appName}/slots',
      operationId: 'getDeploymentSlotNames',
      variables
    }),
    () => fetchGetDeploymentSlotNames({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type ListHostsPathParams = {
  infraDefinitionId: string
}

export type ListHostsQueryParams = {
  appId?: string
}

export type ListHostsError = Fetcher.ErrorWrapper<undefined>

export type ListHostsVariables = {
  pathParams: ListHostsPathParams
  queryParams?: ListHostsQueryParams
} & PortalContext['fetcherOptions']

export const fetchListHosts = (variables: ListHostsVariables) =>
  portalFetch<Schemas.RestResponseListString, ListHostsError, undefined, {}, ListHostsQueryParams, ListHostsPathParams>(
    { url: '/infrastructure-definitions/{infraDefinitionId}/hosts', method: 'get', ...variables }
  )

export const useListHosts = (
  variables: ListHostsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.RestResponseListString, ListHostsError, Schemas.RestResponseListString>,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<Schemas.RestResponseListString, ListHostsError, Schemas.RestResponseListString>(
    queryKeyFn({ path: '/infrastructure-definitions/{infraDefinitionId}/hosts', operationId: 'listHosts', variables }),
    () => fetchListHosts({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type GetListenersPathParams = {
  infraDefinitionId: string
  loadbalancerName: string
}

export type GetListenersQueryParams = {
  appId?: string
}

export type GetListenersError = Fetcher.ErrorWrapper<undefined>

export type GetListenersVariables = {
  pathParams: GetListenersPathParams
  queryParams?: GetListenersQueryParams
} & PortalContext['fetcherOptions']

export const fetchGetListeners = (variables: GetListenersVariables) =>
  portalFetch<
    Schemas.RestResponseListAwsElbListener,
    GetListenersError,
    undefined,
    {},
    GetListenersQueryParams,
    GetListenersPathParams
  >({
    url: '/infrastructure-definitions/{infraDefinitionId}/load-balancers/{loadbalancerName}/listeners',
    method: 'get',
    ...variables
  })

export const useGetListeners = (
  variables: GetListenersVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponseListAwsElbListener,
      GetListenersError,
      Schemas.RestResponseListAwsElbListener
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponseListAwsElbListener,
    GetListenersError,
    Schemas.RestResponseListAwsElbListener
  >(
    queryKeyFn({
      path: '/infrastructure-definitions/{infraDefinitionId}/load-balancers/{loadbalancerName}/listeners',
      operationId: 'getListeners',
      variables
    }),
    () => fetchGetListeners({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type ListSubnetsPathParams = {
  computeProviderId: string
}

export type ListSubnetsQueryParams = {
  appId?: string
  region?: string
  vpcIds: string[]
}

export type ListSubnetsError = Fetcher.ErrorWrapper<undefined>

export type ListSubnetsVariables = {
  pathParams: ListSubnetsPathParams
  queryParams: ListSubnetsQueryParams
} & PortalContext['fetcherOptions']

export const fetchListSubnets = (variables: ListSubnetsVariables) =>
  portalFetch<
    Schemas.RestResponseListAwsSubnet,
    ListSubnetsError,
    undefined,
    {},
    ListSubnetsQueryParams,
    ListSubnetsPathParams
  >({ url: '/infrastructure-definitions/compute-providers/{computeProviderId}/subnets', method: 'get', ...variables })

export const useListSubnets = (
  variables: ListSubnetsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.RestResponseListAwsSubnet, ListSubnetsError, Schemas.RestResponseListAwsSubnet>,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<Schemas.RestResponseListAwsSubnet, ListSubnetsError, Schemas.RestResponseListAwsSubnet>(
    queryKeyFn({
      path: '/infrastructure-definitions/compute-providers/{computeProviderId}/subnets',
      operationId: 'listSubnets',
      variables
    }),
    () => fetchListSubnets({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type ListDetailsQueryParams = {
  /*
   * @default 0
   */
  offset?: string
  limit?: string
  fieldsIncluded?: string[]
  fieldsExcluded?: string[]
  appId?: string
  envId?: string
}

export type ListDetailsError = Fetcher.ErrorWrapper<undefined>

export type ListDetailsVariables = {
  queryParams?: ListDetailsQueryParams
} & PortalContext['fetcherOptions']

export const fetchListDetails = (variables: ListDetailsVariables) =>
  portalFetch<
    Schemas.RestResponsePageResponseInfraDefinitionDetail,
    ListDetailsError,
    undefined,
    {},
    ListDetailsQueryParams,
    {}
  >({ url: '/infrastructure-definitions/details', method: 'get', ...variables })

export const useListDetails = (
  variables: ListDetailsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponsePageResponseInfraDefinitionDetail,
      ListDetailsError,
      Schemas.RestResponsePageResponseInfraDefinitionDetail
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponsePageResponseInfraDefinitionDetail,
    ListDetailsError,
    Schemas.RestResponsePageResponseInfraDefinitionDetail
  >(
    queryKeyFn({ path: '/infrastructure-definitions/details', operationId: 'listDetails', variables }),
    () => fetchListDetails({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type GetLoadBalancersPathParams = {
  infraDefinitionId: string
}

export type GetLoadBalancersQueryParams = {
  appId?: string
}

export type GetLoadBalancersError = Fetcher.ErrorWrapper<undefined>

export type GetLoadBalancersVariables = {
  pathParams: GetLoadBalancersPathParams
  queryParams?: GetLoadBalancersQueryParams
} & PortalContext['fetcherOptions']

export const fetchGetLoadBalancers = (variables: GetLoadBalancersVariables) =>
  portalFetch<
    Schemas.RestResponseMapStringString,
    GetLoadBalancersError,
    undefined,
    {},
    GetLoadBalancersQueryParams,
    GetLoadBalancersPathParams
  >({ url: '/infrastructure-definitions/{infraDefinitionId}/load-balancers', method: 'get', ...variables })

export const useGetLoadBalancers = (
  variables: GetLoadBalancersVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponseMapStringString,
      GetLoadBalancersError,
      Schemas.RestResponseMapStringString
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponseMapStringString,
    GetLoadBalancersError,
    Schemas.RestResponseMapStringString
  >(
    queryKeyFn({
      path: '/infrastructure-definitions/{infraDefinitionId}/load-balancers',
      operationId: 'getLoadBalancers',
      variables
    }),
    () => fetchGetLoadBalancers({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type ListVpcsPathParams = {
  computeProviderId: string
}

export type ListVpcsQueryParams = {
  appId?: string
  region?: string
}

export type ListVpcsError = Fetcher.ErrorWrapper<undefined>

export type ListVpcsVariables = {
  pathParams: ListVpcsPathParams
  queryParams?: ListVpcsQueryParams
} & PortalContext['fetcherOptions']

export const fetchListVpcs = (variables: ListVpcsVariables) =>
  portalFetch<Schemas.RestResponseListAwsVPC, ListVpcsError, undefined, {}, ListVpcsQueryParams, ListVpcsPathParams>({
    url: '/infrastructure-definitions/compute-providers/{computeProviderId}/vpcs',
    method: 'get',
    ...variables
  })

export const useListVpcs = (
  variables: ListVpcsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.RestResponseListAwsVPC, ListVpcsError, Schemas.RestResponseListAwsVPC>,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<Schemas.RestResponseListAwsVPC, ListVpcsError, Schemas.RestResponseListAwsVPC>(
    queryKeyFn({
      path: '/infrastructure-definitions/compute-providers/{computeProviderId}/vpcs',
      operationId: 'listVpcs',
      variables
    }),
    () => fetchListVpcs({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type GetRunningContainerCountPathParams = {
  infraDefinitionId: string
}

export type GetRunningContainerCountQueryParams = {
  appId?: string
  serviceNameExpr?: string
  serviceId?: string
}

export type GetRunningContainerCountError = Fetcher.ErrorWrapper<undefined>

export type GetRunningContainerCountVariables = {
  pathParams: GetRunningContainerCountPathParams
  queryParams?: GetRunningContainerCountQueryParams
} & PortalContext['fetcherOptions']

export const fetchGetRunningContainerCount = (variables: GetRunningContainerCountVariables) =>
  portalFetch<
    Schemas.RestResponseString,
    GetRunningContainerCountError,
    undefined,
    {},
    GetRunningContainerCountQueryParams,
    GetRunningContainerCountPathParams
  >({ url: '/infrastructure-definitions/{infraDefinitionId}/containers', method: 'get', ...variables })

export const useGetRunningContainerCount = (
  variables: GetRunningContainerCountVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.RestResponseString, GetRunningContainerCountError, Schemas.RestResponseString>,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<Schemas.RestResponseString, GetRunningContainerCountError, Schemas.RestResponseString>(
    queryKeyFn({
      path: '/infrastructure-definitions/{infraDefinitionId}/containers',
      operationId: 'getRunningContainerCount',
      variables
    }),
    () => fetchGetRunningContainerCount({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type GetRunningCountForPcfAppPathParams = {
  infraDefinitionId: string
}

export type GetRunningCountForPcfAppQueryParams = {
  appId?: string
  appNameExpr?: string
  serviceId?: string
}

export type GetRunningCountForPcfAppError = Fetcher.ErrorWrapper<undefined>

export type GetRunningCountForPcfAppVariables = {
  pathParams: GetRunningCountForPcfAppPathParams
  queryParams?: GetRunningCountForPcfAppQueryParams
} & PortalContext['fetcherOptions']

export const fetchGetRunningCountForPcfApp = (variables: GetRunningCountForPcfAppVariables) =>
  portalFetch<
    Schemas.RestResponseInteger,
    GetRunningCountForPcfAppError,
    undefined,
    {},
    GetRunningCountForPcfAppQueryParams,
    GetRunningCountForPcfAppPathParams
  >({ url: '/infrastructure-definitions/{infraDefinitionId}/pcf/runningcount', method: 'get', ...variables })

export const useGetRunningCountForPcfApp = (
  variables: GetRunningCountForPcfAppVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.RestResponseInteger, GetRunningCountForPcfAppError, Schemas.RestResponseInteger>,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<Schemas.RestResponseInteger, GetRunningCountForPcfAppError, Schemas.RestResponseInteger>(
    queryKeyFn({
      path: '/infrastructure-definitions/{infraDefinitionId}/pcf/runningcount',
      operationId: 'getRunningCountForPcfApp',
      variables
    }),
    () => fetchGetRunningCountForPcfApp({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type GetRunningCountForAmiPathParams = {
  infraDefinitionId: string
}

export type GetRunningCountForAmiQueryParams = {
  appId?: string
  serviceId?: string
}

export type GetRunningCountForAmiError = Fetcher.ErrorWrapper<undefined>

export type GetRunningCountForAmiVariables = {
  pathParams: GetRunningCountForAmiPathParams
  queryParams?: GetRunningCountForAmiQueryParams
} & PortalContext['fetcherOptions']

export const fetchGetRunningCountForAmi = (variables: GetRunningCountForAmiVariables) =>
  portalFetch<
    Schemas.RestResponseAwsAsgGetRunningCountData,
    GetRunningCountForAmiError,
    undefined,
    {},
    GetRunningCountForAmiQueryParams,
    GetRunningCountForAmiPathParams
  >({ url: '/infrastructure-definitions/{infraDefinitionId}/ami/runningcount', method: 'get', ...variables })

export const useGetRunningCountForAmi = (
  variables: GetRunningCountForAmiVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponseAwsAsgGetRunningCountData,
      GetRunningCountForAmiError,
      Schemas.RestResponseAwsAsgGetRunningCountData
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponseAwsAsgGetRunningCountData,
    GetRunningCountForAmiError,
    Schemas.RestResponseAwsAsgGetRunningCountData
  >(
    queryKeyFn({
      path: '/infrastructure-definitions/{infraDefinitionId}/ami/runningcount',
      operationId: 'getRunningCountForAmi',
      variables
    }),
    () => fetchGetRunningCountForAmi({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type InfrastructureTypesError = Fetcher.ErrorWrapper<undefined>

export type InfrastructureTypesVariables = PortalContext['fetcherOptions']

export const fetchInfrastructureTypes = (variables: InfrastructureTypesVariables) =>
  portalFetch<
    Schemas.RestResponseMapDeploymentTypeListSettingVariableTypes,
    InfrastructureTypesError,
    undefined,
    {},
    {},
    {}
  >({ url: '/infrastructure-definitions/deployment-cloudProviders', method: 'get', ...variables })

export const useInfrastructureTypes = (
  variables: InfrastructureTypesVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponseMapDeploymentTypeListSettingVariableTypes,
      InfrastructureTypesError,
      Schemas.RestResponseMapDeploymentTypeListSettingVariableTypes
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponseMapDeploymentTypeListSettingVariableTypes,
    InfrastructureTypesError,
    Schemas.RestResponseMapDeploymentTypeListSettingVariableTypes
  >(
    queryKeyFn({
      path: '/infrastructure-definitions/deployment-cloudProviders',
      operationId: 'infrastructureTypes',
      variables
    }),
    () => fetchInfrastructureTypes({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type GetInstanceRolesPathParams = {
  infraDefinitionId: string
}

export type GetInstanceRolesQueryParams = {
  appId?: string
}

export type GetInstanceRolesError = Fetcher.ErrorWrapper<undefined>

export type GetInstanceRolesVariables = {
  pathParams: GetInstanceRolesPathParams
  queryParams?: GetInstanceRolesQueryParams
} & PortalContext['fetcherOptions']

export const fetchGetInstanceRoles = (variables: GetInstanceRolesVariables) =>
  portalFetch<
    Schemas.RestResponseMapStringString,
    GetInstanceRolesError,
    undefined,
    {},
    GetInstanceRolesQueryParams,
    GetInstanceRolesPathParams
  >({ url: '/infrastructure-definitions/{infraDefinitionId}/iam-roles', method: 'get', ...variables })

export const useGetInstanceRoles = (
  variables: GetInstanceRolesVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponseMapStringString,
      GetInstanceRolesError,
      Schemas.RestResponseMapStringString
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponseMapStringString,
    GetInstanceRolesError,
    Schemas.RestResponseMapStringString
  >(
    queryKeyFn({
      path: '/infrastructure-definitions/{infraDefinitionId}/iam-roles',
      operationId: 'getInstanceRoles',
      variables
    }),
    () => fetchGetInstanceRoles({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type ListSecurityGroupsPathParams = {
  computeProviderId: string
}

export type ListSecurityGroupsQueryParams = {
  appId?: string
  region?: string
  vpcIds: string[]
}

export type ListSecurityGroupsError = Fetcher.ErrorWrapper<undefined>

export type ListSecurityGroupsVariables = {
  pathParams: ListSecurityGroupsPathParams
  queryParams: ListSecurityGroupsQueryParams
} & PortalContext['fetcherOptions']

export const fetchListSecurityGroups = (variables: ListSecurityGroupsVariables) =>
  portalFetch<
    Schemas.RestResponseListAwsSecurityGroup,
    ListSecurityGroupsError,
    undefined,
    {},
    ListSecurityGroupsQueryParams,
    ListSecurityGroupsPathParams
  >({
    url: '/infrastructure-definitions/compute-providers/{computeProviderId}/security-groups',
    method: 'get',
    ...variables
  })

export const useListSecurityGroups = (
  variables: ListSecurityGroupsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponseListAwsSecurityGroup,
      ListSecurityGroupsError,
      Schemas.RestResponseListAwsSecurityGroup
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponseListAwsSecurityGroup,
    ListSecurityGroupsError,
    Schemas.RestResponseListAwsSecurityGroup
  >(
    queryKeyFn({
      path: '/infrastructure-definitions/compute-providers/{computeProviderId}/security-groups',
      operationId: 'listSecurityGroups',
      variables
    }),
    () => fetchListSecurityGroups({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type GetAwsLoadBalancersPathParams = {
  infraDefinitionId: string
}

export type GetAwsLoadBalancersQueryParams = {
  appId?: string
}

export type GetAwsLoadBalancersError = Fetcher.ErrorWrapper<undefined>

export type GetAwsLoadBalancersVariables = {
  pathParams: GetAwsLoadBalancersPathParams
  queryParams?: GetAwsLoadBalancersQueryParams
} & PortalContext['fetcherOptions']

export const fetchGetAwsLoadBalancers = (variables: GetAwsLoadBalancersVariables) =>
  portalFetch<
    Schemas.RestResponseMapStringString,
    GetAwsLoadBalancersError,
    undefined,
    {},
    GetAwsLoadBalancersQueryParams,
    GetAwsLoadBalancersPathParams
  >({ url: '/infrastructure-definitions/{infraDefinitionId}/aws-elastic-balancers', method: 'get', ...variables })

export const useGetAwsLoadBalancers = (
  variables: GetAwsLoadBalancersVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponseMapStringString,
      GetAwsLoadBalancersError,
      Schemas.RestResponseMapStringString
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponseMapStringString,
    GetAwsLoadBalancersError,
    Schemas.RestResponseMapStringString
  >(
    queryKeyFn({
      path: '/infrastructure-definitions/{infraDefinitionId}/aws-elastic-balancers',
      operationId: 'getAwsLoadBalancers',
      variables
    }),
    () => fetchGetAwsLoadBalancers({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type GetAwsNetworkLoadBalancersPathParams = {
  infraDefinitionId: string
}

export type GetAwsNetworkLoadBalancersQueryParams = {
  appId?: string
}

export type GetAwsNetworkLoadBalancersError = Fetcher.ErrorWrapper<undefined>

export type GetAwsNetworkLoadBalancersVariables = {
  pathParams: GetAwsNetworkLoadBalancersPathParams
  queryParams?: GetAwsNetworkLoadBalancersQueryParams
} & PortalContext['fetcherOptions']

export const fetchGetAwsNetworkLoadBalancers = (variables: GetAwsNetworkLoadBalancersVariables) =>
  portalFetch<
    Schemas.RestResponseMapStringString,
    GetAwsNetworkLoadBalancersError,
    undefined,
    {},
    GetAwsNetworkLoadBalancersQueryParams,
    GetAwsNetworkLoadBalancersPathParams
  >({ url: '/infrastructure-definitions/{infraDefinitionId}/aws-network-balancers', method: 'get', ...variables })

export const useGetAwsNetworkLoadBalancers = (
  variables: GetAwsNetworkLoadBalancersVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponseMapStringString,
      GetAwsNetworkLoadBalancersError,
      Schemas.RestResponseMapStringString
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponseMapStringString,
    GetAwsNetworkLoadBalancersError,
    Schemas.RestResponseMapStringString
  >(
    queryKeyFn({
      path: '/infrastructure-definitions/{infraDefinitionId}/aws-network-balancers',
      operationId: 'getAwsNetworkLoadBalancers',
      variables
    }),
    () => fetchGetAwsNetworkLoadBalancers({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type GetTargetGroupsPathParams = {
  infraDefinitionId: string
  loadbalancerName: string
}

export type GetTargetGroupsQueryParams = {
  appId?: string
}

export type GetTargetGroupsError = Fetcher.ErrorWrapper<undefined>

export type GetTargetGroupsVariables = {
  pathParams: GetTargetGroupsPathParams
  queryParams?: GetTargetGroupsQueryParams
} & PortalContext['fetcherOptions']

export const fetchGetTargetGroups = (variables: GetTargetGroupsVariables) =>
  portalFetch<
    Schemas.RestResponseMapStringString,
    GetTargetGroupsError,
    undefined,
    {},
    GetTargetGroupsQueryParams,
    GetTargetGroupsPathParams
  >({
    url: '/infrastructure-definitions/{infraDefinitionId}/load-balancers/{loadbalancerName}/target-groups',
    method: 'get',
    ...variables
  })

export const useGetTargetGroups = (
  variables: GetTargetGroupsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponseMapStringString,
      GetTargetGroupsError,
      Schemas.RestResponseMapStringString
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponseMapStringString,
    GetTargetGroupsError,
    Schemas.RestResponseMapStringString
  >(
    queryKeyFn({
      path: '/infrastructure-definitions/{infraDefinitionId}/load-balancers/{loadbalancerName}/target-groups',
      operationId: 'getTargetGroups',
      variables
    }),
    () => fetchGetTargetGroups({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type GetHostedZonesPathParams = {
  infraDefinitionId: string
}

export type GetHostedZonesQueryParams = {
  appId?: string
}

export type GetHostedZonesError = Fetcher.ErrorWrapper<undefined>

export type GetHostedZonesVariables = {
  pathParams: GetHostedZonesPathParams
  queryParams?: GetHostedZonesQueryParams
} & PortalContext['fetcherOptions']

export const fetchGetHostedZones = (variables: GetHostedZonesVariables) =>
  portalFetch<
    Schemas.RestResponseListAwsRoute53HostedZoneData,
    GetHostedZonesError,
    undefined,
    {},
    GetHostedZonesQueryParams,
    GetHostedZonesPathParams
  >({ url: '/infrastructure-definitions/{infraDefinitionId}/hosted-zones', method: 'get', ...variables })

export const useGetHostedZones = (
  variables: GetHostedZonesVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponseListAwsRoute53HostedZoneData,
      GetHostedZonesError,
      Schemas.RestResponseListAwsRoute53HostedZoneData
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponseListAwsRoute53HostedZoneData,
    GetHostedZonesError,
    Schemas.RestResponseListAwsRoute53HostedZoneData
  >(
    queryKeyFn({
      path: '/infrastructure-definitions/{infraDefinitionId}/hosted-zones',
      operationId: 'getHostedZones',
      variables
    }),
    () => fetchGetHostedZones({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type GetRoutesForPcfPathParams = {
  infraDefinitionId: string
}

export type GetRoutesForPcfQueryParams = {
  appId?: string
}

export type GetRoutesForPcfError = Fetcher.ErrorWrapper<undefined>

export type GetRoutesForPcfVariables = {
  pathParams: GetRoutesForPcfPathParams
  queryParams?: GetRoutesForPcfQueryParams
} & PortalContext['fetcherOptions']

export const fetchGetRoutesForPcf = (variables: GetRoutesForPcfVariables) =>
  portalFetch<
    Schemas.RestResponseListString,
    GetRoutesForPcfError,
    undefined,
    {},
    GetRoutesForPcfQueryParams,
    GetRoutesForPcfPathParams
  >({ url: '/infrastructure-definitions/{infraDefinitionId}/routes', method: 'get', ...variables })

export const useGetRoutesForPcf = (
  variables: GetRoutesForPcfVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.RestResponseListString, GetRoutesForPcfError, Schemas.RestResponseListString>,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<Schemas.RestResponseListString, GetRoutesForPcfError, Schemas.RestResponseListString>(
    queryKeyFn({
      path: '/infrastructure-definitions/{infraDefinitionId}/routes',
      operationId: 'getRoutesForPcf',
      variables
    }),
    () => fetchGetRoutesForPcf({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type GetRolesPathParams = {
  computeProviderId: string
}

export type GetRolesQueryParams = {
  appId?: string
  deploymentType?: string
}

export type GetRolesError = Fetcher.ErrorWrapper<undefined>

export type GetRolesVariables = {
  pathParams: GetRolesPathParams
  queryParams?: GetRolesQueryParams
} & PortalContext['fetcherOptions']

export const fetchGetRoles = (variables: GetRolesVariables) =>
  portalFetch<
    Schemas.RestResponseMapStringString,
    GetRolesError,
    undefined,
    {},
    GetRolesQueryParams,
    GetRolesPathParams
  >({ url: '/infrastructure-mappings/compute-providers/{computeProviderId}/roles', method: 'get', ...variables })

export const useGetRoles = (
  variables: GetRolesVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.RestResponseMapStringString, GetRolesError, Schemas.RestResponseMapStringString>,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<Schemas.RestResponseMapStringString, GetRolesError, Schemas.RestResponseMapStringString>(
    queryKeyFn({
      path: '/infrastructure-mappings/compute-providers/{computeProviderId}/roles',
      operationId: 'getRoles',
      variables
    }),
    () => fetchGetRoles({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type Get26QueryParams = {
  appId?: string
  envId?: string
}

export type Get26Error = Fetcher.ErrorWrapper<undefined>

export type Get26Variables = {
  body?: Schemas.HostValidationRequest
  queryParams?: Get26QueryParams
} & PortalContext['fetcherOptions']

export const fetchGet26 = (variables: Get26Variables) =>
  portalFetch<
    Schemas.RestResponseListHostValidationResponse,
    Get26Error,
    Schemas.HostValidationRequest,
    {},
    Get26QueryParams,
    {}
  >({ url: '/infrastructure-mappings/validate-hosts', method: 'post', ...variables })

export const useGet26 = (
  options?: Omit<
    reactQuery.UseMutationOptions<Schemas.RestResponseListHostValidationResponse, Get26Error, Get26Variables>,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<Schemas.RestResponseListHostValidationResponse, Get26Error, Get26Variables>(
    (variables: Get26Variables) => fetchGet26({ ...fetcherOptions, ...variables }),
    options
  )
}

export type Get27PathParams = {
  infraMappingId: string
}

export type Get27QueryParams = {
  appId?: string
  envId?: string
}

export type Get27Error = Fetcher.ErrorWrapper<undefined>

export type Get27Variables = {
  pathParams: Get27PathParams
  queryParams?: Get27QueryParams
} & PortalContext['fetcherOptions']

export const fetchGet27 = (variables: Get27Variables) =>
  portalFetch<Schemas.RestResponseInfrastructureMapping, Get27Error, undefined, {}, Get27QueryParams, Get27PathParams>({
    url: '/infrastructure-mappings/{infraMappingId}',
    method: 'get',
    ...variables
  })

export const useGet27 = (
  variables: Get27Variables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponseInfrastructureMapping,
      Get27Error,
      Schemas.RestResponseInfrastructureMapping
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponseInfrastructureMapping,
    Get27Error,
    Schemas.RestResponseInfrastructureMapping
  >(
    queryKeyFn({ path: '/infrastructure-mappings/{infraMappingId}', operationId: 'get27', variables }),
    () => fetchGet27({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type Update19PathParams = {
  infraMappingId: string
}

export type Update19QueryParams = {
  appId?: string
  envId?: string
}

export type Update19Error = Fetcher.ErrorWrapper<undefined>

export type Update19Variables = {
  body: RequestBodies.InfrastructureMapping
  pathParams: Update19PathParams
  queryParams?: Update19QueryParams
} & PortalContext['fetcherOptions']

export const fetchUpdate19 = (variables: Update19Variables) =>
  portalFetch<
    Schemas.RestResponseInfrastructureMapping,
    Update19Error,
    RequestBodies.InfrastructureMapping,
    {},
    Update19QueryParams,
    Update19PathParams
  >({ url: '/infrastructure-mappings/{infraMappingId}', method: 'put', ...variables })

export const useUpdate19 = (
  options?: Omit<
    reactQuery.UseMutationOptions<Schemas.RestResponseInfrastructureMapping, Update19Error, Update19Variables>,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<Schemas.RestResponseInfrastructureMapping, Update19Error, Update19Variables>(
    (variables: Update19Variables) => fetchUpdate19({ ...fetcherOptions, ...variables }),
    options
  )
}

export type Delete18PathParams = {
  infraMappingId: string
}

export type Delete18QueryParams = {
  appId?: string
  envId?: string
}

export type Delete18Error = Fetcher.ErrorWrapper<undefined>

export type Delete18Variables = {
  pathParams: Delete18PathParams
  queryParams?: Delete18QueryParams
} & PortalContext['fetcherOptions']

export const fetchDelete18 = (variables: Delete18Variables) =>
  portalFetch<Schemas.RestResponse, Delete18Error, undefined, {}, Delete18QueryParams, Delete18PathParams>({
    url: '/infrastructure-mappings/{infraMappingId}',
    method: 'delete',
    ...variables
  })

export const useDelete18 = (
  options?: Omit<reactQuery.UseMutationOptions<Schemas.RestResponse, Delete18Error, Delete18Variables>, 'mutationFn'>
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<Schemas.RestResponse, Delete18Error, Delete18Variables>(
    (variables: Delete18Variables) => fetchDelete18({ ...fetcherOptions, ...variables }),
    options
  )
}

export type List29QueryParams = {
  /*
   * @default 0
   */
  offset?: string
  limit?: string
  fieldsIncluded?: string[]
  fieldsExcluded?: string[]
}

export type List29Error = Fetcher.ErrorWrapper<undefined>

export type List29Variables = {
  queryParams?: List29QueryParams
} & PortalContext['fetcherOptions']

export const fetchList29 = (variables: List29Variables) =>
  portalFetch<Schemas.RestResponsePageResponseInfrastructureMapping, List29Error, undefined, {}, List29QueryParams, {}>(
    { url: '/infrastructure-mappings', method: 'get', ...variables }
  )

export const useList29 = (
  variables: List29Variables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponsePageResponseInfrastructureMapping,
      List29Error,
      Schemas.RestResponsePageResponseInfrastructureMapping
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponsePageResponseInfrastructureMapping,
    List29Error,
    Schemas.RestResponsePageResponseInfrastructureMapping
  >(
    queryKeyFn({ path: '/infrastructure-mappings', operationId: 'list29', variables }),
    () => fetchList29({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type Save11QueryParams = {
  appId?: string
  envId?: string
}

export type Save11Error = Fetcher.ErrorWrapper<undefined>

export type Save11Variables = {
  body: RequestBodies.InfrastructureMapping
  queryParams?: Save11QueryParams
} & PortalContext['fetcherOptions']

export const fetchSave11 = (variables: Save11Variables) =>
  portalFetch<
    Schemas.RestResponseInfrastructureMapping,
    Save11Error,
    RequestBodies.InfrastructureMapping,
    {},
    Save11QueryParams,
    {}
  >({ url: '/infrastructure-mappings', method: 'post', ...variables })

export const useSave11 = (
  options?: Omit<
    reactQuery.UseMutationOptions<Schemas.RestResponseInfrastructureMapping, Save11Error, Save11Variables>,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<Schemas.RestResponseInfrastructureMapping, Save11Error, Save11Variables>(
    (variables: Save11Variables) => fetchSave11({ ...fetcherOptions, ...variables }),
    options
  )
}

export type GetRegionsPathParams = {
  computeProviderId: string
}

export type GetRegionsQueryParams = {
  appId?: string
  deploymentType?: string
}

export type GetRegionsError = Fetcher.ErrorWrapper<undefined>

export type GetRegionsVariables = {
  pathParams: GetRegionsPathParams
  queryParams?: GetRegionsQueryParams
} & PortalContext['fetcherOptions']

export const fetchGetRegions = (variables: GetRegionsVariables) =>
  portalFetch<
    Schemas.RestResponseListString,
    GetRegionsError,
    undefined,
    {},
    GetRegionsQueryParams,
    GetRegionsPathParams
  >({ url: '/infrastructure-mappings/compute-providers/{computeProviderId}/regions', method: 'get', ...variables })

export const useGetRegions = (
  variables: GetRegionsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.RestResponseListString, GetRegionsError, Schemas.RestResponseListString>,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<Schemas.RestResponseListString, GetRegionsError, Schemas.RestResponseListString>(
    queryKeyFn({
      path: '/infrastructure-mappings/compute-providers/{computeProviderId}/regions',
      operationId: 'getRegions',
      variables
    }),
    () => fetchGetRegions({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type ListHosts1PathParams = {
  infraMappingId: string
}

export type ListHosts1QueryParams = {
  appId?: string
}

export type ListHosts1Error = Fetcher.ErrorWrapper<undefined>

export type ListHosts1Variables = {
  pathParams: ListHosts1PathParams
  queryParams?: ListHosts1QueryParams
} & PortalContext['fetcherOptions']

export const fetchListHosts1 = (variables: ListHosts1Variables) =>
  portalFetch<
    Schemas.RestResponseListString,
    ListHosts1Error,
    undefined,
    {},
    ListHosts1QueryParams,
    ListHosts1PathParams
  >({ url: '/infrastructure-mappings/{infraMappingId}/hosts', method: 'get', ...variables })

export const useListHosts1 = (
  variables: ListHosts1Variables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.RestResponseListString, ListHosts1Error, Schemas.RestResponseListString>,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<Schemas.RestResponseListString, ListHosts1Error, Schemas.RestResponseListString>(
    queryKeyFn({ path: '/infrastructure-mappings/{infraMappingId}/hosts', operationId: 'listHosts1', variables }),
    () => fetchListHosts1({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type GetListeners1PathParams = {
  infraMappingId: string
  loadbalancerName: string
}

export type GetListeners1QueryParams = {
  appId?: string
}

export type GetListeners1Error = Fetcher.ErrorWrapper<undefined>

export type GetListeners1Variables = {
  pathParams: GetListeners1PathParams
  queryParams?: GetListeners1QueryParams
} & PortalContext['fetcherOptions']

export const fetchGetListeners1 = (variables: GetListeners1Variables) =>
  portalFetch<
    Schemas.RestResponseListAwsElbListener,
    GetListeners1Error,
    undefined,
    {},
    GetListeners1QueryParams,
    GetListeners1PathParams
  >({
    url: '/infrastructure-mappings/{infraMappingId}/load-balancers/{loadbalancerName}/listeners',
    method: 'get',
    ...variables
  })

export const useGetListeners1 = (
  variables: GetListeners1Variables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponseListAwsElbListener,
      GetListeners1Error,
      Schemas.RestResponseListAwsElbListener
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponseListAwsElbListener,
    GetListeners1Error,
    Schemas.RestResponseListAwsElbListener
  >(
    queryKeyFn({
      path: '/infrastructure-mappings/{infraMappingId}/load-balancers/{loadbalancerName}/listeners',
      operationId: 'getListeners1',
      variables
    }),
    () => fetchGetListeners1({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type ListSubnets1PathParams = {
  computeProviderId: string
}

export type ListSubnets1QueryParams = {
  appId?: string
  region?: string
  vpcIds: string[]
}

export type ListSubnets1Error = Fetcher.ErrorWrapper<undefined>

export type ListSubnets1Variables = {
  pathParams: ListSubnets1PathParams
  queryParams: ListSubnets1QueryParams
} & PortalContext['fetcherOptions']

export const fetchListSubnets1 = (variables: ListSubnets1Variables) =>
  portalFetch<
    Schemas.RestResponseListString,
    ListSubnets1Error,
    undefined,
    {},
    ListSubnets1QueryParams,
    ListSubnets1PathParams
  >({ url: '/infrastructure-mappings/compute-providers/{computeProviderId}/subnets', method: 'get', ...variables })

export const useListSubnets1 = (
  variables: ListSubnets1Variables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.RestResponseListString, ListSubnets1Error, Schemas.RestResponseListString>,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<Schemas.RestResponseListString, ListSubnets1Error, Schemas.RestResponseListString>(
    queryKeyFn({
      path: '/infrastructure-mappings/compute-providers/{computeProviderId}/subnets',
      operationId: 'listSubnets1',
      variables
    }),
    () => fetchListSubnets1({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type ListTags1PathParams = {
  computeProviderId: string
}

export type ListTags1QueryParams = {
  appId?: string
  region?: string
}

export type ListTags1Error = Fetcher.ErrorWrapper<undefined>

export type ListTags1Variables = {
  pathParams: ListTags1PathParams
  queryParams?: ListTags1QueryParams
} & PortalContext['fetcherOptions']

export const fetchListTags1 = (variables: ListTags1Variables) =>
  portalFetch<Schemas.RestResponseSetString, ListTags1Error, undefined, {}, ListTags1QueryParams, ListTags1PathParams>({
    url: '/infrastructure-mappings/compute-providers/{computeProviderId}/tags',
    method: 'get',
    ...variables
  })

export const useListTags1 = (
  variables: ListTags1Variables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.RestResponseSetString, ListTags1Error, Schemas.RestResponseSetString>,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<Schemas.RestResponseSetString, ListTags1Error, Schemas.RestResponseSetString>(
    queryKeyFn({
      path: '/infrastructure-mappings/compute-providers/{computeProviderId}/tags',
      operationId: 'listTags1',
      variables
    }),
    () => fetchListTags1({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type GetLoadBalancers1PathParams = {
  computeProviderId: string
}

export type GetLoadBalancers1QueryParams = {
  appId?: string
  deploymentType?: string
}

export type GetLoadBalancers1Error = Fetcher.ErrorWrapper<undefined>

export type GetLoadBalancers1Variables = {
  pathParams: GetLoadBalancers1PathParams
  queryParams?: GetLoadBalancers1QueryParams
} & PortalContext['fetcherOptions']

export const fetchGetLoadBalancers1 = (variables: GetLoadBalancers1Variables) =>
  portalFetch<
    Schemas.RestResponseMapStringString,
    GetLoadBalancers1Error,
    undefined,
    {},
    GetLoadBalancers1QueryParams,
    GetLoadBalancers1PathParams
  >({
    url: '/infrastructure-mappings/compute-providers/{computeProviderId}/load-balancers',
    method: 'get',
    ...variables
  })

export const useGetLoadBalancers1 = (
  variables: GetLoadBalancers1Variables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponseMapStringString,
      GetLoadBalancers1Error,
      Schemas.RestResponseMapStringString
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponseMapStringString,
    GetLoadBalancers1Error,
    Schemas.RestResponseMapStringString
  >(
    queryKeyFn({
      path: '/infrastructure-mappings/compute-providers/{computeProviderId}/load-balancers',
      operationId: 'getLoadBalancers1',
      variables
    }),
    () => fetchGetLoadBalancers1({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type GetLoadBalancers2PathParams = {
  infraMappingId: string
}

export type GetLoadBalancers2QueryParams = {
  appId?: string
}

export type GetLoadBalancers2Error = Fetcher.ErrorWrapper<undefined>

export type GetLoadBalancers2Variables = {
  pathParams: GetLoadBalancers2PathParams
  queryParams?: GetLoadBalancers2QueryParams
} & PortalContext['fetcherOptions']

export const fetchGetLoadBalancers2 = (variables: GetLoadBalancers2Variables) =>
  portalFetch<
    Schemas.RestResponseMapStringString,
    GetLoadBalancers2Error,
    undefined,
    {},
    GetLoadBalancers2QueryParams,
    GetLoadBalancers2PathParams
  >({ url: '/infrastructure-mappings/{infraMappingId}/load-balancers', method: 'get', ...variables })

export const useGetLoadBalancers2 = (
  variables: GetLoadBalancers2Variables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponseMapStringString,
      GetLoadBalancers2Error,
      Schemas.RestResponseMapStringString
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponseMapStringString,
    GetLoadBalancers2Error,
    Schemas.RestResponseMapStringString
  >(
    queryKeyFn({
      path: '/infrastructure-mappings/{infraMappingId}/load-balancers',
      operationId: 'getLoadBalancers2',
      variables
    }),
    () => fetchGetLoadBalancers2({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type ListVpcs1PathParams = {
  computeProviderId: string
}

export type ListVpcs1QueryParams = {
  appId?: string
  region?: string
}

export type ListVpcs1Error = Fetcher.ErrorWrapper<undefined>

export type ListVpcs1Variables = {
  pathParams: ListVpcs1PathParams
  queryParams?: ListVpcs1QueryParams
} & PortalContext['fetcherOptions']

export const fetchListVpcs1 = (variables: ListVpcs1Variables) =>
  portalFetch<Schemas.RestResponseListString, ListVpcs1Error, undefined, {}, ListVpcs1QueryParams, ListVpcs1PathParams>(
    { url: '/infrastructure-mappings/compute-providers/{computeProviderId}/vpcs', method: 'get', ...variables }
  )

export const useListVpcs1 = (
  variables: ListVpcs1Variables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.RestResponseListString, ListVpcs1Error, Schemas.RestResponseListString>,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<Schemas.RestResponseListString, ListVpcs1Error, Schemas.RestResponseListString>(
    queryKeyFn({
      path: '/infrastructure-mappings/compute-providers/{computeProviderId}/vpcs',
      operationId: 'listVpcs1',
      variables
    }),
    () => fetchListVpcs1({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type ListComputeProviderHostsPathParams = {
  computeProviderId: string
}

export type ListComputeProviderHostsQueryParams = {
  appId?: string
  envId?: string
  serviceId?: string
}

export type ListComputeProviderHostsError = Fetcher.ErrorWrapper<undefined>

export type ListComputeProviderHostsVariables = {
  pathParams: ListComputeProviderHostsPathParams
  queryParams?: ListComputeProviderHostsQueryParams
} & PortalContext['fetcherOptions']

export const fetchListComputeProviderHosts = (variables: ListComputeProviderHostsVariables) =>
  portalFetch<
    Schemas.RestResponseListString,
    ListComputeProviderHostsError,
    undefined,
    {},
    ListComputeProviderHostsQueryParams,
    ListComputeProviderHostsPathParams
  >({ url: '/infrastructure-mappings/compute-providers/{computeProviderId}/hosts', method: 'get', ...variables })

export const useListComputeProviderHosts = (
  variables: ListComputeProviderHostsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponseListString,
      ListComputeProviderHostsError,
      Schemas.RestResponseListString
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponseListString,
    ListComputeProviderHostsError,
    Schemas.RestResponseListString
  >(
    queryKeyFn({
      path: '/infrastructure-mappings/compute-providers/{computeProviderId}/hosts',
      operationId: 'listComputeProviderHosts',
      variables
    }),
    () => fetchListComputeProviderHosts({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type GetRunningContainerCount1PathParams = {
  infraMappingId: string
}

export type GetRunningContainerCount1QueryParams = {
  appId?: string
  serviceNameExpr?: string
}

export type GetRunningContainerCount1Error = Fetcher.ErrorWrapper<undefined>

export type GetRunningContainerCount1Variables = {
  pathParams: GetRunningContainerCount1PathParams
  queryParams?: GetRunningContainerCount1QueryParams
} & PortalContext['fetcherOptions']

export const fetchGetRunningContainerCount1 = (variables: GetRunningContainerCount1Variables) =>
  portalFetch<
    Schemas.RestResponseString,
    GetRunningContainerCount1Error,
    undefined,
    {},
    GetRunningContainerCount1QueryParams,
    GetRunningContainerCount1PathParams
  >({ url: '/infrastructure-mappings/{infraMappingId}/containers', method: 'get', ...variables })

export const useGetRunningContainerCount1 = (
  variables: GetRunningContainerCount1Variables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.RestResponseString, GetRunningContainerCount1Error, Schemas.RestResponseString>,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<Schemas.RestResponseString, GetRunningContainerCount1Error, Schemas.RestResponseString>(
    queryKeyFn({
      path: '/infrastructure-mappings/{infraMappingId}/containers',
      operationId: 'getRunningContainerCount1',
      variables
    }),
    () => fetchGetRunningContainerCount1({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type GetRunningCountForPcfApp1PathParams = {
  infraMappingId: string
}

export type GetRunningCountForPcfApp1QueryParams = {
  appId?: string
  appNameExpr?: string
}

export type GetRunningCountForPcfApp1Error = Fetcher.ErrorWrapper<undefined>

export type GetRunningCountForPcfApp1Variables = {
  pathParams: GetRunningCountForPcfApp1PathParams
  queryParams?: GetRunningCountForPcfApp1QueryParams
} & PortalContext['fetcherOptions']

export const fetchGetRunningCountForPcfApp1 = (variables: GetRunningCountForPcfApp1Variables) =>
  portalFetch<
    Schemas.RestResponseInteger,
    GetRunningCountForPcfApp1Error,
    undefined,
    {},
    GetRunningCountForPcfApp1QueryParams,
    GetRunningCountForPcfApp1PathParams
  >({ url: '/infrastructure-mappings/{infraMappingId}/pcf/runningcount', method: 'get', ...variables })

export const useGetRunningCountForPcfApp1 = (
  variables: GetRunningCountForPcfApp1Variables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponseInteger,
      GetRunningCountForPcfApp1Error,
      Schemas.RestResponseInteger
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<Schemas.RestResponseInteger, GetRunningCountForPcfApp1Error, Schemas.RestResponseInteger>(
    queryKeyFn({
      path: '/infrastructure-mappings/{infraMappingId}/pcf/runningcount',
      operationId: 'getRunningCountForPcfApp1',
      variables
    }),
    () => fetchGetRunningCountForPcfApp1({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type GetRunningCountForAmi1PathParams = {
  infraMappingId: string
}

export type GetRunningCountForAmi1QueryParams = {
  appId?: string
}

export type GetRunningCountForAmi1Error = Fetcher.ErrorWrapper<undefined>

export type GetRunningCountForAmi1Variables = {
  pathParams: GetRunningCountForAmi1PathParams
  queryParams?: GetRunningCountForAmi1QueryParams
} & PortalContext['fetcherOptions']

export const fetchGetRunningCountForAmi1 = (variables: GetRunningCountForAmi1Variables) =>
  portalFetch<
    Schemas.RestResponseAwsAsgGetRunningCountData,
    GetRunningCountForAmi1Error,
    undefined,
    {},
    GetRunningCountForAmi1QueryParams,
    GetRunningCountForAmi1PathParams
  >({ url: '/infrastructure-mappings/{infraMappingId}/ami/runningcount', method: 'get', ...variables })

export const useGetRunningCountForAmi1 = (
  variables: GetRunningCountForAmi1Variables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponseAwsAsgGetRunningCountData,
      GetRunningCountForAmi1Error,
      Schemas.RestResponseAwsAsgGetRunningCountData
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponseAwsAsgGetRunningCountData,
    GetRunningCountForAmi1Error,
    Schemas.RestResponseAwsAsgGetRunningCountData
  >(
    queryKeyFn({
      path: '/infrastructure-mappings/{infraMappingId}/ami/runningcount',
      operationId: 'getRunningCountForAmi1',
      variables
    }),
    () => fetchGetRunningCountForAmi1({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type InfrastructureMappingSchemaQueryParams = {
  appId?: string
}

export type InfrastructureMappingSchemaError = Fetcher.ErrorWrapper<undefined>

export type InfrastructureMappingSchemaVariables = {
  queryParams?: InfrastructureMappingSchemaQueryParams
} & PortalContext['fetcherOptions']

export const fetchInfrastructureMappingSchema = (variables: InfrastructureMappingSchemaVariables) =>
  portalFetch<
    Schemas.RestResponseMapStringObject,
    InfrastructureMappingSchemaError,
    undefined,
    {},
    InfrastructureMappingSchemaQueryParams,
    {}
  >({ url: '/infrastructure-mappings/stencils', method: 'get', ...variables })

export const useInfrastructureMappingSchema = (
  variables: InfrastructureMappingSchemaVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponseMapStringObject,
      InfrastructureMappingSchemaError,
      Schemas.RestResponseMapStringObject
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponseMapStringObject,
    InfrastructureMappingSchemaError,
    Schemas.RestResponseMapStringObject
  >(
    queryKeyFn({ path: '/infrastructure-mappings/stencils', operationId: 'infrastructureMappingSchema', variables }),
    () => fetchInfrastructureMappingSchema({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type InfrastructureTypes1QueryParams = {
  appId?: string
  envId?: string
  serviceId?: string
}

export type InfrastructureTypes1Error = Fetcher.ErrorWrapper<undefined>

export type InfrastructureTypes1Variables = {
  queryParams?: InfrastructureTypes1QueryParams
} & PortalContext['fetcherOptions']

export const fetchInfrastructureTypes1 = (variables: InfrastructureTypes1Variables) =>
  portalFetch<
    Schemas.RestResponseMapDeploymentTypeListSettingVariableTypes,
    InfrastructureTypes1Error,
    undefined,
    {},
    InfrastructureTypes1QueryParams,
    {}
  >({ url: '/infrastructure-mappings/infra-types', method: 'get', ...variables })

export const useInfrastructureTypes1 = (
  variables: InfrastructureTypes1Variables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponseMapDeploymentTypeListSettingVariableTypes,
      InfrastructureTypes1Error,
      Schemas.RestResponseMapDeploymentTypeListSettingVariableTypes
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponseMapDeploymentTypeListSettingVariableTypes,
    InfrastructureTypes1Error,
    Schemas.RestResponseMapDeploymentTypeListSettingVariableTypes
  >(
    queryKeyFn({ path: '/infrastructure-mappings/infra-types', operationId: 'infrastructureTypes1', variables }),
    () => fetchInfrastructureTypes1({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type GetClusterNamesPathParams = {
  computeProviderId: string
}

export type GetClusterNamesQueryParams = {
  appId?: string
  deploymentType?: string
  region?: string
}

export type GetClusterNamesError = Fetcher.ErrorWrapper<undefined>

export type GetClusterNamesVariables = {
  pathParams: GetClusterNamesPathParams
  queryParams?: GetClusterNamesQueryParams
} & PortalContext['fetcherOptions']

export const fetchGetClusterNames = (variables: GetClusterNamesVariables) =>
  portalFetch<
    Schemas.RestResponseListString,
    GetClusterNamesError,
    undefined,
    {},
    GetClusterNamesQueryParams,
    GetClusterNamesPathParams
  >({ url: '/infrastructure-mappings/compute-providers/{computeProviderId}/clusters', method: 'get', ...variables })

export const useGetClusterNames = (
  variables: GetClusterNamesVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.RestResponseListString, GetClusterNamesError, Schemas.RestResponseListString>,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<Schemas.RestResponseListString, GetClusterNamesError, Schemas.RestResponseListString>(
    queryKeyFn({
      path: '/infrastructure-mappings/compute-providers/{computeProviderId}/clusters',
      operationId: 'getClusterNames',
      variables
    }),
    () => fetchGetClusterNames({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type GetInstanceTypesPathParams = {
  computeProviderId: string
}

export type GetInstanceTypesQueryParams = {
  appId?: string
  deploymentType?: string
}

export type GetInstanceTypesError = Fetcher.ErrorWrapper<undefined>

export type GetInstanceTypesVariables = {
  pathParams: GetInstanceTypesPathParams
  queryParams?: GetInstanceTypesQueryParams
} & PortalContext['fetcherOptions']

export const fetchGetInstanceTypes = (variables: GetInstanceTypesVariables) =>
  portalFetch<
    Schemas.RestResponseListString,
    GetInstanceTypesError,
    undefined,
    {},
    GetInstanceTypesQueryParams,
    GetInstanceTypesPathParams
  >({
    url: '/infrastructure-mappings/compute-providers/{computeProviderId}/instanceTypes',
    method: 'get',
    ...variables
  })

export const useGetInstanceTypes = (
  variables: GetInstanceTypesVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.RestResponseListString, GetInstanceTypesError, Schemas.RestResponseListString>,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<Schemas.RestResponseListString, GetInstanceTypesError, Schemas.RestResponseListString>(
    queryKeyFn({
      path: '/infrastructure-mappings/compute-providers/{computeProviderId}/instanceTypes',
      operationId: 'getInstanceTypes',
      variables
    }),
    () => fetchGetInstanceTypes({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type GetInstanceRoles1PathParams = {
  infraMappingId: string
}

export type GetInstanceRoles1QueryParams = {
  appId?: string
}

export type GetInstanceRoles1Error = Fetcher.ErrorWrapper<undefined>

export type GetInstanceRoles1Variables = {
  pathParams: GetInstanceRoles1PathParams
  queryParams?: GetInstanceRoles1QueryParams
} & PortalContext['fetcherOptions']

export const fetchGetInstanceRoles1 = (variables: GetInstanceRoles1Variables) =>
  portalFetch<
    Schemas.RestResponseMapStringString,
    GetInstanceRoles1Error,
    undefined,
    {},
    GetInstanceRoles1QueryParams,
    GetInstanceRoles1PathParams
  >({ url: '/infrastructure-mappings/{infraMappingId}/iam-roles', method: 'get', ...variables })

export const useGetInstanceRoles1 = (
  variables: GetInstanceRoles1Variables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponseMapStringString,
      GetInstanceRoles1Error,
      Schemas.RestResponseMapStringString
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponseMapStringString,
    GetInstanceRoles1Error,
    Schemas.RestResponseMapStringString
  >(
    queryKeyFn({
      path: '/infrastructure-mappings/{infraMappingId}/iam-roles',
      operationId: 'getInstanceRoles1',
      variables
    }),
    () => fetchGetInstanceRoles1({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type GetInstanceRoles2PathParams = {
  computeProviderId: string
}

export type GetInstanceRoles2QueryParams = {
  appId?: string
  deploymentType?: string
}

export type GetInstanceRoles2Error = Fetcher.ErrorWrapper<undefined>

export type GetInstanceRoles2Variables = {
  pathParams: GetInstanceRoles2PathParams
  queryParams?: GetInstanceRoles2QueryParams
} & PortalContext['fetcherOptions']

export const fetchGetInstanceRoles2 = (variables: GetInstanceRoles2Variables) =>
  portalFetch<
    Schemas.RestResponseListString,
    GetInstanceRoles2Error,
    undefined,
    {},
    GetInstanceRoles2QueryParams,
    GetInstanceRoles2PathParams
  >({
    url: '/infrastructure-mappings/compute-providers/{computeProviderId}/instance-roles',
    method: 'get',
    ...variables
  })

export const useGetInstanceRoles2 = (
  variables: GetInstanceRoles2Variables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.RestResponseListString, GetInstanceRoles2Error, Schemas.RestResponseListString>,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<Schemas.RestResponseListString, GetInstanceRoles2Error, Schemas.RestResponseListString>(
    queryKeyFn({
      path: '/infrastructure-mappings/compute-providers/{computeProviderId}/instance-roles',
      operationId: 'getInstanceRoles2',
      variables
    }),
    () => fetchGetInstanceRoles2({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type ListSecurityGroups1PathParams = {
  computeProviderId: string
}

export type ListSecurityGroups1QueryParams = {
  appId?: string
  region?: string
  vpcIds: string[]
}

export type ListSecurityGroups1Error = Fetcher.ErrorWrapper<undefined>

export type ListSecurityGroups1Variables = {
  pathParams: ListSecurityGroups1PathParams
  queryParams: ListSecurityGroups1QueryParams
} & PortalContext['fetcherOptions']

export const fetchListSecurityGroups1 = (variables: ListSecurityGroups1Variables) =>
  portalFetch<
    Schemas.RestResponseListString,
    ListSecurityGroups1Error,
    undefined,
    {},
    ListSecurityGroups1QueryParams,
    ListSecurityGroups1PathParams
  >({
    url: '/infrastructure-mappings/compute-providers/{computeProviderId}/security-groups',
    method: 'get',
    ...variables
  })

export const useListSecurityGroups1 = (
  variables: ListSecurityGroups1Variables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponseListString,
      ListSecurityGroups1Error,
      Schemas.RestResponseListString
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<Schemas.RestResponseListString, ListSecurityGroups1Error, Schemas.RestResponseListString>(
    queryKeyFn({
      path: '/infrastructure-mappings/compute-providers/{computeProviderId}/security-groups',
      operationId: 'listSecurityGroups1',
      variables
    }),
    () => fetchListSecurityGroups1({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type ListAzureTagsPathParams = {
  computeProviderId: string
}

export type ListAzureTagsQueryParams = {
  appId?: string
  subscriptionId?: string
}

export type ListAzureTagsError = Fetcher.ErrorWrapper<undefined>

export type ListAzureTagsVariables = {
  pathParams: ListAzureTagsPathParams
  queryParams?: ListAzureTagsQueryParams
} & PortalContext['fetcherOptions']

export const fetchListAzureTags = (variables: ListAzureTagsVariables) =>
  portalFetch<
    Schemas.RestResponseSetString,
    ListAzureTagsError,
    undefined,
    {},
    ListAzureTagsQueryParams,
    ListAzureTagsPathParams
  >({ url: '/infrastructure-mappings/compute-providers/{computeProviderId}/azure-tags', method: 'get', ...variables })

export const useListAzureTags = (
  variables: ListAzureTagsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.RestResponseSetString, ListAzureTagsError, Schemas.RestResponseSetString>,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<Schemas.RestResponseSetString, ListAzureTagsError, Schemas.RestResponseSetString>(
    queryKeyFn({
      path: '/infrastructure-mappings/compute-providers/{computeProviderId}/azure-tags',
      operationId: 'listAzureTags',
      variables
    }),
    () => fetchListAzureTags({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type ListAzureResourceGroupsPathParams = {
  computeProviderId: string
}

export type ListAzureResourceGroupsQueryParams = {
  appId?: string
  subscriptionId?: string
}

export type ListAzureResourceGroupsError = Fetcher.ErrorWrapper<undefined>

export type ListAzureResourceGroupsVariables = {
  pathParams: ListAzureResourceGroupsPathParams
  queryParams?: ListAzureResourceGroupsQueryParams
} & PortalContext['fetcherOptions']

export const fetchListAzureResourceGroups = (variables: ListAzureResourceGroupsVariables) =>
  portalFetch<
    Schemas.RestResponseSetString,
    ListAzureResourceGroupsError,
    undefined,
    {},
    ListAzureResourceGroupsQueryParams,
    ListAzureResourceGroupsPathParams
  >({
    url: '/infrastructure-mappings/compute-providers/{computeProviderId}/resource-groups',
    method: 'get',
    ...variables
  })

export const useListAzureResourceGroups = (
  variables: ListAzureResourceGroupsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponseSetString,
      ListAzureResourceGroupsError,
      Schemas.RestResponseSetString
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponseSetString,
    ListAzureResourceGroupsError,
    Schemas.RestResponseSetString
  >(
    queryKeyFn({
      path: '/infrastructure-mappings/compute-providers/{computeProviderId}/resource-groups',
      operationId: 'listAzureResourceGroups',
      variables
    }),
    () => fetchListAzureResourceGroups({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type ListAutoScalingGroupsPathParams = {
  computeProviderId: string
}

export type ListAutoScalingGroupsQueryParams = {
  appId?: string
  region?: string
}

export type ListAutoScalingGroupsError = Fetcher.ErrorWrapper<undefined>

export type ListAutoScalingGroupsVariables = {
  pathParams: ListAutoScalingGroupsPathParams
  queryParams?: ListAutoScalingGroupsQueryParams
} & PortalContext['fetcherOptions']

export const fetchListAutoScalingGroups = (variables: ListAutoScalingGroupsVariables) =>
  portalFetch<
    Schemas.RestResponseListString,
    ListAutoScalingGroupsError,
    undefined,
    {},
    ListAutoScalingGroupsQueryParams,
    ListAutoScalingGroupsPathParams
  >({
    url: '/infrastructure-mappings/compute-providers/{computeProviderId}/auto-scaling-groups',
    method: 'get',
    ...variables
  })

export const useListAutoScalingGroups = (
  variables: ListAutoScalingGroupsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponseListString,
      ListAutoScalingGroupsError,
      Schemas.RestResponseListString
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponseListString,
    ListAutoScalingGroupsError,
    Schemas.RestResponseListString
  >(
    queryKeyFn({
      path: '/infrastructure-mappings/compute-providers/{computeProviderId}/auto-scaling-groups',
      operationId: 'listAutoScalingGroups',
      variables
    }),
    () => fetchListAutoScalingGroups({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type GetAwsLoadBalancers1PathParams = {
  infraMappingId: string
}

export type GetAwsLoadBalancers1QueryParams = {
  appId?: string
}

export type GetAwsLoadBalancers1Error = Fetcher.ErrorWrapper<undefined>

export type GetAwsLoadBalancers1Variables = {
  pathParams: GetAwsLoadBalancers1PathParams
  queryParams?: GetAwsLoadBalancers1QueryParams
} & PortalContext['fetcherOptions']

export const fetchGetAwsLoadBalancers1 = (variables: GetAwsLoadBalancers1Variables) =>
  portalFetch<
    Schemas.RestResponseMapStringString,
    GetAwsLoadBalancers1Error,
    undefined,
    {},
    GetAwsLoadBalancers1QueryParams,
    GetAwsLoadBalancers1PathParams
  >({ url: '/infrastructure-mappings/{infraMappingId}/aws-elastic-balancers', method: 'get', ...variables })

export const useGetAwsLoadBalancers1 = (
  variables: GetAwsLoadBalancers1Variables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponseMapStringString,
      GetAwsLoadBalancers1Error,
      Schemas.RestResponseMapStringString
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponseMapStringString,
    GetAwsLoadBalancers1Error,
    Schemas.RestResponseMapStringString
  >(
    queryKeyFn({
      path: '/infrastructure-mappings/{infraMappingId}/aws-elastic-balancers',
      operationId: 'getAwsLoadBalancers1',
      variables
    }),
    () => fetchGetAwsLoadBalancers1({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type GetAwsNetworkLoadBalancers1PathParams = {
  infraMappingId: string
}

export type GetAwsNetworkLoadBalancers1QueryParams = {
  appId?: string
}

export type GetAwsNetworkLoadBalancers1Error = Fetcher.ErrorWrapper<undefined>

export type GetAwsNetworkLoadBalancers1Variables = {
  pathParams: GetAwsNetworkLoadBalancers1PathParams
  queryParams?: GetAwsNetworkLoadBalancers1QueryParams
} & PortalContext['fetcherOptions']

export const fetchGetAwsNetworkLoadBalancers1 = (variables: GetAwsNetworkLoadBalancers1Variables) =>
  portalFetch<
    Schemas.RestResponseMapStringString,
    GetAwsNetworkLoadBalancers1Error,
    undefined,
    {},
    GetAwsNetworkLoadBalancers1QueryParams,
    GetAwsNetworkLoadBalancers1PathParams
  >({ url: '/infrastructure-mappings/{infraMappingId}/aws-network-balancers', method: 'get', ...variables })

export const useGetAwsNetworkLoadBalancers1 = (
  variables: GetAwsNetworkLoadBalancers1Variables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponseMapStringString,
      GetAwsNetworkLoadBalancers1Error,
      Schemas.RestResponseMapStringString
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponseMapStringString,
    GetAwsNetworkLoadBalancers1Error,
    Schemas.RestResponseMapStringString
  >(
    queryKeyFn({
      path: '/infrastructure-mappings/{infraMappingId}/aws-network-balancers',
      operationId: 'getAwsNetworkLoadBalancers1',
      variables
    }),
    () => fetchGetAwsNetworkLoadBalancers1({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type GetTargetGroups1PathParams = {
  infraMappingId: string
  loadbalancerName: string
}

export type GetTargetGroups1QueryParams = {
  appId?: string
}

export type GetTargetGroups1Error = Fetcher.ErrorWrapper<undefined>

export type GetTargetGroups1Variables = {
  pathParams: GetTargetGroups1PathParams
  queryParams?: GetTargetGroups1QueryParams
} & PortalContext['fetcherOptions']

export const fetchGetTargetGroups1 = (variables: GetTargetGroups1Variables) =>
  portalFetch<
    Schemas.RestResponseMapStringString,
    GetTargetGroups1Error,
    undefined,
    {},
    GetTargetGroups1QueryParams,
    GetTargetGroups1PathParams
  >({
    url: '/infrastructure-mappings/{infraMappingId}/load-balancers/{loadbalancerName}/target-groups',
    method: 'get',
    ...variables
  })

export const useGetTargetGroups1 = (
  variables: GetTargetGroups1Variables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponseMapStringString,
      GetTargetGroups1Error,
      Schemas.RestResponseMapStringString
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponseMapStringString,
    GetTargetGroups1Error,
    Schemas.RestResponseMapStringString
  >(
    queryKeyFn({
      path: '/infrastructure-mappings/{infraMappingId}/load-balancers/{loadbalancerName}/target-groups',
      operationId: 'getTargetGroups1',
      variables
    }),
    () => fetchGetTargetGroups1({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type GetTargetGroups2PathParams = {
  computeProviderId: string
  loadbalancerName: string
}

export type GetTargetGroups2QueryParams = {
  appId?: string
  deploymentType?: string
}

export type GetTargetGroups2Error = Fetcher.ErrorWrapper<undefined>

export type GetTargetGroups2Variables = {
  pathParams: GetTargetGroups2PathParams
  queryParams?: GetTargetGroups2QueryParams
} & PortalContext['fetcherOptions']

export const fetchGetTargetGroups2 = (variables: GetTargetGroups2Variables) =>
  portalFetch<
    Schemas.RestResponseMapStringString,
    GetTargetGroups2Error,
    undefined,
    {},
    GetTargetGroups2QueryParams,
    GetTargetGroups2PathParams
  >({
    url: '/infrastructure-mappings/compute-providers/{computeProviderId}/load-balancer/{loadbalancerName}/target-groups',
    method: 'get',
    ...variables
  })

export const useGetTargetGroups2 = (
  variables: GetTargetGroups2Variables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponseMapStringString,
      GetTargetGroups2Error,
      Schemas.RestResponseMapStringString
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponseMapStringString,
    GetTargetGroups2Error,
    Schemas.RestResponseMapStringString
  >(
    queryKeyFn({
      path: '/infrastructure-mappings/compute-providers/{computeProviderId}/load-balancer/{loadbalancerName}/target-groups',
      operationId: 'getTargetGroups2',
      variables
    }),
    () => fetchGetTargetGroups2({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type GetHostedZones1PathParams = {
  infraMappingId: string
}

export type GetHostedZones1QueryParams = {
  appId?: string
}

export type GetHostedZones1Error = Fetcher.ErrorWrapper<undefined>

export type GetHostedZones1Variables = {
  pathParams: GetHostedZones1PathParams
  queryParams?: GetHostedZones1QueryParams
} & PortalContext['fetcherOptions']

export const fetchGetHostedZones1 = (variables: GetHostedZones1Variables) =>
  portalFetch<
    Schemas.RestResponseListAwsRoute53HostedZoneData,
    GetHostedZones1Error,
    undefined,
    {},
    GetHostedZones1QueryParams,
    GetHostedZones1PathParams
  >({ url: '/infrastructure-mappings/{infraMappingId}/hosted-zones', method: 'get', ...variables })

export const useGetHostedZones1 = (
  variables: GetHostedZones1Variables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponseListAwsRoute53HostedZoneData,
      GetHostedZones1Error,
      Schemas.RestResponseListAwsRoute53HostedZoneData
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponseListAwsRoute53HostedZoneData,
    GetHostedZones1Error,
    Schemas.RestResponseListAwsRoute53HostedZoneData
  >(
    queryKeyFn({
      path: '/infrastructure-mappings/{infraMappingId}/hosted-zones',
      operationId: 'getHostedZones1',
      variables
    }),
    () => fetchGetHostedZones1({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type GetClassicLoadBalancersPathParams = {
  computeProviderId: string
}

export type GetClassicLoadBalancersQueryParams = {
  appId?: string
  region?: string
}

export type GetClassicLoadBalancersError = Fetcher.ErrorWrapper<undefined>

export type GetClassicLoadBalancersVariables = {
  pathParams: GetClassicLoadBalancersPathParams
  queryParams?: GetClassicLoadBalancersQueryParams
} & PortalContext['fetcherOptions']

export const fetchGetClassicLoadBalancers = (variables: GetClassicLoadBalancersVariables) =>
  portalFetch<
    Schemas.RestResponseListString,
    GetClassicLoadBalancersError,
    undefined,
    {},
    GetClassicLoadBalancersQueryParams,
    GetClassicLoadBalancersPathParams
  >({
    url: '/infrastructure-mappings/compute-providers/{computeProviderId}/classic-load-balancers',
    method: 'get',
    ...variables
  })

export const useGetClassicLoadBalancers = (
  variables: GetClassicLoadBalancersVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponseListString,
      GetClassicLoadBalancersError,
      Schemas.RestResponseListString
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponseListString,
    GetClassicLoadBalancersError,
    Schemas.RestResponseListString
  >(
    queryKeyFn({
      path: '/infrastructure-mappings/compute-providers/{computeProviderId}/classic-load-balancers',
      operationId: 'getClassicLoadBalancers',
      variables
    }),
    () => fetchGetClassicLoadBalancers({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type GetElasticLoadBalancersQueryParams = {
  accountId?: string
  accessKey?: string
  secretKey?: string
  region?: string
}

export type GetElasticLoadBalancersError = Fetcher.ErrorWrapper<undefined>

export type GetElasticLoadBalancersVariables = {
  queryParams?: GetElasticLoadBalancersQueryParams
} & PortalContext['fetcherOptions']

export const fetchGetElasticLoadBalancers = (variables: GetElasticLoadBalancersVariables) =>
  portalFetch<
    Schemas.RestResponseListString,
    GetElasticLoadBalancersError,
    undefined,
    {},
    GetElasticLoadBalancersQueryParams,
    {}
  >({ url: '/infrastructure-mappings/elastic-load-balancers', method: 'get', ...variables })

export const useGetElasticLoadBalancers = (
  variables: GetElasticLoadBalancersVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponseListString,
      GetElasticLoadBalancersError,
      Schemas.RestResponseListString
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponseListString,
    GetElasticLoadBalancersError,
    Schemas.RestResponseListString
  >(
    queryKeyFn({
      path: '/infrastructure-mappings/elastic-load-balancers',
      operationId: 'getElasticLoadBalancers',
      variables
    }),
    () => fetchGetElasticLoadBalancers({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type GetAlbTargetGroupsPathParams = {
  computeProviderId: string
}

export type GetAlbTargetGroupsQueryParams = {
  appId?: string
  region?: string
}

export type GetAlbTargetGroupsError = Fetcher.ErrorWrapper<undefined>

export type GetAlbTargetGroupsVariables = {
  pathParams: GetAlbTargetGroupsPathParams
  queryParams?: GetAlbTargetGroupsQueryParams
} & PortalContext['fetcherOptions']

export const fetchGetAlbTargetGroups = (variables: GetAlbTargetGroupsVariables) =>
  portalFetch<
    Schemas.RestResponseMapStringString,
    GetAlbTargetGroupsError,
    undefined,
    {},
    GetAlbTargetGroupsQueryParams,
    GetAlbTargetGroupsPathParams
  >({
    url: '/infrastructure-mappings/compute-providers/{computeProviderId}/target-groups',
    method: 'get',
    ...variables
  })

export const useGetAlbTargetGroups = (
  variables: GetAlbTargetGroupsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponseMapStringString,
      GetAlbTargetGroupsError,
      Schemas.RestResponseMapStringString
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponseMapStringString,
    GetAlbTargetGroupsError,
    Schemas.RestResponseMapStringString
  >(
    queryKeyFn({
      path: '/infrastructure-mappings/compute-providers/{computeProviderId}/target-groups',
      operationId: 'getAlbTargetGroups',
      variables
    }),
    () => fetchGetAlbTargetGroups({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type GetCodeDeployApplicationNamesPathParams = {
  computeProviderId: string
}

export type GetCodeDeployApplicationNamesQueryParams = {
  appId?: string
  region?: string
}

export type GetCodeDeployApplicationNamesError = Fetcher.ErrorWrapper<undefined>

export type GetCodeDeployApplicationNamesVariables = {
  pathParams: GetCodeDeployApplicationNamesPathParams
  queryParams?: GetCodeDeployApplicationNamesQueryParams
} & PortalContext['fetcherOptions']

export const fetchGetCodeDeployApplicationNames = (variables: GetCodeDeployApplicationNamesVariables) =>
  portalFetch<
    Schemas.RestResponseListString,
    GetCodeDeployApplicationNamesError,
    undefined,
    {},
    GetCodeDeployApplicationNamesQueryParams,
    GetCodeDeployApplicationNamesPathParams
  >({
    url: '/infrastructure-mappings/compute-providers/{computeProviderId}/codedeploy/application-names',
    method: 'get',
    ...variables
  })

export const useGetCodeDeployApplicationNames = (
  variables: GetCodeDeployApplicationNamesVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponseListString,
      GetCodeDeployApplicationNamesError,
      Schemas.RestResponseListString
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponseListString,
    GetCodeDeployApplicationNamesError,
    Schemas.RestResponseListString
  >(
    queryKeyFn({
      path: '/infrastructure-mappings/compute-providers/{computeProviderId}/codedeploy/application-names',
      operationId: 'getCodeDeployApplicationNames',
      variables
    }),
    () => fetchGetCodeDeployApplicationNames({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type GetCodeDeployDeploymentGroupsPathParams = {
  computeProviderId: string
}

export type GetCodeDeployDeploymentGroupsQueryParams = {
  appId?: string
  region?: string
  applicationName?: string
}

export type GetCodeDeployDeploymentGroupsError = Fetcher.ErrorWrapper<undefined>

export type GetCodeDeployDeploymentGroupsVariables = {
  pathParams: GetCodeDeployDeploymentGroupsPathParams
  queryParams?: GetCodeDeployDeploymentGroupsQueryParams
} & PortalContext['fetcherOptions']

export const fetchGetCodeDeployDeploymentGroups = (variables: GetCodeDeployDeploymentGroupsVariables) =>
  portalFetch<
    Schemas.RestResponseListString,
    GetCodeDeployDeploymentGroupsError,
    undefined,
    {},
    GetCodeDeployDeploymentGroupsQueryParams,
    GetCodeDeployDeploymentGroupsPathParams
  >({
    url: '/infrastructure-mappings/compute-providers/{computeProviderId}/codedeploy/deployment-groups',
    method: 'get',
    ...variables
  })

export const useGetCodeDeployDeploymentGroups = (
  variables: GetCodeDeployDeploymentGroupsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponseListString,
      GetCodeDeployDeploymentGroupsError,
      Schemas.RestResponseListString
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponseListString,
    GetCodeDeployDeploymentGroupsError,
    Schemas.RestResponseListString
  >(
    queryKeyFn({
      path: '/infrastructure-mappings/compute-providers/{computeProviderId}/codedeploy/deployment-groups',
      operationId: 'getCodeDeployDeploymentGroups',
      variables
    }),
    () => fetchGetCodeDeployDeploymentGroups({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type GetCodeDeployDeploymentConfigsPathParams = {
  computeProviderId: string
}

export type GetCodeDeployDeploymentConfigsQueryParams = {
  appId?: string
  region?: string
}

export type GetCodeDeployDeploymentConfigsError = Fetcher.ErrorWrapper<undefined>

export type GetCodeDeployDeploymentConfigsVariables = {
  pathParams: GetCodeDeployDeploymentConfigsPathParams
  queryParams?: GetCodeDeployDeploymentConfigsQueryParams
} & PortalContext['fetcherOptions']

export const fetchGetCodeDeployDeploymentConfigs = (variables: GetCodeDeployDeploymentConfigsVariables) =>
  portalFetch<
    Schemas.RestResponseListString,
    GetCodeDeployDeploymentConfigsError,
    undefined,
    {},
    GetCodeDeployDeploymentConfigsQueryParams,
    GetCodeDeployDeploymentConfigsPathParams
  >({
    url: '/infrastructure-mappings/compute-providers/{computeProviderId}/codedeploy/deployment-configs',
    method: 'get',
    ...variables
  })

export const useGetCodeDeployDeploymentConfigs = (
  variables: GetCodeDeployDeploymentConfigsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponseListString,
      GetCodeDeployDeploymentConfigsError,
      Schemas.RestResponseListString
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponseListString,
    GetCodeDeployDeploymentConfigsError,
    Schemas.RestResponseListString
  >(
    queryKeyFn({
      path: '/infrastructure-mappings/compute-providers/{computeProviderId}/codedeploy/deployment-configs',
      operationId: 'getCodeDeployDeploymentConfigs',
      variables
    }),
    () => fetchGetCodeDeployDeploymentConfigs({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type GetOrganizationsForPcfPathParams = {
  computeProviderId: string
}

export type GetOrganizationsForPcfQueryParams = {
  appId?: string
}

export type GetOrganizationsForPcfError = Fetcher.ErrorWrapper<undefined>

export type GetOrganizationsForPcfVariables = {
  pathParams: GetOrganizationsForPcfPathParams
  queryParams?: GetOrganizationsForPcfQueryParams
} & PortalContext['fetcherOptions']

export const fetchGetOrganizationsForPcf = (variables: GetOrganizationsForPcfVariables) =>
  portalFetch<
    Schemas.RestResponseListString,
    GetOrganizationsForPcfError,
    undefined,
    {},
    GetOrganizationsForPcfQueryParams,
    GetOrganizationsForPcfPathParams
  >({
    url: '/infrastructure-mappings/compute-providers/{computeProviderId}/pcf/organizations',
    method: 'get',
    ...variables
  })

export const useGetOrganizationsForPcf = (
  variables: GetOrganizationsForPcfVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponseListString,
      GetOrganizationsForPcfError,
      Schemas.RestResponseListString
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponseListString,
    GetOrganizationsForPcfError,
    Schemas.RestResponseListString
  >(
    queryKeyFn({
      path: '/infrastructure-mappings/compute-providers/{computeProviderId}/pcf/organizations',
      operationId: 'getOrganizationsForPcf',
      variables
    }),
    () => fetchGetOrganizationsForPcf({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type GetSpacesForPcfPathParams = {
  computeProviderId: string
}

export type GetSpacesForPcfQueryParams = {
  appId?: string
  org?: string
}

export type GetSpacesForPcfError = Fetcher.ErrorWrapper<undefined>

export type GetSpacesForPcfVariables = {
  pathParams: GetSpacesForPcfPathParams
  queryParams?: GetSpacesForPcfQueryParams
} & PortalContext['fetcherOptions']

export const fetchGetSpacesForPcf = (variables: GetSpacesForPcfVariables) =>
  portalFetch<
    Schemas.RestResponseListString,
    GetSpacesForPcfError,
    undefined,
    {},
    GetSpacesForPcfQueryParams,
    GetSpacesForPcfPathParams
  >({ url: '/infrastructure-mappings/compute-providers/{computeProviderId}/pcf/spaces', method: 'get', ...variables })

export const useGetSpacesForPcf = (
  variables: GetSpacesForPcfVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.RestResponseListString, GetSpacesForPcfError, Schemas.RestResponseListString>,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<Schemas.RestResponseListString, GetSpacesForPcfError, Schemas.RestResponseListString>(
    queryKeyFn({
      path: '/infrastructure-mappings/compute-providers/{computeProviderId}/pcf/spaces',
      operationId: 'getSpacesForPcf',
      variables
    }),
    () => fetchGetSpacesForPcf({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type GetRoutesForPcf1PathParams = {
  computeProviderId: string
}

export type GetRoutesForPcf1QueryParams = {
  appId?: string
  org?: string
  space?: string
}

export type GetRoutesForPcf1Error = Fetcher.ErrorWrapper<undefined>

export type GetRoutesForPcf1Variables = {
  pathParams: GetRoutesForPcf1PathParams
  queryParams?: GetRoutesForPcf1QueryParams
} & PortalContext['fetcherOptions']

export const fetchGetRoutesForPcf1 = (variables: GetRoutesForPcf1Variables) =>
  portalFetch<
    Schemas.RestResponseListString,
    GetRoutesForPcf1Error,
    undefined,
    {},
    GetRoutesForPcf1QueryParams,
    GetRoutesForPcf1PathParams
  >({ url: '/infrastructure-mappings/compute-providers/{computeProviderId}/pcf/routes', method: 'get', ...variables })

export const useGetRoutesForPcf1 = (
  variables: GetRoutesForPcf1Variables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.RestResponseListString, GetRoutesForPcf1Error, Schemas.RestResponseListString>,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<Schemas.RestResponseListString, GetRoutesForPcf1Error, Schemas.RestResponseListString>(
    queryKeyFn({
      path: '/infrastructure-mappings/compute-providers/{computeProviderId}/pcf/routes',
      operationId: 'getRoutesForPcf1',
      variables
    }),
    () => fetchGetRoutesForPcf1({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type Get28PathParams = {
  infraProvisionerId: string
}

export type Get28QueryParams = {
  appId?: string
}

export type Get28Error = Fetcher.ErrorWrapper<undefined>

export type Get28Variables = {
  pathParams: Get28PathParams
  queryParams?: Get28QueryParams
} & PortalContext['fetcherOptions']

export const fetchGet28 = (variables: Get28Variables) =>
  portalFetch<
    Schemas.RestResponseInfrastructureProvisioner,
    Get28Error,
    undefined,
    {},
    Get28QueryParams,
    Get28PathParams
  >({ url: '/infrastructure-provisioners/{infraProvisionerId}', method: 'get', ...variables })

export const useGet28 = (
  variables: Get28Variables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponseInfrastructureProvisioner,
      Get28Error,
      Schemas.RestResponseInfrastructureProvisioner
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponseInfrastructureProvisioner,
    Get28Error,
    Schemas.RestResponseInfrastructureProvisioner
  >(
    queryKeyFn({ path: '/infrastructure-provisioners/{infraProvisionerId}', operationId: 'get28', variables }),
    () => fetchGet28({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type Update20PathParams = {
  infraProvisionerId: string
}

export type Update20QueryParams = {
  appId?: string
}

export type Update20Error = Fetcher.ErrorWrapper<undefined>

export type Update20Variables = {
  body: RequestBodies.InfrastructureProvisioner
  pathParams: Update20PathParams
  queryParams?: Update20QueryParams
} & PortalContext['fetcherOptions']

export const fetchUpdate20 = (variables: Update20Variables) =>
  portalFetch<
    Schemas.RestResponseInfrastructureProvisioner,
    Update20Error,
    RequestBodies.InfrastructureProvisioner,
    {},
    Update20QueryParams,
    Update20PathParams
  >({ url: '/infrastructure-provisioners/{infraProvisionerId}', method: 'put', ...variables })

export const useUpdate20 = (
  options?: Omit<
    reactQuery.UseMutationOptions<Schemas.RestResponseInfrastructureProvisioner, Update20Error, Update20Variables>,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<Schemas.RestResponseInfrastructureProvisioner, Update20Error, Update20Variables>(
    (variables: Update20Variables) => fetchUpdate20({ ...fetcherOptions, ...variables }),
    options
  )
}

export type Delete19PathParams = {
  infraProvisionerId: string
}

export type Delete19QueryParams = {
  appId?: string
}

export type Delete19Error = Fetcher.ErrorWrapper<undefined>

export type Delete19Variables = {
  pathParams: Delete19PathParams
  queryParams?: Delete19QueryParams
} & PortalContext['fetcherOptions']

export const fetchDelete19 = (variables: Delete19Variables) =>
  portalFetch<Schemas.RestResponse, Delete19Error, undefined, {}, Delete19QueryParams, Delete19PathParams>({
    url: '/infrastructure-provisioners/{infraProvisionerId}',
    method: 'delete',
    ...variables
  })

export const useDelete19 = (
  options?: Omit<reactQuery.UseMutationOptions<Schemas.RestResponse, Delete19Error, Delete19Variables>, 'mutationFn'>
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<Schemas.RestResponse, Delete19Error, Delete19Variables>(
    (variables: Delete19Variables) => fetchDelete19({ ...fetcherOptions, ...variables }),
    options
  )
}

export type List30QueryParams = {
  appId?: string[]
  /*
   * @default 0
   */
  offset?: string
  limit?: string
  fieldsIncluded?: string[]
  fieldsExcluded?: string[]
}

export type List30Error = Fetcher.ErrorWrapper<undefined>

export type List30Variables = {
  queryParams?: List30QueryParams
} & PortalContext['fetcherOptions']

export const fetchList30 = (variables: List30Variables) =>
  portalFetch<
    Schemas.RestResponsePageResponseInfrastructureProvisioner,
    List30Error,
    undefined,
    {},
    List30QueryParams,
    {}
  >({ url: '/infrastructure-provisioners', method: 'get', ...variables })

export const useList30 = (
  variables: List30Variables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponsePageResponseInfrastructureProvisioner,
      List30Error,
      Schemas.RestResponsePageResponseInfrastructureProvisioner
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponsePageResponseInfrastructureProvisioner,
    List30Error,
    Schemas.RestResponsePageResponseInfrastructureProvisioner
  >(
    queryKeyFn({ path: '/infrastructure-provisioners', operationId: 'list30', variables }),
    () => fetchList30({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type Save12QueryParams = {
  appId?: string
}

export type Save12Error = Fetcher.ErrorWrapper<undefined>

export type Save12Variables = {
  body: RequestBodies.InfrastructureProvisioner
  queryParams?: Save12QueryParams
} & PortalContext['fetcherOptions']

export const fetchSave12 = (variables: Save12Variables) =>
  portalFetch<
    Schemas.RestResponseInfrastructureProvisioner,
    Save12Error,
    RequestBodies.InfrastructureProvisioner,
    {},
    Save12QueryParams,
    {}
  >({ url: '/infrastructure-provisioners', method: 'post', ...variables })

export const useSave12 = (
  options?: Omit<
    reactQuery.UseMutationOptions<Schemas.RestResponseInfrastructureProvisioner, Save12Error, Save12Variables>,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<Schemas.RestResponseInfrastructureProvisioner, Save12Error, Save12Variables>(
    (variables: Save12Variables) => fetchSave12({ ...fetcherOptions, ...variables }),
    options
  )
}

export type BlueprintPropertiesError = Fetcher.ErrorWrapper<undefined>

export type BlueprintPropertiesVariables = PortalContext['fetcherOptions']

export const fetchBlueprintProperties = (variables: BlueprintPropertiesVariables) =>
  portalFetch<
    Schemas.RestResponseMapPairDeploymentTypeCloudProviderTypeMapStringString,
    BlueprintPropertiesError,
    undefined,
    {},
    {},
    {}
  >({ url: '/infrastructure-provisioners/blueprint-properties', method: 'get', ...variables })

export const useBlueprintProperties = (
  variables: BlueprintPropertiesVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponseMapPairDeploymentTypeCloudProviderTypeMapStringString,
      BlueprintPropertiesError,
      Schemas.RestResponseMapPairDeploymentTypeCloudProviderTypeMapStringString
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponseMapPairDeploymentTypeCloudProviderTypeMapStringString,
    BlueprintPropertiesError,
    Schemas.RestResponseMapPairDeploymentTypeCloudProviderTypeMapStringString
  >(
    queryKeyFn({
      path: '/infrastructure-provisioners/blueprint-properties',
      operationId: 'blueprintProperties',
      variables
    }),
    () => fetchBlueprintProperties({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type ListForTaskQueryParams = {
  appId?: string
  type?: string
  serviceId?: string
  deploymentType?:
    | 'SSH'
    | 'AWS_CODEDEPLOY'
    | 'ECS'
    | 'SPOTINST'
    | 'KUBERNETES'
    | 'HELM'
    | 'AWS_LAMBDA'
    | 'AMI'
    | 'WINRM'
    | 'PCF'
    | 'AZURE_VMSS'
    | 'AZURE_WEBAPP'
    | 'CUSTOM'
  cloudProviderType?: 'AWS' | 'GCP' | 'PHYSICAL_DATA_CENTER'
}

export type ListForTaskError = Fetcher.ErrorWrapper<undefined>

export type ListForTaskVariables = {
  queryParams?: ListForTaskQueryParams
} & PortalContext['fetcherOptions']

export const fetchListForTask = (variables: ListForTaskVariables) =>
  portalFetch<
    Schemas.RestResponsePageResponseInfrastructureProvisioner,
    ListForTaskError,
    undefined,
    {},
    ListForTaskQueryParams,
    {}
  >({ url: '/infrastructure-provisioners/for-task', method: 'get', ...variables })

export const useListForTask = (
  variables: ListForTaskVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponsePageResponseInfrastructureProvisioner,
      ListForTaskError,
      Schemas.RestResponsePageResponseInfrastructureProvisioner
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponsePageResponseInfrastructureProvisioner,
    ListForTaskError,
    Schemas.RestResponsePageResponseInfrastructureProvisioner
  >(
    queryKeyFn({ path: '/infrastructure-provisioners/for-task', operationId: 'listForTask', variables }),
    () => fetchListForTask({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type ListDetails1QueryParams = {
  appId?: string
  tagFilter?: string
  /*
   * @default false
   */
  withTags?: boolean
  /*
   * @default 0
   */
  offset?: string
  limit?: string
  fieldsIncluded?: string[]
  fieldsExcluded?: string[]
}

export type ListDetails1Error = Fetcher.ErrorWrapper<undefined>

export type ListDetails1Variables = {
  queryParams?: ListDetails1QueryParams
} & PortalContext['fetcherOptions']

export const fetchListDetails1 = (variables: ListDetails1Variables) =>
  portalFetch<
    Schemas.RestResponsePageResponseInfrastructureProvisionerDetails,
    ListDetails1Error,
    undefined,
    {},
    ListDetails1QueryParams,
    {}
  >({ url: '/infrastructure-provisioners/details', method: 'get', ...variables })

export const useListDetails1 = (
  variables: ListDetails1Variables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponsePageResponseInfrastructureProvisionerDetails,
      ListDetails1Error,
      Schemas.RestResponsePageResponseInfrastructureProvisionerDetails
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponsePageResponseInfrastructureProvisionerDetails,
    ListDetails1Error,
    Schemas.RestResponsePageResponseInfrastructureProvisionerDetails
  >(
    queryKeyFn({ path: '/infrastructure-provisioners/details', operationId: 'listDetails1', variables }),
    () => fetchListDetails1({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type GetParamsKeysQueryParams = {
  type?: string
  region?: string
  awsConfigId?: string
  appId?: string
  sourceRepoSettingId?: string
  path?: string
  commitId?: string
  branch?: string
  useBranch?: boolean
  repoName?: string
}

export type GetParamsKeysError = Fetcher.ErrorWrapper<undefined>

export type GetParamsKeysVariables = {
  body?: RequestBodies.ValidateBody
  queryParams?: GetParamsKeysQueryParams
} & PortalContext['fetcherOptions']

export const fetchGetParamsKeys = (variables: GetParamsKeysVariables) =>
  portalFetch<
    Schemas.RestResponseListAwsCFTemplateParamsData,
    GetParamsKeysError,
    RequestBodies.ValidateBody,
    {},
    GetParamsKeysQueryParams,
    {}
  >({ url: '/infrastructure-provisioners/get-params', method: 'post', ...variables })

export const useGetParamsKeys = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.RestResponseListAwsCFTemplateParamsData,
      GetParamsKeysError,
      GetParamsKeysVariables
    >,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<
    Schemas.RestResponseListAwsCFTemplateParamsData,
    GetParamsKeysError,
    GetParamsKeysVariables
  >((variables: GetParamsKeysVariables) => fetchGetParamsKeys({ ...fetcherOptions, ...variables }), options)
}

export type GetTerraformVariablesQueryParams = {
  appId?: string
  sourceRepoSettingId: string
  path: string
  accountId?: string
  branch?: string
  commitId?: string
  repoName?: string
}

export type GetTerraformVariablesError = Fetcher.ErrorWrapper<undefined>

export type GetTerraformVariablesVariables = {
  queryParams: GetTerraformVariablesQueryParams
} & PortalContext['fetcherOptions']

export const fetchGetTerraformVariables = (variables: GetTerraformVariablesVariables) =>
  portalFetch<
    Schemas.RestResponseListNameValuePair,
    GetTerraformVariablesError,
    undefined,
    {},
    GetTerraformVariablesQueryParams,
    {}
  >({ url: '/infrastructure-provisioners/terraform-variables', method: 'get', ...variables })

export const useGetTerraformVariables = (
  variables: GetTerraformVariablesVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponseListNameValuePair,
      GetTerraformVariablesError,
      Schemas.RestResponseListNameValuePair
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponseListNameValuePair,
    GetTerraformVariablesError,
    Schemas.RestResponseListNameValuePair
  >(
    queryKeyFn({
      path: '/infrastructure-provisioners/terraform-variables',
      operationId: 'getTerraformVariables',
      variables
    }),
    () => fetchGetTerraformVariables({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type GetTerraformTargetsQueryParams = {
  appId?: string
  accountId?: string
  provisionerId: string
}

export type GetTerraformTargetsError = Fetcher.ErrorWrapper<undefined>

export type GetTerraformTargetsVariables = {
  queryParams: GetTerraformTargetsQueryParams
} & PortalContext['fetcherOptions']

export const fetchGetTerraformTargets = (variables: GetTerraformTargetsVariables) =>
  portalFetch<
    Schemas.RestResponseListString,
    GetTerraformTargetsError,
    undefined,
    {},
    GetTerraformTargetsQueryParams,
    {}
  >({ url: '/infrastructure-provisioners/terraform-targets', method: 'get', ...variables })

export const useGetTerraformTargets = (
  variables: GetTerraformTargetsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponseListString,
      GetTerraformTargetsError,
      Schemas.RestResponseListString
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<Schemas.RestResponseListString, GetTerraformTargetsError, Schemas.RestResponseListString>(
    queryKeyFn({
      path: '/infrastructure-provisioners/terraform-targets',
      operationId: 'getTerraformTargets',
      variables
    }),
    () => fetchGetTerraformTargets({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type DownloadTerraformStateQueryParams = {
  provisionerId?: string
  envId?: string
  appId?: string
  accountId?: string
}

export type DownloadTerraformStateError = Fetcher.ErrorWrapper<undefined>

export type DownloadTerraformStateVariables = {
  queryParams?: DownloadTerraformStateQueryParams
} & PortalContext['fetcherOptions']

export const fetchDownloadTerraformState = (variables: DownloadTerraformStateVariables) =>
  portalFetch<
    Schemas.StreamingOutput,
    DownloadTerraformStateError,
    undefined,
    {},
    DownloadTerraformStateQueryParams,
    {}
  >({ url: '/infrastructure-provisioners/tf-download-state', method: 'get', ...variables })

export const useDownloadTerraformState = (
  variables: DownloadTerraformStateVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.StreamingOutput, DownloadTerraformStateError, Schemas.StreamingOutput>,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<Schemas.StreamingOutput, DownloadTerraformStateError, Schemas.StreamingOutput>(
    queryKeyFn({
      path: '/infrastructure-provisioners/tf-download-state',
      operationId: 'downloadTerraformState',
      variables
    }),
    () => fetchDownloadTerraformState({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type GetMetricsWithDataForNode5QueryParams = {
  accountId?: string
}

export type GetMetricsWithDataForNode5Error = Fetcher.ErrorWrapper<undefined>

export type GetMetricsWithDataForNode5Variables = {
  body: Schemas.InstanaSetupTestNodeData
  queryParams?: GetMetricsWithDataForNode5QueryParams
} & PortalContext['fetcherOptions']

export const fetchGetMetricsWithDataForNode5 = (variables: GetMetricsWithDataForNode5Variables) =>
  portalFetch<
    Schemas.RestResponseVerificationNodeDataSetupResponse,
    GetMetricsWithDataForNode5Error,
    Schemas.InstanaSetupTestNodeData,
    {},
    GetMetricsWithDataForNode5QueryParams,
    {}
  >({ url: '/instana/node-data', method: 'post', ...variables })

export const useGetMetricsWithDataForNode5 = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.RestResponseVerificationNodeDataSetupResponse,
      GetMetricsWithDataForNode5Error,
      GetMetricsWithDataForNode5Variables
    >,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<
    Schemas.RestResponseVerificationNodeDataSetupResponse,
    GetMetricsWithDataForNode5Error,
    GetMetricsWithDataForNode5Variables
  >(
    (variables: GetMetricsWithDataForNode5Variables) =>
      fetchGetMetricsWithDataForNode5({ ...fetcherOptions, ...variables }),
    options
  )
}

export type GetLogRecordsToClassifyQueryParams = {
  accountId?: string
}

export type GetLogRecordsToClassifyError = Fetcher.ErrorWrapper<undefined>

export type GetLogRecordsToClassifyVariables = {
  queryParams?: GetLogRecordsToClassifyQueryParams
} & PortalContext['fetcherOptions']

export const fetchGetLogRecordsToClassify = (variables: GetLogRecordsToClassifyVariables) =>
  portalFetch<
    Schemas.RestResponseListLogDataRecord,
    GetLogRecordsToClassifyError,
    undefined,
    {},
    GetLogRecordsToClassifyQueryParams,
    {}
  >({ url: '/log-classify', method: 'get', ...variables })

export const useGetLogRecordsToClassify = (
  variables: GetLogRecordsToClassifyVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponseListLogDataRecord,
      GetLogRecordsToClassifyError,
      Schemas.RestResponseListLogDataRecord
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponseListLogDataRecord,
    GetLogRecordsToClassifyError,
    Schemas.RestResponseListLogDataRecord
  >(
    queryKeyFn({ path: '/log-classify', operationId: 'getLogRecordsToClassify', variables }),
    () => fetchGetLogRecordsToClassify({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type SaveLabeledRecordQueryParams = {
  accountId?: string
  labels?: (
    | 'NOISE'
    | 'CLEAN'
    | 'INFRA'
    | 'THIRD_PARTY'
    | 'IMPORTANT'
    | 'BACKGROUND'
    | 'JAVA_THROWABLE'
    | 'ERROR'
    | 'EXCEPTION'
    | 'RUNTIME'
    | 'HTTP'
    | 'UPSTREAM'
    | 'DOWNSTREAM'
    | 'DATABASE'
    | 'NETWORK'
    | 'APM'
    | 'LOGS'
    | 'JVM'
    | 'WARN'
  )[]
}

export type SaveLabeledRecordError = Fetcher.ErrorWrapper<undefined>

export type SaveLabeledRecordVariables = {
  body?: RequestBodies.UpdateAccountPreferenceBody
  queryParams?: SaveLabeledRecordQueryParams
} & PortalContext['fetcherOptions']

export const fetchSaveLabeledRecord = (variables: SaveLabeledRecordVariables) =>
  portalFetch<
    Schemas.RestResponseBoolean,
    SaveLabeledRecordError,
    RequestBodies.UpdateAccountPreferenceBody,
    {},
    SaveLabeledRecordQueryParams,
    {}
  >({ url: '/log-classify', method: 'post', ...variables })

export const useSaveLabeledRecord = (
  options?: Omit<
    reactQuery.UseMutationOptions<Schemas.RestResponseBoolean, SaveLabeledRecordError, SaveLabeledRecordVariables>,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<Schemas.RestResponseBoolean, SaveLabeledRecordError, SaveLabeledRecordVariables>(
    (variables: SaveLabeledRecordVariables) => fetchSaveLabeledRecord({ ...fetcherOptions, ...variables }),
    options
  )
}

export type GetIgnoreFeedbacksToClassifyQueryParams = {
  accountId?: string
  serviceId?: string
  envId?: string
}

export type GetIgnoreFeedbacksToClassifyError = Fetcher.ErrorWrapper<undefined>

export type GetIgnoreFeedbacksToClassifyVariables = {
  queryParams?: GetIgnoreFeedbacksToClassifyQueryParams
} & PortalContext['fetcherOptions']

export const fetchGetIgnoreFeedbacksToClassify = (variables: GetIgnoreFeedbacksToClassifyVariables) =>
  portalFetch<
    Schemas.RestResponseListCVFeedbackRecord,
    GetIgnoreFeedbacksToClassifyError,
    undefined,
    {},
    GetIgnoreFeedbacksToClassifyQueryParams,
    {}
  >({ url: '/log-classify/cv-feedback-to-classify', method: 'get', ...variables })

export const useGetIgnoreFeedbacksToClassify = (
  variables: GetIgnoreFeedbacksToClassifyVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponseListCVFeedbackRecord,
      GetIgnoreFeedbacksToClassifyError,
      Schemas.RestResponseListCVFeedbackRecord
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponseListCVFeedbackRecord,
    GetIgnoreFeedbacksToClassifyError,
    Schemas.RestResponseListCVFeedbackRecord
  >(
    queryKeyFn({
      path: '/log-classify/cv-feedback-to-classify',
      operationId: 'getIgnoreFeedbacksToClassify',
      variables
    }),
    () => fetchGetIgnoreFeedbacksToClassify({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type SaveLabeledIgnoreFeedbackQueryParams = {
  accountId?: string
  label?: string
}

export type SaveLabeledIgnoreFeedbackError = Fetcher.ErrorWrapper<undefined>

export type SaveLabeledIgnoreFeedbackVariables = {
  body?: RequestBodies.CVFeedbackRecord
  queryParams?: SaveLabeledIgnoreFeedbackQueryParams
} & PortalContext['fetcherOptions']

export const fetchSaveLabeledIgnoreFeedback = (variables: SaveLabeledIgnoreFeedbackVariables) =>
  portalFetch<
    Schemas.RestResponseBoolean,
    SaveLabeledIgnoreFeedbackError,
    RequestBodies.CVFeedbackRecord,
    {},
    SaveLabeledIgnoreFeedbackQueryParams,
    {}
  >({ url: '/log-classify/cv-feedback-to-classify', method: 'post', ...variables })

export const useSaveLabeledIgnoreFeedback = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.RestResponseBoolean,
      SaveLabeledIgnoreFeedbackError,
      SaveLabeledIgnoreFeedbackVariables
    >,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<
    Schemas.RestResponseBoolean,
    SaveLabeledIgnoreFeedbackError,
    SaveLabeledIgnoreFeedbackVariables
  >(
    (variables: SaveLabeledIgnoreFeedbackVariables) =>
      fetchSaveLabeledIgnoreFeedback({ ...fetcherOptions, ...variables }),
    options
  )
}

export type GetAccountsWithFeedbackQueryParams = {
  accountId?: string
}

export type GetAccountsWithFeedbackError = Fetcher.ErrorWrapper<undefined>

export type GetAccountsWithFeedbackVariables = {
  queryParams?: GetAccountsWithFeedbackQueryParams
} & PortalContext['fetcherOptions']

export const fetchGetAccountsWithFeedback = (variables: GetAccountsWithFeedbackVariables) =>
  portalFetch<
    Schemas.RestResponseMapPairStringStringInteger,
    GetAccountsWithFeedbackError,
    undefined,
    {},
    GetAccountsWithFeedbackQueryParams,
    {}
  >({ url: '/log-classify/accounts-with-feedback', method: 'get', ...variables })

export const useGetAccountsWithFeedback = (
  variables: GetAccountsWithFeedbackVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponseMapPairStringStringInteger,
      GetAccountsWithFeedbackError,
      Schemas.RestResponseMapPairStringStringInteger
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponseMapPairStringStringInteger,
    GetAccountsWithFeedbackError,
    Schemas.RestResponseMapPairStringStringInteger
  >(
    queryKeyFn({ path: '/log-classify/accounts-with-feedback', operationId: 'getAccountsWithFeedback', variables }),
    () => fetchGetAccountsWithFeedback({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type GetL2RecordsToClassifyQueryParams = {
  accountId?: string
  serviceId?: string
  envId?: string
}

export type GetL2RecordsToClassifyError = Fetcher.ErrorWrapper<undefined>

export type GetL2RecordsToClassifyVariables = {
  queryParams?: GetL2RecordsToClassifyQueryParams
} & PortalContext['fetcherOptions']

export const fetchGetL2RecordsToClassify = (variables: GetL2RecordsToClassifyVariables) =>
  portalFetch<
    Schemas.RestResponseListLogDataRecord,
    GetL2RecordsToClassifyError,
    undefined,
    {},
    GetL2RecordsToClassifyQueryParams,
    {}
  >({ url: '/log-classify/l2-records-to-label', method: 'get', ...variables })

export const useGetL2RecordsToClassify = (
  variables: GetL2RecordsToClassifyVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponseListLogDataRecord,
      GetL2RecordsToClassifyError,
      Schemas.RestResponseListLogDataRecord
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponseListLogDataRecord,
    GetL2RecordsToClassifyError,
    Schemas.RestResponseListLogDataRecord
  >(
    queryKeyFn({ path: '/log-classify/l2-records-to-label', operationId: 'getL2RecordsToClassify', variables }),
    () => fetchGetL2RecordsToClassify({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type GetSampleLabelsForIgnoreFeedbackQueryParams = {
  accountId?: string
  serviceId?: string
  envId?: string
}

export type GetSampleLabelsForIgnoreFeedbackError = Fetcher.ErrorWrapper<undefined>

export type GetSampleLabelsForIgnoreFeedbackVariables = {
  queryParams?: GetSampleLabelsForIgnoreFeedbackQueryParams
} & PortalContext['fetcherOptions']

export const fetchGetSampleLabelsForIgnoreFeedback = (variables: GetSampleLabelsForIgnoreFeedbackVariables) =>
  portalFetch<
    Schemas.RestResponseMapStringListCVFeedbackRecord,
    GetSampleLabelsForIgnoreFeedbackError,
    undefined,
    {},
    GetSampleLabelsForIgnoreFeedbackQueryParams,
    {}
  >({ url: '/log-classify/labels-for-cv-feedback', method: 'get', ...variables })

export const useGetSampleLabelsForIgnoreFeedback = (
  variables: GetSampleLabelsForIgnoreFeedbackVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponseMapStringListCVFeedbackRecord,
      GetSampleLabelsForIgnoreFeedbackError,
      Schemas.RestResponseMapStringListCVFeedbackRecord
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponseMapStringListCVFeedbackRecord,
    GetSampleLabelsForIgnoreFeedbackError,
    Schemas.RestResponseMapStringListCVFeedbackRecord
  >(
    queryKeyFn({
      path: '/log-classify/labels-for-cv-feedback',
      operationId: 'getSampleLabelsForIgnoreFeedback',
      variables
    }),
    () => fetchGetSampleLabelsForIgnoreFeedback({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type GetGlobalFeedbacksToClassifyQueryParams = {
  accountId?: string
}

export type GetGlobalFeedbacksToClassifyError = Fetcher.ErrorWrapper<undefined>

export type GetGlobalFeedbacksToClassifyVariables = {
  queryParams?: GetGlobalFeedbacksToClassifyQueryParams
} & PortalContext['fetcherOptions']

export const fetchGetGlobalFeedbacksToClassify = (variables: GetGlobalFeedbacksToClassifyVariables) =>
  portalFetch<
    Schemas.RestResponseListCVFeedbackRecord,
    GetGlobalFeedbacksToClassifyError,
    undefined,
    {},
    GetGlobalFeedbacksToClassifyQueryParams,
    {}
  >({ url: '/log-classify/global-feedbacks-to-classify', method: 'get', ...variables })

export const useGetGlobalFeedbacksToClassify = (
  variables: GetGlobalFeedbacksToClassifyVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponseListCVFeedbackRecord,
      GetGlobalFeedbacksToClassifyError,
      Schemas.RestResponseListCVFeedbackRecord
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponseListCVFeedbackRecord,
    GetGlobalFeedbacksToClassifyError,
    Schemas.RestResponseListCVFeedbackRecord
  >(
    queryKeyFn({
      path: '/log-classify/global-feedbacks-to-classify',
      operationId: 'getGlobalFeedbacksToClassify',
      variables
    }),
    () => fetchGetGlobalFeedbacksToClassify({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type GetGlobalSampleLabelsForCvFeedbackQueryParams = {
  accountId?: string
}

export type GetGlobalSampleLabelsForCvFeedbackError = Fetcher.ErrorWrapper<undefined>

export type GetGlobalSampleLabelsForCvFeedbackVariables = {
  queryParams?: GetGlobalSampleLabelsForCvFeedbackQueryParams
} & PortalContext['fetcherOptions']

export const fetchGetGlobalSampleLabelsForCvFeedback = (variables: GetGlobalSampleLabelsForCvFeedbackVariables) =>
  portalFetch<
    Schemas.RestResponseMapStringListCVFeedbackRecord,
    GetGlobalSampleLabelsForCvFeedbackError,
    undefined,
    {},
    GetGlobalSampleLabelsForCvFeedbackQueryParams,
    {}
  >({ url: '/log-classify/global-labels-for-cv-feedback', method: 'get', ...variables })

export const useGetGlobalSampleLabelsForCvFeedback = (
  variables: GetGlobalSampleLabelsForCvFeedbackVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponseMapStringListCVFeedbackRecord,
      GetGlobalSampleLabelsForCvFeedbackError,
      Schemas.RestResponseMapStringListCVFeedbackRecord
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponseMapStringListCVFeedbackRecord,
    GetGlobalSampleLabelsForCvFeedbackError,
    Schemas.RestResponseMapStringListCVFeedbackRecord
  >(
    queryKeyFn({
      path: '/log-classify/global-labels-for-cv-feedback',
      operationId: 'getGlobalSampleLabelsForCvFeedback',
      variables
    }),
    () => fetchGetGlobalSampleLabelsForCvFeedback({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type SaveLabeledIgnoreFeedbackListQueryParams = {
  accountId?: string
}

export type SaveLabeledIgnoreFeedbackListError = Fetcher.ErrorWrapper<undefined>

export type SaveLabeledIgnoreFeedbackListRequestBody = {
  [key: string]: Schemas.CVFeedbackRecord[]
}

export type SaveLabeledIgnoreFeedbackListVariables = {
  body?: SaveLabeledIgnoreFeedbackListRequestBody
  queryParams?: SaveLabeledIgnoreFeedbackListQueryParams
} & PortalContext['fetcherOptions']

export const fetchSaveLabeledIgnoreFeedbackList = (variables: SaveLabeledIgnoreFeedbackListVariables) =>
  portalFetch<
    Schemas.RestResponseBoolean,
    SaveLabeledIgnoreFeedbackListError,
    SaveLabeledIgnoreFeedbackListRequestBody,
    {},
    SaveLabeledIgnoreFeedbackListQueryParams,
    {}
  >({ url: '/log-classify/save-classify-label-list', method: 'post', ...variables })

export const useSaveLabeledIgnoreFeedbackList = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.RestResponseBoolean,
      SaveLabeledIgnoreFeedbackListError,
      SaveLabeledIgnoreFeedbackListVariables
    >,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<
    Schemas.RestResponseBoolean,
    SaveLabeledIgnoreFeedbackListError,
    SaveLabeledIgnoreFeedbackListVariables
  >(
    (variables: SaveLabeledIgnoreFeedbackListVariables) =>
      fetchSaveLabeledIgnoreFeedbackList({ ...fetcherOptions, ...variables }),
    options
  )
}

export type GetServicesWithFeedbackQueryParams = {
  accountId?: string
}

export type GetServicesWithFeedbackError = Fetcher.ErrorWrapper<undefined>

export type GetServicesWithFeedbackVariables = {
  queryParams?: GetServicesWithFeedbackQueryParams
} & PortalContext['fetcherOptions']

export const fetchGetServicesWithFeedback = (variables: GetServicesWithFeedbackVariables) =>
  portalFetch<
    Schemas.RestResponseMapPairStringStringInteger,
    GetServicesWithFeedbackError,
    undefined,
    {},
    GetServicesWithFeedbackQueryParams,
    {}
  >({ url: '/log-classify/services-with-feedback', method: 'get', ...variables })

export const useGetServicesWithFeedback = (
  variables: GetServicesWithFeedbackVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponseMapPairStringStringInteger,
      GetServicesWithFeedbackError,
      Schemas.RestResponseMapPairStringStringInteger
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponseMapPairStringStringInteger,
    GetServicesWithFeedbackError,
    Schemas.RestResponseMapPairStringStringInteger
  >(
    queryKeyFn({ path: '/log-classify/services-with-feedback', operationId: 'getServicesWithFeedback', variables }),
    () => fetchGetServicesWithFeedback({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type GetSampleFeedbackL2QueryParams = {
  accountId?: string
  serviceId?: string
  envId?: string
}

export type GetSampleFeedbackL2Error = Fetcher.ErrorWrapper<undefined>

export type GetSampleFeedbackL2Variables = {
  queryParams?: GetSampleFeedbackL2QueryParams
} & PortalContext['fetcherOptions']

export const fetchGetSampleFeedbackL2 = (variables: GetSampleFeedbackL2Variables) =>
  portalFetch<
    Schemas.RestResponseMapStringListString,
    GetSampleFeedbackL2Error,
    undefined,
    {},
    GetSampleFeedbackL2QueryParams,
    {}
  >({ url: '/log-classify/sample-feedback-l2', method: 'get', ...variables })

export const useGetSampleFeedbackL2 = (
  variables: GetSampleFeedbackL2Variables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponseMapStringListString,
      GetSampleFeedbackL2Error,
      Schemas.RestResponseMapStringListString
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponseMapStringListString,
    GetSampleFeedbackL2Error,
    Schemas.RestResponseMapStringListString
  >(
    queryKeyFn({ path: '/log-classify/sample-feedback-l2', operationId: 'getSampleFeedbackL2', variables }),
    () => fetchGetSampleFeedbackL2({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type SaveLabeledL2FeedbackQueryParams = {
  accountId?: string
  serviceId?: string
  envId?: string
}

export type SaveLabeledL2FeedbackError = Fetcher.ErrorWrapper<undefined>

export type SaveLabeledL2FeedbackRequestBody = Schemas.LabeledLogRecord[]

export type SaveLabeledL2FeedbackVariables = {
  body?: SaveLabeledL2FeedbackRequestBody
  queryParams?: SaveLabeledL2FeedbackQueryParams
} & PortalContext['fetcherOptions']

export const fetchSaveLabeledL2Feedback = (variables: SaveLabeledL2FeedbackVariables) =>
  portalFetch<
    Schemas.RestResponseBoolean,
    SaveLabeledL2FeedbackError,
    SaveLabeledL2FeedbackRequestBody,
    {},
    SaveLabeledL2FeedbackQueryParams,
    {}
  >({ url: '/log-classify/save-labeled-feedback-l2', method: 'post', ...variables })

export const useSaveLabeledL2Feedback = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.RestResponseBoolean,
      SaveLabeledL2FeedbackError,
      SaveLabeledL2FeedbackVariables
    >,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<
    Schemas.RestResponseBoolean,
    SaveLabeledL2FeedbackError,
    SaveLabeledL2FeedbackVariables
  >(
    (variables: SaveLabeledL2FeedbackVariables) => fetchSaveLabeledL2Feedback({ ...fetcherOptions, ...variables }),
    options
  )
}

export type GetLabelsQueryParams = {
  accountId?: string
}

export type GetLabelsError = Fetcher.ErrorWrapper<undefined>

export type GetLabelsVariables = {
  queryParams?: GetLabelsQueryParams
} & PortalContext['fetcherOptions']

export const fetchGetLabels = (variables: GetLabelsVariables) =>
  portalFetch<Schemas.RestResponseListLogLabel, GetLabelsError, undefined, {}, GetLabelsQueryParams, {}>({
    url: '/log-classify/list-labels-to-classify',
    method: 'get',
    ...variables
  })

export const useGetLabels = (
  variables: GetLabelsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.RestResponseListLogLabel, GetLabelsError, Schemas.RestResponseListLogLabel>,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<Schemas.RestResponseListLogLabel, GetLabelsError, Schemas.RestResponseListLogLabel>(
    queryKeyFn({ path: '/log-classify/list-labels-to-classify', operationId: 'getLabels', variables }),
    () => fetchGetLabels({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type GetLogAnalysisSummary1QueryParams = {
  accountId?: string
  applicationId?: string
  stateExecutionId?: string
  stateType?:
    | 'SUB_WORKFLOW'
    | 'REPEAT'
    | 'FORK'
    | 'WAIT'
    | 'PAUSE'
    | 'BARRIER'
    | 'RESOURCE_CONSTRAINT'
    | 'SHELL_SCRIPT'
    | 'HTTP'
    | 'TEMPLATIZED_SECRET_MANAGER'
    | 'EMAIL'
    | 'APP_DYNAMICS'
    | 'NEW_RELIC'
    | 'NEW_RELIC_DEPLOYMENT_MARKER'
    | 'DYNA_TRACE'
    | 'PROMETHEUS'
    | 'SPLUNKV2'
    | 'ELK'
    | 'LOGZ'
    | 'SUMO'
    | 'DATA_DOG'
    | 'DATA_DOG_LOG'
    | 'CVNG'
    | 'CLOUD_WATCH'
    | 'AWS_LAMBDA_VERIFICATION'
    | 'APM_VERIFICATION'
    | 'LOG_VERIFICATION'
    | 'BUG_SNAG'
    | 'STACK_DRIVER'
    | 'STACK_DRIVER_LOG'
    | 'INSTANA'
    | 'SCALYR'
    | 'ENV_STATE'
    | 'ENV_LOOP_STATE'
    | 'ENV_RESUME_STATE'
    | 'ENV_LOOP_RESUME_STATE'
    | 'COMMAND'
    | 'APPROVAL'
    | 'APPROVAL_RESUME'
    | 'ELASTIC_LOAD_BALANCER'
    | 'JENKINS'
    | 'GCB'
    | 'BAMBOO'
    | 'ARTIFACT_COLLECTION'
    | 'ARTIFACT_CHECK'
    | 'AZURE_NODE_SELECT'
    | 'AZURE_VMSS_SETUP'
    | 'AZURE_VMSS_DEPLOY'
    | 'AZURE_VMSS_ROLLBACK'
    | 'AZURE_VMSS_SWITCH_ROUTES'
    | 'AZURE_VMSS_SWITCH_ROUTES_ROLLBACK'
    | 'AZURE_WEBAPP_SLOT_SETUP'
    | 'AZURE_WEBAPP_SLOT_SWAP'
    | 'AZURE_WEBAPP_SLOT_SHIFT_TRAFFIC'
    | 'AZURE_WEBAPP_SLOT_ROLLBACK'
    | 'AWS_NODE_SELECT'
    | 'DC_NODE_SELECT'
    | 'ROLLING_NODE_SELECT'
    | 'PHASE'
    | 'PHASE_STEP'
    | 'STAGING_ORIGINAL_EXECUTION'
    | 'AWS_CODEDEPLOY_STATE'
    | 'AWS_CODEDEPLOY_ROLLBACK'
    | 'AWS_LAMBDA_STATE'
    | 'AWS_LAMBDA_ROLLBACK'
    | 'AWS_AMI_SERVICE_SETUP'
    | 'ASG_AMI_SERVICE_ALB_SHIFT_SETUP'
    | 'AWS_AMI_SERVICE_DEPLOY'
    | 'ASG_AMI_SERVICE_ALB_SHIFT_DEPLOY'
    | 'AWS_AMI_SWITCH_ROUTES'
    | 'ASG_AMI_ALB_SHIFT_SWITCH_ROUTES'
    | 'AWS_AMI_ROLLBACK_SWITCH_ROUTES'
    | 'ASG_AMI_ROLLBACK_ALB_SHIFT_SWITCH_ROUTES'
    | 'AWS_AMI_SERVICE_ROLLBACK'
    | 'ECS_SERVICE_SETUP'
    | 'SPOTINST_SETUP'
    | 'SPOTINST_ALB_SHIFT_SETUP'
    | 'SPOTINST_DEPLOY'
    | 'SPOTINST_ALB_SHIFT_DEPLOY'
    | 'SPOTINST_LISTENER_UPDATE'
    | 'SPOTINST_LISTENER_ALB_SHIFT'
    | 'SPOTINST_ROLLBACK'
    | 'SPOTINST_LISTENER_UPDATE_ROLLBACK'
    | 'SPOTINST_LISTENER_ALB_SHIFT_ROLLBACK'
    | 'ECS_SERVICE_SETUP_ROLLBACK'
    | 'ECS_DAEMON_SERVICE_SETUP'
    | 'ECS_BG_SERVICE_SETUP'
    | 'ECS_BG_SERVICE_SETUP_ROUTE53'
    | 'ECS_SERVICE_DEPLOY'
    | 'ECS_SERVICE_ROLLBACK'
    | 'ECS_LISTENER_UPDATE'
    | 'ECS_LISTENER_UPDATE_ROLLBACK'
    | 'ECS_ROUTE53_DNS_WEIGHT_UPDATE'
    | 'ECS_ROUTE53_DNS_WEIGHT_UPDATE_ROLLBACK'
    | 'KUBERNETES_SETUP'
    | 'KUBERNETES_SETUP_ROLLBACK'
    | 'KUBERNETES_DEPLOY'
    | 'KUBERNETES_DEPLOY_ROLLBACK'
    | 'KUBERNETES_STEADY_STATE_CHECK'
    | 'ECS_STEADY_STATE_CHECK'
    | 'ECS_RUN_TASK'
    | 'GCP_CLUSTER_SETUP'
    | 'HELM_DEPLOY'
    | 'HELM_ROLLBACK'
    | 'PCF_SETUP'
    | 'PCF_RESIZE'
    | 'PCF_ROLLBACK'
    | 'PCF_MAP_ROUTE'
    | 'PCF_UNMAP_ROUTE'
    | 'PCF_BG_MAP_ROUTE'
    | 'PCF_PLUGIN'
    | 'TERRAFORM_PROVISION'
    | 'TERRAFORM_APPLY'
    | 'TERRAGRUNT_PROVISION'
    | 'TERRAGRUNT_DESTROY'
    | 'TERRAGRUNT_ROLLBACK'
    | 'ARM_CREATE_RESOURCE'
    | 'ARM_ROLLBACK'
    | 'SHELL_SCRIPT_PROVISION'
    | 'TERRAFORM_DESTROY'
    | 'CLOUD_FORMATION_CREATE_STACK'
    | 'CLOUD_FORMATION_DELETE_STACK'
    | 'KUBERNETES_SWAP_SERVICE_SELECTORS'
    | 'CLOUD_FORMATION_ROLLBACK_STACK'
    | 'TERRAFORM_ROLLBACK'
    | 'K8S_DEPLOYMENT_ROLLING'
    | 'K8S_SCALE'
    | 'K8S_DEPLOYMENT_ROLLING_ROLLBACK'
    | 'K8S_BLUE_GREEN_DEPLOY'
    | 'K8S_CANARY_DEPLOY'
    | 'K8S_DELETE'
    | 'RANCHER_RESOLVE'
    | 'RANCHER_K8S_DEPLOYMENT_ROLLING'
    | 'RANCHER_K8S_CANARY_DEPLOY'
    | 'RANCHER_K8S_BLUE_GREEN_DEPLOY'
    | 'RANCHER_KUBERNETES_SWAP_SERVICE_SELECTORS'
    | 'RANCHER_K8S_DELETE'
    | 'RANCHER_K8S_DEPLOYMENT_ROLLING_ROLLBACK'
    | 'JIRA_CREATE_UPDATE'
    | 'SERVICENOW_CREATE_UPDATE'
    | 'K8S_TRAFFIC_SPLIT'
    | 'K8S_APPLY'
    | 'CUSTOM_DEPLOYMENT_FETCH_INSTANCES'
}

export type GetLogAnalysisSummary1Error = Fetcher.ErrorWrapper<undefined>

export type GetLogAnalysisSummary1Variables = {
  queryParams?: GetLogAnalysisSummary1QueryParams
} & PortalContext['fetcherOptions']

export const fetchGetLogAnalysisSummary1 = (variables: GetLogAnalysisSummary1Variables) =>
  portalFetch<
    Schemas.RestResponseLogMLAnalysisSummary,
    GetLogAnalysisSummary1Error,
    undefined,
    {},
    GetLogAnalysisSummary1QueryParams,
    {}
  >({ url: '/logml/get-analysis-summary', method: 'get', ...variables })

export const useGetLogAnalysisSummary1 = (
  variables: GetLogAnalysisSummary1Variables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponseLogMLAnalysisSummary,
      GetLogAnalysisSummary1Error,
      Schemas.RestResponseLogMLAnalysisSummary
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponseLogMLAnalysisSummary,
    GetLogAnalysisSummary1Error,
    Schemas.RestResponseLogMLAnalysisSummary
  >(
    queryKeyFn({ path: '/logml/get-analysis-summary', operationId: 'getLogAnalysisSummary1', variables }),
    () => fetchGetLogAnalysisSummary1({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type GetFeedbackQueryParams = {
  accountId?: string
  appId?: string
  serviceId?: string
  workflowId?: string
  workflowExecutionId?: string
}

export type GetFeedbackError = Fetcher.ErrorWrapper<undefined>

export type GetFeedbackVariables = {
  queryParams?: GetFeedbackQueryParams
} & PortalContext['fetcherOptions']

export const fetchGetFeedback = (variables: GetFeedbackVariables) =>
  portalFetch<Schemas.RestResponseListLogMLFeedbackRecord, GetFeedbackError, undefined, {}, GetFeedbackQueryParams, {}>(
    { url: '/logml/user-feedback', method: 'get', ...variables }
  )

export const useGetFeedback = (
  variables: GetFeedbackVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponseListLogMLFeedbackRecord,
      GetFeedbackError,
      Schemas.RestResponseListLogMLFeedbackRecord
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponseListLogMLFeedbackRecord,
    GetFeedbackError,
    Schemas.RestResponseListLogMLFeedbackRecord
  >(
    queryKeyFn({ path: '/logml/user-feedback', operationId: 'getFeedback', variables }),
    () => fetchGetFeedback({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type CreateUserFeedbackQueryParams = {
  accountId?: string
  stateType?:
    | 'SUB_WORKFLOW'
    | 'REPEAT'
    | 'FORK'
    | 'WAIT'
    | 'PAUSE'
    | 'BARRIER'
    | 'RESOURCE_CONSTRAINT'
    | 'SHELL_SCRIPT'
    | 'HTTP'
    | 'TEMPLATIZED_SECRET_MANAGER'
    | 'EMAIL'
    | 'APP_DYNAMICS'
    | 'NEW_RELIC'
    | 'NEW_RELIC_DEPLOYMENT_MARKER'
    | 'DYNA_TRACE'
    | 'PROMETHEUS'
    | 'SPLUNKV2'
    | 'ELK'
    | 'LOGZ'
    | 'SUMO'
    | 'DATA_DOG'
    | 'DATA_DOG_LOG'
    | 'CVNG'
    | 'CLOUD_WATCH'
    | 'AWS_LAMBDA_VERIFICATION'
    | 'APM_VERIFICATION'
    | 'LOG_VERIFICATION'
    | 'BUG_SNAG'
    | 'STACK_DRIVER'
    | 'STACK_DRIVER_LOG'
    | 'INSTANA'
    | 'SCALYR'
    | 'ENV_STATE'
    | 'ENV_LOOP_STATE'
    | 'ENV_RESUME_STATE'
    | 'ENV_LOOP_RESUME_STATE'
    | 'COMMAND'
    | 'APPROVAL'
    | 'APPROVAL_RESUME'
    | 'ELASTIC_LOAD_BALANCER'
    | 'JENKINS'
    | 'GCB'
    | 'BAMBOO'
    | 'ARTIFACT_COLLECTION'
    | 'ARTIFACT_CHECK'
    | 'AZURE_NODE_SELECT'
    | 'AZURE_VMSS_SETUP'
    | 'AZURE_VMSS_DEPLOY'
    | 'AZURE_VMSS_ROLLBACK'
    | 'AZURE_VMSS_SWITCH_ROUTES'
    | 'AZURE_VMSS_SWITCH_ROUTES_ROLLBACK'
    | 'AZURE_WEBAPP_SLOT_SETUP'
    | 'AZURE_WEBAPP_SLOT_SWAP'
    | 'AZURE_WEBAPP_SLOT_SHIFT_TRAFFIC'
    | 'AZURE_WEBAPP_SLOT_ROLLBACK'
    | 'AWS_NODE_SELECT'
    | 'DC_NODE_SELECT'
    | 'ROLLING_NODE_SELECT'
    | 'PHASE'
    | 'PHASE_STEP'
    | 'STAGING_ORIGINAL_EXECUTION'
    | 'AWS_CODEDEPLOY_STATE'
    | 'AWS_CODEDEPLOY_ROLLBACK'
    | 'AWS_LAMBDA_STATE'
    | 'AWS_LAMBDA_ROLLBACK'
    | 'AWS_AMI_SERVICE_SETUP'
    | 'ASG_AMI_SERVICE_ALB_SHIFT_SETUP'
    | 'AWS_AMI_SERVICE_DEPLOY'
    | 'ASG_AMI_SERVICE_ALB_SHIFT_DEPLOY'
    | 'AWS_AMI_SWITCH_ROUTES'
    | 'ASG_AMI_ALB_SHIFT_SWITCH_ROUTES'
    | 'AWS_AMI_ROLLBACK_SWITCH_ROUTES'
    | 'ASG_AMI_ROLLBACK_ALB_SHIFT_SWITCH_ROUTES'
    | 'AWS_AMI_SERVICE_ROLLBACK'
    | 'ECS_SERVICE_SETUP'
    | 'SPOTINST_SETUP'
    | 'SPOTINST_ALB_SHIFT_SETUP'
    | 'SPOTINST_DEPLOY'
    | 'SPOTINST_ALB_SHIFT_DEPLOY'
    | 'SPOTINST_LISTENER_UPDATE'
    | 'SPOTINST_LISTENER_ALB_SHIFT'
    | 'SPOTINST_ROLLBACK'
    | 'SPOTINST_LISTENER_UPDATE_ROLLBACK'
    | 'SPOTINST_LISTENER_ALB_SHIFT_ROLLBACK'
    | 'ECS_SERVICE_SETUP_ROLLBACK'
    | 'ECS_DAEMON_SERVICE_SETUP'
    | 'ECS_BG_SERVICE_SETUP'
    | 'ECS_BG_SERVICE_SETUP_ROUTE53'
    | 'ECS_SERVICE_DEPLOY'
    | 'ECS_SERVICE_ROLLBACK'
    | 'ECS_LISTENER_UPDATE'
    | 'ECS_LISTENER_UPDATE_ROLLBACK'
    | 'ECS_ROUTE53_DNS_WEIGHT_UPDATE'
    | 'ECS_ROUTE53_DNS_WEIGHT_UPDATE_ROLLBACK'
    | 'KUBERNETES_SETUP'
    | 'KUBERNETES_SETUP_ROLLBACK'
    | 'KUBERNETES_DEPLOY'
    | 'KUBERNETES_DEPLOY_ROLLBACK'
    | 'KUBERNETES_STEADY_STATE_CHECK'
    | 'ECS_STEADY_STATE_CHECK'
    | 'ECS_RUN_TASK'
    | 'GCP_CLUSTER_SETUP'
    | 'HELM_DEPLOY'
    | 'HELM_ROLLBACK'
    | 'PCF_SETUP'
    | 'PCF_RESIZE'
    | 'PCF_ROLLBACK'
    | 'PCF_MAP_ROUTE'
    | 'PCF_UNMAP_ROUTE'
    | 'PCF_BG_MAP_ROUTE'
    | 'PCF_PLUGIN'
    | 'TERRAFORM_PROVISION'
    | 'TERRAFORM_APPLY'
    | 'TERRAGRUNT_PROVISION'
    | 'TERRAGRUNT_DESTROY'
    | 'TERRAGRUNT_ROLLBACK'
    | 'ARM_CREATE_RESOURCE'
    | 'ARM_ROLLBACK'
    | 'SHELL_SCRIPT_PROVISION'
    | 'TERRAFORM_DESTROY'
    | 'CLOUD_FORMATION_CREATE_STACK'
    | 'CLOUD_FORMATION_DELETE_STACK'
    | 'KUBERNETES_SWAP_SERVICE_SELECTORS'
    | 'CLOUD_FORMATION_ROLLBACK_STACK'
    | 'TERRAFORM_ROLLBACK'
    | 'K8S_DEPLOYMENT_ROLLING'
    | 'K8S_SCALE'
    | 'K8S_DEPLOYMENT_ROLLING_ROLLBACK'
    | 'K8S_BLUE_GREEN_DEPLOY'
    | 'K8S_CANARY_DEPLOY'
    | 'K8S_DELETE'
    | 'RANCHER_RESOLVE'
    | 'RANCHER_K8S_DEPLOYMENT_ROLLING'
    | 'RANCHER_K8S_CANARY_DEPLOY'
    | 'RANCHER_K8S_BLUE_GREEN_DEPLOY'
    | 'RANCHER_KUBERNETES_SWAP_SERVICE_SELECTORS'
    | 'RANCHER_K8S_DELETE'
    | 'RANCHER_K8S_DEPLOYMENT_ROLLING_ROLLBACK'
    | 'JIRA_CREATE_UPDATE'
    | 'SERVICENOW_CREATE_UPDATE'
    | 'K8S_TRAFFIC_SPLIT'
    | 'K8S_APPLY'
    | 'CUSTOM_DEPLOYMENT_FETCH_INSTANCES'
}

export type CreateUserFeedbackError = Fetcher.ErrorWrapper<undefined>

export type CreateUserFeedbackVariables = {
  body?: RequestBodies.LogMLFeedback
  queryParams?: CreateUserFeedbackQueryParams
} & PortalContext['fetcherOptions']

export const fetchCreateUserFeedback = (variables: CreateUserFeedbackVariables) =>
  portalFetch<
    Schemas.RestResponseBoolean,
    CreateUserFeedbackError,
    RequestBodies.LogMLFeedback,
    {},
    CreateUserFeedbackQueryParams,
    {}
  >({ url: '/logml/user-feedback', method: 'post', ...variables })

export const useCreateUserFeedback = (
  options?: Omit<
    reactQuery.UseMutationOptions<Schemas.RestResponseBoolean, CreateUserFeedbackError, CreateUserFeedbackVariables>,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<Schemas.RestResponseBoolean, CreateUserFeedbackError, CreateUserFeedbackVariables>(
    (variables: CreateUserFeedbackVariables) => fetchCreateUserFeedback({ ...fetcherOptions, ...variables }),
    options
  )
}

export type GetLastExecutionNodesQueryParams = {
  accountId?: string
  appId?: string
  workflowId?: string
}

export type GetLastExecutionNodesError = Fetcher.ErrorWrapper<undefined>

export type GetLastExecutionNodesVariables = {
  queryParams?: GetLastExecutionNodesQueryParams
} & PortalContext['fetcherOptions']

export const fetchGetLastExecutionNodes = (variables: GetLastExecutionNodesVariables) =>
  portalFetch<
    Schemas.RestResponseMapStringMapStringInstanceDetails,
    GetLastExecutionNodesError,
    undefined,
    {},
    GetLastExecutionNodesQueryParams,
    {}
  >({ url: '/logml/last-execution-nodes', method: 'get', ...variables })

export const useGetLastExecutionNodes = (
  variables: GetLastExecutionNodesVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponseMapStringMapStringInstanceDetails,
      GetLastExecutionNodesError,
      Schemas.RestResponseMapStringMapStringInstanceDetails
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponseMapStringMapStringInstanceDetails,
    GetLastExecutionNodesError,
    Schemas.RestResponseMapStringMapStringInstanceDetails
  >(
    queryKeyFn({ path: '/logml/last-execution-nodes', operationId: 'getLastExecutionNodes', variables }),
    () => fetchGetLastExecutionNodes({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type GetFeedbacksQueryParams = {
  accountId?: string
  cvConfigId?: string
  stateExecutionId?: string
}

export type GetFeedbacksError = Fetcher.ErrorWrapper<undefined>

export type GetFeedbacksVariables = {
  queryParams?: GetFeedbacksQueryParams
} & PortalContext['fetcherOptions']

export const fetchGetFeedbacks = (variables: GetFeedbacksVariables) =>
  portalFetch<Schemas.RestResponseListCVFeedbackRecord, GetFeedbacksError, undefined, {}, GetFeedbacksQueryParams, {}>({
    url: '/logml/feedbacks',
    method: 'get',
    ...variables
  })

export const useGetFeedbacks = (
  variables: GetFeedbacksVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponseListCVFeedbackRecord,
      GetFeedbacksError,
      Schemas.RestResponseListCVFeedbackRecord
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponseListCVFeedbackRecord,
    GetFeedbacksError,
    Schemas.RestResponseListCVFeedbackRecord
  >(
    queryKeyFn({ path: '/logml/feedbacks', operationId: 'getFeedbacks', variables }),
    () => fetchGetFeedbacks({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type AddToBaselineQueryParams = {
  accountId?: string
  cvConfigId?: string
  stateExecutionId?: string
}

export type AddToBaselineError = Fetcher.ErrorWrapper<undefined>

export type AddToBaselineVariables = {
  body?: RequestBodies.CVFeedbackRecord
  queryParams?: AddToBaselineQueryParams
} & PortalContext['fetcherOptions']

export const fetchAddToBaseline = (variables: AddToBaselineVariables) =>
  portalFetch<
    Schemas.RestResponseBoolean,
    AddToBaselineError,
    RequestBodies.CVFeedbackRecord,
    {},
    AddToBaselineQueryParams,
    {}
  >({ url: '/logml/add-to-baseline', method: 'post', ...variables })

export const useAddToBaseline = (
  options?: Omit<
    reactQuery.UseMutationOptions<Schemas.RestResponseBoolean, AddToBaselineError, AddToBaselineVariables>,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<Schemas.RestResponseBoolean, AddToBaselineError, AddToBaselineVariables>(
    (variables: AddToBaselineVariables) => fetchAddToBaseline({ ...fetcherOptions, ...variables }),
    options
  )
}

export type RemoveFromBaselineQueryParams = {
  accountId?: string
  cvConfigId?: string
  stateExecutionId?: string
}

export type RemoveFromBaselineError = Fetcher.ErrorWrapper<undefined>

export type RemoveFromBaselineVariables = {
  body?: RequestBodies.CVFeedbackRecord
  queryParams?: RemoveFromBaselineQueryParams
} & PortalContext['fetcherOptions']

export const fetchRemoveFromBaseline = (variables: RemoveFromBaselineVariables) =>
  portalFetch<
    Schemas.RestResponseBoolean,
    RemoveFromBaselineError,
    RequestBodies.CVFeedbackRecord,
    {},
    RemoveFromBaselineQueryParams,
    {}
  >({ url: '/logml/remove-from-baseline', method: 'post', ...variables })

export const useRemoveFromBaseline = (
  options?: Omit<
    reactQuery.UseMutationOptions<Schemas.RestResponseBoolean, RemoveFromBaselineError, RemoveFromBaselineVariables>,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<Schemas.RestResponseBoolean, RemoveFromBaselineError, RemoveFromBaselineVariables>(
    (variables: RemoveFromBaselineVariables) => fetchRemoveFromBaseline({ ...fetcherOptions, ...variables }),
    options
  )
}

export type UpdateFeedbackPriorityQueryParams = {
  accountId?: string
  cvConfigId?: string
  stateExecutionId?: string
}

export type UpdateFeedbackPriorityError = Fetcher.ErrorWrapper<undefined>

export type UpdateFeedbackPriorityVariables = {
  body?: RequestBodies.CVFeedbackRecord
  queryParams?: UpdateFeedbackPriorityQueryParams
} & PortalContext['fetcherOptions']

export const fetchUpdateFeedbackPriority = (variables: UpdateFeedbackPriorityVariables) =>
  portalFetch<
    Schemas.RestResponseBoolean,
    UpdateFeedbackPriorityError,
    RequestBodies.CVFeedbackRecord,
    {},
    UpdateFeedbackPriorityQueryParams,
    {}
  >({ url: '/logml/update-priority', method: 'post', ...variables })

export const useUpdateFeedbackPriority = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.RestResponseBoolean,
      UpdateFeedbackPriorityError,
      UpdateFeedbackPriorityVariables
    >,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<
    Schemas.RestResponseBoolean,
    UpdateFeedbackPriorityError,
    UpdateFeedbackPriorityVariables
  >(
    (variables: UpdateFeedbackPriorityVariables) => fetchUpdateFeedbackPriority({ ...fetcherOptions, ...variables }),
    options
  )
}

export type DeleteUserFeedbackPathParams = {
  feedbackId: string
}

export type DeleteUserFeedbackQueryParams = {
  accountId?: string
}

export type DeleteUserFeedbackError = Fetcher.ErrorWrapper<undefined>

export type DeleteUserFeedbackVariables = {
  pathParams: DeleteUserFeedbackPathParams
  queryParams?: DeleteUserFeedbackQueryParams
} & PortalContext['fetcherOptions']

export const fetchDeleteUserFeedback = (variables: DeleteUserFeedbackVariables) =>
  portalFetch<
    Schemas.RestResponseBoolean,
    DeleteUserFeedbackError,
    undefined,
    {},
    DeleteUserFeedbackQueryParams,
    DeleteUserFeedbackPathParams
  >({ url: '/logml/user-feedback/{feedbackId}', method: 'delete', ...variables })

export const useDeleteUserFeedback = (
  options?: Omit<
    reactQuery.UseMutationOptions<Schemas.RestResponseBoolean, DeleteUserFeedbackError, DeleteUserFeedbackVariables>,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<Schemas.RestResponseBoolean, DeleteUserFeedbackError, DeleteUserFeedbackVariables>(
    (variables: DeleteUserFeedbackVariables) => fetchDeleteUserFeedback({ ...fetcherOptions, ...variables }),
    options
  )
}

export type GetFeedbackForDashboardQueryParams = {
  accountId?: string
  workflowId?: string
}

export type GetFeedbackForDashboardError = Fetcher.ErrorWrapper<undefined>

export type GetFeedbackForDashboardVariables = {
  queryParams?: GetFeedbackForDashboardQueryParams
} & PortalContext['fetcherOptions']

export const fetchGetFeedbackForDashboard = (variables: GetFeedbackForDashboardVariables) =>
  portalFetch<
    Schemas.RestResponseListLogMLFeedbackRecord,
    GetFeedbackForDashboardError,
    undefined,
    {},
    GetFeedbackForDashboardQueryParams,
    {}
  >({ url: '/logml/user-feedback-by-workflow', method: 'get', ...variables })

export const useGetFeedbackForDashboard = (
  variables: GetFeedbackForDashboardVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponseListLogMLFeedbackRecord,
      GetFeedbackForDashboardError,
      Schemas.RestResponseListLogMLFeedbackRecord
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponseListLogMLFeedbackRecord,
    GetFeedbackForDashboardError,
    Schemas.RestResponseListLogMLFeedbackRecord
  >(
    queryKeyFn({ path: '/logml/user-feedback-by-workflow', operationId: 'getFeedbackForDashboard', variables }),
    () => fetchGetFeedbackForDashboard({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type Get24x7FeedbackQueryParams = {
  accountId?: string
  cvConfigId?: string
}

export type Get24x7FeedbackError = Fetcher.ErrorWrapper<undefined>

export type Get24x7FeedbackVariables = {
  queryParams?: Get24x7FeedbackQueryParams
} & PortalContext['fetcherOptions']

export const fetchGet24x7Feedback = (variables: Get24x7FeedbackVariables) =>
  portalFetch<
    Schemas.RestResponseListLogMLFeedbackRecord,
    Get24x7FeedbackError,
    undefined,
    {},
    Get24x7FeedbackQueryParams,
    {}
  >({ url: '/logml/24x7-user-feedback', method: 'get', ...variables })

export const useGet24x7Feedback = (
  variables: Get24x7FeedbackVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponseListLogMLFeedbackRecord,
      Get24x7FeedbackError,
      Schemas.RestResponseListLogMLFeedbackRecord
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponseListLogMLFeedbackRecord,
    Get24x7FeedbackError,
    Schemas.RestResponseListLogMLFeedbackRecord
  >(
    queryKeyFn({ path: '/logml/24x7-user-feedback', operationId: 'get24x7Feedback', variables }),
    () => fetchGet24x7Feedback({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type Create24x7UserFeedbackQueryParams = {
  accountId?: string
  cvConfigId?: string
}

export type Create24x7UserFeedbackError = Fetcher.ErrorWrapper<undefined>

export type Create24x7UserFeedbackVariables = {
  body?: RequestBodies.LogMLFeedback
  queryParams?: Create24x7UserFeedbackQueryParams
} & PortalContext['fetcherOptions']

export const fetchCreate24x7UserFeedback = (variables: Create24x7UserFeedbackVariables) =>
  portalFetch<
    Schemas.RestResponseBoolean,
    Create24x7UserFeedbackError,
    RequestBodies.LogMLFeedback,
    {},
    Create24x7UserFeedbackQueryParams,
    {}
  >({ url: '/logml/24x7-user-feedback', method: 'post', ...variables })

export const useCreate24x7UserFeedback = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.RestResponseBoolean,
      Create24x7UserFeedbackError,
      Create24x7UserFeedbackVariables
    >,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<
    Schemas.RestResponseBoolean,
    Create24x7UserFeedbackError,
    Create24x7UserFeedbackVariables
  >(
    (variables: Create24x7UserFeedbackVariables) => fetchCreate24x7UserFeedback({ ...fetcherOptions, ...variables }),
    options
  )
}

export type GetFeedbacksLEQueryParams = {
  accountId?: string
  cvConfigId?: string
  stateExecutionId?: string
}

export type GetFeedbacksLEError = Fetcher.ErrorWrapper<undefined>

export type GetFeedbacksLEVariables = {
  queryParams?: GetFeedbacksLEQueryParams
} & PortalContext['fetcherOptions']

export const fetchGetFeedbacksLE = (variables: GetFeedbacksLEVariables) =>
  portalFetch<
    Schemas.RestResponseListCVFeedbackRecord,
    GetFeedbacksLEError,
    undefined,
    {},
    GetFeedbacksLEQueryParams,
    {}
  >({ url: '/logml/feedbacks-le', method: 'get', ...variables })

export const useGetFeedbacksLE = (
  variables: GetFeedbacksLEVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponseListCVFeedbackRecord,
      GetFeedbacksLEError,
      Schemas.RestResponseListCVFeedbackRecord
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponseListCVFeedbackRecord,
    GetFeedbacksLEError,
    Schemas.RestResponseListCVFeedbackRecord
  >(
    queryKeyFn({ path: '/logml/feedbacks-le', operationId: 'getFeedbacksLE', variables }),
    () => fetchGetFeedbacksLE({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type GetFeedbacksActionListError = Fetcher.ErrorWrapper<undefined>

export type GetFeedbacksActionListVariables = PortalContext['fetcherOptions']

export const fetchGetFeedbacksActionList = (variables: GetFeedbacksActionListVariables) =>
  portalFetch<
    Schemas.RestResponseMapFeedbackActionListFeedbackAction,
    GetFeedbacksActionListError,
    undefined,
    {},
    {},
    {}
  >({ url: '/logml/feedback-actions', method: 'get', ...variables })

export const useGetFeedbacksActionList = (
  variables: GetFeedbacksActionListVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponseMapFeedbackActionListFeedbackAction,
      GetFeedbacksActionListError,
      Schemas.RestResponseMapFeedbackActionListFeedbackAction
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponseMapFeedbackActionListFeedbackAction,
    GetFeedbacksActionListError,
    Schemas.RestResponseMapFeedbackActionListFeedbackAction
  >(
    queryKeyFn({ path: '/logml/feedback-actions', operationId: 'getFeedbacksActionList', variables }),
    () => fetchGetFeedbacksActionList({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type CreateJiraForAnomalyQueryParams = {
  accountId?: string
  appId?: string
  cvConfigId?: string
  stateExecutionId?: string
}

export type CreateJiraForAnomalyError = Fetcher.ErrorWrapper<undefined>

export type CreateJiraForAnomalyVariables = {
  body?: Schemas.CVCollaborationProviderParameters
  queryParams?: CreateJiraForAnomalyQueryParams
} & PortalContext['fetcherOptions']

export const fetchCreateJiraForAnomaly = (variables: CreateJiraForAnomalyVariables) =>
  portalFetch<
    Schemas.RestResponseString,
    CreateJiraForAnomalyError,
    Schemas.CVCollaborationProviderParameters,
    {},
    CreateJiraForAnomalyQueryParams,
    {}
  >({ url: '/logml/create-cv-jira', method: 'post', ...variables })

export const useCreateJiraForAnomaly = (
  options?: Omit<
    reactQuery.UseMutationOptions<Schemas.RestResponseString, CreateJiraForAnomalyError, CreateJiraForAnomalyVariables>,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<Schemas.RestResponseString, CreateJiraForAnomalyError, CreateJiraForAnomalyVariables>(
    (variables: CreateJiraForAnomalyVariables) => fetchCreateJiraForAnomaly({ ...fetcherOptions, ...variables }),
    options
  )
}

export type GetMetricsWithDataForNode6QueryParams = {
  accountId?: string
  serverConfigId?: string
  stateType?:
    | 'SUB_WORKFLOW'
    | 'REPEAT'
    | 'FORK'
    | 'WAIT'
    | 'PAUSE'
    | 'BARRIER'
    | 'RESOURCE_CONSTRAINT'
    | 'SHELL_SCRIPT'
    | 'HTTP'
    | 'TEMPLATIZED_SECRET_MANAGER'
    | 'EMAIL'
    | 'APP_DYNAMICS'
    | 'NEW_RELIC'
    | 'NEW_RELIC_DEPLOYMENT_MARKER'
    | 'DYNA_TRACE'
    | 'PROMETHEUS'
    | 'SPLUNKV2'
    | 'ELK'
    | 'LOGZ'
    | 'SUMO'
    | 'DATA_DOG'
    | 'DATA_DOG_LOG'
    | 'CVNG'
    | 'CLOUD_WATCH'
    | 'AWS_LAMBDA_VERIFICATION'
    | 'APM_VERIFICATION'
    | 'LOG_VERIFICATION'
    | 'BUG_SNAG'
    | 'STACK_DRIVER'
    | 'STACK_DRIVER_LOG'
    | 'INSTANA'
    | 'SCALYR'
    | 'ENV_STATE'
    | 'ENV_LOOP_STATE'
    | 'ENV_RESUME_STATE'
    | 'ENV_LOOP_RESUME_STATE'
    | 'COMMAND'
    | 'APPROVAL'
    | 'APPROVAL_RESUME'
    | 'ELASTIC_LOAD_BALANCER'
    | 'JENKINS'
    | 'GCB'
    | 'BAMBOO'
    | 'ARTIFACT_COLLECTION'
    | 'ARTIFACT_CHECK'
    | 'AZURE_NODE_SELECT'
    | 'AZURE_VMSS_SETUP'
    | 'AZURE_VMSS_DEPLOY'
    | 'AZURE_VMSS_ROLLBACK'
    | 'AZURE_VMSS_SWITCH_ROUTES'
    | 'AZURE_VMSS_SWITCH_ROUTES_ROLLBACK'
    | 'AZURE_WEBAPP_SLOT_SETUP'
    | 'AZURE_WEBAPP_SLOT_SWAP'
    | 'AZURE_WEBAPP_SLOT_SHIFT_TRAFFIC'
    | 'AZURE_WEBAPP_SLOT_ROLLBACK'
    | 'AWS_NODE_SELECT'
    | 'DC_NODE_SELECT'
    | 'ROLLING_NODE_SELECT'
    | 'PHASE'
    | 'PHASE_STEP'
    | 'STAGING_ORIGINAL_EXECUTION'
    | 'AWS_CODEDEPLOY_STATE'
    | 'AWS_CODEDEPLOY_ROLLBACK'
    | 'AWS_LAMBDA_STATE'
    | 'AWS_LAMBDA_ROLLBACK'
    | 'AWS_AMI_SERVICE_SETUP'
    | 'ASG_AMI_SERVICE_ALB_SHIFT_SETUP'
    | 'AWS_AMI_SERVICE_DEPLOY'
    | 'ASG_AMI_SERVICE_ALB_SHIFT_DEPLOY'
    | 'AWS_AMI_SWITCH_ROUTES'
    | 'ASG_AMI_ALB_SHIFT_SWITCH_ROUTES'
    | 'AWS_AMI_ROLLBACK_SWITCH_ROUTES'
    | 'ASG_AMI_ROLLBACK_ALB_SHIFT_SWITCH_ROUTES'
    | 'AWS_AMI_SERVICE_ROLLBACK'
    | 'ECS_SERVICE_SETUP'
    | 'SPOTINST_SETUP'
    | 'SPOTINST_ALB_SHIFT_SETUP'
    | 'SPOTINST_DEPLOY'
    | 'SPOTINST_ALB_SHIFT_DEPLOY'
    | 'SPOTINST_LISTENER_UPDATE'
    | 'SPOTINST_LISTENER_ALB_SHIFT'
    | 'SPOTINST_ROLLBACK'
    | 'SPOTINST_LISTENER_UPDATE_ROLLBACK'
    | 'SPOTINST_LISTENER_ALB_SHIFT_ROLLBACK'
    | 'ECS_SERVICE_SETUP_ROLLBACK'
    | 'ECS_DAEMON_SERVICE_SETUP'
    | 'ECS_BG_SERVICE_SETUP'
    | 'ECS_BG_SERVICE_SETUP_ROUTE53'
    | 'ECS_SERVICE_DEPLOY'
    | 'ECS_SERVICE_ROLLBACK'
    | 'ECS_LISTENER_UPDATE'
    | 'ECS_LISTENER_UPDATE_ROLLBACK'
    | 'ECS_ROUTE53_DNS_WEIGHT_UPDATE'
    | 'ECS_ROUTE53_DNS_WEIGHT_UPDATE_ROLLBACK'
    | 'KUBERNETES_SETUP'
    | 'KUBERNETES_SETUP_ROLLBACK'
    | 'KUBERNETES_DEPLOY'
    | 'KUBERNETES_DEPLOY_ROLLBACK'
    | 'KUBERNETES_STEADY_STATE_CHECK'
    | 'ECS_STEADY_STATE_CHECK'
    | 'ECS_RUN_TASK'
    | 'GCP_CLUSTER_SETUP'
    | 'HELM_DEPLOY'
    | 'HELM_ROLLBACK'
    | 'PCF_SETUP'
    | 'PCF_RESIZE'
    | 'PCF_ROLLBACK'
    | 'PCF_MAP_ROUTE'
    | 'PCF_UNMAP_ROUTE'
    | 'PCF_BG_MAP_ROUTE'
    | 'PCF_PLUGIN'
    | 'TERRAFORM_PROVISION'
    | 'TERRAFORM_APPLY'
    | 'TERRAGRUNT_PROVISION'
    | 'TERRAGRUNT_DESTROY'
    | 'TERRAGRUNT_ROLLBACK'
    | 'ARM_CREATE_RESOURCE'
    | 'ARM_ROLLBACK'
    | 'SHELL_SCRIPT_PROVISION'
    | 'TERRAFORM_DESTROY'
    | 'CLOUD_FORMATION_CREATE_STACK'
    | 'CLOUD_FORMATION_DELETE_STACK'
    | 'KUBERNETES_SWAP_SERVICE_SELECTORS'
    | 'CLOUD_FORMATION_ROLLBACK_STACK'
    | 'TERRAFORM_ROLLBACK'
    | 'K8S_DEPLOYMENT_ROLLING'
    | 'K8S_SCALE'
    | 'K8S_DEPLOYMENT_ROLLING_ROLLBACK'
    | 'K8S_BLUE_GREEN_DEPLOY'
    | 'K8S_CANARY_DEPLOY'
    | 'K8S_DELETE'
    | 'RANCHER_RESOLVE'
    | 'RANCHER_K8S_DEPLOYMENT_ROLLING'
    | 'RANCHER_K8S_CANARY_DEPLOY'
    | 'RANCHER_K8S_BLUE_GREEN_DEPLOY'
    | 'RANCHER_KUBERNETES_SWAP_SERVICE_SELECTORS'
    | 'RANCHER_K8S_DELETE'
    | 'RANCHER_K8S_DEPLOYMENT_ROLLING_ROLLBACK'
    | 'JIRA_CREATE_UPDATE'
    | 'SERVICENOW_CREATE_UPDATE'
    | 'K8S_TRAFFIC_SPLIT'
    | 'K8S_APPLY'
    | 'CUSTOM_DEPLOYMENT_FETCH_INSTANCES'
}

export type GetMetricsWithDataForNode6Error = Fetcher.ErrorWrapper<undefined>

export type GetMetricsWithDataForNode6Variables = {
  body: Schemas.CustomLogSetupTestNodeData
  queryParams?: GetMetricsWithDataForNode6QueryParams
} & PortalContext['fetcherOptions']

export const fetchGetMetricsWithDataForNode6 = (variables: GetMetricsWithDataForNode6Variables) =>
  portalFetch<
    Schemas.RestResponseVerificationNodeDataSetupResponse,
    GetMetricsWithDataForNode6Error,
    Schemas.CustomLogSetupTestNodeData,
    {},
    GetMetricsWithDataForNode6QueryParams,
    {}
  >({ url: '/logs/node-data', method: 'post', ...variables })

export const useGetMetricsWithDataForNode6 = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.RestResponseVerificationNodeDataSetupResponse,
      GetMetricsWithDataForNode6Error,
      GetMetricsWithDataForNode6Variables
    >,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<
    Schemas.RestResponseVerificationNodeDataSetupResponse,
    GetMetricsWithDataForNode6Error,
    GetMetricsWithDataForNode6Variables
  >(
    (variables: GetMetricsWithDataForNode6Variables) =>
      fetchGetMetricsWithDataForNode6({ ...fetcherOptions, ...variables }),
    options
  )
}

export type BatchSavePathParams = {
  activityId: string
  unitName: string
}

export type BatchSaveError = Fetcher.ErrorWrapper<undefined>

export type BatchSaveVariables = {
  body?: RequestBodies.GetDelegatePropertiesBody
  pathParams: BatchSavePathParams
} & PortalContext['fetcherOptions']

export const fetchBatchSave = (variables: BatchSaveVariables) =>
  portalFetch<
    Schemas.RestResponseBoolean,
    BatchSaveError,
    RequestBodies.GetDelegatePropertiesBody,
    {},
    {},
    BatchSavePathParams
  >({ url: '/logs/activity/{activityId}/unit/{unitName}/batched', method: 'post', ...variables })

export const useBatchSave = (
  options?: Omit<
    reactQuery.UseMutationOptions<Schemas.RestResponseBoolean, BatchSaveError, BatchSaveVariables>,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<Schemas.RestResponseBoolean, BatchSaveError, BatchSaveVariables>(
    (variables: BatchSaveVariables) => fetchBatchSave({ ...fetcherOptions, ...variables }),
    options
  )
}

export type UpdatePasswordPolicyQueryParams = {
  accountId?: string
}

export type UpdatePasswordPolicyError = Fetcher.ErrorWrapper<undefined>

export type UpdatePasswordPolicyVariables = {
  body?: Schemas.PasswordExpirationPolicy
  queryParams?: UpdatePasswordPolicyQueryParams
} & PortalContext['fetcherOptions']

export const fetchUpdatePasswordPolicy = (variables: UpdatePasswordPolicyVariables) =>
  portalFetch<
    Schemas.RestResponseLoginSettings,
    UpdatePasswordPolicyError,
    Schemas.PasswordExpirationPolicy,
    {},
    UpdatePasswordPolicyQueryParams,
    {}
  >({ url: '/loginSettings/update-policy-settings', method: 'put', ...variables })

export const useUpdatePasswordPolicy = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.RestResponseLoginSettings,
      UpdatePasswordPolicyError,
      UpdatePasswordPolicyVariables
    >,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<
    Schemas.RestResponseLoginSettings,
    UpdatePasswordPolicyError,
    UpdatePasswordPolicyVariables
  >(
    (variables: UpdatePasswordPolicyVariables) => fetchUpdatePasswordPolicy({ ...fetcherOptions, ...variables }),
    options
  )
}

export type UpdateUserLockoutSettingsQueryParams = {
  accountId?: string
}

export type UpdateUserLockoutSettingsError = Fetcher.ErrorWrapper<undefined>

export type UpdateUserLockoutSettingsVariables = {
  body?: Schemas.UserLockoutPolicy
  queryParams?: UpdateUserLockoutSettingsQueryParams
} & PortalContext['fetcherOptions']

export const fetchUpdateUserLockoutSettings = (variables: UpdateUserLockoutSettingsVariables) =>
  portalFetch<
    Schemas.RestResponseLoginSettings,
    UpdateUserLockoutSettingsError,
    Schemas.UserLockoutPolicy,
    {},
    UpdateUserLockoutSettingsQueryParams,
    {}
  >({ url: '/loginSettings/update-lockout-settings', method: 'put', ...variables })

export const useUpdateUserLockoutSettings = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.RestResponseLoginSettings,
      UpdateUserLockoutSettingsError,
      UpdateUserLockoutSettingsVariables
    >,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<
    Schemas.RestResponseLoginSettings,
    UpdateUserLockoutSettingsError,
    UpdateUserLockoutSettingsVariables
  >(
    (variables: UpdateUserLockoutSettingsVariables) =>
      fetchUpdateUserLockoutSettings({ ...fetcherOptions, ...variables }),
    options
  )
}

export type UpdatePasswordStrengthSettingsQueryParams = {
  accountId?: string
}

export type UpdatePasswordStrengthSettingsError = Fetcher.ErrorWrapper<undefined>

export type UpdatePasswordStrengthSettingsVariables = {
  body?: Schemas.PasswordStrengthPolicy
  queryParams?: UpdatePasswordStrengthSettingsQueryParams
} & PortalContext['fetcherOptions']

export const fetchUpdatePasswordStrengthSettings = (variables: UpdatePasswordStrengthSettingsVariables) =>
  portalFetch<
    Schemas.RestResponseLoginSettings,
    UpdatePasswordStrengthSettingsError,
    Schemas.PasswordStrengthPolicy,
    {},
    UpdatePasswordStrengthSettingsQueryParams,
    {}
  >({ url: '/loginSettings/update-password-strength-settings', method: 'put', ...variables })

export const useUpdatePasswordStrengthSettings = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.RestResponseLoginSettings,
      UpdatePasswordStrengthSettingsError,
      UpdatePasswordStrengthSettingsVariables
    >,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<
    Schemas.RestResponseLoginSettings,
    UpdatePasswordStrengthSettingsError,
    UpdatePasswordStrengthSettingsVariables
  >(
    (variables: UpdatePasswordStrengthSettingsVariables) =>
      fetchUpdatePasswordStrengthSettings({ ...fetcherOptions, ...variables }),
    options
  )
}

export type GetLoginSettingsQueryParams = {
  accountId?: string
}

export type GetLoginSettingsError = Fetcher.ErrorWrapper<undefined>

export type GetLoginSettingsVariables = {
  queryParams?: GetLoginSettingsQueryParams
} & PortalContext['fetcherOptions']

export const fetchGetLoginSettings = (variables: GetLoginSettingsVariables) =>
  portalFetch<Schemas.RestResponseLoginSettings, GetLoginSettingsError, undefined, {}, GetLoginSettingsQueryParams, {}>(
    { url: '/loginSettings/get-login-settings', method: 'get', ...variables }
  )

export const useGetLoginSettings = (
  variables: GetLoginSettingsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponseLoginSettings,
      GetLoginSettingsError,
      Schemas.RestResponseLoginSettings
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponseLoginSettings,
    GetLoginSettingsError,
    Schemas.RestResponseLoginSettings
  >(
    queryKeyFn({ path: '/loginSettings/get-login-settings', operationId: 'getLoginSettings', variables }),
    () => fetchGetLoginSettings({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type GetHostLogRecord1QueryParams = {
  accountId?: string
  serverConfigId?: string
  index?: string
  hostNameField?: string
  hostName?: string
  queryType?: 'TERM' | 'MATCH' | 'MATCH_PHRASE'
  query?: string
  timeStampField?: string
  timeStampFieldFormat?: string
  messageField?: string
}

export type GetHostLogRecord1Error = Fetcher.ErrorWrapper<undefined>

export type GetHostLogRecord1Variables = {
  queryParams?: GetHostLogRecord1QueryParams
} & PortalContext['fetcherOptions']

export const fetchGetHostLogRecord1 = (variables: GetHostLogRecord1Variables) =>
  portalFetch<Schemas.RestResponseObject, GetHostLogRecord1Error, undefined, {}, GetHostLogRecord1QueryParams, {}>({
    url: '/logz/get-host-records',
    method: 'get',
    ...variables
  })

export const useGetHostLogRecord1 = (
  variables: GetHostLogRecord1Variables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.RestResponseObject, GetHostLogRecord1Error, Schemas.RestResponseObject>,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<Schemas.RestResponseObject, GetHostLogRecord1Error, Schemas.RestResponseObject>(
    queryKeyFn({ path: '/logz/get-host-records', operationId: 'getHostLogRecord1', variables }),
    () => fetchGetHostLogRecord1({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type GetSampleLogRecord1QueryParams = {
  accountId?: string
  serverConfigId?: string
}

export type GetSampleLogRecord1Error = Fetcher.ErrorWrapper<undefined>

export type GetSampleLogRecord1Variables = {
  queryParams?: GetSampleLogRecord1QueryParams
} & PortalContext['fetcherOptions']

export const fetchGetSampleLogRecord1 = (variables: GetSampleLogRecord1Variables) =>
  portalFetch<Schemas.RestResponseObject, GetSampleLogRecord1Error, undefined, {}, GetSampleLogRecord1QueryParams, {}>({
    url: '/logz/get-sample-record',
    method: 'get',
    ...variables
  })

export const useGetSampleLogRecord1 = (
  variables: GetSampleLogRecord1Variables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.RestResponseObject, GetSampleLogRecord1Error, Schemas.RestResponseObject>,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<Schemas.RestResponseObject, GetSampleLogRecord1Error, Schemas.RestResponseObject>(
    queryKeyFn({ path: '/logz/get-sample-record', operationId: 'getSampleLogRecord1', variables }),
    () => fetchGetSampleLogRecord1({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type AwsMarketLoginError = Fetcher.ErrorWrapper<undefined>

export type AwsMarketLoginVariables = PortalContext['fetcherOptions']

export const fetchAwsMarketLogin = (variables: AwsMarketLoginVariables) =>
  portalFetch<undefined, AwsMarketLoginError, undefined, {}, {}, {}>({
    url: '/mktplace/aws-signup',
    method: 'post',
    ...variables
  })

export const useAwsMarketLogin = (
  options?: Omit<reactQuery.UseMutationOptions<undefined, AwsMarketLoginError, AwsMarketLoginVariables>, 'mutationFn'>
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<undefined, AwsMarketLoginError, AwsMarketLoginVariables>(
    (variables: AwsMarketLoginVariables) => fetchAwsMarketLogin({ ...fetcherOptions, ...variables }),
    options
  )
}

export type GcpBillingError = Fetcher.ErrorWrapper<undefined>

export type GcpBillingVariables = {
  body?: RequestBodies.GcpSignUp
} & PortalContext['fetcherOptions']

export const fetchGcpBilling = (variables: GcpBillingVariables) =>
  portalFetch<undefined, GcpBillingError, RequestBodies.GcpSignUp, {}, {}, {}>({
    url: '/mktplace/gcp-billing',
    method: 'post',
    ...variables
  })

export const useGcpBilling = (
  options?: Omit<reactQuery.UseMutationOptions<undefined, GcpBillingError, GcpBillingVariables>, 'mutationFn'>
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<undefined, GcpBillingError, GcpBillingVariables>(
    (variables: GcpBillingVariables) => fetchGcpBilling({ ...fetcherOptions, ...variables }),
    options
  )
}

export type GcpSignUp1Error = Fetcher.ErrorWrapper<undefined>

export type GcpSignUp1Variables = {
  body?: RequestBodies.GcpSignUp
} & PortalContext['fetcherOptions']

export const fetchGcpSignUp1 = (variables: GcpSignUp1Variables) =>
  portalFetch<undefined, GcpSignUp1Error, RequestBodies.GcpSignUp, {}, {}, {}>({
    url: '/mktplace/gcp-signup',
    method: 'post',
    ...variables
  })

export const useGcpSignUp1 = (
  options?: Omit<reactQuery.UseMutationOptions<undefined, GcpSignUp1Error, GcpSignUp1Variables>, 'mutationFn'>
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<undefined, GcpSignUp1Error, GcpSignUp1Variables>(
    (variables: GcpSignUp1Variables) => fetchGcpSignUp1({ ...fetcherOptions, ...variables }),
    options
  )
}

export type Get29Error = Fetcher.ErrorWrapper<undefined>

export type Get29Variables = PortalContext['fetcherOptions']

export const fetchGet29 = (variables: Get29Variables) =>
  portalFetch<string, Get29Error, undefined, {}, {}, {}>({ url: '/metrics', method: 'get', ...variables })

export const useGet29 = (
  variables: Get29Variables,
  options?: Omit<reactQuery.UseQueryOptions<string, Get29Error, string>, 'queryKey' | 'queryFn'>
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<string, Get29Error, string>(
    queryKeyFn({ path: '/metrics', operationId: 'get29', variables }),
    () => fetchGet29({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type GetAllMetricNames1QueryParams = {
  accountId?: string
}

export type GetAllMetricNames1Error = Fetcher.ErrorWrapper<undefined>

export type GetAllMetricNames1Variables = {
  queryParams?: GetAllMetricNames1QueryParams
} & PortalContext['fetcherOptions']

export const fetchGetAllMetricNames1 = (variables: GetAllMetricNames1Variables) =>
  portalFetch<
    Schemas.RestResponseListMetric,
    GetAllMetricNames1Error,
    undefined,
    {},
    GetAllMetricNames1QueryParams,
    {}
  >({ url: '/newrelic/metric-names', method: 'get', ...variables })

export const useGetAllMetricNames1 = (
  variables: GetAllMetricNames1Variables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.RestResponseListMetric, GetAllMetricNames1Error, Schemas.RestResponseListMetric>,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<Schemas.RestResponseListMetric, GetAllMetricNames1Error, Schemas.RestResponseListMetric>(
    queryKeyFn({ path: '/newrelic/metric-names', operationId: 'getAllMetricNames1', variables }),
    () => fetchGetAllMetricNames1({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type ResolveNewRelicAppNameQueryParams = {
  accountId?: string
  settingId?: string
  newRelicApplicationName?: string
}

export type ResolveNewRelicAppNameError = Fetcher.ErrorWrapper<undefined>

export type ResolveNewRelicAppNameVariables = {
  queryParams?: ResolveNewRelicAppNameQueryParams
} & PortalContext['fetcherOptions']

export const fetchResolveNewRelicAppName = (variables: ResolveNewRelicAppNameVariables) =>
  portalFetch<
    Schemas.RestResponseNewRelicApplication,
    ResolveNewRelicAppNameError,
    undefined,
    {},
    ResolveNewRelicAppNameQueryParams,
    {}
  >({ url: '/newrelic/resolve-application-name', method: 'get', ...variables })

export const useResolveNewRelicAppName = (
  variables: ResolveNewRelicAppNameVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponseNewRelicApplication,
      ResolveNewRelicAppNameError,
      Schemas.RestResponseNewRelicApplication
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponseNewRelicApplication,
    ResolveNewRelicAppNameError,
    Schemas.RestResponseNewRelicApplication
  >(
    queryKeyFn({ path: '/newrelic/resolve-application-name', operationId: 'resolveNewRelicAppName', variables }),
    () => fetchResolveNewRelicAppName({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type Test1QueryParams = {
  accountId?: string
}

export type Test1Error = Fetcher.ErrorWrapper<undefined>

export type Test1Variables = {
  queryParams?: Test1QueryParams
} & PortalContext['fetcherOptions']

export const fetchTest1 = (variables: Test1Variables) =>
  portalFetch<undefined, Test1Error, undefined, {}, Test1QueryParams, {}>({
    url: '/newrelic/test',
    method: 'get',
    ...variables
  })

export const useTest1 = (
  variables: Test1Variables,
  options?: Omit<reactQuery.UseQueryOptions<undefined, Test1Error, undefined>, 'queryKey' | 'queryFn'>
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<undefined, Test1Error, undefined>(
    queryKeyFn({ path: '/newrelic/test', operationId: 'test1', variables }),
    () => fetchTest1({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type ResolveNewRelicAppIdQueryParams = {
  accountId?: string
  settingId?: string
  newRelicApplicationId?: string
}

export type ResolveNewRelicAppIdError = Fetcher.ErrorWrapper<undefined>

export type ResolveNewRelicAppIdVariables = {
  queryParams?: ResolveNewRelicAppIdQueryParams
} & PortalContext['fetcherOptions']

export const fetchResolveNewRelicAppId = (variables: ResolveNewRelicAppIdVariables) =>
  portalFetch<
    Schemas.RestResponseNewRelicApplication,
    ResolveNewRelicAppIdError,
    undefined,
    {},
    ResolveNewRelicAppIdQueryParams,
    {}
  >({ url: '/newrelic/resolve-application-id', method: 'get', ...variables })

export const useResolveNewRelicAppId = (
  variables: ResolveNewRelicAppIdVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponseNewRelicApplication,
      ResolveNewRelicAppIdError,
      Schemas.RestResponseNewRelicApplication
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponseNewRelicApplication,
    ResolveNewRelicAppIdError,
    Schemas.RestResponseNewRelicApplication
  >(
    queryKeyFn({ path: '/newrelic/resolve-application-id', operationId: 'resolveNewRelicAppId', variables }),
    () => fetchResolveNewRelicAppId({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type GetAllApplications1QueryParams = {
  accountId?: string
  settingId?: string
}

export type GetAllApplications1Error = Fetcher.ErrorWrapper<undefined>

export type GetAllApplications1Variables = {
  queryParams?: GetAllApplications1QueryParams
} & PortalContext['fetcherOptions']

export const fetchGetAllApplications1 = (variables: GetAllApplications1Variables) =>
  portalFetch<
    Schemas.RestResponseListNewRelicApplication,
    GetAllApplications1Error,
    undefined,
    {},
    GetAllApplications1QueryParams,
    {}
  >({ url: '/newrelic/applications', method: 'get', ...variables })

export const useGetAllApplications1 = (
  variables: GetAllApplications1Variables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponseListNewRelicApplication,
      GetAllApplications1Error,
      Schemas.RestResponseListNewRelicApplication
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponseListNewRelicApplication,
    GetAllApplications1Error,
    Schemas.RestResponseListNewRelicApplication
  >(
    queryKeyFn({ path: '/newrelic/applications', operationId: 'getAllApplications1', variables }),
    () => fetchGetAllApplications1({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type GetMetricsWithDataForNode7QueryParams = {
  accountId?: string
}

export type GetMetricsWithDataForNode7Error = Fetcher.ErrorWrapper<undefined>

export type GetMetricsWithDataForNode7Variables = {
  body: Schemas.NewRelicSetupTestNodeData
  queryParams?: GetMetricsWithDataForNode7QueryParams
} & PortalContext['fetcherOptions']

export const fetchGetMetricsWithDataForNode7 = (variables: GetMetricsWithDataForNode7Variables) =>
  portalFetch<
    Schemas.RestResponseVerificationNodeDataSetupResponse,
    GetMetricsWithDataForNode7Error,
    Schemas.NewRelicSetupTestNodeData,
    {},
    GetMetricsWithDataForNode7QueryParams,
    {}
  >({ url: '/newrelic/node-data', method: 'post', ...variables })

export const useGetMetricsWithDataForNode7 = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.RestResponseVerificationNodeDataSetupResponse,
      GetMetricsWithDataForNode7Error,
      GetMetricsWithDataForNode7Variables
    >,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<
    Schemas.RestResponseVerificationNodeDataSetupResponse,
    GetMetricsWithDataForNode7Error,
    GetMetricsWithDataForNode7Variables
  >(
    (variables: GetMetricsWithDataForNode7Variables) =>
      fetchGetMetricsWithDataForNode7({ ...fetcherOptions, ...variables }),
    options
  )
}

export type GetApplicationInstancesQueryParams = {
  accountId?: string
  settingId?: string
  /*
   * @format int64
   */
  applicationId?: number
}

export type GetApplicationInstancesError = Fetcher.ErrorWrapper<undefined>

export type GetApplicationInstancesVariables = {
  queryParams?: GetApplicationInstancesQueryParams
} & PortalContext['fetcherOptions']

export const fetchGetApplicationInstances = (variables: GetApplicationInstancesVariables) =>
  portalFetch<
    Schemas.RestResponseListNewRelicApplicationInstance,
    GetApplicationInstancesError,
    undefined,
    {},
    GetApplicationInstancesQueryParams,
    {}
  >({ url: '/newrelic/nodes', method: 'get', ...variables })

export const useGetApplicationInstances = (
  variables: GetApplicationInstancesVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponseListNewRelicApplicationInstance,
      GetApplicationInstancesError,
      Schemas.RestResponseListNewRelicApplicationInstance
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponseListNewRelicApplicationInstance,
    GetApplicationInstancesError,
    Schemas.RestResponseListNewRelicApplicationInstance
  >(
    queryKeyFn({ path: '/newrelic/nodes', operationId: 'getApplicationInstances', variables }),
    () => fetchGetApplicationInstances({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type GetTxnsWithDataQueryParams = {
  accountId?: string
  settingId?: string
  /*
   * @format int64
   */
  applicationId?: number
  /*
   * @format int64
   */
  instanceId?: number
}

export type GetTxnsWithDataError = Fetcher.ErrorWrapper<undefined>

export type GetTxnsWithDataVariables = {
  queryParams?: GetTxnsWithDataQueryParams
} & PortalContext['fetcherOptions']

export const fetchGetTxnsWithData = (variables: GetTxnsWithDataVariables) =>
  portalFetch<
    Schemas.RestResponseListNewRelicMetric,
    GetTxnsWithDataError,
    undefined,
    {},
    GetTxnsWithDataQueryParams,
    {}
  >({ url: '/newrelic/txns-with-data', method: 'get', ...variables })

export const useGetTxnsWithData = (
  variables: GetTxnsWithDataVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponseListNewRelicMetric,
      GetTxnsWithDataError,
      Schemas.RestResponseListNewRelicMetric
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponseListNewRelicMetric,
    GetTxnsWithDataError,
    Schemas.RestResponseListNewRelicMetric
  >(
    queryKeyFn({ path: '/newrelic/txns-with-data', operationId: 'getTxnsWithData', variables }),
    () => fetchGetTxnsWithData({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type Get30QueryParams = {
  /*
   * @default __GLOBAL_APP_ID__
   */
  appId?: string
  notificationId?: string
}

export type Get30Error = Fetcher.ErrorWrapper<undefined>

export type Get30Variables = {
  queryParams?: Get30QueryParams
} & PortalContext['fetcherOptions']

export const fetchGet30 = (variables: Get30Variables) =>
  portalFetch<Schemas.RestResponseNotification, Get30Error, undefined, {}, Get30QueryParams, {}>({
    url: '/notifications/{notificationId}',
    method: 'get',
    ...variables
  })

export const useGet30 = (
  variables: Get30Variables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.RestResponseNotification, Get30Error, Schemas.RestResponseNotification>,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<Schemas.RestResponseNotification, Get30Error, Schemas.RestResponseNotification>(
    queryKeyFn({ path: '/notifications/{notificationId}', operationId: 'get30', variables }),
    () => fetchGet30({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type List31QueryParams = {
  appId?: string
  /*
   * @default 0
   */
  offset?: string
  limit?: string
  fieldsIncluded?: string[]
  fieldsExcluded?: string[]
  accountId?: string
}

export type List31Error = Fetcher.ErrorWrapper<undefined>

export type List31Variables = {
  queryParams?: List31QueryParams
} & PortalContext['fetcherOptions']

export const fetchList31 = (variables: List31Variables) =>
  portalFetch<Schemas.RestResponsePageResponseNotification, List31Error, undefined, {}, List31QueryParams, {}>({
    url: '/notifications',
    method: 'get',
    ...variables
  })

export const useList31 = (
  variables: List31Variables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponsePageResponseNotification,
      List31Error,
      Schemas.RestResponsePageResponseNotification
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponsePageResponseNotification,
    List31Error,
    Schemas.RestResponsePageResponseNotification
  >(
    queryKeyFn({ path: '/notifications', operationId: 'list31', variables }),
    () => fetchList31({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type ActPathParams = {
  notificationId: string
  type: 'APPROVE' | 'REJECT' | 'RESUME'
}

export type ActQueryParams = {
  /*
   * @default __GLOBAL_APP_ID__
   */
  appId?: string
}

export type ActError = Fetcher.ErrorWrapper<undefined>

export type ActVariables = {
  pathParams: ActPathParams
  queryParams?: ActQueryParams
} & PortalContext['fetcherOptions']

export const fetchAct = (variables: ActVariables) =>
  portalFetch<Schemas.RestResponseNotification, ActError, undefined, {}, ActQueryParams, ActPathParams>({
    url: '/notifications/{notificationId}/action/{type}',
    method: 'post',
    ...variables
  })

export const useAct = (
  options?: Omit<reactQuery.UseMutationOptions<Schemas.RestResponseNotification, ActError, ActVariables>, 'mutationFn'>
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<Schemas.RestResponseNotification, ActError, ActVariables>(
    (variables: ActVariables) => fetchAct({ ...fetcherOptions, ...variables }),
    options
  )
}

export type ListNotificationGroupsQueryParams = {
  accountId?: string
  /*
   * @default 0
   */
  offset?: string
  limit?: string
  fieldsIncluded?: string[]
  fieldsExcluded?: string[]
}

export type ListNotificationGroupsError = Fetcher.ErrorWrapper<undefined>

export type ListNotificationGroupsVariables = {
  queryParams?: ListNotificationGroupsQueryParams
} & PortalContext['fetcherOptions']

export const fetchListNotificationGroups = (variables: ListNotificationGroupsVariables) =>
  portalFetch<
    Schemas.RestResponsePageResponseNotificationGroup,
    ListNotificationGroupsError,
    undefined,
    {},
    ListNotificationGroupsQueryParams,
    {}
  >({ url: '/notification-setup/notification-groups', method: 'get', ...variables })

export const useListNotificationGroups = (
  variables: ListNotificationGroupsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponsePageResponseNotificationGroup,
      ListNotificationGroupsError,
      Schemas.RestResponsePageResponseNotificationGroup
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponsePageResponseNotificationGroup,
    ListNotificationGroupsError,
    Schemas.RestResponsePageResponseNotificationGroup
  >(
    queryKeyFn({ path: '/notification-setup/notification-groups', operationId: 'listNotificationGroups', variables }),
    () => fetchListNotificationGroups({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type CreateNotificationGroupsQueryParams = {
  accountId?: string
}

export type CreateNotificationGroupsError = Fetcher.ErrorWrapper<undefined>

export type CreateNotificationGroupsVariables = {
  body: RequestBodies.NotificationGroup
  queryParams?: CreateNotificationGroupsQueryParams
} & PortalContext['fetcherOptions']

export const fetchCreateNotificationGroups = (variables: CreateNotificationGroupsVariables) =>
  portalFetch<
    Schemas.RestResponseNotificationGroup,
    CreateNotificationGroupsError,
    RequestBodies.NotificationGroup,
    {},
    CreateNotificationGroupsQueryParams,
    {}
  >({ url: '/notification-setup/notification-groups', method: 'post', ...variables })

export const useCreateNotificationGroups = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.RestResponseNotificationGroup,
      CreateNotificationGroupsError,
      CreateNotificationGroupsVariables
    >,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<
    Schemas.RestResponseNotificationGroup,
    CreateNotificationGroupsError,
    CreateNotificationGroupsVariables
  >(
    (variables: CreateNotificationGroupsVariables) =>
      fetchCreateNotificationGroups({ ...fetcherOptions, ...variables }),
    options
  )
}

export type ReadNotificationGroupPathParams = {
  notificationGroupId: string
}

export type ReadNotificationGroupQueryParams = {
  accountId?: string
}

export type ReadNotificationGroupError = Fetcher.ErrorWrapper<undefined>

export type ReadNotificationGroupVariables = {
  pathParams: ReadNotificationGroupPathParams
  queryParams?: ReadNotificationGroupQueryParams
} & PortalContext['fetcherOptions']

export const fetchReadNotificationGroup = (variables: ReadNotificationGroupVariables) =>
  portalFetch<
    Schemas.RestResponseNotificationGroup,
    ReadNotificationGroupError,
    undefined,
    {},
    ReadNotificationGroupQueryParams,
    ReadNotificationGroupPathParams
  >({ url: '/notification-setup/notification-groups/{notificationGroupId}', method: 'get', ...variables })

export const useReadNotificationGroup = (
  variables: ReadNotificationGroupVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponseNotificationGroup,
      ReadNotificationGroupError,
      Schemas.RestResponseNotificationGroup
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponseNotificationGroup,
    ReadNotificationGroupError,
    Schemas.RestResponseNotificationGroup
  >(
    queryKeyFn({
      path: '/notification-setup/notification-groups/{notificationGroupId}',
      operationId: 'readNotificationGroup',
      variables
    }),
    () => fetchReadNotificationGroup({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type UpdateNotificationGroupsPathParams = {
  notificationGroupId: string
}

export type UpdateNotificationGroupsQueryParams = {
  accountId?: string
}

export type UpdateNotificationGroupsError = Fetcher.ErrorWrapper<undefined>

export type UpdateNotificationGroupsVariables = {
  body: RequestBodies.NotificationGroup
  pathParams: UpdateNotificationGroupsPathParams
  queryParams?: UpdateNotificationGroupsQueryParams
} & PortalContext['fetcherOptions']

export const fetchUpdateNotificationGroups = (variables: UpdateNotificationGroupsVariables) =>
  portalFetch<
    Schemas.RestResponseNotificationGroup,
    UpdateNotificationGroupsError,
    RequestBodies.NotificationGroup,
    {},
    UpdateNotificationGroupsQueryParams,
    UpdateNotificationGroupsPathParams
  >({ url: '/notification-setup/notification-groups/{notificationGroupId}', method: 'put', ...variables })

export const useUpdateNotificationGroups = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.RestResponseNotificationGroup,
      UpdateNotificationGroupsError,
      UpdateNotificationGroupsVariables
    >,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<
    Schemas.RestResponseNotificationGroup,
    UpdateNotificationGroupsError,
    UpdateNotificationGroupsVariables
  >(
    (variables: UpdateNotificationGroupsVariables) =>
      fetchUpdateNotificationGroups({ ...fetcherOptions, ...variables }),
    options
  )
}

export type DeleteNotificationGroupsPathParams = {
  notificationGroupId: string
}

export type DeleteNotificationGroupsQueryParams = {
  accountId?: string
}

export type DeleteNotificationGroupsError = Fetcher.ErrorWrapper<undefined>

export type DeleteNotificationGroupsVariables = {
  pathParams: DeleteNotificationGroupsPathParams
  queryParams?: DeleteNotificationGroupsQueryParams
} & PortalContext['fetcherOptions']

export const fetchDeleteNotificationGroups = (variables: DeleteNotificationGroupsVariables) =>
  portalFetch<
    Schemas.RestResponse,
    DeleteNotificationGroupsError,
    undefined,
    {},
    DeleteNotificationGroupsQueryParams,
    DeleteNotificationGroupsPathParams
  >({ url: '/notification-setup/notification-groups/{notificationGroupId}', method: 'delete', ...variables })

export const useDeleteNotificationGroups = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.RestResponse,
      DeleteNotificationGroupsError,
      DeleteNotificationGroupsVariables
    >,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<Schemas.RestResponse, DeleteNotificationGroupsError, DeleteNotificationGroupsVariables>(
    (variables: DeleteNotificationGroupsVariables) =>
      fetchDeleteNotificationGroups({ ...fetcherOptions, ...variables }),
    options
  )
}

export type CreateRouteForPcfQueryParams = {
  appId?: string
  envId?: string
  computeProviderId?: string
  org?: string
  space?: string
  host?: string
  domain?: string
  path?: string
  port?: string
  useRandomPort?: boolean
  tcpRoute?: boolean
}

export type CreateRouteForPcfError = Fetcher.ErrorWrapper<undefined>

export type CreateRouteForPcfVariables = {
  queryParams?: CreateRouteForPcfQueryParams
} & PortalContext['fetcherOptions']

export const fetchCreateRouteForPcf = (variables: CreateRouteForPcfVariables) =>
  portalFetch<Schemas.RestResponseString, CreateRouteForPcfError, undefined, {}, CreateRouteForPcfQueryParams, {}>({
    url: '/pcfresource/create-route',
    method: 'post',
    ...variables
  })

export const useCreateRouteForPcf = (
  options?: Omit<
    reactQuery.UseMutationOptions<Schemas.RestResponseString, CreateRouteForPcfError, CreateRouteForPcfVariables>,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<Schemas.RestResponseString, CreateRouteForPcfError, CreateRouteForPcfVariables>(
    (variables: CreateRouteForPcfVariables) => fetchCreateRouteForPcf({ ...fetcherOptions, ...variables }),
    options
  )
}

export type GetByAccountIdAndPerpetualTaskTypeQueryParams = {
  accountId?: string
  perpetualTaskType?: string
}

export type GetByAccountIdAndPerpetualTaskTypeError = Fetcher.ErrorWrapper<undefined>

export type GetByAccountIdAndPerpetualTaskTypeVariables = {
  queryParams?: GetByAccountIdAndPerpetualTaskTypeQueryParams
} & PortalContext['fetcherOptions']

export const fetchGetByAccountIdAndPerpetualTaskType = (variables: GetByAccountIdAndPerpetualTaskTypeVariables) =>
  portalFetch<
    Schemas.RestResponsePerpetualTaskScheduleConfig,
    GetByAccountIdAndPerpetualTaskTypeError,
    undefined,
    {},
    GetByAccountIdAndPerpetualTaskTypeQueryParams,
    {}
  >({ url: '/perpetualTaskSchedule', method: 'get', ...variables })

export const useGetByAccountIdAndPerpetualTaskType = (
  variables: GetByAccountIdAndPerpetualTaskTypeVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponsePerpetualTaskScheduleConfig,
      GetByAccountIdAndPerpetualTaskTypeError,
      Schemas.RestResponsePerpetualTaskScheduleConfig
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponsePerpetualTaskScheduleConfig,
    GetByAccountIdAndPerpetualTaskTypeError,
    Schemas.RestResponsePerpetualTaskScheduleConfig
  >(
    queryKeyFn({ path: '/perpetualTaskSchedule', operationId: 'getByAccountIdAndPerpetualTaskType', variables }),
    () => fetchGetByAccountIdAndPerpetualTaskType({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type Save13QueryParams = {
  accountId?: string
  perpetualTaskType?: string
  /*
   * @format int64
   */
  timeIntervalInMillis?: number
}

export type Save13Error = Fetcher.ErrorWrapper<undefined>

export type Save13Variables = {
  queryParams?: Save13QueryParams
} & PortalContext['fetcherOptions']

export const fetchSave13 = (variables: Save13Variables) =>
  portalFetch<Schemas.RestResponsePerpetualTaskScheduleConfig, Save13Error, undefined, {}, Save13QueryParams, {}>({
    url: '/perpetualTaskSchedule',
    method: 'post',
    ...variables
  })

export const useSave13 = (
  options?: Omit<
    reactQuery.UseMutationOptions<Schemas.RestResponsePerpetualTaskScheduleConfig, Save13Error, Save13Variables>,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<Schemas.RestResponsePerpetualTaskScheduleConfig, Save13Error, Save13Variables>(
    (variables: Save13Variables) => fetchSave13({ ...fetcherOptions, ...variables }),
    options
  )
}

export type ResetByAccountIdAndPerpetualTaskTypeQueryParams = {
  accountId?: string
  perpetualTaskType?: string
  /*
   * @format int64
   */
  timeIntervalInMillis?: number
}

export type ResetByAccountIdAndPerpetualTaskTypeError = Fetcher.ErrorWrapper<undefined>

export type ResetByAccountIdAndPerpetualTaskTypeVariables = {
  queryParams?: ResetByAccountIdAndPerpetualTaskTypeQueryParams
} & PortalContext['fetcherOptions']

export const fetchResetByAccountIdAndPerpetualTaskType = (variables: ResetByAccountIdAndPerpetualTaskTypeVariables) =>
  portalFetch<
    Schemas.RestResponseBoolean,
    ResetByAccountIdAndPerpetualTaskTypeError,
    undefined,
    {},
    ResetByAccountIdAndPerpetualTaskTypeQueryParams,
    {}
  >({ url: '/perpetualTaskSchedule', method: 'delete', ...variables })

export const useResetByAccountIdAndPerpetualTaskType = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.RestResponseBoolean,
      ResetByAccountIdAndPerpetualTaskTypeError,
      ResetByAccountIdAndPerpetualTaskTypeVariables
    >,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<
    Schemas.RestResponseBoolean,
    ResetByAccountIdAndPerpetualTaskTypeError,
    ResetByAccountIdAndPerpetualTaskTypeVariables
  >(
    (variables: ResetByAccountIdAndPerpetualTaskTypeVariables) =>
      fetchResetByAccountIdAndPerpetualTaskType({ ...fetcherOptions, ...variables }),
    options
  )
}

export type Clone1PathParams = {
  pipelineId: string
}

export type Clone1QueryParams = {
  appId?: string
}

export type Clone1Error = Fetcher.ErrorWrapper<undefined>

export type Clone1Variables = {
  body: RequestBodies.Pipeline
  pathParams: Clone1PathParams
  queryParams?: Clone1QueryParams
} & PortalContext['fetcherOptions']

export const fetchClone1 = (variables: Clone1Variables) =>
  portalFetch<
    Schemas.RestResponsePipeline,
    Clone1Error,
    RequestBodies.Pipeline,
    {},
    Clone1QueryParams,
    Clone1PathParams
  >({ url: '/pipelines/{pipelineId}/clone', method: 'post', ...variables })

export const useClone1 = (
  options?: Omit<
    reactQuery.UseMutationOptions<Schemas.RestResponsePipeline, Clone1Error, Clone1Variables>,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<Schemas.RestResponsePipeline, Clone1Error, Clone1Variables>(
    (variables: Clone1Variables) => fetchClone1({ ...fetcherOptions, ...variables }),
    options
  )
}

export type ReadPathParams = {
  pipelineId: string
}

export type ReadQueryParams = {
  appId?: string
  withServices?: boolean
  /*
   * @default false
   */
  withVariables?: boolean
}

export type ReadError = Fetcher.ErrorWrapper<undefined>

export type ReadVariables = {
  pathParams: ReadPathParams
  queryParams?: ReadQueryParams
} & PortalContext['fetcherOptions']

export const fetchRead = (variables: ReadVariables) =>
  portalFetch<Schemas.RestResponsePipeline, ReadError, undefined, {}, ReadQueryParams, ReadPathParams>({
    url: '/pipelines/{pipelineId}',
    method: 'get',
    ...variables
  })

export const useRead = (
  variables: ReadVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.RestResponsePipeline, ReadError, Schemas.RestResponsePipeline>,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<Schemas.RestResponsePipeline, ReadError, Schemas.RestResponsePipeline>(
    queryKeyFn({ path: '/pipelines/{pipelineId}', operationId: 'read', variables }),
    () => fetchRead({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type Update21PathParams = {
  pipelineId: string
}

export type Update21QueryParams = {
  appId?: string
}

export type Update21Error = Fetcher.ErrorWrapper<undefined>

export type Update21Variables = {
  body: RequestBodies.Pipeline
  pathParams: Update21PathParams
  queryParams?: Update21QueryParams
} & PortalContext['fetcherOptions']

export const fetchUpdate21 = (variables: Update21Variables) =>
  portalFetch<
    Schemas.RestResponsePipeline,
    Update21Error,
    RequestBodies.Pipeline,
    {},
    Update21QueryParams,
    Update21PathParams
  >({ url: '/pipelines/{pipelineId}', method: 'put', ...variables })

export const useUpdate21 = (
  options?: Omit<
    reactQuery.UseMutationOptions<Schemas.RestResponsePipeline, Update21Error, Update21Variables>,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<Schemas.RestResponsePipeline, Update21Error, Update21Variables>(
    (variables: Update21Variables) => fetchUpdate21({ ...fetcherOptions, ...variables }),
    options
  )
}

export type Delete20PathParams = {
  pipelineId: string
}

export type Delete20QueryParams = {
  appId?: string
}

export type Delete20Error = Fetcher.ErrorWrapper<undefined>

export type Delete20Variables = {
  body: RequestBodies.Pipeline
  pathParams: Delete20PathParams
  queryParams?: Delete20QueryParams
} & PortalContext['fetcherOptions']

export const fetchDelete20 = (variables: Delete20Variables) =>
  portalFetch<Schemas.RestResponse, Delete20Error, RequestBodies.Pipeline, {}, Delete20QueryParams, Delete20PathParams>(
    { url: '/pipelines/{pipelineId}', method: 'delete', ...variables }
  )

export const useDelete20 = (
  options?: Omit<reactQuery.UseMutationOptions<Schemas.RestResponse, Delete20Error, Delete20Variables>, 'mutationFn'>
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<Schemas.RestResponse, Delete20Error, Delete20Variables>(
    (variables: Delete20Variables) => fetchDelete20({ ...fetcherOptions, ...variables }),
    options
  )
}

export type List32QueryParams = {
  appId?: string[]
  /*
   * @default 0
   */
  offset?: string
  limit?: string
  fieldsIncluded?: string[]
  fieldsExcluded?: string[]
  /*
   * @format int32
   */
  previousExecutionsCount?: number
  /*
   * @default true
   */
  details?: boolean
  tagFilter?: string
  /*
   * @default false
   */
  withTags?: boolean
}

export type List32Error = Fetcher.ErrorWrapper<undefined>

export type List32Variables = {
  queryParams?: List32QueryParams
} & PortalContext['fetcherOptions']

export const fetchList32 = (variables: List32Variables) =>
  portalFetch<Schemas.RestResponsePageResponsePipeline, List32Error, undefined, {}, List32QueryParams, {}>({
    url: '/pipelines',
    method: 'get',
    ...variables
  })

export const useList32 = (
  variables: List32Variables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponsePageResponsePipeline,
      List32Error,
      Schemas.RestResponsePageResponsePipeline
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponsePageResponsePipeline,
    List32Error,
    Schemas.RestResponsePageResponsePipeline
  >(
    queryKeyFn({ path: '/pipelines', operationId: 'list32', variables }),
    () => fetchList32({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type Create3QueryParams = {
  appId?: string
}

export type Create3Error = Fetcher.ErrorWrapper<undefined>

export type Create3Variables = {
  body: RequestBodies.Pipeline
  queryParams?: Create3QueryParams
} & PortalContext['fetcherOptions']

export const fetchCreate3 = (variables: Create3Variables) =>
  portalFetch<Schemas.RestResponsePipeline, Create3Error, RequestBodies.Pipeline, {}, Create3QueryParams, {}>({
    url: '/pipelines',
    method: 'post',
    ...variables
  })

export const useCreate3 = (
  options?: Omit<
    reactQuery.UseMutationOptions<Schemas.RestResponsePipeline, Create3Error, Create3Variables>,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<Schemas.RestResponsePipeline, Create3Error, Create3Variables>(
    (variables: Create3Variables) => fetchCreate3({ ...fetcherOptions, ...variables }),
    options
  )
}

export type RequiredEntitiesQueryParams = {
  appId?: string
  pipelineId?: string
}

export type RequiredEntitiesError = Fetcher.ErrorWrapper<undefined>

export type RequiredEntitiesVariables = {
  queryParams?: RequiredEntitiesQueryParams
} & PortalContext['fetcherOptions']

export const fetchRequiredEntities = (variables: RequiredEntitiesVariables) =>
  portalFetch<
    Schemas.RestResponseListEntityType,
    RequiredEntitiesError,
    undefined,
    {},
    RequiredEntitiesQueryParams,
    {}
  >({ url: '/pipelines/required-entities', method: 'get', ...variables })

export const useRequiredEntities = (
  variables: RequiredEntitiesVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponseListEntityType,
      RequiredEntitiesError,
      Schemas.RestResponseListEntityType
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponseListEntityType,
    RequiredEntitiesError,
    Schemas.RestResponseListEntityType
  >(
    queryKeyFn({ path: '/pipelines/required-entities', operationId: 'requiredEntities', variables }),
    () => fetchRequiredEntities({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type StencilsQueryParams = {
  appId?: string
  envId?: string
}

export type StencilsError = Fetcher.ErrorWrapper<undefined>

export type StencilsVariables = {
  queryParams?: StencilsQueryParams
} & PortalContext['fetcherOptions']

export const fetchStencils = (variables: StencilsVariables) =>
  portalFetch<Schemas.RestResponseListStencil, StencilsError, undefined, {}, StencilsQueryParams, {}>({
    url: '/pipelines/stencils',
    method: 'get',
    ...variables
  })

export const useStencils = (
  variables: StencilsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.RestResponseListStencil, StencilsError, Schemas.RestResponseListStencil>,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<Schemas.RestResponseListStencil, StencilsError, Schemas.RestResponseListStencil>(
    queryKeyFn({ path: '/pipelines/stencils', operationId: 'stencils', variables }),
    () => fetchStencils({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type UpdateFailureStrategiesPathParams = {
  pipelineId: string
}

export type UpdateFailureStrategiesQueryParams = {
  appId?: string
}

export type UpdateFailureStrategiesError = Fetcher.ErrorWrapper<undefined>

export type UpdateFailureStrategiesVariables = {
  body?: RequestBodies.FailureStrategyArray
  pathParams: UpdateFailureStrategiesPathParams
  queryParams?: UpdateFailureStrategiesQueryParams
} & PortalContext['fetcherOptions']

export const fetchUpdateFailureStrategies = (variables: UpdateFailureStrategiesVariables) =>
  portalFetch<
    Schemas.RestResponseListFailureStrategy,
    UpdateFailureStrategiesError,
    RequestBodies.FailureStrategyArray,
    {},
    UpdateFailureStrategiesQueryParams,
    UpdateFailureStrategiesPathParams
  >({ url: '/pipelines/{pipelineId}/failure-strategies', method: 'put', ...variables })

export const useUpdateFailureStrategies = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.RestResponseListFailureStrategy,
      UpdateFailureStrategiesError,
      UpdateFailureStrategiesVariables
    >,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<
    Schemas.RestResponseListFailureStrategy,
    UpdateFailureStrategiesError,
    UpdateFailureStrategiesVariables
  >(
    (variables: UpdateFailureStrategiesVariables) => fetchUpdateFailureStrategies({ ...fetcherOptions, ...variables }),
    options
  )
}

export type InstalledPluginsPathParams = {
  accountId: string
}

export type InstalledPluginsError = Fetcher.ErrorWrapper<undefined>

export type InstalledPluginsVariables = {
  pathParams: InstalledPluginsPathParams
} & PortalContext['fetcherOptions']

export const fetchInstalledPlugins = (variables: InstalledPluginsVariables) =>
  portalFetch<
    Schemas.RestResponseListAccountPlugin,
    InstalledPluginsError,
    undefined,
    {},
    {},
    InstalledPluginsPathParams
  >({ url: '/plugins/{accountId}/installed', method: 'get', ...variables })

export const useInstalledPlugins = (
  variables: InstalledPluginsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponseListAccountPlugin,
      InstalledPluginsError,
      Schemas.RestResponseListAccountPlugin
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponseListAccountPlugin,
    InstalledPluginsError,
    Schemas.RestResponseListAccountPlugin
  >(
    queryKeyFn({ path: '/plugins/{accountId}/installed', operationId: 'installedPlugins', variables }),
    () => fetchInstalledPlugins({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type InstalledPluginSettingSchemaPathParams = {
  accountId: string
}

export type InstalledPluginSettingSchemaError = Fetcher.ErrorWrapper<undefined>

export type InstalledPluginSettingSchemaVariables = {
  pathParams: InstalledPluginSettingSchemaPathParams
} & PortalContext['fetcherOptions']

export const fetchInstalledPluginSettingSchema = (variables: InstalledPluginSettingSchemaVariables) =>
  portalFetch<
    Schemas.RestResponseMapStringMapStringObject,
    InstalledPluginSettingSchemaError,
    undefined,
    {},
    {},
    InstalledPluginSettingSchemaPathParams
  >({ url: '/plugins/{accountId}/installed/settingschema', method: 'get', ...variables })

export const useInstalledPluginSettingSchema = (
  variables: InstalledPluginSettingSchemaVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponseMapStringMapStringObject,
      InstalledPluginSettingSchemaError,
      Schemas.RestResponseMapStringMapStringObject
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponseMapStringMapStringObject,
    InstalledPluginSettingSchemaError,
    Schemas.RestResponseMapStringMapStringObject
  >(
    queryKeyFn({
      path: '/plugins/{accountId}/installed/settingschema',
      operationId: 'installedPluginSettingSchema',
      variables
    }),
    () => fetchInstalledPluginSettingSchema({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type ListAuditPreferencesQueryParams = {
  accountId?: string
}

export type ListAuditPreferencesError = Fetcher.ErrorWrapper<undefined>

export type ListAuditPreferencesVariables = {
  queryParams?: ListAuditPreferencesQueryParams
} & PortalContext['fetcherOptions']

export const fetchListAuditPreferences = (variables: ListAuditPreferencesVariables) =>
  portalFetch<
    Schemas.RestResponseAuditPreferenceResponse,
    ListAuditPreferencesError,
    undefined,
    {},
    ListAuditPreferencesQueryParams,
    {}
  >({ url: '/preference/auditPreference', method: 'get', ...variables })

export const useListAuditPreferences = (
  variables: ListAuditPreferencesVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponseAuditPreferenceResponse,
      ListAuditPreferencesError,
      Schemas.RestResponseAuditPreferenceResponse
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponseAuditPreferenceResponse,
    ListAuditPreferencesError,
    Schemas.RestResponseAuditPreferenceResponse
  >(
    queryKeyFn({ path: '/preference/auditPreference', operationId: 'listAuditPreferences', variables }),
    () => fetchListAuditPreferences({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type ListPreferencesQueryParams = {
  accountId?: string
  /*
   * @default 0
   */
  offset?: string
  limit?: string
  fieldsIncluded?: string[]
  fieldsExcluded?: string[]
}

export type ListPreferencesError = Fetcher.ErrorWrapper<undefined>

export type ListPreferencesVariables = {
  queryParams?: ListPreferencesQueryParams
} & PortalContext['fetcherOptions']

export const fetchListPreferences = (variables: ListPreferencesVariables) =>
  portalFetch<
    Schemas.RestResponsePageResponsePreference,
    ListPreferencesError,
    undefined,
    {},
    ListPreferencesQueryParams,
    {}
  >({ url: '/preference', method: 'get', ...variables })

export const useListPreferences = (
  variables: ListPreferencesVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponsePageResponsePreference,
      ListPreferencesError,
      Schemas.RestResponsePageResponsePreference
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponsePageResponsePreference,
    ListPreferencesError,
    Schemas.RestResponsePageResponsePreference
  >(
    queryKeyFn({ path: '/preference', operationId: 'listPreferences', variables }),
    () => fetchListPreferences({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type SavePreferenceQueryParams = {
  accountId?: string
}

export type SavePreferenceError = Fetcher.ErrorWrapper<undefined>

export type SavePreferenceVariables = {
  body: RequestBodies.Preference
  queryParams?: SavePreferenceQueryParams
} & PortalContext['fetcherOptions']

export const fetchSavePreference = (variables: SavePreferenceVariables) =>
  portalFetch<
    Schemas.RestResponsePreference,
    SavePreferenceError,
    RequestBodies.Preference,
    {},
    SavePreferenceQueryParams,
    {}
  >({ url: '/preference', method: 'post', ...variables })

export const useSavePreference = (
  options?: Omit<
    reactQuery.UseMutationOptions<Schemas.RestResponsePreference, SavePreferenceError, SavePreferenceVariables>,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<Schemas.RestResponsePreference, SavePreferenceError, SavePreferenceVariables>(
    (variables: SavePreferenceVariables) => fetchSavePreference({ ...fetcherOptions, ...variables }),
    options
  )
}

export type GetPreferencePathParams = {
  preferenceId: string
}

export type GetPreferenceQueryParams = {
  accountId?: string
}

export type GetPreferenceError = Fetcher.ErrorWrapper<undefined>

export type GetPreferenceVariables = {
  pathParams: GetPreferencePathParams
  queryParams?: GetPreferenceQueryParams
} & PortalContext['fetcherOptions']

export const fetchGetPreference = (variables: GetPreferenceVariables) =>
  portalFetch<
    Schemas.RestResponsePreference,
    GetPreferenceError,
    undefined,
    {},
    GetPreferenceQueryParams,
    GetPreferencePathParams
  >({ url: '/preference/{preferenceId}', method: 'get', ...variables })

export const useGetPreference = (
  variables: GetPreferenceVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.RestResponsePreference, GetPreferenceError, Schemas.RestResponsePreference>,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<Schemas.RestResponsePreference, GetPreferenceError, Schemas.RestResponsePreference>(
    queryKeyFn({ path: '/preference/{preferenceId}', operationId: 'getPreference', variables }),
    () => fetchGetPreference({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type UpdatePreferencePathParams = {
  preferenceId: string
}

export type UpdatePreferenceQueryParams = {
  accountId?: string
}

export type UpdatePreferenceError = Fetcher.ErrorWrapper<undefined>

export type UpdatePreferenceVariables = {
  body: RequestBodies.Preference
  pathParams: UpdatePreferencePathParams
  queryParams?: UpdatePreferenceQueryParams
} & PortalContext['fetcherOptions']

export const fetchUpdatePreference = (variables: UpdatePreferenceVariables) =>
  portalFetch<
    Schemas.RestResponsePreference,
    UpdatePreferenceError,
    RequestBodies.Preference,
    {},
    UpdatePreferenceQueryParams,
    UpdatePreferencePathParams
  >({ url: '/preference/{preferenceId}', method: 'put', ...variables })

export const useUpdatePreference = (
  options?: Omit<
    reactQuery.UseMutationOptions<Schemas.RestResponsePreference, UpdatePreferenceError, UpdatePreferenceVariables>,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<Schemas.RestResponsePreference, UpdatePreferenceError, UpdatePreferenceVariables>(
    (variables: UpdatePreferenceVariables) => fetchUpdatePreference({ ...fetcherOptions, ...variables }),
    options
  )
}

export type DeletePreferencePathParams = {
  preferenceId: string
}

export type DeletePreferenceQueryParams = {
  accountId?: string
}

export type DeletePreferenceError = Fetcher.ErrorWrapper<undefined>

export type DeletePreferenceVariables = {
  pathParams: DeletePreferencePathParams
  queryParams?: DeletePreferenceQueryParams
} & PortalContext['fetcherOptions']

export const fetchDeletePreference = (variables: DeletePreferenceVariables) =>
  portalFetch<
    Schemas.RestResponseVoid,
    DeletePreferenceError,
    undefined,
    {},
    DeletePreferenceQueryParams,
    DeletePreferencePathParams
  >({ url: '/preference/{preferenceId}', method: 'delete', ...variables })

export const useDeletePreference = (
  options?: Omit<
    reactQuery.UseMutationOptions<Schemas.RestResponseVoid, DeletePreferenceError, DeletePreferenceVariables>,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<Schemas.RestResponseVoid, DeletePreferenceError, DeletePreferenceVariables>(
    (variables: DeletePreferenceVariables) => fetchDeletePreference({ ...fetcherOptions, ...variables }),
    options
  )
}

export type GetMetricsWithDataForNode8QueryParams = {
  accountId?: string
}

export type GetMetricsWithDataForNode8Error = Fetcher.ErrorWrapper<undefined>

export type GetMetricsWithDataForNode8Variables = {
  body: Schemas.PrometheusSetupTestNodeData
  queryParams?: GetMetricsWithDataForNode8QueryParams
} & PortalContext['fetcherOptions']

export const fetchGetMetricsWithDataForNode8 = (variables: GetMetricsWithDataForNode8Variables) =>
  portalFetch<
    Schemas.RestResponseVerificationNodeDataSetupResponse,
    GetMetricsWithDataForNode8Error,
    Schemas.PrometheusSetupTestNodeData,
    {},
    GetMetricsWithDataForNode8QueryParams,
    {}
  >({ url: '/prometheus/node-data', method: 'post', ...variables })

export const useGetMetricsWithDataForNode8 = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.RestResponseVerificationNodeDataSetupResponse,
      GetMetricsWithDataForNode8Error,
      GetMetricsWithDataForNode8Variables
    >,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<
    Schemas.RestResponseVerificationNodeDataSetupResponse,
    GetMetricsWithDataForNode8Error,
    GetMetricsWithDataForNode8Variables
  >(
    (variables: GetMetricsWithDataForNode8Variables) =>
      fetchGetMetricsWithDataForNode8({ ...fetcherOptions, ...variables }),
    options
  )
}

export type ValidateMetricsQueryParams = {
  accountId?: string
}

export type ValidateMetricsError = Fetcher.ErrorWrapper<undefined>

export type ValidateMetricsRequestBody = Schemas.TimeSeries[]

export type ValidateMetricsVariables = {
  body?: ValidateMetricsRequestBody
  queryParams?: ValidateMetricsQueryParams
} & PortalContext['fetcherOptions']

export const fetchValidateMetrics = (variables: ValidateMetricsVariables) =>
  portalFetch<
    Schemas.RestResponseMapStringString,
    ValidateMetricsError,
    ValidateMetricsRequestBody,
    {},
    ValidateMetricsQueryParams,
    {}
  >({ url: '/prometheus/validate-metrics', method: 'post', ...variables })

export const useValidateMetrics = (
  options?: Omit<
    reactQuery.UseMutationOptions<Schemas.RestResponseMapStringString, ValidateMetricsError, ValidateMetricsVariables>,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<Schemas.RestResponseMapStringString, ValidateMetricsError, ValidateMetricsVariables>(
    (variables: ValidateMetricsVariables) => fetchValidateMetrics({ ...fetcherOptions, ...variables }),
    options
  )
}

export type Update22PathParams = {
  resourceConstraintId: string
}

export type Update22QueryParams = {
  accountId?: string
}

export type Update22Error = Fetcher.ErrorWrapper<undefined>

export type Update22Variables = {
  body: RequestBodies.ResourceConstraint
  pathParams: Update22PathParams
  queryParams?: Update22QueryParams
} & PortalContext['fetcherOptions']

export const fetchUpdate22 = (variables: Update22Variables) =>
  portalFetch<
    Schemas.RestResponseResourceConstraint,
    Update22Error,
    RequestBodies.ResourceConstraint,
    {},
    Update22QueryParams,
    Update22PathParams
  >({ url: '/resource-constraints/{resourceConstraintId}', method: 'put', ...variables })

export const useUpdate22 = (
  options?: Omit<
    reactQuery.UseMutationOptions<Schemas.RestResponseResourceConstraint, Update22Error, Update22Variables>,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<Schemas.RestResponseResourceConstraint, Update22Error, Update22Variables>(
    (variables: Update22Variables) => fetchUpdate22({ ...fetcherOptions, ...variables }),
    options
  )
}

export type Delete21PathParams = {
  resourceConstraintId: string
}

export type Delete21QueryParams = {
  accountId?: string
}

export type Delete21Error = Fetcher.ErrorWrapper<undefined>

export type Delete21Variables = {
  pathParams: Delete21PathParams
  queryParams?: Delete21QueryParams
} & PortalContext['fetcherOptions']

export const fetchDelete21 = (variables: Delete21Variables) =>
  portalFetch<Schemas.RestResponse, Delete21Error, undefined, {}, Delete21QueryParams, Delete21PathParams>({
    url: '/resource-constraints/{resourceConstraintId}',
    method: 'delete',
    ...variables
  })

export const useDelete21 = (
  options?: Omit<reactQuery.UseMutationOptions<Schemas.RestResponse, Delete21Error, Delete21Variables>, 'mutationFn'>
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<Schemas.RestResponse, Delete21Error, Delete21Variables>(
    (variables: Delete21Variables) => fetchDelete21({ ...fetcherOptions, ...variables }),
    options
  )
}

export type List33QueryParams = {
  accountId?: string
  /*
   * @default 0
   */
  offset?: string
  limit?: string
  fieldsIncluded?: string[]
  fieldsExcluded?: string[]
}

export type List33Error = Fetcher.ErrorWrapper<undefined>

export type List33Variables = {
  queryParams?: List33QueryParams
} & PortalContext['fetcherOptions']

export const fetchList33 = (variables: List33Variables) =>
  portalFetch<Schemas.RestResponsePageResponseResourceConstraint, List33Error, undefined, {}, List33QueryParams, {}>({
    url: '/resource-constraints',
    method: 'get',
    ...variables
  })

export const useList33 = (
  variables: List33Variables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponsePageResponseResourceConstraint,
      List33Error,
      Schemas.RestResponsePageResponseResourceConstraint
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponsePageResponseResourceConstraint,
    List33Error,
    Schemas.RestResponsePageResponseResourceConstraint
  >(
    queryKeyFn({ path: '/resource-constraints', operationId: 'list33', variables }),
    () => fetchList33({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type Save14QueryParams = {
  accountId?: string
}

export type Save14Error = Fetcher.ErrorWrapper<undefined>

export type Save14Variables = {
  body: RequestBodies.ResourceConstraint
  queryParams?: Save14QueryParams
} & PortalContext['fetcherOptions']

export const fetchSave14 = (variables: Save14Variables) =>
  portalFetch<
    Schemas.RestResponseResourceConstraint,
    Save14Error,
    RequestBodies.ResourceConstraint,
    {},
    Save14QueryParams,
    {}
  >({ url: '/resource-constraints', method: 'post', ...variables })

export const useSave14 = (
  options?: Omit<
    reactQuery.UseMutationOptions<Schemas.RestResponseResourceConstraint, Save14Error, Save14Variables>,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<Schemas.RestResponseResourceConstraint, Save14Error, Save14Variables>(
    (variables: Save14Variables) => fetchSave14({ ...fetcherOptions, ...variables }),
    options
  )
}

export type UsageQueryParams = {
  accountId?: string
}

export type UsageError = Fetcher.ErrorWrapper<undefined>

export type UsageVariables = {
  body?: RequestBodies.UpdateWhitelistedDomainsBody
  queryParams?: UsageQueryParams
} & PortalContext['fetcherOptions']

export const fetchUsage = (variables: UsageVariables) =>
  portalFetch<
    Schemas.RestResponseListResourceConstraintUsage,
    UsageError,
    RequestBodies.UpdateWhitelistedDomainsBody,
    {},
    UsageQueryParams,
    {}
  >({ url: '/resource-constraints/usage', method: 'post', ...variables })

export const useUsage = (
  options?: Omit<
    reactQuery.UseMutationOptions<Schemas.RestResponseListResourceConstraintUsage, UsageError, UsageVariables>,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<Schemas.RestResponseListResourceConstraintUsage, UsageError, UsageVariables>(
    (variables: UsageVariables) => fetchUsage({ ...fetcherOptions, ...variables }),
    options
  )
}

export type ListResourcesWithTag1QueryParams = {
  accountId?: string
  filter?: string
  limit?: string
  offset?: string
}

export type ListResourcesWithTag1Error = Fetcher.ErrorWrapper<undefined>

export type ListResourcesWithTag1Response = Schemas.ResourceLookup[]

export type ListResourcesWithTag1Variables = {
  queryParams?: ListResourcesWithTag1QueryParams
} & PortalContext['fetcherOptions']

export const fetchListResourcesWithTag1 = (variables: ListResourcesWithTag1Variables) =>
  portalFetch<
    ListResourcesWithTag1Response,
    ListResourcesWithTag1Error,
    undefined,
    {},
    ListResourcesWithTag1QueryParams,
    {}
  >({ url: '/resourcelookup/tags', method: 'get', ...variables })

export const useListResourcesWithTag1 = (
  variables: ListResourcesWithTag1Variables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ListResourcesWithTag1Response,
      ListResourcesWithTag1Error,
      ListResourcesWithTag1Response
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<ListResourcesWithTag1Response, ListResourcesWithTag1Error, ListResourcesWithTag1Response>(
    queryKeyFn({ path: '/resourcelookup/tags', operationId: 'listResourcesWithTag1', variables }),
    () => fetchListResourcesWithTag1({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type List34QueryParams = {
  accountId?: string
  /*
   * @default 0
   */
  offset?: string
  limit?: string
  fieldsIncluded?: string[]
  fieldsExcluded?: string[]
}

export type List34Error = Fetcher.ErrorWrapper<undefined>

export type List34Variables = {
  queryParams?: List34QueryParams
} & PortalContext['fetcherOptions']

export const fetchList34 = (variables: List34Variables) =>
  portalFetch<Schemas.RestResponsePageResponseResourceLookup, List34Error, undefined, {}, List34QueryParams, {}>({
    url: '/resourcelookup',
    method: 'get',
    ...variables
  })

export const useList34 = (
  variables: List34Variables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponsePageResponseResourceLookup,
      List34Error,
      Schemas.RestResponsePageResponseResourceLookup
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponsePageResponseResourceLookup,
    List34Error,
    Schemas.RestResponsePageResponseResourceLookup
  >(
    queryKeyFn({ path: '/resourcelookup', operationId: 'list34', variables }),
    () => fetchList34({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type ListAccResourceTypesQueryParams = {
  accountId?: string
}

export type ListAccResourceTypesError = Fetcher.ErrorWrapper<undefined>

export type ListAccResourceTypesVariables = {
  queryParams?: ListAccResourceTypesQueryParams
} & PortalContext['fetcherOptions']

export const fetchListAccResourceTypes = (variables: ListAccResourceTypesVariables) =>
  portalFetch<
    Schemas.RestResponseListString,
    ListAccResourceTypesError,
    undefined,
    {},
    ListAccResourceTypesQueryParams,
    {}
  >({ url: '/resourcelookup/acc_resource_types', method: 'get', ...variables })

export const useListAccResourceTypes = (
  variables: ListAccResourceTypesVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponseListString,
      ListAccResourceTypesError,
      Schemas.RestResponseListString
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<Schemas.RestResponseListString, ListAccResourceTypesError, Schemas.RestResponseListString>(
    queryKeyFn({ path: '/resourcelookup/acc_resource_types', operationId: 'listAccResourceTypes', variables }),
    () => fetchListAccResourceTypes({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type ListAppResourceTypesQueryParams = {
  accountId?: string
}

export type ListAppResourceTypesError = Fetcher.ErrorWrapper<undefined>

export type ListAppResourceTypesVariables = {
  queryParams?: ListAppResourceTypesQueryParams
} & PortalContext['fetcherOptions']

export const fetchListAppResourceTypes = (variables: ListAppResourceTypesVariables) =>
  portalFetch<
    Schemas.RestResponseListString,
    ListAppResourceTypesError,
    undefined,
    {},
    ListAppResourceTypesQueryParams,
    {}
  >({ url: '/resourcelookup/app_resource_types', method: 'get', ...variables })

export const useListAppResourceTypes = (
  variables: ListAppResourceTypesVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponseListString,
      ListAppResourceTypesError,
      Schemas.RestResponseListString
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<Schemas.RestResponseListString, ListAppResourceTypesError, Schemas.RestResponseListString>(
    queryKeyFn({ path: '/resourcelookup/app_resource_types', operationId: 'listAppResourceTypes', variables }),
    () => fetchListAppResourceTypes({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type Get31PathParams = {
  roleId: string
}

export type Get31Error = Fetcher.ErrorWrapper<undefined>

export type Get31Variables = {
  pathParams: Get31PathParams
} & PortalContext['fetcherOptions']

export const fetchGet31 = (variables: Get31Variables) =>
  portalFetch<Schemas.RestResponseRole, Get31Error, undefined, {}, {}, Get31PathParams>({
    url: '/roles/{roleId}',
    method: 'get',
    ...variables
  })

export const useGet31 = (
  variables: Get31Variables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.RestResponseRole, Get31Error, Schemas.RestResponseRole>,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<Schemas.RestResponseRole, Get31Error, Schemas.RestResponseRole>(
    queryKeyFn({ path: '/roles/{roleId}', operationId: 'get31', variables }),
    () => fetchGet31({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type Update23PathParams = {
  roleId: string
}

export type Update23Error = Fetcher.ErrorWrapper<undefined>

export type Update23Variables = {
  body: RequestBodies.Role
  pathParams: Update23PathParams
} & PortalContext['fetcherOptions']

export const fetchUpdate23 = (variables: Update23Variables) =>
  portalFetch<Schemas.RestResponseRole, Update23Error, RequestBodies.Role, {}, {}, Update23PathParams>({
    url: '/roles/{roleId}',
    method: 'put',
    ...variables
  })

export const useUpdate23 = (
  options?: Omit<
    reactQuery.UseMutationOptions<Schemas.RestResponseRole, Update23Error, Update23Variables>,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<Schemas.RestResponseRole, Update23Error, Update23Variables>(
    (variables: Update23Variables) => fetchUpdate23({ ...fetcherOptions, ...variables }),
    options
  )
}

export type Delete22PathParams = {
  roleId: string
}

export type Delete22Error = Fetcher.ErrorWrapper<undefined>

export type Delete22Variables = {
  pathParams: Delete22PathParams
} & PortalContext['fetcherOptions']

export const fetchDelete22 = (variables: Delete22Variables) =>
  portalFetch<Schemas.RestResponse, Delete22Error, undefined, {}, {}, Delete22PathParams>({
    url: '/roles/{roleId}',
    method: 'delete',
    ...variables
  })

export const useDelete22 = (
  options?: Omit<reactQuery.UseMutationOptions<Schemas.RestResponse, Delete22Error, Delete22Variables>, 'mutationFn'>
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<Schemas.RestResponse, Delete22Error, Delete22Variables>(
    (variables: Delete22Variables) => fetchDelete22({ ...fetcherOptions, ...variables }),
    options
  )
}

export type List35QueryParams = {
  /*
   * @default 0
   */
  offset?: string
  limit?: string
  fieldsIncluded?: string[]
  fieldsExcluded?: string[]
  accountId?: string
}

export type List35Error = Fetcher.ErrorWrapper<undefined>

export type List35Variables = {
  queryParams?: List35QueryParams
} & PortalContext['fetcherOptions']

export const fetchList35 = (variables: List35Variables) =>
  portalFetch<Schemas.RestResponsePageResponseRole, List35Error, undefined, {}, List35QueryParams, {}>({
    url: '/roles',
    method: 'get',
    ...variables
  })

export const useList35 = (
  variables: List35Variables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.RestResponsePageResponseRole, List35Error, Schemas.RestResponsePageResponseRole>,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<Schemas.RestResponsePageResponseRole, List35Error, Schemas.RestResponsePageResponseRole>(
    queryKeyFn({ path: '/roles', operationId: 'list35', variables }),
    () => fetchList35({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type Save15Error = Fetcher.ErrorWrapper<undefined>

export type Save15Variables = {
  body: RequestBodies.Role
} & PortalContext['fetcherOptions']

export const fetchSave15 = (variables: Save15Variables) =>
  portalFetch<Schemas.RestResponseRole, Save15Error, RequestBodies.Role, {}, {}, {}>({
    url: '/roles',
    method: 'post',
    ...variables
  })

export const useSave15 = (
  options?: Omit<reactQuery.UseMutationOptions<Schemas.RestResponseRole, Save15Error, Save15Variables>, 'mutationFn'>
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<Schemas.RestResponseRole, Save15Error, Save15Variables>(
    (variables: Save15Variables) => fetchSave15({ ...fetcherOptions, ...variables }),
    options
  )
}

export type UpdateLogoutUrlSamlSettingsQueryParams = {
  accountId?: string
  logoutUrl?: string
}

export type UpdateLogoutUrlSamlSettingsError = Fetcher.ErrorWrapper<undefined>

export type UpdateLogoutUrlSamlSettingsVariables = {
  queryParams?: UpdateLogoutUrlSamlSettingsQueryParams
} & PortalContext['fetcherOptions']

export const fetchUpdateLogoutUrlSamlSettings = (variables: UpdateLogoutUrlSamlSettingsVariables) =>
  portalFetch<
    Schemas.RestResponseSSOConfig,
    UpdateLogoutUrlSamlSettingsError,
    undefined,
    {},
    UpdateLogoutUrlSamlSettingsQueryParams,
    {}
  >({ url: '/sso/saml-logout-url-upload', method: 'put', ...variables })

export const useUpdateLogoutUrlSamlSettings = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.RestResponseSSOConfig,
      UpdateLogoutUrlSamlSettingsError,
      UpdateLogoutUrlSamlSettingsVariables
    >,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<
    Schemas.RestResponseSSOConfig,
    UpdateLogoutUrlSamlSettingsError,
    UpdateLogoutUrlSamlSettingsVariables
  >(
    (variables: UpdateLogoutUrlSamlSettingsVariables) =>
      fetchUpdateLogoutUrlSamlSettings({ ...fetcherOptions, ...variables }),
    options
  )
}

export type GetAccountAccessManagementSettingsPathParams = {
  accountId: string
}

export type GetAccountAccessManagementSettingsError = Fetcher.ErrorWrapper<undefined>

export type GetAccountAccessManagementSettingsVariables = {
  pathParams: GetAccountAccessManagementSettingsPathParams
} & PortalContext['fetcherOptions']

export const fetchGetAccountAccessManagementSettings = (variables: GetAccountAccessManagementSettingsVariables) =>
  portalFetch<
    Schemas.RestResponseSSOConfig,
    GetAccountAccessManagementSettingsError,
    undefined,
    {},
    {},
    GetAccountAccessManagementSettingsPathParams
  >({ url: '/sso/access-management/{accountId}', method: 'get', ...variables })

export const useGetAccountAccessManagementSettings = (
  variables: GetAccountAccessManagementSettingsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponseSSOConfig,
      GetAccountAccessManagementSettingsError,
      Schemas.RestResponseSSOConfig
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponseSSOConfig,
    GetAccountAccessManagementSettingsError,
    Schemas.RestResponseSSOConfig
  >(
    queryKeyFn({
      path: '/sso/access-management/{accountId}',
      operationId: 'getAccountAccessManagementSettings',
      variables
    }),
    () => fetchGetAccountAccessManagementSettings({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type GetLdapSettingsQueryParams = {
  accountId?: string
}

export type GetLdapSettingsError = Fetcher.ErrorWrapper<undefined>

export type GetLdapSettingsVariables = {
  queryParams?: GetLdapSettingsQueryParams
} & PortalContext['fetcherOptions']

export const fetchGetLdapSettings = (variables: GetLdapSettingsVariables) =>
  portalFetch<Schemas.RestResponseLdapSettings, GetLdapSettingsError, undefined, {}, GetLdapSettingsQueryParams, {}>({
    url: '/sso/ldap/settings',
    method: 'get',
    ...variables
  })

export const useGetLdapSettings = (
  variables: GetLdapSettingsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponseLdapSettings,
      GetLdapSettingsError,
      Schemas.RestResponseLdapSettings
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<Schemas.RestResponseLdapSettings, GetLdapSettingsError, Schemas.RestResponseLdapSettings>(
    queryKeyFn({ path: '/sso/ldap/settings', operationId: 'getLdapSettings', variables }),
    () => fetchGetLdapSettings({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type CreateLdapSettingsQueryParams = {
  accountId?: string
}

export type CreateLdapSettingsError = Fetcher.ErrorWrapper<undefined>

export type CreateLdapSettingsVariables = {
  body: RequestBodies.LdapSettings
  queryParams?: CreateLdapSettingsQueryParams
} & PortalContext['fetcherOptions']

export const fetchCreateLdapSettings = (variables: CreateLdapSettingsVariables) =>
  portalFetch<
    Schemas.RestResponseLdapSettings,
    CreateLdapSettingsError,
    RequestBodies.LdapSettings,
    {},
    CreateLdapSettingsQueryParams,
    {}
  >({ url: '/sso/ldap/settings', method: 'post', ...variables })

export const useCreateLdapSettings = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.RestResponseLdapSettings,
      CreateLdapSettingsError,
      CreateLdapSettingsVariables
    >,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<Schemas.RestResponseLdapSettings, CreateLdapSettingsError, CreateLdapSettingsVariables>(
    (variables: CreateLdapSettingsVariables) => fetchCreateLdapSettings({ ...fetcherOptions, ...variables }),
    options
  )
}

export type UpdateLdapSettingsQueryParams = {
  accountId?: string
}

export type UpdateLdapSettingsError = Fetcher.ErrorWrapper<undefined>

export type UpdateLdapSettingsVariables = {
  body: RequestBodies.LdapSettings
  queryParams?: UpdateLdapSettingsQueryParams
} & PortalContext['fetcherOptions']

export const fetchUpdateLdapSettings = (variables: UpdateLdapSettingsVariables) =>
  portalFetch<
    Schemas.RestResponseLdapSettings,
    UpdateLdapSettingsError,
    RequestBodies.LdapSettings,
    {},
    UpdateLdapSettingsQueryParams,
    {}
  >({ url: '/sso/ldap/settings', method: 'put', ...variables })

export const useUpdateLdapSettings = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.RestResponseLdapSettings,
      UpdateLdapSettingsError,
      UpdateLdapSettingsVariables
    >,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<Schemas.RestResponseLdapSettings, UpdateLdapSettingsError, UpdateLdapSettingsVariables>(
    (variables: UpdateLdapSettingsVariables) => fetchUpdateLdapSettings({ ...fetcherOptions, ...variables }),
    options
  )
}

export type DeleteLdapSettingsQueryParams = {
  accountId?: string
}

export type DeleteLdapSettingsError = Fetcher.ErrorWrapper<undefined>

export type DeleteLdapSettingsVariables = {
  queryParams?: DeleteLdapSettingsQueryParams
} & PortalContext['fetcherOptions']

export const fetchDeleteLdapSettings = (variables: DeleteLdapSettingsVariables) =>
  portalFetch<
    Schemas.RestResponseLdapSettings,
    DeleteLdapSettingsError,
    undefined,
    {},
    DeleteLdapSettingsQueryParams,
    {}
  >({ url: '/sso/ldap/settings', method: 'delete', ...variables })

export const useDeleteLdapSettings = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.RestResponseLdapSettings,
      DeleteLdapSettingsError,
      DeleteLdapSettingsVariables
    >,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<Schemas.RestResponseLdapSettings, DeleteLdapSettingsError, DeleteLdapSettingsVariables>(
    (variables: DeleteLdapSettingsVariables) => fetchDeleteLdapSettings({ ...fetcherOptions, ...variables }),
    options
  )
}

export type ValidateLdapConnectionSettingsQueryParams = {
  accountId?: string
}

export type ValidateLdapConnectionSettingsError = Fetcher.ErrorWrapper<undefined>

export type ValidateLdapConnectionSettingsVariables = {
  body: RequestBodies.LdapSettings
  queryParams?: ValidateLdapConnectionSettingsQueryParams
} & PortalContext['fetcherOptions']

export const fetchValidateLdapConnectionSettings = (variables: ValidateLdapConnectionSettingsVariables) =>
  portalFetch<
    Schemas.RestResponseLdapTestResponse,
    ValidateLdapConnectionSettingsError,
    RequestBodies.LdapSettings,
    {},
    ValidateLdapConnectionSettingsQueryParams,
    {}
  >({ url: '/sso/ldap/settings/test/connection', method: 'post', ...variables })

export const useValidateLdapConnectionSettings = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.RestResponseLdapTestResponse,
      ValidateLdapConnectionSettingsError,
      ValidateLdapConnectionSettingsVariables
    >,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<
    Schemas.RestResponseLdapTestResponse,
    ValidateLdapConnectionSettingsError,
    ValidateLdapConnectionSettingsVariables
  >(
    (variables: ValidateLdapConnectionSettingsVariables) =>
      fetchValidateLdapConnectionSettings({ ...fetcherOptions, ...variables }),
    options
  )
}

export type ValidateLdapUserSettingsQueryParams = {
  accountId?: string
}

export type ValidateLdapUserSettingsError = Fetcher.ErrorWrapper<undefined>

export type ValidateLdapUserSettingsVariables = {
  body: RequestBodies.LdapSettings
  queryParams?: ValidateLdapUserSettingsQueryParams
} & PortalContext['fetcherOptions']

export const fetchValidateLdapUserSettings = (variables: ValidateLdapUserSettingsVariables) =>
  portalFetch<
    Schemas.RestResponseLdapTestResponse,
    ValidateLdapUserSettingsError,
    RequestBodies.LdapSettings,
    {},
    ValidateLdapUserSettingsQueryParams,
    {}
  >({ url: '/sso/ldap/settings/test/user', method: 'post', ...variables })

export const useValidateLdapUserSettings = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.RestResponseLdapTestResponse,
      ValidateLdapUserSettingsError,
      ValidateLdapUserSettingsVariables
    >,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<
    Schemas.RestResponseLdapTestResponse,
    ValidateLdapUserSettingsError,
    ValidateLdapUserSettingsVariables
  >(
    (variables: ValidateLdapUserSettingsVariables) =>
      fetchValidateLdapUserSettings({ ...fetcherOptions, ...variables }),
    options
  )
}

export type ValidateLdapGroupSettingsQueryParams = {
  accountId?: string
}

export type ValidateLdapGroupSettingsError = Fetcher.ErrorWrapper<undefined>

export type ValidateLdapGroupSettingsVariables = {
  body: RequestBodies.LdapSettings
  queryParams?: ValidateLdapGroupSettingsQueryParams
} & PortalContext['fetcherOptions']

export const fetchValidateLdapGroupSettings = (variables: ValidateLdapGroupSettingsVariables) =>
  portalFetch<
    Schemas.RestResponseLdapTestResponse,
    ValidateLdapGroupSettingsError,
    RequestBodies.LdapSettings,
    {},
    ValidateLdapGroupSettingsQueryParams,
    {}
  >({ url: '/sso/ldap/settings/test/group', method: 'post', ...variables })

export const useValidateLdapGroupSettings = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.RestResponseLdapTestResponse,
      ValidateLdapGroupSettingsError,
      ValidateLdapGroupSettingsVariables
    >,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<
    Schemas.RestResponseLdapTestResponse,
    ValidateLdapGroupSettingsError,
    ValidateLdapGroupSettingsVariables
  >(
    (variables: ValidateLdapGroupSettingsVariables) =>
      fetchValidateLdapGroupSettings({ ...fetcherOptions, ...variables }),
    options
  )
}

export type ValidateLdapAuthenticationQueryParams = {
  accountId?: string
}

export type ValidateLdapAuthenticationError = Fetcher.ErrorWrapper<undefined>

export type ValidateLdapAuthenticationVariables = {
  body?: RequestBodies.LDAPTestAuthenticationRequest
  queryParams?: ValidateLdapAuthenticationQueryParams
} & PortalContext['fetcherOptions']

export const fetchValidateLdapAuthentication = (variables: ValidateLdapAuthenticationVariables) =>
  portalFetch<
    Schemas.RestResponseLdapResponse,
    ValidateLdapAuthenticationError,
    RequestBodies.LDAPTestAuthenticationRequest,
    {},
    ValidateLdapAuthenticationQueryParams,
    {}
  >({ url: '/sso/ldap/settings/test/authentication', method: 'post', ...variables })

export const useValidateLdapAuthentication = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.RestResponseLdapResponse,
      ValidateLdapAuthenticationError,
      ValidateLdapAuthenticationVariables
    >,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<
    Schemas.RestResponseLdapResponse,
    ValidateLdapAuthenticationError,
    ValidateLdapAuthenticationVariables
  >(
    (variables: ValidateLdapAuthenticationVariables) =>
      fetchValidateLdapAuthentication({ ...fetcherOptions, ...variables }),
    options
  )
}

export type GetIterationsFromCronQueryParams = {
  accountId?: string
}

export type GetIterationsFromCronError = Fetcher.ErrorWrapper<undefined>

export type GetIterationsFromCronVariables = {
  body?: Schemas.CronExpressionRequest
  queryParams?: GetIterationsFromCronQueryParams
} & PortalContext['fetcherOptions']

export const fetchGetIterationsFromCron = (variables: GetIterationsFromCronVariables) =>
  portalFetch<
    Schemas.RestResponseListLong,
    GetIterationsFromCronError,
    Schemas.CronExpressionRequest,
    {},
    GetIterationsFromCronQueryParams,
    {}
  >({ url: '/sso/ldap/iterations', method: 'post', ...variables })

export const useGetIterationsFromCron = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.RestResponseListLong,
      GetIterationsFromCronError,
      GetIterationsFromCronVariables
    >,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<
    Schemas.RestResponseListLong,
    GetIterationsFromCronError,
    GetIterationsFromCronVariables
  >(
    (variables: GetIterationsFromCronVariables) => fetchGetIterationsFromCron({ ...fetcherOptions, ...variables }),
    options
  )
}

export type UploadSamlMetaDataQueryParams = {
  accountId?: string
}

export type UploadSamlMetaDataError = Fetcher.ErrorWrapper<undefined>

export type UploadSamlMetaDataVariables = {
  body?: RequestBodies.UploadSamlMetaData
  queryParams?: UploadSamlMetaDataQueryParams
} & PortalContext['fetcherOptions']

export const fetchUploadSamlMetaData = (variables: UploadSamlMetaDataVariables) =>
  portalFetch<
    Schemas.RestResponseSSOConfig,
    UploadSamlMetaDataError,
    RequestBodies.UploadSamlMetaData,
    {},
    UploadSamlMetaDataQueryParams,
    {}
  >({ url: '/sso/saml-idp-metadata-upload', method: 'post', ...variables })

export const useUploadSamlMetaData = (
  options?: Omit<
    reactQuery.UseMutationOptions<Schemas.RestResponseSSOConfig, UploadSamlMetaDataError, UploadSamlMetaDataVariables>,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<Schemas.RestResponseSSOConfig, UploadSamlMetaDataError, UploadSamlMetaDataVariables>(
    (variables: UploadSamlMetaDataVariables) => fetchUploadSamlMetaData({ ...fetcherOptions, ...variables }),
    options
  )
}

export type UpdateSamlMetaDataQueryParams = {
  accountId?: string
}

export type UpdateSamlMetaDataError = Fetcher.ErrorWrapper<undefined>

export type UpdateSamlMetaDataVariables = {
  body?: RequestBodies.UploadSamlMetaData
  queryParams?: UpdateSamlMetaDataQueryParams
} & PortalContext['fetcherOptions']

export const fetchUpdateSamlMetaData = (variables: UpdateSamlMetaDataVariables) =>
  portalFetch<
    Schemas.RestResponseSSOConfig,
    UpdateSamlMetaDataError,
    RequestBodies.UploadSamlMetaData,
    {},
    UpdateSamlMetaDataQueryParams,
    {}
  >({ url: '/sso/saml-idp-metadata-upload', method: 'put', ...variables })

export const useUpdateSamlMetaData = (
  options?: Omit<
    reactQuery.UseMutationOptions<Schemas.RestResponseSSOConfig, UpdateSamlMetaDataError, UpdateSamlMetaDataVariables>,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<Schemas.RestResponseSSOConfig, UpdateSamlMetaDataError, UpdateSamlMetaDataVariables>(
    (variables: UpdateSamlMetaDataVariables) => fetchUpdateSamlMetaData({ ...fetcherOptions, ...variables }),
    options
  )
}

export type UploadOathSettingsQueryParams = {
  accountId?: string
}

export type UploadOathSettingsError = Fetcher.ErrorWrapper<undefined>

export type UploadOathSettingsVariables = {
  body: RequestBodies.OauthSettings
  queryParams?: UploadOathSettingsQueryParams
} & PortalContext['fetcherOptions']

export const fetchUploadOathSettings = (variables: UploadOathSettingsVariables) =>
  portalFetch<
    Schemas.RestResponseSSOConfig,
    UploadOathSettingsError,
    RequestBodies.OauthSettings,
    {},
    UploadOathSettingsQueryParams,
    {}
  >({ url: '/sso/oauth-settings-upload', method: 'post', ...variables })

export const useUploadOathSettings = (
  options?: Omit<
    reactQuery.UseMutationOptions<Schemas.RestResponseSSOConfig, UploadOathSettingsError, UploadOathSettingsVariables>,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<Schemas.RestResponseSSOConfig, UploadOathSettingsError, UploadOathSettingsVariables>(
    (variables: UploadOathSettingsVariables) => fetchUploadOathSettings({ ...fetcherOptions, ...variables }),
    options
  )
}

export type UpdateOathSettingsQueryParams = {
  accountId?: string
}

export type UpdateOathSettingsError = Fetcher.ErrorWrapper<undefined>

export type UpdateOathSettingsVariables = {
  body: RequestBodies.OauthSettings
  queryParams?: UpdateOathSettingsQueryParams
} & PortalContext['fetcherOptions']

export const fetchUpdateOathSettings = (variables: UpdateOathSettingsVariables) =>
  portalFetch<
    Schemas.RestResponseOauthSettings,
    UpdateOathSettingsError,
    RequestBodies.OauthSettings,
    {},
    UpdateOathSettingsQueryParams,
    {}
  >({ url: '/sso/oauth-settings-upload', method: 'put', ...variables })

export const useUpdateOathSettings = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.RestResponseOauthSettings,
      UpdateOathSettingsError,
      UpdateOathSettingsVariables
    >,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<
    Schemas.RestResponseOauthSettings,
    UpdateOathSettingsError,
    UpdateOathSettingsVariables
  >((variables: UpdateOathSettingsVariables) => fetchUpdateOathSettings({ ...fetcherOptions, ...variables }), options)
}

export type DeleteOauthSettingsQueryParams = {
  accountId?: string
}

export type DeleteOauthSettingsError = Fetcher.ErrorWrapper<undefined>

export type DeleteOauthSettingsVariables = {
  queryParams?: DeleteOauthSettingsQueryParams
} & PortalContext['fetcherOptions']

export const fetchDeleteOauthSettings = (variables: DeleteOauthSettingsVariables) =>
  portalFetch<
    Schemas.RestResponseSSOConfig,
    DeleteOauthSettingsError,
    undefined,
    {},
    DeleteOauthSettingsQueryParams,
    {}
  >({ url: '/sso/delete-oauth-settings', method: 'delete', ...variables })

export const useDeleteOauthSettings = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.RestResponseSSOConfig,
      DeleteOauthSettingsError,
      DeleteOauthSettingsVariables
    >,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<Schemas.RestResponseSSOConfig, DeleteOauthSettingsError, DeleteOauthSettingsVariables>(
    (variables: DeleteOauthSettingsVariables) => fetchDeleteOauthSettings({ ...fetcherOptions, ...variables }),
    options
  )
}

export type DeleteSamlMetaDataQueryParams = {
  accountId?: string
}

export type DeleteSamlMetaDataError = Fetcher.ErrorWrapper<undefined>

export type DeleteSamlMetaDataVariables = {
  queryParams?: DeleteSamlMetaDataQueryParams
} & PortalContext['fetcherOptions']

export const fetchDeleteSamlMetaData = (variables: DeleteSamlMetaDataVariables) =>
  portalFetch<Schemas.RestResponseSSOConfig, DeleteSamlMetaDataError, undefined, {}, DeleteSamlMetaDataQueryParams, {}>(
    { url: '/sso/delete-saml-idp-metadata', method: 'delete', ...variables }
  )

export const useDeleteSamlMetaData = (
  options?: Omit<
    reactQuery.UseMutationOptions<Schemas.RestResponseSSOConfig, DeleteSamlMetaDataError, DeleteSamlMetaDataVariables>,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<Schemas.RestResponseSSOConfig, DeleteSamlMetaDataError, DeleteSamlMetaDataVariables>(
    (variables: DeleteSamlMetaDataVariables) => fetchDeleteSamlMetaData({ ...fetcherOptions, ...variables }),
    options
  )
}

export type SetAuthMechanismQueryParams = {
  accountId?: string
  authMechanism?: 'USER_PASSWORD' | 'SAML' | 'LDAP' | 'OAUTH'
}

export type SetAuthMechanismError = Fetcher.ErrorWrapper<undefined>

export type SetAuthMechanismVariables = {
  queryParams?: SetAuthMechanismQueryParams
} & PortalContext['fetcherOptions']

export const fetchSetAuthMechanism = (variables: SetAuthMechanismVariables) =>
  portalFetch<Schemas.RestResponseSSOConfig, SetAuthMechanismError, undefined, {}, SetAuthMechanismQueryParams, {}>({
    url: '/sso/assign-auth-mechanism',
    method: 'put',
    ...variables
  })

export const useSetAuthMechanism = (
  options?: Omit<
    reactQuery.UseMutationOptions<Schemas.RestResponseSSOConfig, SetAuthMechanismError, SetAuthMechanismVariables>,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<Schemas.RestResponseSSOConfig, SetAuthMechanismError, SetAuthMechanismVariables>(
    (variables: SetAuthMechanismVariables) => fetchSetAuthMechanism({ ...fetcherOptions, ...variables }),
    options
  )
}

export type EnableLdapAuthMechanismQueryParams = {
  accountId?: string
}

export type EnableLdapAuthMechanismError = Fetcher.ErrorWrapper<undefined>

export type EnableLdapAuthMechanismVariables = {
  body?: RequestBodies.LDAPTestAuthenticationRequest
  queryParams?: EnableLdapAuthMechanismQueryParams
} & PortalContext['fetcherOptions']

export const fetchEnableLdapAuthMechanism = (variables: EnableLdapAuthMechanismVariables) =>
  portalFetch<
    Schemas.RestResponseSSOConfig,
    EnableLdapAuthMechanismError,
    RequestBodies.LDAPTestAuthenticationRequest,
    {},
    EnableLdapAuthMechanismQueryParams,
    {}
  >({ url: '/sso/auth-mechanism/LDAP', method: 'put', ...variables })

export const useEnableLdapAuthMechanism = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.RestResponseSSOConfig,
      EnableLdapAuthMechanismError,
      EnableLdapAuthMechanismVariables
    >,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<
    Schemas.RestResponseSSOConfig,
    EnableLdapAuthMechanismError,
    EnableLdapAuthMechanismVariables
  >(
    (variables: EnableLdapAuthMechanismVariables) => fetchEnableLdapAuthMechanism({ ...fetcherOptions, ...variables }),
    options
  )
}

export type EnableSamlAuthMechanismQueryParams = {
  accountId?: string
}

export type EnableSamlAuthMechanismError = Fetcher.ErrorWrapper<undefined>

export type EnableSamlAuthMechanismVariables = {
  queryParams?: EnableSamlAuthMechanismQueryParams
} & PortalContext['fetcherOptions']

export const fetchEnableSamlAuthMechanism = (variables: EnableSamlAuthMechanismVariables) =>
  portalFetch<
    Schemas.RestResponseSSOConfig,
    EnableSamlAuthMechanismError,
    undefined,
    {},
    EnableSamlAuthMechanismQueryParams,
    {}
  >({ url: '/sso/auth-mechanism/SAML', method: 'put', ...variables })

export const useEnableSamlAuthMechanism = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.RestResponseSSOConfig,
      EnableSamlAuthMechanismError,
      EnableSamlAuthMechanismVariables
    >,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<
    Schemas.RestResponseSSOConfig,
    EnableSamlAuthMechanismError,
    EnableSamlAuthMechanismVariables
  >(
    (variables: EnableSamlAuthMechanismVariables) => fetchEnableSamlAuthMechanism({ ...fetcherOptions, ...variables }),
    options
  )
}

export type EnableOauthAuthMechanismQueryParams = {
  accountId?: string
}

export type EnableOauthAuthMechanismError = Fetcher.ErrorWrapper<undefined>

export type EnableOauthAuthMechanismVariables = {
  queryParams?: EnableOauthAuthMechanismQueryParams
} & PortalContext['fetcherOptions']

export const fetchEnableOauthAuthMechanism = (variables: EnableOauthAuthMechanismVariables) =>
  portalFetch<
    Schemas.RestResponseSSOConfig,
    EnableOauthAuthMechanismError,
    undefined,
    {},
    EnableOauthAuthMechanismQueryParams,
    {}
  >({ url: '/sso/auth-mechanism/OAUTH', method: 'put', ...variables })

export const useEnableOauthAuthMechanism = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.RestResponseSSOConfig,
      EnableOauthAuthMechanismError,
      EnableOauthAuthMechanismVariables
    >,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<
    Schemas.RestResponseSSOConfig,
    EnableOauthAuthMechanismError,
    EnableOauthAuthMechanismVariables
  >(
    (variables: EnableOauthAuthMechanismVariables) =>
      fetchEnableOauthAuthMechanism({ ...fetcherOptions, ...variables }),
    options
  )
}

export type EnableBasicAuthMechanismQueryParams = {
  accountId?: string
}

export type EnableBasicAuthMechanismError = Fetcher.ErrorWrapper<undefined>

export type EnableBasicAuthMechanismVariables = {
  queryParams?: EnableBasicAuthMechanismQueryParams
} & PortalContext['fetcherOptions']

export const fetchEnableBasicAuthMechanism = (variables: EnableBasicAuthMechanismVariables) =>
  portalFetch<
    Schemas.RestResponseSSOConfig,
    EnableBasicAuthMechanismError,
    undefined,
    {},
    EnableBasicAuthMechanismQueryParams,
    {}
  >({ url: '/sso/auth-mechanism/USER_PASSWORD', method: 'put', ...variables })

export const useEnableBasicAuthMechanism = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.RestResponseSSOConfig,
      EnableBasicAuthMechanismError,
      EnableBasicAuthMechanismVariables
    >,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<
    Schemas.RestResponseSSOConfig,
    EnableBasicAuthMechanismError,
    EnableBasicAuthMechanismVariables
  >(
    (variables: EnableBasicAuthMechanismVariables) =>
      fetchEnableBasicAuthMechanism({ ...fetcherOptions, ...variables }),
    options
  )
}

export type SearchLdapGroupsPathParams = {
  ldapId: string
}

export type SearchLdapGroupsQueryParams = {
  accountId?: string
  q?: string
}

export type SearchLdapGroupsError = Fetcher.ErrorWrapper<undefined>

export type SearchLdapGroupsVariables = {
  pathParams: SearchLdapGroupsPathParams
  queryParams?: SearchLdapGroupsQueryParams
} & PortalContext['fetcherOptions']

export const fetchSearchLdapGroups = (variables: SearchLdapGroupsVariables) =>
  portalFetch<
    Schemas.RestResponseCollectionLdapGroupResponse,
    SearchLdapGroupsError,
    undefined,
    {},
    SearchLdapGroupsQueryParams,
    SearchLdapGroupsPathParams
  >({ url: '/sso/ldap/{ldapId}/search/group', method: 'get', ...variables })

export const useSearchLdapGroups = (
  variables: SearchLdapGroupsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponseCollectionLdapGroupResponse,
      SearchLdapGroupsError,
      Schemas.RestResponseCollectionLdapGroupResponse
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponseCollectionLdapGroupResponse,
    SearchLdapGroupsError,
    Schemas.RestResponseCollectionLdapGroupResponse
  >(
    queryKeyFn({ path: '/sso/ldap/{ldapId}/search/group', operationId: 'searchLdapGroups', variables }),
    () => fetchSearchLdapGroups({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type GetSamlLoginTestQueryParams = {
  accountId?: string
}

export type GetSamlLoginTestError = Fetcher.ErrorWrapper<undefined>

export type GetSamlLoginTestVariables = {
  queryParams?: GetSamlLoginTestQueryParams
} & PortalContext['fetcherOptions']

export const fetchGetSamlLoginTest = (variables: GetSamlLoginTestVariables) =>
  portalFetch<
    Schemas.RestResponseLoginTypeResponse,
    GetSamlLoginTestError,
    undefined,
    {},
    GetSamlLoginTestQueryParams,
    {}
  >({ url: '/sso/saml-login-test', method: 'get', ...variables })

export const useGetSamlLoginTest = (
  variables: GetSamlLoginTestVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponseLoginTypeResponse,
      GetSamlLoginTestError,
      Schemas.RestResponseLoginTypeResponse
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponseLoginTypeResponse,
    GetSamlLoginTestError,
    Schemas.RestResponseLoginTypeResponse
  >(
    queryKeyFn({ path: '/sso/saml-login-test', operationId: 'getSamlLoginTest', variables }),
    () => fetchGetSamlLoginTest({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type Get32QueryParams = {
  accountId?: string
  feature?: string
}

export type Get32Error = Fetcher.ErrorWrapper<undefined>

export type Get32Variables = {
  queryParams?: Get32QueryParams
} & PortalContext['fetcherOptions']

export const fetchGet32 = (variables: Get32Variables) =>
  portalFetch<Schemas.RestResponseBoolean, Get32Error, undefined, {}, Get32QueryParams, {}>({
    url: '/cf-feature',
    method: 'get',
    ...variables
  })

export const useGet32 = (
  variables: Get32Variables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.RestResponseBoolean, Get32Error, Schemas.RestResponseBoolean>,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<Schemas.RestResponseBoolean, Get32Error, Schemas.RestResponseBoolean>(
    queryKeyFn({ path: '/cf-feature', operationId: 'get32', variables }),
    () => fetchGet32({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type Create4QueryParams = {
  accountId?: string
  country?: string
  /*
   * @format int32
   */
  population?: number
}

export type Create4Error = Fetcher.ErrorWrapper<undefined>

export type Create4Variables = {
  queryParams?: Create4QueryParams
} & PortalContext['fetcherOptions']

export const fetchCreate4 = (variables: Create4Variables) =>
  portalFetch<Schemas.RestResponseString, Create4Error, undefined, {}, Create4QueryParams, {}>({
    url: '/perpetual-task',
    method: 'post',
    ...variables
  })

export const useCreate4 = (
  options?: Omit<
    reactQuery.UseMutationOptions<Schemas.RestResponseString, Create4Error, Create4Variables>,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<Schemas.RestResponseString, Create4Error, Create4Variables>(
    (variables: Create4Variables) => fetchCreate4({ ...fetcherOptions, ...variables }),
    options
  )
}

export type Update24QueryParams = {
  accountId?: string
  taskId?: string
  country?: string
  /*
   * @format int32
   */
  population?: number
}

export type Update24Error = Fetcher.ErrorWrapper<undefined>

export type Update24Variables = {
  queryParams?: Update24QueryParams
} & PortalContext['fetcherOptions']

export const fetchUpdate24 = (variables: Update24Variables) =>
  portalFetch<Schemas.RestResponseBoolean, Update24Error, undefined, {}, Update24QueryParams, {}>({
    url: '/perpetual-task',
    method: 'put',
    ...variables
  })

export const useUpdate24 = (
  options?: Omit<
    reactQuery.UseMutationOptions<Schemas.RestResponseBoolean, Update24Error, Update24Variables>,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<Schemas.RestResponseBoolean, Update24Error, Update24Variables>(
    (variables: Update24Variables) => fetchUpdate24({ ...fetcherOptions, ...variables }),
    options
  )
}

export type GetGroupPathParams = {
  accountId: string
  groupId: string
}

export type GetGroupError = Fetcher.ErrorWrapper<undefined>

export type GetGroupVariables = {
  pathParams: GetGroupPathParams
} & PortalContext['fetcherOptions']

export const fetchGetGroup = (variables: GetGroupVariables) =>
  portalFetch<undefined, GetGroupError, undefined, {}, {}, GetGroupPathParams>({
    url: '/scim/account/{accountId}/Groups/{groupId}',
    method: 'get',
    ...variables
  })

export const useGetGroup = (
  variables: GetGroupVariables,
  options?: Omit<reactQuery.UseQueryOptions<undefined, GetGroupError, undefined>, 'queryKey' | 'queryFn'>
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<undefined, GetGroupError, undefined>(
    queryKeyFn({ path: '/scim/account/{accountId}/Groups/{groupId}', operationId: 'getGroup', variables }),
    () => fetchGetGroup({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type UpdateGroupPathParams = {
  accountId: string
  groupId: string
}

export type UpdateGroupError = Fetcher.ErrorWrapper<undefined>

export type UpdateGroupVariables = {
  body?: RequestBodies.ScimGroup
  pathParams: UpdateGroupPathParams
} & PortalContext['fetcherOptions']

export const fetchUpdateGroup = (variables: UpdateGroupVariables) =>
  portalFetch<undefined, UpdateGroupError, RequestBodies.ScimGroup, {}, {}, UpdateGroupPathParams>({
    url: '/scim/account/{accountId}/Groups/{groupId}',
    method: 'put',
    ...variables
  })

export const useUpdateGroup = (
  options?: Omit<reactQuery.UseMutationOptions<undefined, UpdateGroupError, UpdateGroupVariables>, 'mutationFn'>
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<undefined, UpdateGroupError, UpdateGroupVariables>(
    (variables: UpdateGroupVariables) => fetchUpdateGroup({ ...fetcherOptions, ...variables }),
    options
  )
}

export type DeleteGroupPathParams = {
  accountId: string
  groupId: string
}

export type DeleteGroupError = Fetcher.ErrorWrapper<undefined>

export type DeleteGroupVariables = {
  pathParams: DeleteGroupPathParams
} & PortalContext['fetcherOptions']

export const fetchDeleteGroup = (variables: DeleteGroupVariables) =>
  portalFetch<undefined, DeleteGroupError, undefined, {}, {}, DeleteGroupPathParams>({
    url: '/scim/account/{accountId}/Groups/{groupId}',
    method: 'delete',
    ...variables
  })

export const useDeleteGroup = (
  options?: Omit<reactQuery.UseMutationOptions<undefined, DeleteGroupError, DeleteGroupVariables>, 'mutationFn'>
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<undefined, DeleteGroupError, DeleteGroupVariables>(
    (variables: DeleteGroupVariables) => fetchDeleteGroup({ ...fetcherOptions, ...variables }),
    options
  )
}

export type UpdateGroup1PathParams = {
  accountId: string
  groupId: string
}

export type UpdateGroup1Error = Fetcher.ErrorWrapper<undefined>

export type UpdateGroup1Variables = {
  body: RequestBodies.PatchRequest
  pathParams: UpdateGroup1PathParams
} & PortalContext['fetcherOptions']

export const fetchUpdateGroup1 = (variables: UpdateGroup1Variables) =>
  portalFetch<undefined, UpdateGroup1Error, RequestBodies.PatchRequest, {}, {}, UpdateGroup1PathParams>({
    url: '/scim/account/{accountId}/Groups/{groupId}',
    method: 'patch',
    ...variables
  })

export const useUpdateGroup1 = (
  options?: Omit<reactQuery.UseMutationOptions<undefined, UpdateGroup1Error, UpdateGroup1Variables>, 'mutationFn'>
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<undefined, UpdateGroup1Error, UpdateGroup1Variables>(
    (variables: UpdateGroup1Variables) => fetchUpdateGroup1({ ...fetcherOptions, ...variables }),
    options
  )
}

export type SearchGroupPathParams = {
  accountId: string
}

export type SearchGroupQueryParams = {
  filter?: string
  /*
   * @format int32
   */
  count?: number
  /*
   * @format int32
   */
  startIndex?: number
}

export type SearchGroupError = Fetcher.ErrorWrapper<undefined>

export type SearchGroupVariables = {
  pathParams: SearchGroupPathParams
  queryParams?: SearchGroupQueryParams
} & PortalContext['fetcherOptions']

export const fetchSearchGroup = (variables: SearchGroupVariables) =>
  portalFetch<undefined, SearchGroupError, undefined, {}, SearchGroupQueryParams, SearchGroupPathParams>({
    url: '/scim/account/{accountId}/Groups',
    method: 'get',
    ...variables
  })

export const useSearchGroup = (
  variables: SearchGroupVariables,
  options?: Omit<reactQuery.UseQueryOptions<undefined, SearchGroupError, undefined>, 'queryKey' | 'queryFn'>
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<undefined, SearchGroupError, undefined>(
    queryKeyFn({ path: '/scim/account/{accountId}/Groups', operationId: 'searchGroup', variables }),
    () => fetchSearchGroup({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type CreateGroupPathParams = {
  accountId: string
}

export type CreateGroupError = Fetcher.ErrorWrapper<undefined>

export type CreateGroupVariables = {
  body?: RequestBodies.ScimGroup
  pathParams: CreateGroupPathParams
} & PortalContext['fetcherOptions']

export const fetchCreateGroup = (variables: CreateGroupVariables) =>
  portalFetch<undefined, CreateGroupError, RequestBodies.ScimGroup, {}, {}, CreateGroupPathParams>({
    url: '/scim/account/{accountId}/Groups',
    method: 'post',
    ...variables
  })

export const useCreateGroup = (
  options?: Omit<reactQuery.UseMutationOptions<undefined, CreateGroupError, CreateGroupVariables>, 'mutationFn'>
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<undefined, CreateGroupError, CreateGroupVariables>(
    (variables: CreateGroupVariables) => fetchCreateGroup({ ...fetcherOptions, ...variables }),
    options
  )
}

export type SearchUserPathParams = {
  accountId: string
}

export type SearchUserQueryParams = {
  filter?: string
  /*
   * @format int32
   */
  count?: number
  /*
   * @format int32
   */
  startIndex?: number
}

export type SearchUserError = Fetcher.ErrorWrapper<undefined>

export type SearchUserVariables = {
  pathParams: SearchUserPathParams
  queryParams?: SearchUserQueryParams
} & PortalContext['fetcherOptions']

export const fetchSearchUser = (variables: SearchUserVariables) =>
  portalFetch<undefined, SearchUserError, undefined, {}, SearchUserQueryParams, SearchUserPathParams>({
    url: '/scim/account/{accountId}/Users',
    method: 'get',
    ...variables
  })

export const useSearchUser = (
  variables: SearchUserVariables,
  options?: Omit<reactQuery.UseQueryOptions<undefined, SearchUserError, undefined>, 'queryKey' | 'queryFn'>
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<undefined, SearchUserError, undefined>(
    queryKeyFn({ path: '/scim/account/{accountId}/Users', operationId: 'searchUser', variables }),
    () => fetchSearchUser({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type CreateUserPathParams = {
  accountId: string
}

export type CreateUserError = Fetcher.ErrorWrapper<undefined>

export type CreateUserVariables = {
  body?: RequestBodies.ScimUser
  pathParams: CreateUserPathParams
} & PortalContext['fetcherOptions']

export const fetchCreateUser = (variables: CreateUserVariables) =>
  portalFetch<undefined, CreateUserError, RequestBodies.ScimUser, {}, {}, CreateUserPathParams>({
    url: '/scim/account/{accountId}/Users',
    method: 'post',
    ...variables
  })

export const useCreateUser = (
  options?: Omit<reactQuery.UseMutationOptions<undefined, CreateUserError, CreateUserVariables>, 'mutationFn'>
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<undefined, CreateUserError, CreateUserVariables>(
    (variables: CreateUserVariables) => fetchCreateUser({ ...fetcherOptions, ...variables }),
    options
  )
}

export type GetUser1PathParams = {
  userId: string
  accountId: string
}

export type GetUser1Error = Fetcher.ErrorWrapper<undefined>

export type GetUser1Variables = {
  pathParams: GetUser1PathParams
} & PortalContext['fetcherOptions']

export const fetchGetUser1 = (variables: GetUser1Variables) =>
  portalFetch<undefined, GetUser1Error, undefined, {}, {}, GetUser1PathParams>({
    url: '/scim/account/{accountId}/Users/{userId}',
    method: 'get',
    ...variables
  })

export const useGetUser1 = (
  variables: GetUser1Variables,
  options?: Omit<reactQuery.UseQueryOptions<undefined, GetUser1Error, undefined>, 'queryKey' | 'queryFn'>
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<undefined, GetUser1Error, undefined>(
    queryKeyFn({ path: '/scim/account/{accountId}/Users/{userId}', operationId: 'getUser1', variables }),
    () => fetchGetUser1({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type UpdateUser1PathParams = {
  userId: string
  accountId: string
}

export type UpdateUser1Error = Fetcher.ErrorWrapper<undefined>

export type UpdateUser1Variables = {
  body?: RequestBodies.ScimUser
  pathParams: UpdateUser1PathParams
} & PortalContext['fetcherOptions']

export const fetchUpdateUser1 = (variables: UpdateUser1Variables) =>
  portalFetch<undefined, UpdateUser1Error, RequestBodies.ScimUser, {}, {}, UpdateUser1PathParams>({
    url: '/scim/account/{accountId}/Users/{userId}',
    method: 'put',
    ...variables
  })

export const useUpdateUser1 = (
  options?: Omit<reactQuery.UseMutationOptions<undefined, UpdateUser1Error, UpdateUser1Variables>, 'mutationFn'>
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<undefined, UpdateUser1Error, UpdateUser1Variables>(
    (variables: UpdateUser1Variables) => fetchUpdateUser1({ ...fetcherOptions, ...variables }),
    options
  )
}

export type DeleteUserPathParams = {
  userId: string
  accountId: string
}

export type DeleteUserError = Fetcher.ErrorWrapper<undefined>

export type DeleteUserVariables = {
  pathParams: DeleteUserPathParams
} & PortalContext['fetcherOptions']

export const fetchDeleteUser = (variables: DeleteUserVariables) =>
  portalFetch<undefined, DeleteUserError, undefined, {}, {}, DeleteUserPathParams>({
    url: '/scim/account/{accountId}/Users/{userId}',
    method: 'delete',
    ...variables
  })

export const useDeleteUser = (
  options?: Omit<reactQuery.UseMutationOptions<undefined, DeleteUserError, DeleteUserVariables>, 'mutationFn'>
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<undefined, DeleteUserError, DeleteUserVariables>(
    (variables: DeleteUserVariables) => fetchDeleteUser({ ...fetcherOptions, ...variables }),
    options
  )
}

export type UpdateUserPathParams = {
  accountId: string
  userId: string
}

export type UpdateUserError = Fetcher.ErrorWrapper<undefined>

export type UpdateUserVariables = {
  body: RequestBodies.PatchRequest
  pathParams: UpdateUserPathParams
} & PortalContext['fetcherOptions']

export const fetchUpdateUser = (variables: UpdateUserVariables) =>
  portalFetch<undefined, UpdateUserError, RequestBodies.PatchRequest, {}, {}, UpdateUserPathParams>({
    url: '/scim/account/{accountId}/Users/{userId}',
    method: 'patch',
    ...variables
  })

export const useUpdateUser = (
  options?: Omit<reactQuery.UseMutationOptions<undefined, UpdateUserError, UpdateUserVariables>, 'mutationFn'>
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<undefined, UpdateUserError, UpdateUserVariables>(
    (variables: UpdateUserVariables) => fetchUpdateUser({ ...fetcherOptions, ...variables }),
    options
  )
}

export type GetSearchResultsQueryParams = {
  query?: string
  accountId?: string
}

export type GetSearchResultsError = Fetcher.ErrorWrapper<undefined>

export type GetSearchResultsVariables = {
  queryParams?: GetSearchResultsQueryParams
} & PortalContext['fetcherOptions']

export const fetchGetSearchResults = (variables: GetSearchResultsVariables) =>
  portalFetch<Schemas.RestResponseSearchResults, GetSearchResultsError, undefined, {}, GetSearchResultsQueryParams, {}>(
    { url: '/search', method: 'get', ...variables }
  )

export const useGetSearchResults = (
  variables: GetSearchResultsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponseSearchResults,
      GetSearchResultsError,
      Schemas.RestResponseSearchResults
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponseSearchResults,
    GetSearchResultsError,
    Schemas.RestResponseSearchResults
  >(
    queryKeyFn({ path: '/search', operationId: 'getSearchResults', variables }),
    () => fetchGetSearchResults({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type GetSearchResults1QueryParams = {
  accountId?: string
}

export type GetSearchResults1Error = Fetcher.ErrorWrapper<undefined>

export type GetSearchResults1Variables = {
  body?: Schemas.AdvancedSearchQuery
  queryParams?: GetSearchResults1QueryParams
} & PortalContext['fetcherOptions']

export const fetchGetSearchResults1 = (variables: GetSearchResults1Variables) =>
  portalFetch<
    Schemas.RestResponseSearchResults,
    GetSearchResults1Error,
    Schemas.AdvancedSearchQuery,
    {},
    GetSearchResults1QueryParams,
    {}
  >({ url: '/search/advanced', method: 'post', ...variables })

export const useGetSearchResults1 = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.RestResponseSearchResults,
      GetSearchResults1Error,
      GetSearchResults1Variables
    >,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<Schemas.RestResponseSearchResults, GetSearchResults1Error, GetSearchResults1Variables>(
    (variables: GetSearchResults1Variables) => fetchGetSearchResults1({ ...fetcherOptions, ...variables }),
    options
  )
}

export type GetServerInfoError = Fetcher.ErrorWrapper<undefined>

export type GetServerInfoVariables = PortalContext['fetcherOptions']

export const fetchGetServerInfo = (variables: GetServerInfoVariables) =>
  portalFetch<Schemas.RestResponseServerInfo, GetServerInfoError, undefined, {}, {}, {}>({
    url: '/server',
    method: 'get',
    ...variables
  })

export const useGetServerInfo = (
  variables: GetServerInfoVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.RestResponseServerInfo, GetServerInfoError, Schemas.RestResponseServerInfo>,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<Schemas.RestResponseServerInfo, GetServerInfoError, Schemas.RestResponseServerInfo>(
    queryKeyFn({ path: '/server', operationId: 'getServerInfo', variables }),
    () => fetchGetServerInfo({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type ManualSyncServerlessInfraMappingQueryParams = {
  accountId?: string
  appId?: string
  inframappingId?: string
}

export type ManualSyncServerlessInfraMappingError = Fetcher.ErrorWrapper<undefined>

export type ManualSyncServerlessInfraMappingVariables = {
  queryParams?: ManualSyncServerlessInfraMappingQueryParams
} & PortalContext['fetcherOptions']

export const fetchManualSyncServerlessInfraMapping = (variables: ManualSyncServerlessInfraMappingVariables) =>
  portalFetch<
    Schemas.RestResponseString,
    ManualSyncServerlessInfraMappingError,
    undefined,
    {},
    ManualSyncServerlessInfraMappingQueryParams,
    {}
  >({ url: '/serverless-dashboard/manual-sync', method: 'put', ...variables })

export const useManualSyncServerlessInfraMapping = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.RestResponseString,
      ManualSyncServerlessInfraMappingError,
      ManualSyncServerlessInfraMappingVariables
    >,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<
    Schemas.RestResponseString,
    ManualSyncServerlessInfraMappingError,
    ManualSyncServerlessInfraMappingVariables
  >(
    (variables: ManualSyncServerlessInfraMappingVariables) =>
      fetchManualSyncServerlessInfraMapping({ ...fetcherOptions, ...variables }),
    options
  )
}

export type GetAppInstanceSummaryStats1QueryParams = {
  accountId?: string
  appId?: string[]
  groupBy?: string[]
  /*
   * @format int64
   */
  timestamp?: number
}

export type GetAppInstanceSummaryStats1Error = Fetcher.ErrorWrapper<undefined>

export type GetAppInstanceSummaryStats1Variables = {
  queryParams?: GetAppInstanceSummaryStats1QueryParams
} & PortalContext['fetcherOptions']

export const fetchGetAppInstanceSummaryStats1 = (variables: GetAppInstanceSummaryStats1Variables) =>
  portalFetch<
    Schemas.RestResponseInstanceSummaryStats,
    GetAppInstanceSummaryStats1Error,
    undefined,
    {},
    GetAppInstanceSummaryStats1QueryParams,
    {}
  >({ url: '/serverless-dashboard/app-instance-summary-stats', method: 'get', ...variables })

export const useGetAppInstanceSummaryStats1 = (
  variables: GetAppInstanceSummaryStats1Variables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponseInstanceSummaryStats,
      GetAppInstanceSummaryStats1Error,
      Schemas.RestResponseInstanceSummaryStats
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponseInstanceSummaryStats,
    GetAppInstanceSummaryStats1Error,
    Schemas.RestResponseInstanceSummaryStats
  >(
    queryKeyFn({
      path: '/serverless-dashboard/app-instance-summary-stats',
      operationId: 'getAppInstanceSummaryStats1',
      variables
    }),
    () => fetchGetAppInstanceSummaryStats1({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type GetInstanceDetails1QueryParams = {
  accountId?: string
  instanceId?: string
}

export type GetInstanceDetails1Error = Fetcher.ErrorWrapper<undefined>

export type GetInstanceDetails1Variables = {
  queryParams?: GetInstanceDetails1QueryParams
} & PortalContext['fetcherOptions']

export const fetchGetInstanceDetails1 = (variables: GetInstanceDetails1Variables) =>
  portalFetch<
    Schemas.RestResponseServerlessInstance,
    GetInstanceDetails1Error,
    undefined,
    {},
    GetInstanceDetails1QueryParams,
    {}
  >({ url: '/serverless-dashboard/instance-details', method: 'get', ...variables })

export const useGetInstanceDetails1 = (
  variables: GetInstanceDetails1Variables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponseServerlessInstance,
      GetInstanceDetails1Error,
      Schemas.RestResponseServerlessInstance
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponseServerlessInstance,
    GetInstanceDetails1Error,
    Schemas.RestResponseServerlessInstance
  >(
    queryKeyFn({ path: '/serverless-dashboard/instance-details', operationId: 'getInstanceDetails1', variables }),
    () => fetchGetInstanceDetails1({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type GetServiceInstanceStats1QueryParams = {
  accountId?: string
  serviceId?: string
  /*
   * @format int64
   */
  timestamp?: number
}

export type GetServiceInstanceStats1Error = Fetcher.ErrorWrapper<undefined>

export type GetServiceInstanceStats1Variables = {
  queryParams?: GetServiceInstanceStats1QueryParams
} & PortalContext['fetcherOptions']

export const fetchGetServiceInstanceStats1 = (variables: GetServiceInstanceStats1Variables) =>
  portalFetch<
    Schemas.RestResponseListInstanceStatsByEnvironment,
    GetServiceInstanceStats1Error,
    undefined,
    {},
    GetServiceInstanceStats1QueryParams,
    {}
  >({ url: '/serverless-dashboard/service-instance-stats', method: 'get', ...variables })

export const useGetServiceInstanceStats1 = (
  variables: GetServiceInstanceStats1Variables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponseListInstanceStatsByEnvironment,
      GetServiceInstanceStats1Error,
      Schemas.RestResponseListInstanceStatsByEnvironment
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponseListInstanceStatsByEnvironment,
    GetServiceInstanceStats1Error,
    Schemas.RestResponseListInstanceStatsByEnvironment
  >(
    queryKeyFn({
      path: '/serverless-dashboard/service-instance-stats',
      operationId: 'getServiceInstanceStats1',
      variables
    }),
    () => fetchGetServiceInstanceStats1({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type GetAppInstanceCountStats1QueryParams = {
  accountId?: string
  appId?: string[]
  /*
   * @format int64
   */
  timestamp?: number
  /*
   * @format int32
   * @default -1
   */
  offset?: number
  /*
   * @format int32
   * @default -1
   */
  limit?: number
}

export type GetAppInstanceCountStats1Error = Fetcher.ErrorWrapper<undefined>

export type GetAppInstanceCountStats1Variables = {
  queryParams?: GetAppInstanceCountStats1QueryParams
} & PortalContext['fetcherOptions']

export const fetchGetAppInstanceCountStats1 = (variables: GetAppInstanceCountStats1Variables) =>
  portalFetch<
    Schemas.RestResponsePageResponseInstanceSummaryStatsByService,
    GetAppInstanceCountStats1Error,
    undefined,
    {},
    GetAppInstanceCountStats1QueryParams,
    {}
  >({ url: '/serverless-dashboard/app-instance-count-stats', method: 'get', ...variables })

export const useGetAppInstanceCountStats1 = (
  variables: GetAppInstanceCountStats1Variables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponsePageResponseInstanceSummaryStatsByService,
      GetAppInstanceCountStats1Error,
      Schemas.RestResponsePageResponseInstanceSummaryStatsByService
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponsePageResponseInstanceSummaryStatsByService,
    GetAppInstanceCountStats1Error,
    Schemas.RestResponsePageResponseInstanceSummaryStatsByService
  >(
    queryKeyFn({
      path: '/serverless-dashboard/app-instance-count-stats',
      operationId: 'getAppInstanceCountStats1',
      variables
    }),
    () => fetchGetAppInstanceCountStats1({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type GetManualSyncJobStatus1QueryParams = {
  accountId?: string
  jobs?: string[]
}

export type GetManualSyncJobStatus1Error = Fetcher.ErrorWrapper<undefined>

export type GetManualSyncJobStatus1Variables = {
  queryParams?: GetManualSyncJobStatus1QueryParams
} & PortalContext['fetcherOptions']

export const fetchGetManualSyncJobStatus1 = (variables: GetManualSyncJobStatus1Variables) =>
  portalFetch<
    Schemas.RestResponseListBoolean,
    GetManualSyncJobStatus1Error,
    undefined,
    {},
    GetManualSyncJobStatus1QueryParams,
    {}
  >({ url: '/serverless-dashboard/manual-sync-job', method: 'get', ...variables })

export const useGetManualSyncJobStatus1 = (
  variables: GetManualSyncJobStatus1Variables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponseListBoolean,
      GetManualSyncJobStatus1Error,
      Schemas.RestResponseListBoolean
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponseListBoolean,
    GetManualSyncJobStatus1Error,
    Schemas.RestResponseListBoolean
  >(
    queryKeyFn({ path: '/serverless-dashboard/manual-sync-job', operationId: 'getManualSyncJobStatus1', variables }),
    () => fetchGetManualSyncJobStatus1({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type GetInstanceStatsForGivenTime1QueryParams = {
  accountId?: string
  /*
   * @format int64
   */
  fromTsMillis?: number
  /*
   * @format int64
   */
  toTsMillis?: number
  /*
   * @default LAST_30_DAYS
   */
  invocation_count_key?: 'LAST_30_DAYS' | 'SINCE_LAST_DEPLOYED'
}

export type GetInstanceStatsForGivenTime1Error = Fetcher.ErrorWrapper<undefined>

export type GetInstanceStatsForGivenTime1Variables = {
  queryParams?: GetInstanceStatsForGivenTime1QueryParams
} & PortalContext['fetcherOptions']

export const fetchGetInstanceStatsForGivenTime1 = (variables: GetInstanceStatsForGivenTime1Variables) =>
  portalFetch<
    Schemas.RestResponseServerlessInstanceTimeline,
    GetInstanceStatsForGivenTime1Error,
    undefined,
    {},
    GetInstanceStatsForGivenTime1QueryParams,
    {}
  >({ url: '/serverless-dashboard/timeline', method: 'get', ...variables })

export const useGetInstanceStatsForGivenTime1 = (
  variables: GetInstanceStatsForGivenTime1Variables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponseServerlessInstanceTimeline,
      GetInstanceStatsForGivenTime1Error,
      Schemas.RestResponseServerlessInstanceTimeline
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponseServerlessInstanceTimeline,
    GetInstanceStatsForGivenTime1Error,
    Schemas.RestResponseServerlessInstanceTimeline
  >(
    queryKeyFn({ path: '/serverless-dashboard/timeline', operationId: 'getInstanceStatsForGivenTime1', variables }),
    () => fetchGetInstanceStatsForGivenTime1({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type GetTimeRanges1QueryParams = {
  accountId?: string
}

export type GetTimeRanges1Error = Fetcher.ErrorWrapper<undefined>

export type GetTimeRanges1Variables = {
  queryParams?: GetTimeRanges1QueryParams
} & PortalContext['fetcherOptions']

export const fetchGetTimeRanges1 = (variables: GetTimeRanges1Variables) =>
  portalFetch<Schemas.RestResponseListTimeRange, GetTimeRanges1Error, undefined, {}, GetTimeRanges1QueryParams, {}>({
    url: '/serverless-dashboard/instance-history-ranges',
    method: 'get',
    ...variables
  })

export const useGetTimeRanges1 = (
  variables: GetTimeRanges1Variables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponseListTimeRange,
      GetTimeRanges1Error,
      Schemas.RestResponseListTimeRange
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<Schemas.RestResponseListTimeRange, GetTimeRanges1Error, Schemas.RestResponseListTimeRange>(
    queryKeyFn({ path: '/serverless-dashboard/instance-history-ranges', operationId: 'getTimeRanges1', variables }),
    () => fetchGetTimeRanges1({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type List36QueryParams = {
  /*
   * @default 0
   */
  offset?: string
  limit?: string
  fieldsIncluded?: string[]
  fieldsExcluded?: string[]
}

export type List36Error = Fetcher.ErrorWrapper<undefined>

export type List36Variables = {
  queryParams?: List36QueryParams
} & PortalContext['fetcherOptions']

export const fetchList36 = (variables: List36Variables) =>
  portalFetch<Schemas.RestResponsePageResponseServiceInstance, List36Error, undefined, {}, List36QueryParams, {}>({
    url: '/service-instances',
    method: 'get',
    ...variables
  })

export const useList36 = (
  variables: List36Variables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponsePageResponseServiceInstance,
      List36Error,
      Schemas.RestResponsePageResponseServiceInstance
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponsePageResponseServiceInstance,
    List36Error,
    Schemas.RestResponsePageResponseServiceInstance
  >(
    queryKeyFn({ path: '/service-instances', operationId: 'list36', variables }),
    () => fetchList36({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type GetStatesPathParams = {
  connectorId: string
}

export type GetStatesQueryParams = {
  appId?: string
  accountId?: string
  ticketType?: 'INCIDENT' | 'PROBLEM' | 'CHANGE_REQUEST' | 'CHANGE_TASK'
}

export type GetStatesError = Fetcher.ErrorWrapper<undefined>

export type GetStatesVariables = {
  pathParams: GetStatesPathParams
  queryParams?: GetStatesQueryParams
} & PortalContext['fetcherOptions']

export const fetchGetStates = (variables: GetStatesVariables) =>
  portalFetch<Schemas.RestResponse, GetStatesError, undefined, {}, GetStatesQueryParams, GetStatesPathParams>({
    url: '/servicenow/{connectorId}/states',
    method: 'get',
    ...variables
  })

export const useGetStates = (
  variables: GetStatesVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.RestResponse, GetStatesError, Schemas.RestResponse>,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<Schemas.RestResponse, GetStatesError, Schemas.RestResponse>(
    queryKeyFn({ path: '/servicenow/{connectorId}/states', operationId: 'getStates', variables }),
    () => fetchGetStates({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type GetApprovalValuesPathParams = {
  connectorId: string
}

export type GetApprovalValuesQueryParams = {
  appId?: string
  accountId?: string
  ticketType?: 'INCIDENT' | 'PROBLEM' | 'CHANGE_REQUEST' | 'CHANGE_TASK'
}

export type GetApprovalValuesError = Fetcher.ErrorWrapper<undefined>

export type GetApprovalValuesVariables = {
  pathParams: GetApprovalValuesPathParams
  queryParams?: GetApprovalValuesQueryParams
} & PortalContext['fetcherOptions']

export const fetchGetApprovalValues = (variables: GetApprovalValuesVariables) =>
  portalFetch<
    Schemas.RestResponse,
    GetApprovalValuesError,
    undefined,
    {},
    GetApprovalValuesQueryParams,
    GetApprovalValuesPathParams
  >({ url: '/servicenow/{connectorId}/approvalstates', method: 'get', ...variables })

export const useGetApprovalValues = (
  variables: GetApprovalValuesVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.RestResponse, GetApprovalValuesError, Schemas.RestResponse>,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<Schemas.RestResponse, GetApprovalValuesError, Schemas.RestResponse>(
    queryKeyFn({ path: '/servicenow/{connectorId}/approvalstates', operationId: 'getApprovalValues', variables }),
    () => fetchGetApprovalValues({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type GetCreateMetaPathParams = {
  connectorId: string
}

export type GetCreateMetaQueryParams = {
  appId?: string
  accountId?: string
  ticketType?: 'INCIDENT' | 'PROBLEM' | 'CHANGE_REQUEST' | 'CHANGE_TASK'
}

export type GetCreateMetaError = Fetcher.ErrorWrapper<undefined>

export type GetCreateMetaVariables = {
  pathParams: GetCreateMetaPathParams
  queryParams?: GetCreateMetaQueryParams
} & PortalContext['fetcherOptions']

export const fetchGetCreateMeta = (variables: GetCreateMetaVariables) =>
  portalFetch<
    Schemas.RestResponse,
    GetCreateMetaError,
    undefined,
    {},
    GetCreateMetaQueryParams,
    GetCreateMetaPathParams
  >({ url: '/servicenow/{connectorId}/createMeta', method: 'get', ...variables })

export const useGetCreateMeta = (
  variables: GetCreateMetaVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.RestResponse, GetCreateMetaError, Schemas.RestResponse>,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<Schemas.RestResponse, GetCreateMetaError, Schemas.RestResponse>(
    queryKeyFn({ path: '/servicenow/{connectorId}/createMeta', operationId: 'getCreateMeta', variables }),
    () => fetchGetCreateMeta({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type GetAdditionalFieldsPathParams = {
  connectorId: string
}

export type GetAdditionalFieldsQueryParams = {
  appId?: string
  accountId?: string
  ticketType?: 'INCIDENT' | 'PROBLEM' | 'CHANGE_REQUEST' | 'CHANGE_TASK'
  typeFilter?: 'DATE_TIME' | 'INTEGER' | 'BOOLEAN' | 'STRING'
}

export type GetAdditionalFieldsError = Fetcher.ErrorWrapper<undefined>

export type GetAdditionalFieldsVariables = {
  pathParams: GetAdditionalFieldsPathParams
  queryParams?: GetAdditionalFieldsQueryParams
} & PortalContext['fetcherOptions']

export const fetchGetAdditionalFields = (variables: GetAdditionalFieldsVariables) =>
  portalFetch<
    Schemas.RestResponse,
    GetAdditionalFieldsError,
    undefined,
    {},
    GetAdditionalFieldsQueryParams,
    GetAdditionalFieldsPathParams
  >({ url: '/servicenow/{connectorId}/additionalFields', method: 'get', ...variables })

export const useGetAdditionalFields = (
  variables: GetAdditionalFieldsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.RestResponse, GetAdditionalFieldsError, Schemas.RestResponse>,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<Schemas.RestResponse, GetAdditionalFieldsError, Schemas.RestResponse>(
    queryKeyFn({ path: '/servicenow/{connectorId}/additionalFields', operationId: 'getAdditionalFields', variables }),
    () => fetchGetAdditionalFields({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type GetTicketTypesQueryParams = {
  appId?: string
  accountId?: string
}

export type GetTicketTypesError = Fetcher.ErrorWrapper<undefined>

export type GetTicketTypesVariables = {
  queryParams?: GetTicketTypesQueryParams
} & PortalContext['fetcherOptions']

export const fetchGetTicketTypes = (variables: GetTicketTypesVariables) =>
  portalFetch<Schemas.RestResponse, GetTicketTypesError, undefined, {}, GetTicketTypesQueryParams, {}>({
    url: '/servicenow/ticket-types',
    method: 'get',
    ...variables
  })

export const useGetTicketTypes = (
  variables: GetTicketTypesVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.RestResponse, GetTicketTypesError, Schemas.RestResponse>,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<Schemas.RestResponse, GetTicketTypesError, Schemas.RestResponse>(
    queryKeyFn({ path: '/servicenow/ticket-types', operationId: 'getTicketTypes', variables }),
    () => fetchGetTicketTypes({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type GetCommandPathParams = {
  serviceId: string
  commandName: string
}

export type GetCommandQueryParams = {
  appId?: string
  /*
   * @format int32
   */
  version?: number
}

export type GetCommandError = Fetcher.ErrorWrapper<undefined>

export type GetCommandVariables = {
  pathParams: GetCommandPathParams
  queryParams?: GetCommandQueryParams
} & PortalContext['fetcherOptions']

export const fetchGetCommand = (variables: GetCommandVariables) =>
  portalFetch<
    Schemas.RestResponseServiceCommand,
    GetCommandError,
    undefined,
    {},
    GetCommandQueryParams,
    GetCommandPathParams
  >({ url: '/services/{serviceId}/commands/{commandName}', method: 'get', ...variables })

export const useGetCommand = (
  variables: GetCommandVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.RestResponseServiceCommand, GetCommandError, Schemas.RestResponseServiceCommand>,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<Schemas.RestResponseServiceCommand, GetCommandError, Schemas.RestResponseServiceCommand>(
    queryKeyFn({ path: '/services/{serviceId}/commands/{commandName}', operationId: 'getCommand', variables }),
    () => fetchGetCommand({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type UpdateCommandPathParams = {
  serviceId: string
}

export type UpdateCommandQueryParams = {
  appId?: string
}

export type UpdateCommandError = Fetcher.ErrorWrapper<undefined>

export type UpdateCommandVariables = {
  body: RequestBodies.ServiceCommand
  pathParams: UpdateCommandPathParams
  queryParams?: UpdateCommandQueryParams
} & PortalContext['fetcherOptions']

export const fetchUpdateCommand = (variables: UpdateCommandVariables) =>
  portalFetch<
    Schemas.RestResponseService,
    UpdateCommandError,
    RequestBodies.ServiceCommand,
    {},
    UpdateCommandQueryParams,
    UpdateCommandPathParams
  >({ url: '/services/{serviceId}/commands/{commandName}', method: 'put', ...variables })

export const useUpdateCommand = (
  options?: Omit<
    reactQuery.UseMutationOptions<Schemas.RestResponseService, UpdateCommandError, UpdateCommandVariables>,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<Schemas.RestResponseService, UpdateCommandError, UpdateCommandVariables>(
    (variables: UpdateCommandVariables) => fetchUpdateCommand({ ...fetcherOptions, ...variables }),
    options
  )
}

export type GetPcfServiceSpecificationPathParams = {
  serviceId: string
}

export type GetPcfServiceSpecificationQueryParams = {
  appId?: string
  /*
   * @default 0
   */
  offset?: string
  limit?: string
  fieldsIncluded?: string[]
  fieldsExcluded?: string[]
}

export type GetPcfServiceSpecificationError = Fetcher.ErrorWrapper<undefined>

export type GetPcfServiceSpecificationVariables = {
  pathParams: GetPcfServiceSpecificationPathParams
  queryParams?: GetPcfServiceSpecificationQueryParams
} & PortalContext['fetcherOptions']

export const fetchGetPcfServiceSpecification = (variables: GetPcfServiceSpecificationVariables) =>
  portalFetch<
    Schemas.RestResponsePcfServiceSpecification,
    GetPcfServiceSpecificationError,
    undefined,
    {},
    GetPcfServiceSpecificationQueryParams,
    GetPcfServiceSpecificationPathParams
  >({ url: '/services/{serviceId}/pcfspecification', method: 'get', ...variables })

export const useGetPcfServiceSpecification = (
  variables: GetPcfServiceSpecificationVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponsePcfServiceSpecification,
      GetPcfServiceSpecificationError,
      Schemas.RestResponsePcfServiceSpecification
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponsePcfServiceSpecification,
    GetPcfServiceSpecificationError,
    Schemas.RestResponsePcfServiceSpecification
  >(
    queryKeyFn({
      path: '/services/{serviceId}/pcfspecification',
      operationId: 'getPcfServiceSpecification',
      variables
    }),
    () => fetchGetPcfServiceSpecification({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type CreatePcfServiceSpecificationPathParams = {
  serviceId: string
}

export type CreatePcfServiceSpecificationQueryParams = {
  appId?: string
}

export type CreatePcfServiceSpecificationError = Fetcher.ErrorWrapper<undefined>

export type CreatePcfServiceSpecificationVariables = {
  body: RequestBodies.PcfServiceSpecification
  pathParams: CreatePcfServiceSpecificationPathParams
  queryParams?: CreatePcfServiceSpecificationQueryParams
} & PortalContext['fetcherOptions']

export const fetchCreatePcfServiceSpecification = (variables: CreatePcfServiceSpecificationVariables) =>
  portalFetch<
    Schemas.RestResponsePcfServiceSpecification,
    CreatePcfServiceSpecificationError,
    RequestBodies.PcfServiceSpecification,
    {},
    CreatePcfServiceSpecificationQueryParams,
    CreatePcfServiceSpecificationPathParams
  >({ url: '/services/{serviceId}/pcfspecification', method: 'post', ...variables })

export const useCreatePcfServiceSpecification = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.RestResponsePcfServiceSpecification,
      CreatePcfServiceSpecificationError,
      CreatePcfServiceSpecificationVariables
    >,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<
    Schemas.RestResponsePcfServiceSpecification,
    CreatePcfServiceSpecificationError,
    CreatePcfServiceSpecificationVariables
  >(
    (variables: CreatePcfServiceSpecificationVariables) =>
      fetchCreatePcfServiceSpecification({ ...fetcherOptions, ...variables }),
    options
  )
}

export type GetEcsServiceSpecificationPathParams = {
  serviceId: string
}

export type GetEcsServiceSpecificationQueryParams = {
  appId?: string
  /*
   * @default 0
   */
  offset?: string
  limit?: string
  fieldsIncluded?: string[]
  fieldsExcluded?: string[]
}

export type GetEcsServiceSpecificationError = Fetcher.ErrorWrapper<undefined>

export type GetEcsServiceSpecificationVariables = {
  pathParams: GetEcsServiceSpecificationPathParams
  queryParams?: GetEcsServiceSpecificationQueryParams
} & PortalContext['fetcherOptions']

export const fetchGetEcsServiceSpecification = (variables: GetEcsServiceSpecificationVariables) =>
  portalFetch<
    Schemas.RestResponseEcsServiceSpecification,
    GetEcsServiceSpecificationError,
    undefined,
    {},
    GetEcsServiceSpecificationQueryParams,
    GetEcsServiceSpecificationPathParams
  >({ url: '/services/{serviceId}/ecsSpecification', method: 'get', ...variables })

export const useGetEcsServiceSpecification = (
  variables: GetEcsServiceSpecificationVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponseEcsServiceSpecification,
      GetEcsServiceSpecificationError,
      Schemas.RestResponseEcsServiceSpecification
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponseEcsServiceSpecification,
    GetEcsServiceSpecificationError,
    Schemas.RestResponseEcsServiceSpecification
  >(
    queryKeyFn({
      path: '/services/{serviceId}/ecsSpecification',
      operationId: 'getEcsServiceSpecification',
      variables
    }),
    () => fetchGetEcsServiceSpecification({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type CreateEcsServiceSpecificationPathParams = {
  serviceId: string
}

export type CreateEcsServiceSpecificationQueryParams = {
  appId?: string
}

export type CreateEcsServiceSpecificationError = Fetcher.ErrorWrapper<undefined>

export type CreateEcsServiceSpecificationVariables = {
  body: RequestBodies.EcsServiceSpecification
  pathParams: CreateEcsServiceSpecificationPathParams
  queryParams?: CreateEcsServiceSpecificationQueryParams
} & PortalContext['fetcherOptions']

export const fetchCreateEcsServiceSpecification = (variables: CreateEcsServiceSpecificationVariables) =>
  portalFetch<
    Schemas.RestResponseEcsServiceSpecification,
    CreateEcsServiceSpecificationError,
    RequestBodies.EcsServiceSpecification,
    {},
    CreateEcsServiceSpecificationQueryParams,
    CreateEcsServiceSpecificationPathParams
  >({ url: '/services/{serviceId}/ecsSpecification', method: 'post', ...variables })

export const useCreateEcsServiceSpecification = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.RestResponseEcsServiceSpecification,
      CreateEcsServiceSpecificationError,
      CreateEcsServiceSpecificationVariables
    >,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<
    Schemas.RestResponseEcsServiceSpecification,
    CreateEcsServiceSpecificationError,
    CreateEcsServiceSpecificationVariables
  >(
    (variables: CreateEcsServiceSpecificationVariables) =>
      fetchCreateEcsServiceSpecification({ ...fetcherOptions, ...variables }),
    options
  )
}

export type GetManifestFile1PathParams = {
  serviceId: string
  manifestFileId: string
}

export type GetManifestFile1QueryParams = {
  appId?: string
}

export type GetManifestFile1Error = Fetcher.ErrorWrapper<undefined>

export type GetManifestFile1Variables = {
  pathParams: GetManifestFile1PathParams
  queryParams?: GetManifestFile1QueryParams
} & PortalContext['fetcherOptions']

export const fetchGetManifestFile1 = (variables: GetManifestFile1Variables) =>
  portalFetch<
    Schemas.RestResponseManifestFile,
    GetManifestFile1Error,
    undefined,
    {},
    GetManifestFile1QueryParams,
    GetManifestFile1PathParams
  >({ url: '/services/{serviceId}/k8s-values/{manifestFileId}', method: 'get', ...variables })

export const useGetManifestFile1 = (
  variables: GetManifestFile1Variables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponseManifestFile,
      GetManifestFile1Error,
      Schemas.RestResponseManifestFile
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<Schemas.RestResponseManifestFile, GetManifestFile1Error, Schemas.RestResponseManifestFile>(
    queryKeyFn({
      path: '/services/{serviceId}/k8s-values/{manifestFileId}',
      operationId: 'getManifestFile1',
      variables
    }),
    () => fetchGetManifestFile1({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type UpdateManifestFile1PathParams = {
  serviceId: string
  manifestFileId: string
}

export type UpdateManifestFile1QueryParams = {
  appId?: string
  appManifestKind:
    | 'VALUES'
    | 'KUSTOMIZE_PATCHES'
    | 'K8S_MANIFEST'
    | 'PCF_OVERRIDE'
    | 'AZURE_APP_SERVICE_MANIFEST'
    | 'AZURE_APP_SETTINGS_OVERRIDE'
    | 'AZURE_CONN_STRINGS_OVERRIDE'
    | 'HELM_CHART_OVERRIDE'
    | 'OC_PARAMS'
}

export type UpdateManifestFile1Error = Fetcher.ErrorWrapper<undefined>

export type UpdateManifestFile1Variables = {
  body: RequestBodies.ManifestFile
  pathParams: UpdateManifestFile1PathParams
  queryParams: UpdateManifestFile1QueryParams
} & PortalContext['fetcherOptions']

export const fetchUpdateManifestFile1 = (variables: UpdateManifestFile1Variables) =>
  portalFetch<
    Schemas.RestResponseManifestFile,
    UpdateManifestFile1Error,
    RequestBodies.ManifestFile,
    {},
    UpdateManifestFile1QueryParams,
    UpdateManifestFile1PathParams
  >({ url: '/services/{serviceId}/k8s-values/{manifestFileId}', method: 'put', ...variables })

export const useUpdateManifestFile1 = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.RestResponseManifestFile,
      UpdateManifestFile1Error,
      UpdateManifestFile1Variables
    >,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<
    Schemas.RestResponseManifestFile,
    UpdateManifestFile1Error,
    UpdateManifestFile1Variables
  >((variables: UpdateManifestFile1Variables) => fetchUpdateManifestFile1({ ...fetcherOptions, ...variables }), options)
}

export type DeleteManifestFIle1PathParams = {
  serviceId: string
  manifestFileId: string
}

export type DeleteManifestFIle1QueryParams = {
  appId?: string
}

export type DeleteManifestFIle1Error = Fetcher.ErrorWrapper<undefined>

export type DeleteManifestFIle1Variables = {
  pathParams: DeleteManifestFIle1PathParams
  queryParams?: DeleteManifestFIle1QueryParams
} & PortalContext['fetcherOptions']

export const fetchDeleteManifestFIle1 = (variables: DeleteManifestFIle1Variables) =>
  portalFetch<
    Schemas.RestResponse,
    DeleteManifestFIle1Error,
    undefined,
    {},
    DeleteManifestFIle1QueryParams,
    DeleteManifestFIle1PathParams
  >({ url: '/services/{serviceId}/k8s-values/{manifestFileId}', method: 'delete', ...variables })

export const useDeleteManifestFIle1 = (
  options?: Omit<
    reactQuery.UseMutationOptions<Schemas.RestResponse, DeleteManifestFIle1Error, DeleteManifestFIle1Variables>,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<Schemas.RestResponse, DeleteManifestFIle1Error, DeleteManifestFIle1Variables>(
    (variables: DeleteManifestFIle1Variables) => fetchDeleteManifestFIle1({ ...fetcherOptions, ...variables }),
    options
  )
}

export type Get33PathParams = {
  serviceId: string
}

export type Get33QueryParams = {
  appId?: string
  status?: 'COMPLETE' | 'INCOMPLETE'
}

export type Get33Error = Fetcher.ErrorWrapper<undefined>

export type Get33Variables = {
  pathParams: Get33PathParams
  queryParams?: Get33QueryParams
} & PortalContext['fetcherOptions']

export const fetchGet33 = (variables: Get33Variables) =>
  portalFetch<Schemas.RestResponseService, Get33Error, undefined, {}, Get33QueryParams, Get33PathParams>({
    url: '/services/{serviceId}',
    method: 'get',
    ...variables
  })

export const useGet33 = (
  variables: Get33Variables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.RestResponseService, Get33Error, Schemas.RestResponseService>,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<Schemas.RestResponseService, Get33Error, Schemas.RestResponseService>(
    queryKeyFn({ path: '/services/{serviceId}', operationId: 'get33', variables }),
    () => fetchGet33({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type Update25PathParams = {
  serviceId: string
}

export type Update25QueryParams = {
  appId?: string
}

export type Update25Error = Fetcher.ErrorWrapper<undefined>

export type Update25Variables = {
  body: RequestBodies.Service
  pathParams: Update25PathParams
  queryParams?: Update25QueryParams
} & PortalContext['fetcherOptions']

export const fetchUpdate25 = (variables: Update25Variables) =>
  portalFetch<
    Schemas.RestResponseService,
    Update25Error,
    RequestBodies.Service,
    {},
    Update25QueryParams,
    Update25PathParams
  >({ url: '/services/{serviceId}', method: 'put', ...variables })

export const useUpdate25 = (
  options?: Omit<
    reactQuery.UseMutationOptions<Schemas.RestResponseService, Update25Error, Update25Variables>,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<Schemas.RestResponseService, Update25Error, Update25Variables>(
    (variables: Update25Variables) => fetchUpdate25({ ...fetcherOptions, ...variables }),
    options
  )
}

export type Delete23PathParams = {
  serviceId: string
}

export type Delete23QueryParams = {
  appId?: string
}

export type Delete23Error = Fetcher.ErrorWrapper<undefined>

export type Delete23Variables = {
  pathParams: Delete23PathParams
  queryParams?: Delete23QueryParams
} & PortalContext['fetcherOptions']

export const fetchDelete23 = (variables: Delete23Variables) =>
  portalFetch<Schemas.RestResponse, Delete23Error, undefined, {}, Delete23QueryParams, Delete23PathParams>({
    url: '/services/{serviceId}',
    method: 'delete',
    ...variables
  })

export const useDelete23 = (
  options?: Omit<reactQuery.UseMutationOptions<Schemas.RestResponse, Delete23Error, Delete23Variables>, 'mutationFn'>
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<Schemas.RestResponse, Delete23Error, Delete23Variables>(
    (variables: Delete23Variables) => fetchDelete23({ ...fetcherOptions, ...variables }),
    options
  )
}

export type Clone2PathParams = {
  serviceId: string
}

export type Clone2QueryParams = {
  appId?: string
}

export type Clone2Error = Fetcher.ErrorWrapper<undefined>

export type Clone2Variables = {
  body: RequestBodies.Service
  pathParams: Clone2PathParams
  queryParams?: Clone2QueryParams
} & PortalContext['fetcherOptions']

export const fetchClone2 = (variables: Clone2Variables) =>
  portalFetch<Schemas.RestResponseService, Clone2Error, RequestBodies.Service, {}, Clone2QueryParams, Clone2PathParams>(
    { url: '/services/{serviceId}/clone', method: 'post', ...variables }
  )

export const useClone2 = (
  options?: Omit<reactQuery.UseMutationOptions<Schemas.RestResponseService, Clone2Error, Clone2Variables>, 'mutationFn'>
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<Schemas.RestResponseService, Clone2Error, Clone2Variables>(
    (variables: Clone2Variables) => fetchClone2({ ...fetcherOptions, ...variables }),
    options
  )
}

export type List37QueryParams = {
  accountId?: string
  appId?: string[]
  tagFilter?: string
  /*
   * @default false
   */
  withTags?: boolean
  /*
   * @default 0
   */
  offset?: string
  limit?: string
  fieldsIncluded?: string[]
  fieldsExcluded?: string[]
  /*
   * @default true
   */
  details?: boolean
}

export type List37Error = Fetcher.ErrorWrapper<undefined>

export type List37Variables = {
  queryParams?: List37QueryParams
} & PortalContext['fetcherOptions']

export const fetchList37 = (variables: List37Variables) =>
  portalFetch<Schemas.RestResponsePageResponseService, List37Error, undefined, {}, List37QueryParams, {}>({
    url: '/services',
    method: 'get',
    ...variables
  })

export const useList37 = (
  variables: List37Variables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponsePageResponseService,
      List37Error,
      Schemas.RestResponsePageResponseService
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponsePageResponseService,
    List37Error,
    Schemas.RestResponsePageResponseService
  >(
    queryKeyFn({ path: '/services', operationId: 'list37', variables }),
    () => fetchList37({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type Save16QueryParams = {
  appId?: string
}

export type Save16Error = Fetcher.ErrorWrapper<undefined>

export type Save16Variables = {
  body: RequestBodies.Service
  queryParams?: Save16QueryParams
} & PortalContext['fetcherOptions']

export const fetchSave16 = (variables: Save16Variables) =>
  portalFetch<Schemas.RestResponseService, Save16Error, RequestBodies.Service, {}, Save16QueryParams, {}>({
    url: '/services',
    method: 'post',
    ...variables
  })

export const useSave16 = (
  options?: Omit<reactQuery.UseMutationOptions<Schemas.RestResponseService, Save16Error, Save16Variables>, 'mutationFn'>
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<Schemas.RestResponseService, Save16Error, Save16Variables>(
    (variables: Save16Variables) => fetchSave16({ ...fetcherOptions, ...variables }),
    options
  )
}

export type ListArtifactStreamsPathParams = {
  serviceId: string
}

export type ListArtifactStreamsQueryParams = {
  appId?: string
}

export type ListArtifactStreamsError = Fetcher.ErrorWrapper<undefined>

export type ListArtifactStreamsVariables = {
  pathParams: ListArtifactStreamsPathParams
  queryParams?: ListArtifactStreamsQueryParams
} & PortalContext['fetcherOptions']

export const fetchListArtifactStreams = (variables: ListArtifactStreamsVariables) =>
  portalFetch<
    Schemas.RestResponseListArtifactStream,
    ListArtifactStreamsError,
    undefined,
    {},
    ListArtifactStreamsQueryParams,
    ListArtifactStreamsPathParams
  >({ url: '/services/{serviceId}/artifact-streams', method: 'get', ...variables })

export const useListArtifactStreams = (
  variables: ListArtifactStreamsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponseListArtifactStream,
      ListArtifactStreamsError,
      Schemas.RestResponseListArtifactStream
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponseListArtifactStream,
    ListArtifactStreamsError,
    Schemas.RestResponseListArtifactStream
  >(
    queryKeyFn({ path: '/services/{serviceId}/artifact-streams', operationId: 'listArtifactStreams', variables }),
    () => fetchListArtifactStreams({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type GetServicesQueryParams = {
  appId?: string
  deploymentType?: string
  deploymentTypeTemplateId?: string
}

export type GetServicesError = Fetcher.ErrorWrapper<undefined>

export type GetServicesVariables = {
  queryParams?: GetServicesQueryParams
} & PortalContext['fetcherOptions']

export const fetchGetServices = (variables: GetServicesVariables) =>
  portalFetch<Schemas.RestResponseListService, GetServicesError, undefined, {}, GetServicesQueryParams, {}>({
    url: '/services/forDeployment',
    method: 'get',
    ...variables
  })

export const useGetServices = (
  variables: GetServicesVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.RestResponseListService, GetServicesError, Schemas.RestResponseListService>,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<Schemas.RestResponseListService, GetServicesError, Schemas.RestResponseListService>(
    queryKeyFn({ path: '/services/forDeployment', operationId: 'getServices', variables }),
    () => fetchGetServices({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type Stencils1PathParams = {
  serviceId: string
}

export type Stencils1QueryParams = {
  appId?: string
  filterCommand?: string
}

export type Stencils1Error = Fetcher.ErrorWrapper<undefined>

export type Stencils1Variables = {
  pathParams: Stencils1PathParams
  queryParams?: Stencils1QueryParams
} & PortalContext['fetcherOptions']

export const fetchStencils1 = (variables: Stencils1Variables) =>
  portalFetch<
    Schemas.RestResponseListStencil,
    Stencils1Error,
    undefined,
    {},
    Stencils1QueryParams,
    Stencils1PathParams
  >({ url: '/services/{serviceId}/commands/stencils', method: 'get', ...variables })

export const useStencils1 = (
  variables: Stencils1Variables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.RestResponseListStencil, Stencils1Error, Schemas.RestResponseListStencil>,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<Schemas.RestResponseListStencil, Stencils1Error, Schemas.RestResponseListStencil>(
    queryKeyFn({ path: '/services/{serviceId}/commands/stencils', operationId: 'stencils1', variables }),
    () => fetchStencils1({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type SaveCommandPathParams = {
  serviceId: string
}

export type SaveCommandQueryParams = {
  appId: string
}

export type SaveCommandError = Fetcher.ErrorWrapper<undefined>

export type SaveCommandVariables = {
  body: Schemas.ServiceCommand
  pathParams: SaveCommandPathParams
  queryParams: SaveCommandQueryParams
} & PortalContext['fetcherOptions']

export const fetchSaveCommand = (variables: SaveCommandVariables) =>
  portalFetch<
    Schemas.RestResponseService,
    SaveCommandError,
    Schemas.ServiceCommand,
    {},
    SaveCommandQueryParams,
    SaveCommandPathParams
  >({ url: '/services/{serviceId}/commands', method: 'post', ...variables })

export const useSaveCommand = (
  options?: Omit<
    reactQuery.UseMutationOptions<Schemas.RestResponseService, SaveCommandError, SaveCommandVariables>,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<Schemas.RestResponseService, SaveCommandError, SaveCommandVariables>(
    (variables: SaveCommandVariables) => fetchSaveCommand({ ...fetcherOptions, ...variables }),
    options
  )
}

export type UpdateCommandsPathParams = {
  serviceId: string
}

export type UpdateCommandsQueryParams = {
  appId: string
}

export type UpdateCommandsError = Fetcher.ErrorWrapper<undefined>

export type UpdateCommandsRequestBody = Schemas.ServiceCommand[]

export type UpdateCommandsVariables = {
  body?: UpdateCommandsRequestBody
  pathParams: UpdateCommandsPathParams
  queryParams: UpdateCommandsQueryParams
} & PortalContext['fetcherOptions']

export const fetchUpdateCommands = (variables: UpdateCommandsVariables) =>
  portalFetch<
    Schemas.RestResponseService,
    UpdateCommandsError,
    UpdateCommandsRequestBody,
    {},
    UpdateCommandsQueryParams,
    UpdateCommandsPathParams
  >({ url: '/services/{serviceId}/commands', method: 'put', ...variables })

export const useUpdateCommands = (
  options?: Omit<
    reactQuery.UseMutationOptions<Schemas.RestResponseService, UpdateCommandsError, UpdateCommandsVariables>,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<Schemas.RestResponseService, UpdateCommandsError, UpdateCommandsVariables>(
    (variables: UpdateCommandsVariables) => fetchUpdateCommands({ ...fetcherOptions, ...variables }),
    options
  )
}

export type CloneCommandPathParams = {
  serviceId: string
  commandName: string
}

export type CloneCommandQueryParams = {
  appId?: string
}

export type CloneCommandError = Fetcher.ErrorWrapper<undefined>

export type CloneCommandVariables = {
  body: RequestBodies.ServiceCommand
  pathParams: CloneCommandPathParams
  queryParams?: CloneCommandQueryParams
} & PortalContext['fetcherOptions']

export const fetchCloneCommand = (variables: CloneCommandVariables) =>
  portalFetch<
    Schemas.RestResponseService,
    CloneCommandError,
    RequestBodies.ServiceCommand,
    {},
    CloneCommandQueryParams,
    CloneCommandPathParams
  >({ url: '/services/{serviceId}/commands/{commandName}/clone', method: 'post', ...variables })

export const useCloneCommand = (
  options?: Omit<
    reactQuery.UseMutationOptions<Schemas.RestResponseService, CloneCommandError, CloneCommandVariables>,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<Schemas.RestResponseService, CloneCommandError, CloneCommandVariables>(
    (variables: CloneCommandVariables) => fetchCloneCommand({ ...fetcherOptions, ...variables }),
    options
  )
}

export type DeleteCommandPathParams = {
  serviceId: string
  serviceCommandId: string
}

export type DeleteCommandQueryParams = {
  appId?: string
}

export type DeleteCommandError = Fetcher.ErrorWrapper<undefined>

export type DeleteCommandVariables = {
  pathParams: DeleteCommandPathParams
  queryParams?: DeleteCommandQueryParams
} & PortalContext['fetcherOptions']

export const fetchDeleteCommand = (variables: DeleteCommandVariables) =>
  portalFetch<
    Schemas.RestResponseService,
    DeleteCommandError,
    undefined,
    {},
    DeleteCommandQueryParams,
    DeleteCommandPathParams
  >({ url: '/services/{serviceId}/commands/{serviceCommandId}', method: 'delete', ...variables })

export const useDeleteCommand = (
  options?: Omit<
    reactQuery.UseMutationOptions<Schemas.RestResponseService, DeleteCommandError, DeleteCommandVariables>,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<Schemas.RestResponseService, DeleteCommandError, DeleteCommandVariables>(
    (variables: DeleteCommandVariables) => fetchDeleteCommand({ ...fetcherOptions, ...variables }),
    options
  )
}

export type ListContainerTaskPathParams = {
  serviceId: string
}

export type ListContainerTaskQueryParams = {
  appId?: string
  /*
   * @default 0
   */
  offset?: string
  limit?: string
  fieldsIncluded?: string[]
  fieldsExcluded?: string[]
}

export type ListContainerTaskError = Fetcher.ErrorWrapper<undefined>

export type ListContainerTaskVariables = {
  pathParams: ListContainerTaskPathParams
  queryParams?: ListContainerTaskQueryParams
} & PortalContext['fetcherOptions']

export const fetchListContainerTask = (variables: ListContainerTaskVariables) =>
  portalFetch<
    Schemas.RestResponsePageResponseContainerTask,
    ListContainerTaskError,
    undefined,
    {},
    ListContainerTaskQueryParams,
    ListContainerTaskPathParams
  >({ url: '/services/{serviceId}/containers/tasks', method: 'get', ...variables })

export const useListContainerTask = (
  variables: ListContainerTaskVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponsePageResponseContainerTask,
      ListContainerTaskError,
      Schemas.RestResponsePageResponseContainerTask
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponsePageResponseContainerTask,
    ListContainerTaskError,
    Schemas.RestResponsePageResponseContainerTask
  >(
    queryKeyFn({ path: '/services/{serviceId}/containers/tasks', operationId: 'listContainerTask', variables }),
    () => fetchListContainerTask({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type CreateContainerTaskPathParams = {
  serviceId: string
}

export type CreateContainerTaskQueryParams = {
  appId?: string
  advanced?: boolean
}

export type CreateContainerTaskError = Fetcher.ErrorWrapper<undefined>

export type CreateContainerTaskVariables = {
  body: RequestBodies.ContainerTask
  pathParams: CreateContainerTaskPathParams
  queryParams?: CreateContainerTaskQueryParams
} & PortalContext['fetcherOptions']

export const fetchCreateContainerTask = (variables: CreateContainerTaskVariables) =>
  portalFetch<
    Schemas.RestResponseContainerTask,
    CreateContainerTaskError,
    RequestBodies.ContainerTask,
    {},
    CreateContainerTaskQueryParams,
    CreateContainerTaskPathParams
  >({ url: '/services/{serviceId}/containers/tasks', method: 'post', ...variables })

export const useCreateContainerTask = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.RestResponseContainerTask,
      CreateContainerTaskError,
      CreateContainerTaskVariables
    >,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<
    Schemas.RestResponseContainerTask,
    CreateContainerTaskError,
    CreateContainerTaskVariables
  >((variables: CreateContainerTaskVariables) => fetchCreateContainerTask({ ...fetcherOptions, ...variables }), options)
}

export type UpdateContainerTaskPathParams = {
  serviceId: string
  taskId: string
}

export type UpdateContainerTaskQueryParams = {
  appId?: string
  advanced?: boolean
}

export type UpdateContainerTaskError = Fetcher.ErrorWrapper<undefined>

export type UpdateContainerTaskVariables = {
  body: RequestBodies.ContainerTask
  pathParams: UpdateContainerTaskPathParams
  queryParams?: UpdateContainerTaskQueryParams
} & PortalContext['fetcherOptions']

export const fetchUpdateContainerTask = (variables: UpdateContainerTaskVariables) =>
  portalFetch<
    Schemas.RestResponseContainerTask,
    UpdateContainerTaskError,
    RequestBodies.ContainerTask,
    {},
    UpdateContainerTaskQueryParams,
    UpdateContainerTaskPathParams
  >({ url: '/services/{serviceId}/containers/tasks/{taskId}', method: 'put', ...variables })

export const useUpdateContainerTask = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.RestResponseContainerTask,
      UpdateContainerTaskError,
      UpdateContainerTaskVariables
    >,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<
    Schemas.RestResponseContainerTask,
    UpdateContainerTaskError,
    UpdateContainerTaskVariables
  >((variables: UpdateContainerTaskVariables) => fetchUpdateContainerTask({ ...fetcherOptions, ...variables }), options)
}

export type UpdateContainerTaskAdvancedPathParams = {
  serviceId: string
  taskId: string
}

export type UpdateContainerTaskAdvancedQueryParams = {
  appId?: string
  reset?: boolean
}

export type UpdateContainerTaskAdvancedError = Fetcher.ErrorWrapper<undefined>

export type UpdateContainerTaskAdvancedVariables = {
  body?: RequestBodies.KubernetesPayload
  pathParams: UpdateContainerTaskAdvancedPathParams
  queryParams?: UpdateContainerTaskAdvancedQueryParams
} & PortalContext['fetcherOptions']

export const fetchUpdateContainerTaskAdvanced = (variables: UpdateContainerTaskAdvancedVariables) =>
  portalFetch<
    Schemas.RestResponseContainerTask,
    UpdateContainerTaskAdvancedError,
    RequestBodies.KubernetesPayload,
    {},
    UpdateContainerTaskAdvancedQueryParams,
    UpdateContainerTaskAdvancedPathParams
  >({ url: '/services/{serviceId}/containers/tasks/{taskId}/advanced', method: 'put', ...variables })

export const useUpdateContainerTaskAdvanced = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.RestResponseContainerTask,
      UpdateContainerTaskAdvancedError,
      UpdateContainerTaskAdvancedVariables
    >,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<
    Schemas.RestResponseContainerTask,
    UpdateContainerTaskAdvancedError,
    UpdateContainerTaskAdvancedVariables
  >(
    (variables: UpdateContainerTaskAdvancedVariables) =>
      fetchUpdateContainerTaskAdvanced({ ...fetcherOptions, ...variables }),
    options
  )
}

export type ListTaskStencilsPathParams = {
  serviceId: string
}

export type ListTaskStencilsQueryParams = {
  appId?: string
}

export type ListTaskStencilsError = Fetcher.ErrorWrapper<undefined>

export type ListTaskStencilsVariables = {
  pathParams: ListTaskStencilsPathParams
  queryParams?: ListTaskStencilsQueryParams
} & PortalContext['fetcherOptions']

export const fetchListTaskStencils = (variables: ListTaskStencilsVariables) =>
  portalFetch<
    Schemas.RestResponseListStencil,
    ListTaskStencilsError,
    undefined,
    {},
    ListTaskStencilsQueryParams,
    ListTaskStencilsPathParams
  >({ url: '/services/{serviceId}/containers/tasks/stencils', method: 'get', ...variables })

export const useListTaskStencils = (
  variables: ListTaskStencilsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.RestResponseListStencil, ListTaskStencilsError, Schemas.RestResponseListStencil>,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<Schemas.RestResponseListStencil, ListTaskStencilsError, Schemas.RestResponseListStencil>(
    queryKeyFn({ path: '/services/{serviceId}/containers/tasks/stencils', operationId: 'listTaskStencils', variables }),
    () => fetchListTaskStencils({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type ListHelmChartSpecificationPathParams = {
  serviceId: string
}

export type ListHelmChartSpecificationQueryParams = {
  appId?: string
  /*
   * @default 0
   */
  offset?: string
  limit?: string
  fieldsIncluded?: string[]
  fieldsExcluded?: string[]
}

export type ListHelmChartSpecificationError = Fetcher.ErrorWrapper<undefined>

export type ListHelmChartSpecificationVariables = {
  pathParams: ListHelmChartSpecificationPathParams
  queryParams?: ListHelmChartSpecificationQueryParams
} & PortalContext['fetcherOptions']

export const fetchListHelmChartSpecification = (variables: ListHelmChartSpecificationVariables) =>
  portalFetch<
    Schemas.RestResponsePageResponseHelmChartSpecification,
    ListHelmChartSpecificationError,
    undefined,
    {},
    ListHelmChartSpecificationQueryParams,
    ListHelmChartSpecificationPathParams
  >({ url: '/services/{serviceId}/containers/charts', method: 'get', ...variables })

export const useListHelmChartSpecification = (
  variables: ListHelmChartSpecificationVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponsePageResponseHelmChartSpecification,
      ListHelmChartSpecificationError,
      Schemas.RestResponsePageResponseHelmChartSpecification
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponsePageResponseHelmChartSpecification,
    ListHelmChartSpecificationError,
    Schemas.RestResponsePageResponseHelmChartSpecification
  >(
    queryKeyFn({
      path: '/services/{serviceId}/containers/charts',
      operationId: 'listHelmChartSpecification',
      variables
    }),
    () => fetchListHelmChartSpecification({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type CreateHelmChartSpecificationPathParams = {
  serviceId: string
}

export type CreateHelmChartSpecificationQueryParams = {
  appId?: string
}

export type CreateHelmChartSpecificationError = Fetcher.ErrorWrapper<undefined>

export type CreateHelmChartSpecificationVariables = {
  body: RequestBodies.HelmChartSpecification
  pathParams: CreateHelmChartSpecificationPathParams
  queryParams?: CreateHelmChartSpecificationQueryParams
} & PortalContext['fetcherOptions']

export const fetchCreateHelmChartSpecification = (variables: CreateHelmChartSpecificationVariables) =>
  portalFetch<
    Schemas.RestResponseHelmChartSpecification,
    CreateHelmChartSpecificationError,
    RequestBodies.HelmChartSpecification,
    {},
    CreateHelmChartSpecificationQueryParams,
    CreateHelmChartSpecificationPathParams
  >({ url: '/services/{serviceId}/containers/charts', method: 'post', ...variables })

export const useCreateHelmChartSpecification = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.RestResponseHelmChartSpecification,
      CreateHelmChartSpecificationError,
      CreateHelmChartSpecificationVariables
    >,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<
    Schemas.RestResponseHelmChartSpecification,
    CreateHelmChartSpecificationError,
    CreateHelmChartSpecificationVariables
  >(
    (variables: CreateHelmChartSpecificationVariables) =>
      fetchCreateHelmChartSpecification({ ...fetcherOptions, ...variables }),
    options
  )
}

export type UpdateHelmChartSpecificationPathParams = {
  serviceId: string
  taskId: string
}

export type UpdateHelmChartSpecificationQueryParams = {
  appId?: string
}

export type UpdateHelmChartSpecificationError = Fetcher.ErrorWrapper<undefined>

export type UpdateHelmChartSpecificationVariables = {
  body: RequestBodies.HelmChartSpecification
  pathParams: UpdateHelmChartSpecificationPathParams
  queryParams?: UpdateHelmChartSpecificationQueryParams
} & PortalContext['fetcherOptions']

export const fetchUpdateHelmChartSpecification = (variables: UpdateHelmChartSpecificationVariables) =>
  portalFetch<
    Schemas.RestResponseHelmChartSpecification,
    UpdateHelmChartSpecificationError,
    RequestBodies.HelmChartSpecification,
    {},
    UpdateHelmChartSpecificationQueryParams,
    UpdateHelmChartSpecificationPathParams
  >({ url: '/services/{serviceId}/containers/charts/{taskId}', method: 'put', ...variables })

export const useUpdateHelmChartSpecification = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.RestResponseHelmChartSpecification,
      UpdateHelmChartSpecificationError,
      UpdateHelmChartSpecificationVariables
    >,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<
    Schemas.RestResponseHelmChartSpecification,
    UpdateHelmChartSpecificationError,
    UpdateHelmChartSpecificationVariables
  >(
    (variables: UpdateHelmChartSpecificationVariables) =>
      fetchUpdateHelmChartSpecification({ ...fetcherOptions, ...variables }),
    options
  )
}

export type UpdatePcfServiceSpecificationPathParams = {
  serviceId: string
  pcfSpecificationId: string
}

export type UpdatePcfServiceSpecificationQueryParams = {
  appId?: string
}

export type UpdatePcfServiceSpecificationError = Fetcher.ErrorWrapper<undefined>

export type UpdatePcfServiceSpecificationVariables = {
  body: RequestBodies.PcfServiceSpecification
  pathParams: UpdatePcfServiceSpecificationPathParams
  queryParams?: UpdatePcfServiceSpecificationQueryParams
} & PortalContext['fetcherOptions']

export const fetchUpdatePcfServiceSpecification = (variables: UpdatePcfServiceSpecificationVariables) =>
  portalFetch<
    Schemas.RestResponsePcfServiceSpecification,
    UpdatePcfServiceSpecificationError,
    RequestBodies.PcfServiceSpecification,
    {},
    UpdatePcfServiceSpecificationQueryParams,
    UpdatePcfServiceSpecificationPathParams
  >({ url: '/services/{serviceId}/pcfspecification/{pcfSpecificationId}', method: 'put', ...variables })

export const useUpdatePcfServiceSpecification = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.RestResponsePcfServiceSpecification,
      UpdatePcfServiceSpecificationError,
      UpdatePcfServiceSpecificationVariables
    >,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<
    Schemas.RestResponsePcfServiceSpecification,
    UpdatePcfServiceSpecificationError,
    UpdatePcfServiceSpecificationVariables
  >(
    (variables: UpdatePcfServiceSpecificationVariables) =>
      fetchUpdatePcfServiceSpecification({ ...fetcherOptions, ...variables }),
    options
  )
}

export type ResetToDefaultPcfServiceSpecificationPathParams = {
  serviceId: string
}

export type ResetToDefaultPcfServiceSpecificationQueryParams = {
  appId?: string
}

export type ResetToDefaultPcfServiceSpecificationError = Fetcher.ErrorWrapper<undefined>

export type ResetToDefaultPcfServiceSpecificationVariables = {
  body: RequestBodies.PcfServiceSpecification
  pathParams: ResetToDefaultPcfServiceSpecificationPathParams
  queryParams?: ResetToDefaultPcfServiceSpecificationQueryParams
} & PortalContext['fetcherOptions']

export const fetchResetToDefaultPcfServiceSpecification = (variables: ResetToDefaultPcfServiceSpecificationVariables) =>
  portalFetch<
    Schemas.RestResponsePcfServiceSpecification,
    ResetToDefaultPcfServiceSpecificationError,
    RequestBodies.PcfServiceSpecification,
    {},
    ResetToDefaultPcfServiceSpecificationQueryParams,
    ResetToDefaultPcfServiceSpecificationPathParams
  >({ url: '/services/{serviceId}/pcfspecification/reset', method: 'put', ...variables })

export const useResetToDefaultPcfServiceSpecification = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.RestResponsePcfServiceSpecification,
      ResetToDefaultPcfServiceSpecificationError,
      ResetToDefaultPcfServiceSpecificationVariables
    >,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<
    Schemas.RestResponsePcfServiceSpecification,
    ResetToDefaultPcfServiceSpecificationError,
    ResetToDefaultPcfServiceSpecificationVariables
  >(
    (variables: ResetToDefaultPcfServiceSpecificationVariables) =>
      fetchResetToDefaultPcfServiceSpecification({ ...fetcherOptions, ...variables }),
    options
  )
}

export type UpdateEcsServiceSpecificationPathParams = {
  serviceId: string
  ecsSpecificationId: string
}

export type UpdateEcsServiceSpecificationQueryParams = {
  appId?: string
}

export type UpdateEcsServiceSpecificationError = Fetcher.ErrorWrapper<undefined>

export type UpdateEcsServiceSpecificationVariables = {
  body: RequestBodies.EcsServiceSpecification
  pathParams: UpdateEcsServiceSpecificationPathParams
  queryParams?: UpdateEcsServiceSpecificationQueryParams
} & PortalContext['fetcherOptions']

export const fetchUpdateEcsServiceSpecification = (variables: UpdateEcsServiceSpecificationVariables) =>
  portalFetch<
    Schemas.RestResponseEcsServiceSpecification,
    UpdateEcsServiceSpecificationError,
    RequestBodies.EcsServiceSpecification,
    {},
    UpdateEcsServiceSpecificationQueryParams,
    UpdateEcsServiceSpecificationPathParams
  >({ url: '/services/{serviceId}/ecsSpecification/{ecsSpecificationId}', method: 'put', ...variables })

export const useUpdateEcsServiceSpecification = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.RestResponseEcsServiceSpecification,
      UpdateEcsServiceSpecificationError,
      UpdateEcsServiceSpecificationVariables
    >,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<
    Schemas.RestResponseEcsServiceSpecification,
    UpdateEcsServiceSpecificationError,
    UpdateEcsServiceSpecificationVariables
  >(
    (variables: UpdateEcsServiceSpecificationVariables) =>
      fetchUpdateEcsServiceSpecification({ ...fetcherOptions, ...variables }),
    options
  )
}

export type ResetToDefaultEcsServiceSpecificationPathParams = {
  serviceId: string
}

export type ResetToDefaultEcsServiceSpecificationQueryParams = {
  appId?: string
}

export type ResetToDefaultEcsServiceSpecificationError = Fetcher.ErrorWrapper<undefined>

export type ResetToDefaultEcsServiceSpecificationVariables = {
  pathParams: ResetToDefaultEcsServiceSpecificationPathParams
  queryParams?: ResetToDefaultEcsServiceSpecificationQueryParams
} & PortalContext['fetcherOptions']

export const fetchResetToDefaultEcsServiceSpecification = (variables: ResetToDefaultEcsServiceSpecificationVariables) =>
  portalFetch<
    Schemas.RestResponseEcsServiceSpecification,
    ResetToDefaultEcsServiceSpecificationError,
    undefined,
    {},
    ResetToDefaultEcsServiceSpecificationQueryParams,
    ResetToDefaultEcsServiceSpecificationPathParams
  >({ url: '/services/{serviceId}/ecsSpecification/reset', method: 'put', ...variables })

export const useResetToDefaultEcsServiceSpecification = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.RestResponseEcsServiceSpecification,
      ResetToDefaultEcsServiceSpecificationError,
      ResetToDefaultEcsServiceSpecificationVariables
    >,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<
    Schemas.RestResponseEcsServiceSpecification,
    ResetToDefaultEcsServiceSpecificationError,
    ResetToDefaultEcsServiceSpecificationVariables
  >(
    (variables: ResetToDefaultEcsServiceSpecificationVariables) =>
      fetchResetToDefaultEcsServiceSpecification({ ...fetcherOptions, ...variables }),
    options
  )
}

export type ListLambdaSpecificationPathParams = {
  serviceId: string
}

export type ListLambdaSpecificationQueryParams = {
  appId?: string
  /*
   * @default 0
   */
  offset?: string
  limit?: string
  fieldsIncluded?: string[]
  fieldsExcluded?: string[]
}

export type ListLambdaSpecificationError = Fetcher.ErrorWrapper<undefined>

export type ListLambdaSpecificationVariables = {
  pathParams: ListLambdaSpecificationPathParams
  queryParams?: ListLambdaSpecificationQueryParams
} & PortalContext['fetcherOptions']

export const fetchListLambdaSpecification = (variables: ListLambdaSpecificationVariables) =>
  portalFetch<
    Schemas.RestResponsePageResponseLambdaSpecification,
    ListLambdaSpecificationError,
    undefined,
    {},
    ListLambdaSpecificationQueryParams,
    ListLambdaSpecificationPathParams
  >({ url: '/services/{serviceId}/lambda-specifications', method: 'get', ...variables })

export const useListLambdaSpecification = (
  variables: ListLambdaSpecificationVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponsePageResponseLambdaSpecification,
      ListLambdaSpecificationError,
      Schemas.RestResponsePageResponseLambdaSpecification
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponsePageResponseLambdaSpecification,
    ListLambdaSpecificationError,
    Schemas.RestResponsePageResponseLambdaSpecification
  >(
    queryKeyFn({
      path: '/services/{serviceId}/lambda-specifications',
      operationId: 'listLambdaSpecification',
      variables
    }),
    () => fetchListLambdaSpecification({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type CreateLambdaSpecificationPathParams = {
  serviceId: string
}

export type CreateLambdaSpecificationQueryParams = {
  appId?: string
}

export type CreateLambdaSpecificationError = Fetcher.ErrorWrapper<undefined>

export type CreateLambdaSpecificationVariables = {
  body: RequestBodies.LambdaSpecification
  pathParams: CreateLambdaSpecificationPathParams
  queryParams?: CreateLambdaSpecificationQueryParams
} & PortalContext['fetcherOptions']

export const fetchCreateLambdaSpecification = (variables: CreateLambdaSpecificationVariables) =>
  portalFetch<
    Schemas.RestResponseLambdaSpecification,
    CreateLambdaSpecificationError,
    RequestBodies.LambdaSpecification,
    {},
    CreateLambdaSpecificationQueryParams,
    CreateLambdaSpecificationPathParams
  >({ url: '/services/{serviceId}/lambda-specifications', method: 'post', ...variables })

export const useCreateLambdaSpecification = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.RestResponseLambdaSpecification,
      CreateLambdaSpecificationError,
      CreateLambdaSpecificationVariables
    >,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<
    Schemas.RestResponseLambdaSpecification,
    CreateLambdaSpecificationError,
    CreateLambdaSpecificationVariables
  >(
    (variables: CreateLambdaSpecificationVariables) =>
      fetchCreateLambdaSpecification({ ...fetcherOptions, ...variables }),
    options
  )
}

export type UpdateLambdaSpecificationPathParams = {
  serviceId: string
  lambdaSpecificationId: string
}

export type UpdateLambdaSpecificationQueryParams = {
  appId?: string
}

export type UpdateLambdaSpecificationError = Fetcher.ErrorWrapper<undefined>

export type UpdateLambdaSpecificationVariables = {
  body: RequestBodies.LambdaSpecification
  pathParams: UpdateLambdaSpecificationPathParams
  queryParams?: UpdateLambdaSpecificationQueryParams
} & PortalContext['fetcherOptions']

export const fetchUpdateLambdaSpecification = (variables: UpdateLambdaSpecificationVariables) =>
  portalFetch<
    Schemas.RestResponseLambdaSpecification,
    UpdateLambdaSpecificationError,
    RequestBodies.LambdaSpecification,
    {},
    UpdateLambdaSpecificationQueryParams,
    UpdateLambdaSpecificationPathParams
  >({ url: '/services/{serviceId}/lambda-specifications/{lambdaSpecificationId}', method: 'put', ...variables })

export const useUpdateLambdaSpecification = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.RestResponseLambdaSpecification,
      UpdateLambdaSpecificationError,
      UpdateLambdaSpecificationVariables
    >,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<
    Schemas.RestResponseLambdaSpecification,
    UpdateLambdaSpecificationError,
    UpdateLambdaSpecificationVariables
  >(
    (variables: UpdateLambdaSpecificationVariables) =>
      fetchUpdateLambdaSpecification({ ...fetcherOptions, ...variables }),
    options
  )
}

export type ListUserDataSpecificationPathParams = {
  serviceId: string
}

export type ListUserDataSpecificationQueryParams = {
  appId?: string
  /*
   * @default 0
   */
  offset?: string
  limit?: string
  fieldsIncluded?: string[]
  fieldsExcluded?: string[]
}

export type ListUserDataSpecificationError = Fetcher.ErrorWrapper<undefined>

export type ListUserDataSpecificationVariables = {
  pathParams: ListUserDataSpecificationPathParams
  queryParams?: ListUserDataSpecificationQueryParams
} & PortalContext['fetcherOptions']

export const fetchListUserDataSpecification = (variables: ListUserDataSpecificationVariables) =>
  portalFetch<
    Schemas.RestResponsePageResponseUserDataSpecification,
    ListUserDataSpecificationError,
    undefined,
    {},
    ListUserDataSpecificationQueryParams,
    ListUserDataSpecificationPathParams
  >({ url: '/services/{serviceId}/user-data-specifications', method: 'get', ...variables })

export const useListUserDataSpecification = (
  variables: ListUserDataSpecificationVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponsePageResponseUserDataSpecification,
      ListUserDataSpecificationError,
      Schemas.RestResponsePageResponseUserDataSpecification
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponsePageResponseUserDataSpecification,
    ListUserDataSpecificationError,
    Schemas.RestResponsePageResponseUserDataSpecification
  >(
    queryKeyFn({
      path: '/services/{serviceId}/user-data-specifications',
      operationId: 'listUserDataSpecification',
      variables
    }),
    () => fetchListUserDataSpecification({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type CreateUserDataSpecificationPathParams = {
  serviceId: string
}

export type CreateUserDataSpecificationQueryParams = {
  appId?: string
}

export type CreateUserDataSpecificationError = Fetcher.ErrorWrapper<undefined>

export type CreateUserDataSpecificationVariables = {
  body: RequestBodies.UserDataSpecification
  pathParams: CreateUserDataSpecificationPathParams
  queryParams?: CreateUserDataSpecificationQueryParams
} & PortalContext['fetcherOptions']

export const fetchCreateUserDataSpecification = (variables: CreateUserDataSpecificationVariables) =>
  portalFetch<
    Schemas.RestResponseUserDataSpecification,
    CreateUserDataSpecificationError,
    RequestBodies.UserDataSpecification,
    {},
    CreateUserDataSpecificationQueryParams,
    CreateUserDataSpecificationPathParams
  >({ url: '/services/{serviceId}/user-data-specifications', method: 'post', ...variables })

export const useCreateUserDataSpecification = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.RestResponseUserDataSpecification,
      CreateUserDataSpecificationError,
      CreateUserDataSpecificationVariables
    >,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<
    Schemas.RestResponseUserDataSpecification,
    CreateUserDataSpecificationError,
    CreateUserDataSpecificationVariables
  >(
    (variables: CreateUserDataSpecificationVariables) =>
      fetchCreateUserDataSpecification({ ...fetcherOptions, ...variables }),
    options
  )
}

export type UpdateUserDataSpecificationPathParams = {
  serviceId: string
  userDataSpecificationId: string
}

export type UpdateUserDataSpecificationQueryParams = {
  appId?: string
}

export type UpdateUserDataSpecificationError = Fetcher.ErrorWrapper<undefined>

export type UpdateUserDataSpecificationVariables = {
  body: RequestBodies.UserDataSpecification
  pathParams: UpdateUserDataSpecificationPathParams
  queryParams?: UpdateUserDataSpecificationQueryParams
} & PortalContext['fetcherOptions']

export const fetchUpdateUserDataSpecification = (variables: UpdateUserDataSpecificationVariables) =>
  portalFetch<
    Schemas.RestResponseUserDataSpecification,
    UpdateUserDataSpecificationError,
    RequestBodies.UserDataSpecification,
    {},
    UpdateUserDataSpecificationQueryParams,
    UpdateUserDataSpecificationPathParams
  >({ url: '/services/{serviceId}/user-data-specifications/{userDataSpecificationId}', method: 'put', ...variables })

export const useUpdateUserDataSpecification = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.RestResponseUserDataSpecification,
      UpdateUserDataSpecificationError,
      UpdateUserDataSpecificationVariables
    >,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<
    Schemas.RestResponseUserDataSpecification,
    UpdateUserDataSpecificationError,
    UpdateUserDataSpecificationVariables
  >(
    (variables: UpdateUserDataSpecificationVariables) =>
      fetchUpdateUserDataSpecification({ ...fetcherOptions, ...variables }),
    options
  )
}

export type SetConfigMapYaml1PathParams = {
  serviceId: string
}

export type SetConfigMapYaml1QueryParams = {
  appId: string
}

export type SetConfigMapYaml1Error = Fetcher.ErrorWrapper<undefined>

export type SetConfigMapYaml1Variables = {
  body?: RequestBodies.KubernetesPayload
  pathParams: SetConfigMapYaml1PathParams
  queryParams: SetConfigMapYaml1QueryParams
} & PortalContext['fetcherOptions']

export const fetchSetConfigMapYaml1 = (variables: SetConfigMapYaml1Variables) =>
  portalFetch<
    Schemas.RestResponseService,
    SetConfigMapYaml1Error,
    RequestBodies.KubernetesPayload,
    {},
    SetConfigMapYaml1QueryParams,
    SetConfigMapYaml1PathParams
  >({ url: '/services/{serviceId}/config-map-yaml', method: 'post', ...variables })

export const useSetConfigMapYaml1 = (
  options?: Omit<
    reactQuery.UseMutationOptions<Schemas.RestResponseService, SetConfigMapYaml1Error, SetConfigMapYaml1Variables>,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<Schemas.RestResponseService, SetConfigMapYaml1Error, SetConfigMapYaml1Variables>(
    (variables: SetConfigMapYaml1Variables) => fetchSetConfigMapYaml1({ ...fetcherOptions, ...variables }),
    options
  )
}

export type UpdateConfigMapYaml1PathParams = {
  serviceId: string
}

export type UpdateConfigMapYaml1QueryParams = {
  appId: string
}

export type UpdateConfigMapYaml1Error = Fetcher.ErrorWrapper<undefined>

export type UpdateConfigMapYaml1Variables = {
  body?: RequestBodies.KubernetesPayload
  pathParams: UpdateConfigMapYaml1PathParams
  queryParams: UpdateConfigMapYaml1QueryParams
} & PortalContext['fetcherOptions']

export const fetchUpdateConfigMapYaml1 = (variables: UpdateConfigMapYaml1Variables) =>
  portalFetch<
    Schemas.RestResponseService,
    UpdateConfigMapYaml1Error,
    RequestBodies.KubernetesPayload,
    {},
    UpdateConfigMapYaml1QueryParams,
    UpdateConfigMapYaml1PathParams
  >({ url: '/services/{serviceId}/config-map-yaml', method: 'put', ...variables })

export const useUpdateConfigMapYaml1 = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.RestResponseService,
      UpdateConfigMapYaml1Error,
      UpdateConfigMapYaml1Variables
    >,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<Schemas.RestResponseService, UpdateConfigMapYaml1Error, UpdateConfigMapYaml1Variables>(
    (variables: UpdateConfigMapYaml1Variables) => fetchUpdateConfigMapYaml1({ ...fetcherOptions, ...variables }),
    options
  )
}

export type DeleteConfigMapYaml1PathParams = {
  serviceId: string
}

export type DeleteConfigMapYaml1QueryParams = {
  appId: string
}

export type DeleteConfigMapYaml1Error = Fetcher.ErrorWrapper<undefined>

export type DeleteConfigMapYaml1Variables = {
  pathParams: DeleteConfigMapYaml1PathParams
  queryParams: DeleteConfigMapYaml1QueryParams
} & PortalContext['fetcherOptions']

export const fetchDeleteConfigMapYaml1 = (variables: DeleteConfigMapYaml1Variables) =>
  portalFetch<
    Schemas.RestResponseService,
    DeleteConfigMapYaml1Error,
    undefined,
    {},
    DeleteConfigMapYaml1QueryParams,
    DeleteConfigMapYaml1PathParams
  >({ url: '/services/{serviceId}/config-map-yaml', method: 'delete', ...variables })

export const useDeleteConfigMapYaml1 = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.RestResponseService,
      DeleteConfigMapYaml1Error,
      DeleteConfigMapYaml1Variables
    >,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<Schemas.RestResponseService, DeleteConfigMapYaml1Error, DeleteConfigMapYaml1Variables>(
    (variables: DeleteConfigMapYaml1Variables) => fetchDeleteConfigMapYaml1({ ...fetcherOptions, ...variables }),
    options
  )
}

export type SetHelmValueYaml1PathParams = {
  serviceId: string
}

export type SetHelmValueYaml1QueryParams = {
  appId: string
}

export type SetHelmValueYaml1Error = Fetcher.ErrorWrapper<undefined>

export type SetHelmValueYaml1Variables = {
  body?: RequestBodies.KubernetesPayload
  pathParams: SetHelmValueYaml1PathParams
  queryParams: SetHelmValueYaml1QueryParams
} & PortalContext['fetcherOptions']

export const fetchSetHelmValueYaml1 = (variables: SetHelmValueYaml1Variables) =>
  portalFetch<
    Schemas.RestResponseService,
    SetHelmValueYaml1Error,
    RequestBodies.KubernetesPayload,
    {},
    SetHelmValueYaml1QueryParams,
    SetHelmValueYaml1PathParams
  >({ url: '/services/{serviceId}/helm-value-yaml', method: 'post', ...variables })

export const useSetHelmValueYaml1 = (
  options?: Omit<
    reactQuery.UseMutationOptions<Schemas.RestResponseService, SetHelmValueYaml1Error, SetHelmValueYaml1Variables>,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<Schemas.RestResponseService, SetHelmValueYaml1Error, SetHelmValueYaml1Variables>(
    (variables: SetHelmValueYaml1Variables) => fetchSetHelmValueYaml1({ ...fetcherOptions, ...variables }),
    options
  )
}

export type UpdateHelmValueYaml1PathParams = {
  serviceId: string
}

export type UpdateHelmValueYaml1QueryParams = {
  appId: string
}

export type UpdateHelmValueYaml1Error = Fetcher.ErrorWrapper<undefined>

export type UpdateHelmValueYaml1Variables = {
  body?: RequestBodies.KubernetesPayload
  pathParams: UpdateHelmValueYaml1PathParams
  queryParams: UpdateHelmValueYaml1QueryParams
} & PortalContext['fetcherOptions']

export const fetchUpdateHelmValueYaml1 = (variables: UpdateHelmValueYaml1Variables) =>
  portalFetch<
    Schemas.RestResponseService,
    UpdateHelmValueYaml1Error,
    RequestBodies.KubernetesPayload,
    {},
    UpdateHelmValueYaml1QueryParams,
    UpdateHelmValueYaml1PathParams
  >({ url: '/services/{serviceId}/helm-value-yaml', method: 'put', ...variables })

export const useUpdateHelmValueYaml1 = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.RestResponseService,
      UpdateHelmValueYaml1Error,
      UpdateHelmValueYaml1Variables
    >,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<Schemas.RestResponseService, UpdateHelmValueYaml1Error, UpdateHelmValueYaml1Variables>(
    (variables: UpdateHelmValueYaml1Variables) => fetchUpdateHelmValueYaml1({ ...fetcherOptions, ...variables }),
    options
  )
}

export type DeleteHelmValueYaml1PathParams = {
  serviceId: string
}

export type DeleteHelmValueYaml1QueryParams = {
  appId: string
}

export type DeleteHelmValueYaml1Error = Fetcher.ErrorWrapper<undefined>

export type DeleteHelmValueYaml1Variables = {
  pathParams: DeleteHelmValueYaml1PathParams
  queryParams: DeleteHelmValueYaml1QueryParams
} & PortalContext['fetcherOptions']

export const fetchDeleteHelmValueYaml1 = (variables: DeleteHelmValueYaml1Variables) =>
  portalFetch<
    Schemas.RestResponseService,
    DeleteHelmValueYaml1Error,
    undefined,
    {},
    DeleteHelmValueYaml1QueryParams,
    DeleteHelmValueYaml1PathParams
  >({ url: '/services/{serviceId}/helm-value-yaml', method: 'delete', ...variables })

export const useDeleteHelmValueYaml1 = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.RestResponseService,
      DeleteHelmValueYaml1Error,
      DeleteHelmValueYaml1Variables
    >,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<Schemas.RestResponseService, DeleteHelmValueYaml1Error, DeleteHelmValueYaml1Variables>(
    (variables: DeleteHelmValueYaml1Variables) => fetchDeleteHelmValueYaml1({ ...fetcherOptions, ...variables }),
    options
  )
}

export type GetCommandUnitItemsPathParams = {
  serviceId: string
}

export type GetCommandUnitItemsQueryParams = {
  appId?: string
  filterCommand?: string
}

export type GetCommandUnitItemsError = Fetcher.ErrorWrapper<undefined>

export type GetCommandUnitItemsVariables = {
  pathParams: GetCommandUnitItemsPathParams
  queryParams?: GetCommandUnitItemsQueryParams
} & PortalContext['fetcherOptions']

export const fetchGetCommandUnitItems = (variables: GetCommandUnitItemsVariables) =>
  portalFetch<
    Schemas.RestResponseListCommandCategory,
    GetCommandUnitItemsError,
    undefined,
    {},
    GetCommandUnitItemsQueryParams,
    GetCommandUnitItemsPathParams
  >({ url: '/services/{serviceId}/commands/categories', method: 'get', ...variables })

export const useGetCommandUnitItems = (
  variables: GetCommandUnitItemsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponseListCommandCategory,
      GetCommandUnitItemsError,
      Schemas.RestResponseListCommandCategory
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponseListCommandCategory,
    GetCommandUnitItemsError,
    Schemas.RestResponseListCommandCategory
  >(
    queryKeyFn({ path: '/services/{serviceId}/commands/categories', operationId: 'getCommandUnitItems', variables }),
    () => fetchGetCommandUnitItems({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type GetAppManifestPathParams = {
  serviceId: string
}

export type GetAppManifestQueryParams = {
  appId?: string
}

export type GetAppManifestError = Fetcher.ErrorWrapper<undefined>

export type GetAppManifestVariables = {
  pathParams: GetAppManifestPathParams
  queryParams?: GetAppManifestQueryParams
} & PortalContext['fetcherOptions']

export const fetchGetAppManifest = (variables: GetAppManifestVariables) =>
  portalFetch<
    Schemas.RestResponseApplicationManifest,
    GetAppManifestError,
    undefined,
    {},
    GetAppManifestQueryParams,
    GetAppManifestPathParams
  >({ url: '/services/{serviceId}/app-manifest', method: 'get', ...variables })

export const useGetAppManifest = (
  variables: GetAppManifestVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponseApplicationManifest,
      GetAppManifestError,
      Schemas.RestResponseApplicationManifest
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponseApplicationManifest,
    GetAppManifestError,
    Schemas.RestResponseApplicationManifest
  >(
    queryKeyFn({ path: '/services/{serviceId}/app-manifest', operationId: 'getAppManifest', variables }),
    () => fetchGetAppManifest({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type CreateManifestFile1PathParams = {
  serviceId: string
}

export type CreateManifestFile1QueryParams = {
  appId?: string
  appManifestKind:
    | 'VALUES'
    | 'KUSTOMIZE_PATCHES'
    | 'K8S_MANIFEST'
    | 'PCF_OVERRIDE'
    | 'AZURE_APP_SERVICE_MANIFEST'
    | 'AZURE_APP_SETTINGS_OVERRIDE'
    | 'AZURE_CONN_STRINGS_OVERRIDE'
    | 'HELM_CHART_OVERRIDE'
    | 'OC_PARAMS'
}

export type CreateManifestFile1Error = Fetcher.ErrorWrapper<undefined>

export type CreateManifestFile1Variables = {
  body: RequestBodies.ManifestFile
  pathParams: CreateManifestFile1PathParams
  queryParams: CreateManifestFile1QueryParams
} & PortalContext['fetcherOptions']

export const fetchCreateManifestFile1 = (variables: CreateManifestFile1Variables) =>
  portalFetch<
    Schemas.RestResponseManifestFile,
    CreateManifestFile1Error,
    RequestBodies.ManifestFile,
    {},
    CreateManifestFile1QueryParams,
    CreateManifestFile1PathParams
  >({ url: '/services/{serviceId}/k8s-values', method: 'post', ...variables })

export const useCreateManifestFile1 = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.RestResponseManifestFile,
      CreateManifestFile1Error,
      CreateManifestFile1Variables
    >,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<
    Schemas.RestResponseManifestFile,
    CreateManifestFile1Error,
    CreateManifestFile1Variables
  >((variables: CreateManifestFile1Variables) => fetchCreateManifestFile1({ ...fetcherOptions, ...variables }), options)
}

export type CreateK8sValueAppManifestPathParams = {
  serviceId: string
}

export type CreateK8sValueAppManifestQueryParams = {
  appId?: string
}

export type CreateK8sValueAppManifestError = Fetcher.ErrorWrapper<undefined>

export type CreateK8sValueAppManifestVariables = {
  body: RequestBodies.ApplicationManifest
  pathParams: CreateK8sValueAppManifestPathParams
  queryParams?: CreateK8sValueAppManifestQueryParams
} & PortalContext['fetcherOptions']

export const fetchCreateK8sValueAppManifest = (variables: CreateK8sValueAppManifestVariables) =>
  portalFetch<
    Schemas.RestResponseApplicationManifest,
    CreateK8sValueAppManifestError,
    RequestBodies.ApplicationManifest,
    {},
    CreateK8sValueAppManifestQueryParams,
    CreateK8sValueAppManifestPathParams
  >({ url: '/services/{serviceId}/k8s-values/app-manifest', method: 'post', ...variables })

export const useCreateK8sValueAppManifest = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.RestResponseApplicationManifest,
      CreateK8sValueAppManifestError,
      CreateK8sValueAppManifestVariables
    >,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<
    Schemas.RestResponseApplicationManifest,
    CreateK8sValueAppManifestError,
    CreateK8sValueAppManifestVariables
  >(
    (variables: CreateK8sValueAppManifestVariables) =>
      fetchCreateK8sValueAppManifest({ ...fetcherOptions, ...variables }),
    options
  )
}

export type GetK8sValueAppManifestPathParams = {
  serviceId: string
  appManifestId: string
}

export type GetK8sValueAppManifestQueryParams = {
  appId?: string
}

export type GetK8sValueAppManifestError = Fetcher.ErrorWrapper<undefined>

export type GetK8sValueAppManifestVariables = {
  pathParams: GetK8sValueAppManifestPathParams
  queryParams?: GetK8sValueAppManifestQueryParams
} & PortalContext['fetcherOptions']

export const fetchGetK8sValueAppManifest = (variables: GetK8sValueAppManifestVariables) =>
  portalFetch<
    Schemas.RestResponseApplicationManifest,
    GetK8sValueAppManifestError,
    undefined,
    {},
    GetK8sValueAppManifestQueryParams,
    GetK8sValueAppManifestPathParams
  >({ url: '/services/{serviceId}/k8s-values/app-manifest/{appManifestId}', method: 'get', ...variables })

export const useGetK8sValueAppManifest = (
  variables: GetK8sValueAppManifestVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponseApplicationManifest,
      GetK8sValueAppManifestError,
      Schemas.RestResponseApplicationManifest
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponseApplicationManifest,
    GetK8sValueAppManifestError,
    Schemas.RestResponseApplicationManifest
  >(
    queryKeyFn({
      path: '/services/{serviceId}/k8s-values/app-manifest/{appManifestId}',
      operationId: 'getK8sValueAppManifest',
      variables
    }),
    () => fetchGetK8sValueAppManifest({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type UpdateK8sValueAppManifestPathParams = {
  serviceId: string
  appManifestId: string
}

export type UpdateK8sValueAppManifestQueryParams = {
  appId?: string
}

export type UpdateK8sValueAppManifestError = Fetcher.ErrorWrapper<undefined>

export type UpdateK8sValueAppManifestVariables = {
  body: RequestBodies.ApplicationManifest
  pathParams: UpdateK8sValueAppManifestPathParams
  queryParams?: UpdateK8sValueAppManifestQueryParams
} & PortalContext['fetcherOptions']

export const fetchUpdateK8sValueAppManifest = (variables: UpdateK8sValueAppManifestVariables) =>
  portalFetch<
    Schemas.RestResponseApplicationManifest,
    UpdateK8sValueAppManifestError,
    RequestBodies.ApplicationManifest,
    {},
    UpdateK8sValueAppManifestQueryParams,
    UpdateK8sValueAppManifestPathParams
  >({ url: '/services/{serviceId}/k8s-values/app-manifest/{appManifestId}', method: 'put', ...variables })

export const useUpdateK8sValueAppManifest = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.RestResponseApplicationManifest,
      UpdateK8sValueAppManifestError,
      UpdateK8sValueAppManifestVariables
    >,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<
    Schemas.RestResponseApplicationManifest,
    UpdateK8sValueAppManifestError,
    UpdateK8sValueAppManifestVariables
  >(
    (variables: UpdateK8sValueAppManifestVariables) =>
      fetchUpdateK8sValueAppManifest({ ...fetcherOptions, ...variables }),
    options
  )
}

export type DeleteK8sValueAppManifestPathParams = {
  serviceId: string
  appManifestId: string
}

export type DeleteK8sValueAppManifestQueryParams = {
  appId?: string
}

export type DeleteK8sValueAppManifestError = Fetcher.ErrorWrapper<undefined>

export type DeleteK8sValueAppManifestVariables = {
  pathParams: DeleteK8sValueAppManifestPathParams
  queryParams?: DeleteK8sValueAppManifestQueryParams
} & PortalContext['fetcherOptions']

export const fetchDeleteK8sValueAppManifest = (variables: DeleteK8sValueAppManifestVariables) =>
  portalFetch<
    Schemas.RestResponse,
    DeleteK8sValueAppManifestError,
    undefined,
    {},
    DeleteK8sValueAppManifestQueryParams,
    DeleteK8sValueAppManifestPathParams
  >({ url: '/services/{serviceId}/k8s-values/app-manifest/{appManifestId}', method: 'delete', ...variables })

export const useDeleteK8sValueAppManifest = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.RestResponse,
      DeleteK8sValueAppManifestError,
      DeleteK8sValueAppManifestVariables
    >,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<
    Schemas.RestResponse,
    DeleteK8sValueAppManifestError,
    DeleteK8sValueAppManifestVariables
  >(
    (variables: DeleteK8sValueAppManifestVariables) =>
      fetchDeleteK8sValueAppManifest({ ...fetcherOptions, ...variables }),
    options
  )
}

export type ListAppManifestsPathParams = {
  serviceId: string
}

export type ListAppManifestsQueryParams = {
  appId?: string
}

export type ListAppManifestsError = Fetcher.ErrorWrapper<undefined>

export type ListAppManifestsVariables = {
  pathParams: ListAppManifestsPathParams
  queryParams?: ListAppManifestsQueryParams
} & PortalContext['fetcherOptions']

export const fetchListAppManifests = (variables: ListAppManifestsVariables) =>
  portalFetch<
    Schemas.RestResponseListApplicationManifest,
    ListAppManifestsError,
    undefined,
    {},
    ListAppManifestsQueryParams,
    ListAppManifestsPathParams
  >({ url: '/services/{serviceId}/app-manifests', method: 'get', ...variables })

export const useListAppManifests = (
  variables: ListAppManifestsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponseListApplicationManifest,
      ListAppManifestsError,
      Schemas.RestResponseListApplicationManifest
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponseListApplicationManifest,
    ListAppManifestsError,
    Schemas.RestResponseListApplicationManifest
  >(
    queryKeyFn({ path: '/services/{serviceId}/app-manifests', operationId: 'listAppManifests', variables }),
    () => fetchListAppManifests({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type ListArtifactStreamBindingsPathParams = {
  serviceId: string
}

export type ListArtifactStreamBindingsQueryParams = {
  appId?: string
}

export type ListArtifactStreamBindingsError = Fetcher.ErrorWrapper<undefined>

export type ListArtifactStreamBindingsVariables = {
  pathParams: ListArtifactStreamBindingsPathParams
  queryParams?: ListArtifactStreamBindingsQueryParams
} & PortalContext['fetcherOptions']

export const fetchListArtifactStreamBindings = (variables: ListArtifactStreamBindingsVariables) =>
  portalFetch<
    Schemas.RestResponseListArtifactStreamBinding,
    ListArtifactStreamBindingsError,
    undefined,
    {},
    ListArtifactStreamBindingsQueryParams,
    ListArtifactStreamBindingsPathParams
  >({ url: '/services/{serviceId}/artifact-stream-bindings', method: 'get', ...variables })

export const useListArtifactStreamBindings = (
  variables: ListArtifactStreamBindingsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponseListArtifactStreamBinding,
      ListArtifactStreamBindingsError,
      Schemas.RestResponseListArtifactStreamBinding
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponseListArtifactStreamBinding,
    ListArtifactStreamBindingsError,
    Schemas.RestResponseListArtifactStreamBinding
  >(
    queryKeyFn({
      path: '/services/{serviceId}/artifact-stream-bindings',
      operationId: 'listArtifactStreamBindings',
      variables
    }),
    () => fetchListArtifactStreamBindings({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type CreateArtifactStreamBindingPathParams = {
  serviceId: string
}

export type CreateArtifactStreamBindingQueryParams = {
  appId?: string
}

export type CreateArtifactStreamBindingError = Fetcher.ErrorWrapper<undefined>

export type CreateArtifactStreamBindingVariables = {
  body?: RequestBodies.ArtifactStreamBinding
  pathParams: CreateArtifactStreamBindingPathParams
  queryParams?: CreateArtifactStreamBindingQueryParams
} & PortalContext['fetcherOptions']

export const fetchCreateArtifactStreamBinding = (variables: CreateArtifactStreamBindingVariables) =>
  portalFetch<
    Schemas.RestResponseArtifactStreamBinding,
    CreateArtifactStreamBindingError,
    RequestBodies.ArtifactStreamBinding,
    {},
    CreateArtifactStreamBindingQueryParams,
    CreateArtifactStreamBindingPathParams
  >({ url: '/services/{serviceId}/artifact-stream-bindings', method: 'post', ...variables })

export const useCreateArtifactStreamBinding = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.RestResponseArtifactStreamBinding,
      CreateArtifactStreamBindingError,
      CreateArtifactStreamBindingVariables
    >,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<
    Schemas.RestResponseArtifactStreamBinding,
    CreateArtifactStreamBindingError,
    CreateArtifactStreamBindingVariables
  >(
    (variables: CreateArtifactStreamBindingVariables) =>
      fetchCreateArtifactStreamBinding({ ...fetcherOptions, ...variables }),
    options
  )
}

export type GetArtifactStreamBindingPathParams = {
  serviceId: string
  name: string
}

export type GetArtifactStreamBindingQueryParams = {
  appId?: string
}

export type GetArtifactStreamBindingError = Fetcher.ErrorWrapper<undefined>

export type GetArtifactStreamBindingVariables = {
  pathParams: GetArtifactStreamBindingPathParams
  queryParams?: GetArtifactStreamBindingQueryParams
} & PortalContext['fetcherOptions']

export const fetchGetArtifactStreamBinding = (variables: GetArtifactStreamBindingVariables) =>
  portalFetch<
    Schemas.RestResponseArtifactStreamBinding,
    GetArtifactStreamBindingError,
    undefined,
    {},
    GetArtifactStreamBindingQueryParams,
    GetArtifactStreamBindingPathParams
  >({ url: '/services/{serviceId}/artifact-stream-bindings/{name}', method: 'get', ...variables })

export const useGetArtifactStreamBinding = (
  variables: GetArtifactStreamBindingVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponseArtifactStreamBinding,
      GetArtifactStreamBindingError,
      Schemas.RestResponseArtifactStreamBinding
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponseArtifactStreamBinding,
    GetArtifactStreamBindingError,
    Schemas.RestResponseArtifactStreamBinding
  >(
    queryKeyFn({
      path: '/services/{serviceId}/artifact-stream-bindings/{name}',
      operationId: 'getArtifactStreamBinding',
      variables
    }),
    () => fetchGetArtifactStreamBinding({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type UpdateArtifactStreamBindingPathParams = {
  serviceId: string
  name: string
}

export type UpdateArtifactStreamBindingQueryParams = {
  appId?: string
}

export type UpdateArtifactStreamBindingError = Fetcher.ErrorWrapper<undefined>

export type UpdateArtifactStreamBindingVariables = {
  body?: RequestBodies.ArtifactStreamBinding
  pathParams: UpdateArtifactStreamBindingPathParams
  queryParams?: UpdateArtifactStreamBindingQueryParams
} & PortalContext['fetcherOptions']

export const fetchUpdateArtifactStreamBinding = (variables: UpdateArtifactStreamBindingVariables) =>
  portalFetch<
    Schemas.RestResponseArtifactStreamBinding,
    UpdateArtifactStreamBindingError,
    RequestBodies.ArtifactStreamBinding,
    {},
    UpdateArtifactStreamBindingQueryParams,
    UpdateArtifactStreamBindingPathParams
  >({ url: '/services/{serviceId}/artifact-stream-bindings/{name}', method: 'put', ...variables })

export const useUpdateArtifactStreamBinding = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.RestResponseArtifactStreamBinding,
      UpdateArtifactStreamBindingError,
      UpdateArtifactStreamBindingVariables
    >,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<
    Schemas.RestResponseArtifactStreamBinding,
    UpdateArtifactStreamBindingError,
    UpdateArtifactStreamBindingVariables
  >(
    (variables: UpdateArtifactStreamBindingVariables) =>
      fetchUpdateArtifactStreamBinding({ ...fetcherOptions, ...variables }),
    options
  )
}

export type DeleteArtifactStreamBindingPathParams = {
  serviceId: string
  name: string
}

export type DeleteArtifactStreamBindingQueryParams = {
  appId?: string
}

export type DeleteArtifactStreamBindingError = Fetcher.ErrorWrapper<undefined>

export type DeleteArtifactStreamBindingVariables = {
  pathParams: DeleteArtifactStreamBindingPathParams
  queryParams?: DeleteArtifactStreamBindingQueryParams
} & PortalContext['fetcherOptions']

export const fetchDeleteArtifactStreamBinding = (variables: DeleteArtifactStreamBindingVariables) =>
  portalFetch<
    Schemas.RestResponse,
    DeleteArtifactStreamBindingError,
    undefined,
    {},
    DeleteArtifactStreamBindingQueryParams,
    DeleteArtifactStreamBindingPathParams
  >({ url: '/services/{serviceId}/artifact-stream-bindings/{name}', method: 'delete', ...variables })

export const useDeleteArtifactStreamBinding = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.RestResponse,
      DeleteArtifactStreamBindingError,
      DeleteArtifactStreamBindingVariables
    >,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<
    Schemas.RestResponse,
    DeleteArtifactStreamBindingError,
    DeleteArtifactStreamBindingVariables
  >(
    (variables: DeleteArtifactStreamBindingVariables) =>
      fetchDeleteArtifactStreamBinding({ ...fetcherOptions, ...variables }),
    options
  )
}

export type GetHelmChartVersionsPathParams = {
  serviceId: string
}

export type GetHelmChartVersionsQueryParams = {
  appId?: string
  manifestSearchString?: string
  /*
   * @default 0
   */
  offset?: string
  limit?: string
  fieldsIncluded?: string[]
  fieldsExcluded?: string[]
  /*
   * @default true
   */
  showHelmChartsForDisabledCollection?: boolean
}

export type GetHelmChartVersionsError = Fetcher.ErrorWrapper<undefined>

export type GetHelmChartVersionsVariables = {
  pathParams: GetHelmChartVersionsPathParams
  queryParams?: GetHelmChartVersionsQueryParams
} & PortalContext['fetcherOptions']

export const fetchGetHelmChartVersions = (variables: GetHelmChartVersionsVariables) =>
  portalFetch<
    Schemas.RestResponseMapStringListHelmChart,
    GetHelmChartVersionsError,
    undefined,
    {},
    GetHelmChartVersionsQueryParams,
    GetHelmChartVersionsPathParams
  >({ url: '/services/{serviceId}/chart-versions', method: 'get', ...variables })

export const useGetHelmChartVersions = (
  variables: GetHelmChartVersionsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponseMapStringListHelmChart,
      GetHelmChartVersionsError,
      Schemas.RestResponseMapStringListHelmChart
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponseMapStringListHelmChart,
    GetHelmChartVersionsError,
    Schemas.RestResponseMapStringListHelmChart
  >(
    queryKeyFn({ path: '/services/{serviceId}/chart-versions', operationId: 'getHelmChartVersions', variables }),
    () => fetchGetHelmChartVersions({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type UpdateHelmVersionPathParams = {
  serviceId: string
}

export type UpdateHelmVersionQueryParams = {
  appId?: string
}

export type UpdateHelmVersionError = Fetcher.ErrorWrapper<undefined>

export type UpdateHelmVersionVariables = {
  body: RequestBodies.Service
  pathParams: UpdateHelmVersionPathParams
  queryParams?: UpdateHelmVersionQueryParams
} & PortalContext['fetcherOptions']

export const fetchUpdateHelmVersion = (variables: UpdateHelmVersionVariables) =>
  portalFetch<
    Schemas.RestResponseService,
    UpdateHelmVersionError,
    RequestBodies.Service,
    {},
    UpdateHelmVersionQueryParams,
    UpdateHelmVersionPathParams
  >({ url: '/services/{serviceId}/helm-version', method: 'put', ...variables })

export const useUpdateHelmVersion = (
  options?: Omit<
    reactQuery.UseMutationOptions<Schemas.RestResponseService, UpdateHelmVersionError, UpdateHelmVersionVariables>,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<Schemas.RestResponseService, UpdateHelmVersionError, UpdateHelmVersionVariables>(
    (variables: UpdateHelmVersionVariables) => fetchUpdateHelmVersion({ ...fetcherOptions, ...variables }),
    options
  )
}

export type GetHelmCommandFlagsPathParams = {
  serviceId: string
}

export type GetHelmCommandFlagsQueryParams = {
  appId?: string
  version?: 'V2' | 'V3'
  storeType?:
    | 'Local'
    | 'Remote'
    | 'HelmSourceRepo'
    | 'HelmChartRepo'
    | 'KustomizeSourceRepo'
    | 'OC_TEMPLATES'
    | 'CUSTOM'
    | 'CUSTOM_OPENSHIFT_TEMPLATE'
    | 'VALUES_YAML_FROM_HELM_REPO'
}

export type GetHelmCommandFlagsError = Fetcher.ErrorWrapper<undefined>

export type GetHelmCommandFlagsVariables = {
  pathParams: GetHelmCommandFlagsPathParams
  queryParams?: GetHelmCommandFlagsQueryParams
} & PortalContext['fetcherOptions']

export const fetchGetHelmCommandFlags = (variables: GetHelmCommandFlagsVariables) =>
  portalFetch<
    Schemas.RestResponseSetHelmSubCommand,
    GetHelmCommandFlagsError,
    undefined,
    {},
    GetHelmCommandFlagsQueryParams,
    GetHelmCommandFlagsPathParams
  >({ url: '/services/{serviceId}/helm-command-flag', method: 'get', ...variables })

export const useGetHelmCommandFlags = (
  variables: GetHelmCommandFlagsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponseSetHelmSubCommand,
      GetHelmCommandFlagsError,
      Schemas.RestResponseSetHelmSubCommand
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponseSetHelmSubCommand,
    GetHelmCommandFlagsError,
    Schemas.RestResponseSetHelmSubCommand
  >(
    queryKeyFn({ path: '/services/{serviceId}/helm-command-flag', operationId: 'getHelmCommandFlags', variables }),
    () => fetchGetHelmCommandFlags({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type Get34PathParams = {
  templateId: string
}

export type Get34QueryParams = {
  envId?: string
  appId?: string
}

export type Get34Error = Fetcher.ErrorWrapper<undefined>

export type Get34Variables = {
  pathParams: Get34PathParams
  queryParams?: Get34QueryParams
} & PortalContext['fetcherOptions']

export const fetchGet34 = (variables: Get34Variables) =>
  portalFetch<Schemas.RestResponseServiceTemplate, Get34Error, undefined, {}, Get34QueryParams, Get34PathParams>({
    url: '/service-templates/{templateId}',
    method: 'get',
    ...variables
  })

export const useGet34 = (
  variables: Get34Variables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.RestResponseServiceTemplate, Get34Error, Schemas.RestResponseServiceTemplate>,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<Schemas.RestResponseServiceTemplate, Get34Error, Schemas.RestResponseServiceTemplate>(
    queryKeyFn({ path: '/service-templates/{templateId}', operationId: 'get34', variables }),
    () => fetchGet34({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type Update26PathParams = {
  templateId: string
}

export type Update26QueryParams = {
  envId?: string
  appId?: string
}

export type Update26Error = Fetcher.ErrorWrapper<undefined>

export type Update26Variables = {
  body: RequestBodies.ServiceTemplate
  pathParams: Update26PathParams
  queryParams?: Update26QueryParams
} & PortalContext['fetcherOptions']

export const fetchUpdate26 = (variables: Update26Variables) =>
  portalFetch<
    Schemas.RestResponseServiceTemplate,
    Update26Error,
    RequestBodies.ServiceTemplate,
    {},
    Update26QueryParams,
    Update26PathParams
  >({ url: '/service-templates/{templateId}', method: 'put', ...variables })

export const useUpdate26 = (
  options?: Omit<
    reactQuery.UseMutationOptions<Schemas.RestResponseServiceTemplate, Update26Error, Update26Variables>,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<Schemas.RestResponseServiceTemplate, Update26Error, Update26Variables>(
    (variables: Update26Variables) => fetchUpdate26({ ...fetcherOptions, ...variables }),
    options
  )
}

export type Delete24PathParams = {
  templateId: string
}

export type Delete24QueryParams = {
  envId?: string
  appId?: string
}

export type Delete24Error = Fetcher.ErrorWrapper<undefined>

export type Delete24Variables = {
  pathParams: Delete24PathParams
  queryParams?: Delete24QueryParams
} & PortalContext['fetcherOptions']

export const fetchDelete24 = (variables: Delete24Variables) =>
  portalFetch<Schemas.RestResponse, Delete24Error, undefined, {}, Delete24QueryParams, Delete24PathParams>({
    url: '/service-templates/{templateId}',
    method: 'delete',
    ...variables
  })

export const useDelete24 = (
  options?: Omit<reactQuery.UseMutationOptions<Schemas.RestResponse, Delete24Error, Delete24Variables>, 'mutationFn'>
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<Schemas.RestResponse, Delete24Error, Delete24Variables>(
    (variables: Delete24Variables) => fetchDelete24({ ...fetcherOptions, ...variables }),
    options
  )
}

export type List38QueryParams = {
  envId?: string
  appId?: string
  /*
   * @default 0
   */
  offset?: string
  limit?: string
  fieldsIncluded?: string[]
  fieldsExcluded?: string[]
  /*
   * @default true
   */
  details?: boolean
}

export type List38Error = Fetcher.ErrorWrapper<undefined>

export type List38Variables = {
  queryParams?: List38QueryParams
} & PortalContext['fetcherOptions']

export const fetchList38 = (variables: List38Variables) =>
  portalFetch<Schemas.RestResponsePageResponseServiceTemplate, List38Error, undefined, {}, List38QueryParams, {}>({
    url: '/service-templates',
    method: 'get',
    ...variables
  })

export const useList38 = (
  variables: List38Variables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponsePageResponseServiceTemplate,
      List38Error,
      Schemas.RestResponsePageResponseServiceTemplate
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponsePageResponseServiceTemplate,
    List38Error,
    Schemas.RestResponsePageResponseServiceTemplate
  >(
    queryKeyFn({ path: '/service-templates', operationId: 'list38', variables }),
    () => fetchList38({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type Create5QueryParams = {
  envId?: string
  appId?: string
}

export type Create5Error = Fetcher.ErrorWrapper<undefined>

export type Create5Variables = {
  body: RequestBodies.ServiceTemplate
  queryParams?: Create5QueryParams
} & PortalContext['fetcherOptions']

export const fetchCreate5 = (variables: Create5Variables) =>
  portalFetch<
    Schemas.RestResponseServiceTemplate,
    Create5Error,
    RequestBodies.ServiceTemplate,
    {},
    Create5QueryParams,
    {}
  >({ url: '/service-templates', method: 'post', ...variables })

export const useCreate5 = (
  options?: Omit<
    reactQuery.UseMutationOptions<Schemas.RestResponseServiceTemplate, Create5Error, Create5Variables>,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<Schemas.RestResponseServiceTemplate, Create5Error, Create5Variables>(
    (variables: Create5Variables) => fetchCreate5({ ...fetcherOptions, ...variables }),
    options
  )
}

export type ComputeFilesPathParams = {
  templateId: string
}

export type ComputeFilesQueryParams = {
  envId?: string
  appId?: string
  hostId?: string
  accountId?: string
}

export type ComputeFilesError = Fetcher.ErrorWrapper<undefined>

export type ComputeFilesVariables = {
  pathParams: ComputeFilesPathParams
  queryParams?: ComputeFilesQueryParams
} & PortalContext['fetcherOptions']

export const fetchComputeFiles = (variables: ComputeFilesVariables) =>
  portalFetch<
    Schemas.RestResponseString,
    ComputeFilesError,
    undefined,
    {},
    ComputeFilesQueryParams,
    ComputeFilesPathParams
  >({ url: '/service-templates/{templateId}/compute-files', method: 'get', ...variables })

export const useComputeFiles = (
  variables: ComputeFilesVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.RestResponseString, ComputeFilesError, Schemas.RestResponseString>,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<Schemas.RestResponseString, ComputeFilesError, Schemas.RestResponseString>(
    queryKeyFn({ path: '/service-templates/{templateId}/compute-files', operationId: 'computeFiles', variables }),
    () => fetchComputeFiles({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type Get35PathParams = {
  serviceVariableId: string
}

export type Get35QueryParams = {
  appId?: string
  /*
   * @default false
   */
  withArtifactStreamSummary?: boolean
}

export type Get35Error = Fetcher.ErrorWrapper<undefined>

export type Get35Variables = {
  pathParams: Get35PathParams
  queryParams?: Get35QueryParams
} & PortalContext['fetcherOptions']

export const fetchGet35 = (variables: Get35Variables) =>
  portalFetch<Schemas.RestResponseServiceVariable, Get35Error, undefined, {}, Get35QueryParams, Get35PathParams>({
    url: '/service-variables/{serviceVariableId}',
    method: 'get',
    ...variables
  })

export const useGet35 = (
  variables: Get35Variables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.RestResponseServiceVariable, Get35Error, Schemas.RestResponseServiceVariable>,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<Schemas.RestResponseServiceVariable, Get35Error, Schemas.RestResponseServiceVariable>(
    queryKeyFn({ path: '/service-variables/{serviceVariableId}', operationId: 'get35', variables }),
    () => fetchGet35({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type Update27PathParams = {
  serviceVariableId: string
}

export type Update27QueryParams = {
  appId?: string
}

export type Update27Error = Fetcher.ErrorWrapper<undefined>

export type Update27Variables = {
  body: RequestBodies.ServiceVariable
  pathParams: Update27PathParams
  queryParams?: Update27QueryParams
} & PortalContext['fetcherOptions']

export const fetchUpdate27 = (variables: Update27Variables) =>
  portalFetch<
    Schemas.RestResponse,
    Update27Error,
    RequestBodies.ServiceVariable,
    {},
    Update27QueryParams,
    Update27PathParams
  >({ url: '/service-variables/{serviceVariableId}', method: 'put', ...variables })

export const useUpdate27 = (
  options?: Omit<reactQuery.UseMutationOptions<Schemas.RestResponse, Update27Error, Update27Variables>, 'mutationFn'>
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<Schemas.RestResponse, Update27Error, Update27Variables>(
    (variables: Update27Variables) => fetchUpdate27({ ...fetcherOptions, ...variables }),
    options
  )
}

export type Delete25PathParams = {
  serviceVariableId: string
}

export type Delete25QueryParams = {
  appId?: string
}

export type Delete25Error = Fetcher.ErrorWrapper<undefined>

export type Delete25Variables = {
  pathParams: Delete25PathParams
  queryParams?: Delete25QueryParams
} & PortalContext['fetcherOptions']

export const fetchDelete25 = (variables: Delete25Variables) =>
  portalFetch<Schemas.RestResponse, Delete25Error, undefined, {}, Delete25QueryParams, Delete25PathParams>({
    url: '/service-variables/{serviceVariableId}',
    method: 'delete',
    ...variables
  })

export const useDelete25 = (
  options?: Omit<reactQuery.UseMutationOptions<Schemas.RestResponse, Delete25Error, Delete25Variables>, 'mutationFn'>
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<Schemas.RestResponse, Delete25Error, Delete25Variables>(
    (variables: Delete25Variables) => fetchDelete25({ ...fetcherOptions, ...variables }),
    options
  )
}

export type List39QueryParams = {
  /*
   * @default 0
   */
  offset?: string
  limit?: string
  fieldsIncluded?: string[]
  fieldsExcluded?: string[]
  /*
   * @default false
   */
  withArtifactStreamSummary?: boolean
}

export type List39Error = Fetcher.ErrorWrapper<undefined>

export type List39Variables = {
  queryParams?: List39QueryParams
} & PortalContext['fetcherOptions']

export const fetchList39 = (variables: List39Variables) =>
  portalFetch<Schemas.RestResponsePageResponseServiceVariable, List39Error, undefined, {}, List39QueryParams, {}>({
    url: '/service-variables',
    method: 'get',
    ...variables
  })

export const useList39 = (
  variables: List39Variables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponsePageResponseServiceVariable,
      List39Error,
      Schemas.RestResponsePageResponseServiceVariable
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponsePageResponseServiceVariable,
    List39Error,
    Schemas.RestResponsePageResponseServiceVariable
  >(
    queryKeyFn({ path: '/service-variables', operationId: 'list39', variables }),
    () => fetchList39({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type Save17QueryParams = {
  appId?: string
}

export type Save17Error = Fetcher.ErrorWrapper<undefined>

export type Save17Variables = {
  body: RequestBodies.ServiceVariable
  queryParams?: Save17QueryParams
} & PortalContext['fetcherOptions']

export const fetchSave17 = (variables: Save17Variables) =>
  portalFetch<
    Schemas.RestResponseServiceVariable,
    Save17Error,
    RequestBodies.ServiceVariable,
    {},
    Save17QueryParams,
    {}
  >({ url: '/service-variables', method: 'post', ...variables })

export const useSave17 = (
  options?: Omit<
    reactQuery.UseMutationOptions<Schemas.RestResponseServiceVariable, Save17Error, Save17Variables>,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<Schemas.RestResponseServiceVariable, Save17Error, Save17Variables>(
    (variables: Save17Variables) => fetchSave17({ ...fetcherOptions, ...variables }),
    options
  )
}

export type DeleteByEntity1PathParams = {
  entityId: string
}

export type DeleteByEntity1QueryParams = {
  appId?: string
}

export type DeleteByEntity1Error = Fetcher.ErrorWrapper<undefined>

export type DeleteByEntity1Variables = {
  pathParams: DeleteByEntity1PathParams
  queryParams?: DeleteByEntity1QueryParams
} & PortalContext['fetcherOptions']

export const fetchDeleteByEntity1 = (variables: DeleteByEntity1Variables) =>
  portalFetch<
    Schemas.RestResponse,
    DeleteByEntity1Error,
    undefined,
    {},
    DeleteByEntity1QueryParams,
    DeleteByEntity1PathParams
  >({ url: '/service-variables/entity/{entityId}', method: 'delete', ...variables })

export const useDeleteByEntity1 = (
  options?: Omit<
    reactQuery.UseMutationOptions<Schemas.RestResponse, DeleteByEntity1Error, DeleteByEntity1Variables>,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<Schemas.RestResponse, DeleteByEntity1Error, DeleteByEntity1Variables>(
    (variables: DeleteByEntity1Variables) => fetchDeleteByEntity1({ ...fetcherOptions, ...variables }),
    options
  )
}

export type GetProject1QueryParams = {
  settingId?: string
}

export type GetProject1Error = Fetcher.ErrorWrapper<undefined>

export type GetProject1Variables = {
  queryParams?: GetProject1QueryParams
} & PortalContext['fetcherOptions']

export const fetchGetProject1 = (variables: GetProject1Variables) =>
  portalFetch<Schemas.RestResponseString, GetProject1Error, undefined, {}, GetProject1QueryParams, {}>({
    url: '/settings/build-sources/project',
    method: 'get',
    ...variables
  })

export const useGetProject1 = (
  variables: GetProject1Variables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.RestResponseString, GetProject1Error, Schemas.RestResponseString>,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<Schemas.RestResponseString, GetProject1Error, Schemas.RestResponseString>(
    queryKeyFn({ path: '/settings/build-sources/project', operationId: 'getProject1', variables }),
    () => fetchGetProject1({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type Get36PathParams = {
  streamId: string
}

export type Get36Error = Fetcher.ErrorWrapper<undefined>

export type Get36Variables = {
  pathParams: Get36PathParams
} & PortalContext['fetcherOptions']

export const fetchGet36 = (variables: Get36Variables) =>
  portalFetch<Schemas.RestResponseArtifactStream, Get36Error, undefined, {}, {}, Get36PathParams>({
    url: '/settings/artifact-streams/{streamId}',
    method: 'get',
    ...variables
  })

export const useGet36 = (
  variables: Get36Variables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.RestResponseArtifactStream, Get36Error, Schemas.RestResponseArtifactStream>,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<Schemas.RestResponseArtifactStream, Get36Error, Schemas.RestResponseArtifactStream>(
    queryKeyFn({ path: '/settings/artifact-streams/{streamId}', operationId: 'get36', variables }),
    () => fetchGet36({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type Update29PathParams = {
  streamId: string
}

export type Update29Error = Fetcher.ErrorWrapper<undefined>

export type Update29Variables = {
  body: RequestBodies.ArtifactStream
  pathParams: Update29PathParams
} & PortalContext['fetcherOptions']

export const fetchUpdate29 = (variables: Update29Variables) =>
  portalFetch<
    Schemas.RestResponseArtifactStream,
    Update29Error,
    RequestBodies.ArtifactStream,
    {},
    {},
    Update29PathParams
  >({ url: '/settings/artifact-streams/{streamId}', method: 'put', ...variables })

export const useUpdate29 = (
  options?: Omit<
    reactQuery.UseMutationOptions<Schemas.RestResponseArtifactStream, Update29Error, Update29Variables>,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<Schemas.RestResponseArtifactStream, Update29Error, Update29Variables>(
    (variables: Update29Variables) => fetchUpdate29({ ...fetcherOptions, ...variables }),
    options
  )
}

export type Delete26PathParams = {
  streamId: string
}

export type Delete26Error = Fetcher.ErrorWrapper<undefined>

export type Delete26Variables = {
  pathParams: Delete26PathParams
} & PortalContext['fetcherOptions']

export const fetchDelete26 = (variables: Delete26Variables) =>
  portalFetch<Schemas.RestResponse, Delete26Error, undefined, {}, {}, Delete26PathParams>({
    url: '/settings/artifact-streams/{streamId}',
    method: 'delete',
    ...variables
  })

export const useDelete26 = (
  options?: Omit<reactQuery.UseMutationOptions<Schemas.RestResponse, Delete26Error, Delete26Variables>, 'mutationFn'>
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<Schemas.RestResponse, Delete26Error, Delete26Variables>(
    (variables: Delete26Variables) => fetchDelete26({ ...fetcherOptions, ...variables }),
    options
  )
}

export type Get37PathParams = {
  attrId: string
}

export type Get37QueryParams = {
  /*
   * @default __GLOBAL_APP_ID__
   */
  appId?: string
}

export type Get37Error = Fetcher.ErrorWrapper<undefined>

export type Get37Variables = {
  pathParams: Get37PathParams
  queryParams?: Get37QueryParams
} & PortalContext['fetcherOptions']

export const fetchGet37 = (variables: Get37Variables) =>
  portalFetch<Schemas.RestResponseSettingAttribute, Get37Error, undefined, {}, Get37QueryParams, Get37PathParams>({
    url: '/settings/{attrId}',
    method: 'get',
    ...variables
  })

export const useGet37 = (
  variables: Get37Variables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.RestResponseSettingAttribute, Get37Error, Schemas.RestResponseSettingAttribute>,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<Schemas.RestResponseSettingAttribute, Get37Error, Schemas.RestResponseSettingAttribute>(
    queryKeyFn({ path: '/settings/{attrId}', operationId: 'get37', variables }),
    () => fetchGet37({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type Update30PathParams = {
  attrId: string
}

export type Update30QueryParams = {
  /*
   * @default __GLOBAL_APP_ID__
   */
  appId?: string
}

export type Update30Error = Fetcher.ErrorWrapper<undefined>

export type Update30Variables = {
  body: RequestBodies.SettingAttribute
  pathParams: Update30PathParams
  queryParams?: Update30QueryParams
} & PortalContext['fetcherOptions']

export const fetchUpdate30 = (variables: Update30Variables) =>
  portalFetch<
    Schemas.RestResponseSettingAttribute,
    Update30Error,
    RequestBodies.SettingAttribute,
    {},
    Update30QueryParams,
    Update30PathParams
  >({ url: '/settings/{attrId}', method: 'put', ...variables })

export const useUpdate30 = (
  options?: Omit<
    reactQuery.UseMutationOptions<Schemas.RestResponseSettingAttribute, Update30Error, Update30Variables>,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<Schemas.RestResponseSettingAttribute, Update30Error, Update30Variables>(
    (variables: Update30Variables) => fetchUpdate30({ ...fetcherOptions, ...variables }),
    options
  )
}

export type Delete27PathParams = {
  attrId: string
}

export type Delete27QueryParams = {
  /*
   * @default __GLOBAL_APP_ID__
   */
  appId?: string
}

export type Delete27Error = Fetcher.ErrorWrapper<undefined>

export type Delete27Variables = {
  pathParams: Delete27PathParams
  queryParams?: Delete27QueryParams
} & PortalContext['fetcherOptions']

export const fetchDelete27 = (variables: Delete27Variables) =>
  portalFetch<Schemas.RestResponse, Delete27Error, undefined, {}, Delete27QueryParams, Delete27PathParams>({
    url: '/settings/{attrId}',
    method: 'delete',
    ...variables
  })

export const useDelete27 = (
  options?: Omit<reactQuery.UseMutationOptions<Schemas.RestResponse, Delete27Error, Delete27Variables>, 'mutationFn'>
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<Schemas.RestResponse, Delete27Error, Delete27Variables>(
    (variables: Delete27Variables) => fetchDelete27({ ...fetcherOptions, ...variables }),
    options
  )
}

export type Update28PathParams = {
  attrId: string
}

export type Update28QueryParams = {
  /*
   * @default __GLOBAL_APP_ID__
   */
  appId?: string
  accountId?: string
}

export type Update28Error = Fetcher.ErrorWrapper<undefined>

export type Update28Variables = {
  body?: RequestBodies.Update28
  pathParams: Update28PathParams
  queryParams?: Update28QueryParams
} & PortalContext['fetcherOptions']

export const fetchUpdate28 = (variables: Update28Variables) =>
  portalFetch<
    Schemas.RestResponseSettingAttribute,
    Update28Error,
    RequestBodies.Update28,
    {},
    Update28QueryParams,
    Update28PathParams
  >({ url: '/settings/{attrId}/upload', method: 'put', ...variables })

export const useUpdate28 = (
  options?: Omit<
    reactQuery.UseMutationOptions<Schemas.RestResponseSettingAttribute, Update28Error, Update28Variables>,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<Schemas.RestResponseSettingAttribute, Update28Error, Update28Variables>(
    (variables: Update28Variables) => fetchUpdate28({ ...fetcherOptions, ...variables }),
    options
  )
}

export type List40QueryParams = {
  /*
   * @default __GLOBAL_APP_ID__
   */
  appId?: string
  currentAppId?: string
  currentEnvId?: string
  accountId?: string
  type?: (
    | 'HOST_CONNECTION_ATTRIBUTES'
    | 'BASTION_HOST_CONNECTION_ATTRIBUTES'
    | 'SMTP'
    | 'SFTP'
    | 'JENKINS'
    | 'BAMBOO'
    | 'STRING'
    | 'SPLUNK'
    | 'ELK'
    | 'LOGZ'
    | 'SUMO'
    | 'DATA_DOG'
    | 'APM_VERIFICATION'
    | 'BUG_SNAG'
    | 'LOG_VERIFICATION'
    | 'APP_DYNAMICS'
    | 'NEW_RELIC'
    | 'DYNA_TRACE'
    | 'INSTANA'
    | 'DATA_DOG_LOG'
    | 'CLOUD_WATCH'
    | 'SCALYR'
    | 'ELB'
    | 'SLACK'
    | 'AWS'
    | 'GCS'
    | 'GCP'
    | 'AZURE'
    | 'PCF'
    | 'RANCHER'
    | 'DIRECT'
    | 'KUBERNETES_CLUSTER'
    | 'DOCKER'
    | 'ECR'
    | 'GCR'
    | 'ACR'
    | 'PHYSICAL_DATA_CENTER'
    | 'KUBERNETES'
    | 'NEXUS'
    | 'ARTIFACTORY'
    | 'SMB'
    | 'AMAZON_S3'
    | 'GIT'
    | 'SSH_SESSION_CONFIG'
    | 'SERVICE_VARIABLE'
    | 'CONFIG_FILE'
    | 'KMS'
    | 'GCP_KMS'
    | 'JIRA'
    | 'SERVICENOW'
    | 'SECRET_TEXT'
    | 'YAML_GIT_SYNC'
    | 'VAULT'
    | 'VAULT_SSH'
    | 'AWS_SECRETS_MANAGER'
    | 'CYBERARK'
    | 'WINRM_CONNECTION_ATTRIBUTES'
    | 'WINRM_SESSION_CONFIG'
    | 'PROMETHEUS'
    | 'INFRASTRUCTURE_MAPPING'
    | 'HTTP_HELM_REPO'
    | 'AMAZON_S3_HELM_REPO'
    | 'GCS_HELM_REPO'
    | 'SPOT_INST'
    | 'AZURE_ARTIFACTS_PAT'
    | 'CUSTOM'
    | 'CE_AWS'
    | 'CE_GCP'
    | 'CE_AZURE'
    | 'AZURE_VAULT'
    | 'KUBERNETES_CLUSTER_NG'
    | 'GIT_NG'
    | 'SSO_SAML'
    | 'GCP_SECRETS_MANAGER'
    | 'TRIGGER'
  )[]
  gitSshConfigOnly?: boolean
  withArtifactStreamCount?: boolean
  artifactStreamSearchString?: string
  /*
   * @format int32
   * @default 2147483647
   */
  maxArtifactStreams?: number
  entityId?: string
  entityType?: string
  /*
   * @default 0
   */
  offset?: string
  limit?: string
  fieldsIncluded?: string[]
  fieldsExcluded?: string[]
}

export type List40Error = Fetcher.ErrorWrapper<undefined>

export type List40Variables = {
  queryParams?: List40QueryParams
} & PortalContext['fetcherOptions']

export const fetchList40 = (variables: List40Variables) =>
  portalFetch<Schemas.RestResponsePageResponseSettingAttribute, List40Error, undefined, {}, List40QueryParams, {}>({
    url: '/settings',
    method: 'get',
    ...variables
  })

export const useList40 = (
  variables: List40Variables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponsePageResponseSettingAttribute,
      List40Error,
      Schemas.RestResponsePageResponseSettingAttribute
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponsePageResponseSettingAttribute,
    List40Error,
    Schemas.RestResponsePageResponseSettingAttribute
  >(
    queryKeyFn({ path: '/settings', operationId: 'list40', variables }),
    () => fetchList40({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type Save19QueryParams = {
  /*
   * @default __GLOBAL_APP_ID__
   */
  appId?: string
  accountId?: string
}

export type Save19Error = Fetcher.ErrorWrapper<undefined>

export type Save19Variables = {
  body: RequestBodies.SettingAttribute
  queryParams?: Save19QueryParams
} & PortalContext['fetcherOptions']

export const fetchSave19 = (variables: Save19Variables) =>
  portalFetch<
    Schemas.RestResponseSettingAttribute,
    Save19Error,
    RequestBodies.SettingAttribute,
    {},
    Save19QueryParams,
    {}
  >({ url: '/settings', method: 'post', ...variables })

export const useSave19 = (
  options?: Omit<
    reactQuery.UseMutationOptions<Schemas.RestResponseSettingAttribute, Save19Error, Save19Variables>,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<Schemas.RestResponseSettingAttribute, Save19Error, Save19Variables>(
    (variables: Save19Variables) => fetchSave19({ ...fetcherOptions, ...variables }),
    options
  )
}

export type RetainSelectedGitConnectorsAndDeleteRestQueryParams = {
  /*
   * @default __GLOBAL_APP_ID__
   */
  appId?: string
  accountId?: string
}

export type RetainSelectedGitConnectorsAndDeleteRestError = Fetcher.ErrorWrapper<undefined>

export type RetainSelectedGitConnectorsAndDeleteRestVariables = {
  body?: RequestBodies.UpdateWhitelistedDomainsBody
  queryParams?: RetainSelectedGitConnectorsAndDeleteRestQueryParams
} & PortalContext['fetcherOptions']

export const fetchRetainSelectedGitConnectorsAndDeleteRest = (
  variables: RetainSelectedGitConnectorsAndDeleteRestVariables
) =>
  portalFetch<
    Schemas.RestResponse,
    RetainSelectedGitConnectorsAndDeleteRestError,
    RequestBodies.UpdateWhitelistedDomainsBody,
    {},
    RetainSelectedGitConnectorsAndDeleteRestQueryParams,
    {}
  >({ url: '/settings', method: 'delete', ...variables })

export const useRetainSelectedGitConnectorsAndDeleteRest = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.RestResponse,
      RetainSelectedGitConnectorsAndDeleteRestError,
      RetainSelectedGitConnectorsAndDeleteRestVariables
    >,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<
    Schemas.RestResponse,
    RetainSelectedGitConnectorsAndDeleteRestError,
    RetainSelectedGitConnectorsAndDeleteRestVariables
  >(
    (variables: RetainSelectedGitConnectorsAndDeleteRestVariables) =>
      fetchRetainSelectedGitConnectorsAndDeleteRest({ ...fetcherOptions, ...variables }),
    options
  )
}

export type ListArtifactStreams1QueryParams = {
  currentAppId?: string
  currentEnvId?: string
  accountId?: string
  settingId?: string
  withArtifactCount?: boolean
  artifactSearchString?: string
  /*
   * @format int32
   * @default 2147483647
   */
  maxArtifacts?: number
  entityId?: string
  entityType?: string
  /*
   * @default 0
   */
  offset?: string
  limit?: string
  fieldsIncluded?: string[]
  fieldsExcluded?: string[]
}

export type ListArtifactStreams1Error = Fetcher.ErrorWrapper<undefined>

export type ListArtifactStreams1Variables = {
  queryParams?: ListArtifactStreams1QueryParams
} & PortalContext['fetcherOptions']

export const fetchListArtifactStreams1 = (variables: ListArtifactStreams1Variables) =>
  portalFetch<
    Schemas.RestResponsePageResponseArtifactStream,
    ListArtifactStreams1Error,
    undefined,
    {},
    ListArtifactStreams1QueryParams,
    {}
  >({ url: '/settings/artifact-streams', method: 'get', ...variables })

export const useListArtifactStreams1 = (
  variables: ListArtifactStreams1Variables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponsePageResponseArtifactStream,
      ListArtifactStreams1Error,
      Schemas.RestResponsePageResponseArtifactStream
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponsePageResponseArtifactStream,
    ListArtifactStreams1Error,
    Schemas.RestResponsePageResponseArtifactStream
  >(
    queryKeyFn({ path: '/settings/artifact-streams', operationId: 'listArtifactStreams1', variables }),
    () => fetchListArtifactStreams1({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type Save18Error = Fetcher.ErrorWrapper<undefined>

export type Save18Variables = {
  body: RequestBodies.ArtifactStream
} & PortalContext['fetcherOptions']

export const fetchSave18 = (variables: Save18Variables) =>
  portalFetch<Schemas.RestResponseArtifactStream, Save18Error, RequestBodies.ArtifactStream, {}, {}, {}>({
    url: '/settings/artifact-streams',
    method: 'post',
    ...variables
  })

export const useSave18 = (
  options?: Omit<
    reactQuery.UseMutationOptions<Schemas.RestResponseArtifactStream, Save18Error, Save18Variables>,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<Schemas.RestResponseArtifactStream, Save18Error, Save18Variables>(
    (variables: Save18Variables) => fetchSave18({ ...fetcherOptions, ...variables }),
    options
  )
}

export type GetArtifactPaths1PathParams = {
  jobName: string
}

export type GetArtifactPaths1QueryParams = {
  settingId?: string
  groupId?: string
  streamType?: string
  repositoryFormat?: string
}

export type GetArtifactPaths1Error = Fetcher.ErrorWrapper<undefined>

export type GetArtifactPaths1Variables = {
  pathParams: GetArtifactPaths1PathParams
  queryParams?: GetArtifactPaths1QueryParams
} & PortalContext['fetcherOptions']

export const fetchGetArtifactPaths1 = (variables: GetArtifactPaths1Variables) =>
  portalFetch<
    Schemas.RestResponseSetString,
    GetArtifactPaths1Error,
    undefined,
    {},
    GetArtifactPaths1QueryParams,
    GetArtifactPaths1PathParams
  >({ url: '/settings/build-sources/jobs/{jobName}/paths', method: 'get', ...variables })

export const useGetArtifactPaths1 = (
  variables: GetArtifactPaths1Variables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.RestResponseSetString, GetArtifactPaths1Error, Schemas.RestResponseSetString>,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<Schemas.RestResponseSetString, GetArtifactPaths1Error, Schemas.RestResponseSetString>(
    queryKeyFn({ path: '/settings/build-sources/jobs/{jobName}/paths', operationId: 'getArtifactPaths1', variables }),
    () => fetchGetArtifactPaths1({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type Validate2QueryParams = {
  /*
   * @default __GLOBAL_APP_ID__
   */
  appId?: string
  accountId?: string
}

export type Validate2Error = Fetcher.ErrorWrapper<undefined>

export type Validate2Variables = {
  body: RequestBodies.SettingAttribute
  queryParams?: Validate2QueryParams
} & PortalContext['fetcherOptions']

export const fetchValidate2 = (variables: Validate2Variables) =>
  portalFetch<
    Schemas.RestResponseValidationResult,
    Validate2Error,
    RequestBodies.SettingAttribute,
    {},
    Validate2QueryParams,
    {}
  >({ url: '/settings/validate', method: 'post', ...variables })

export const useValidate2 = (
  options?: Omit<
    reactQuery.UseMutationOptions<Schemas.RestResponseValidationResult, Validate2Error, Validate2Variables>,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<Schemas.RestResponseValidationResult, Validate2Error, Validate2Variables>(
    (variables: Validate2Variables) => fetchValidate2({ ...fetcherOptions, ...variables }),
    options
  )
}

export type ListContainerRegistries1PathParams = {
  subscriptionId: string
}

export type ListContainerRegistries1QueryParams = {
  accountId?: string
  settingId?: string
}

export type ListContainerRegistries1Error = Fetcher.ErrorWrapper<undefined>

export type ListContainerRegistries1Variables = {
  pathParams: ListContainerRegistries1PathParams
  queryParams?: ListContainerRegistries1QueryParams
} & PortalContext['fetcherOptions']

export const fetchListContainerRegistries1 = (variables: ListContainerRegistries1Variables) =>
  portalFetch<
    Schemas.RestResponseListString,
    ListContainerRegistries1Error,
    undefined,
    {},
    ListContainerRegistries1QueryParams,
    ListContainerRegistries1PathParams
  >({ url: '/settings/subscriptions/{subscriptionId}/containerRegistries', method: 'get', ...variables })

export const useListContainerRegistries1 = (
  variables: ListContainerRegistries1Variables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponseListString,
      ListContainerRegistries1Error,
      Schemas.RestResponseListString
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponseListString,
    ListContainerRegistries1Error,
    Schemas.RestResponseListString
  >(
    queryKeyFn({
      path: '/settings/subscriptions/{subscriptionId}/containerRegistries',
      operationId: 'listContainerRegistries1',
      variables
    }),
    () => fetchListContainerRegistries1({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type ListRepositories2PathParams = {
  subscriptionId: string
  registryName: string
}

export type ListRepositories2QueryParams = {
  accountId?: string
  settingId?: string
}

export type ListRepositories2Error = Fetcher.ErrorWrapper<undefined>

export type ListRepositories2Variables = {
  pathParams: ListRepositories2PathParams
  queryParams?: ListRepositories2QueryParams
} & PortalContext['fetcherOptions']

export const fetchListRepositories2 = (variables: ListRepositories2Variables) =>
  portalFetch<
    Schemas.RestResponseListString,
    ListRepositories2Error,
    undefined,
    {},
    ListRepositories2QueryParams,
    ListRepositories2PathParams
  >({
    url: '/settings/subscriptions/{subscriptionId}/containerRegistries/{registryName}/repositories',
    method: 'get',
    ...variables
  })

export const useListRepositories2 = (
  variables: ListRepositories2Variables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.RestResponseListString, ListRepositories2Error, Schemas.RestResponseListString>,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<Schemas.RestResponseListString, ListRepositories2Error, Schemas.RestResponseListString>(
    queryKeyFn({
      path: '/settings/subscriptions/{subscriptionId}/containerRegistries/{registryName}/repositories',
      operationId: 'listRepositories2',
      variables
    }),
    () => fetchListRepositories2({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type ListAzureRegions1QueryParams = {
  accountId?: string
}

export type ListAzureRegions1Error = Fetcher.ErrorWrapper<undefined>

export type ListAzureRegions1Variables = {
  queryParams?: ListAzureRegions1QueryParams
} & PortalContext['fetcherOptions']

export const fetchListAzureRegions1 = (variables: ListAzureRegions1Variables) =>
  portalFetch<
    Schemas.RestResponseListNameValuePair,
    ListAzureRegions1Error,
    undefined,
    {},
    ListAzureRegions1QueryParams,
    {}
  >({ url: '/settings/azure-regions', method: 'get', ...variables })

export const useListAzureRegions1 = (
  variables: ListAzureRegions1Variables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponseListNameValuePair,
      ListAzureRegions1Error,
      Schemas.RestResponseListNameValuePair
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponseListNameValuePair,
    ListAzureRegions1Error,
    Schemas.RestResponseListNameValuePair
  >(
    queryKeyFn({ path: '/settings/azure-regions', operationId: 'listAzureRegions1', variables }),
    () => fetchListAzureRegions1({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type GetSmbPaths1QueryParams = {
  settingId?: string
}

export type GetSmbPaths1Error = Fetcher.ErrorWrapper<undefined>

export type GetSmbPaths1Variables = {
  queryParams?: GetSmbPaths1QueryParams
} & PortalContext['fetcherOptions']

export const fetchGetSmbPaths1 = (variables: GetSmbPaths1Variables) =>
  portalFetch<Schemas.RestResponseListString, GetSmbPaths1Error, undefined, {}, GetSmbPaths1QueryParams, {}>({
    url: '/settings/build-sources/smb-paths',
    method: 'get',
    ...variables
  })

export const useGetSmbPaths1 = (
  variables: GetSmbPaths1Variables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.RestResponseListString, GetSmbPaths1Error, Schemas.RestResponseListString>,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<Schemas.RestResponseListString, GetSmbPaths1Error, Schemas.RestResponseListString>(
    queryKeyFn({ path: '/settings/build-sources/smb-paths', operationId: 'getSmbPaths1', variables }),
    () => fetchGetSmbPaths1({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type GetGroupIds1PathParams = {
  jobName: string
}

export type GetGroupIds1QueryParams = {
  settingId?: string
  repositoryFormat?: string
}

export type GetGroupIds1Error = Fetcher.ErrorWrapper<undefined>

export type GetGroupIds1Variables = {
  pathParams: GetGroupIds1PathParams
  queryParams?: GetGroupIds1QueryParams
} & PortalContext['fetcherOptions']

export const fetchGetGroupIds1 = (variables: GetGroupIds1Variables) =>
  portalFetch<
    Schemas.RestResponseSetString,
    GetGroupIds1Error,
    undefined,
    {},
    GetGroupIds1QueryParams,
    GetGroupIds1PathParams
  >({ url: '/settings/build-sources/jobs/{jobName}/groupIds', method: 'get', ...variables })

export const useGetGroupIds1 = (
  variables: GetGroupIds1Variables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.RestResponseSetString, GetGroupIds1Error, Schemas.RestResponseSetString>,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<Schemas.RestResponseSetString, GetGroupIds1Error, Schemas.RestResponseSetString>(
    queryKeyFn({ path: '/settings/build-sources/jobs/{jobName}/groupIds', operationId: 'getGroupIds1', variables }),
    () => fetchGetGroupIds1({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type CollectArtifact1QueryParams = {
  artifactStreamId?: string
}

export type CollectArtifact1Error = Fetcher.ErrorWrapper<undefined>

export type CollectArtifact1Variables = {
  body?: RequestBodies.BuildDetails
  queryParams?: CollectArtifact1QueryParams
} & PortalContext['fetcherOptions']

export const fetchCollectArtifact1 = (variables: CollectArtifact1Variables) =>
  portalFetch<
    Schemas.RestResponseArtifact,
    CollectArtifact1Error,
    RequestBodies.BuildDetails,
    {},
    CollectArtifact1QueryParams,
    {}
  >({ url: '/settings/build-sources', method: 'post', ...variables })

export const useCollectArtifact1 = (
  options?: Omit<
    reactQuery.UseMutationOptions<Schemas.RestResponseArtifact, CollectArtifact1Error, CollectArtifact1Variables>,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<Schemas.RestResponseArtifact, CollectArtifact1Error, CollectArtifact1Variables>(
    (variables: CollectArtifact1Variables) => fetchCollectArtifact1({ ...fetcherOptions, ...variables }),
    options
  )
}

export type ListSubscriptions1QueryParams = {
  accountId?: string
  settingId?: string
}

export type ListSubscriptions1Error = Fetcher.ErrorWrapper<undefined>

export type ListSubscriptions1Variables = {
  queryParams?: ListSubscriptions1QueryParams
} & PortalContext['fetcherOptions']

export const fetchListSubscriptions1 = (variables: ListSubscriptions1Variables) =>
  portalFetch<
    Schemas.RestResponseMapStringString,
    ListSubscriptions1Error,
    undefined,
    {},
    ListSubscriptions1QueryParams,
    {}
  >({ url: '/settings/subscriptions', method: 'get', ...variables })

export const useListSubscriptions1 = (
  variables: ListSubscriptions1Variables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponseMapStringString,
      ListSubscriptions1Error,
      Schemas.RestResponseMapStringString
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponseMapStringString,
    ListSubscriptions1Error,
    Schemas.RestResponseMapStringString
  >(
    queryKeyFn({ path: '/settings/subscriptions', operationId: 'listSubscriptions1', variables }),
    () => fetchListSubscriptions1({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type GetJobs1QueryParams = {
  settingId?: string
  parentJobName?: string
}

export type GetJobs1Error = Fetcher.ErrorWrapper<undefined>

export type GetJobs1Variables = {
  queryParams?: GetJobs1QueryParams
} & PortalContext['fetcherOptions']

export const fetchGetJobs1 = (variables: GetJobs1Variables) =>
  portalFetch<Schemas.RestResponseSetJobDetails, GetJobs1Error, undefined, {}, GetJobs1QueryParams, {}>({
    url: '/settings/build-sources/jobs',
    method: 'get',
    ...variables
  })

export const useGetJobs1 = (
  variables: GetJobs1Variables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.RestResponseSetJobDetails, GetJobs1Error, Schemas.RestResponseSetJobDetails>,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<Schemas.RestResponseSetJobDetails, GetJobs1Error, Schemas.RestResponseSetJobDetails>(
    queryKeyFn({ path: '/settings/build-sources/jobs', operationId: 'getJobs1', variables }),
    () => fetchGetJobs1({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type ValidateConnectivityQueryParams = {
  /*
   * @default __GLOBAL_APP_ID__
   */
  appId?: string
  accountId?: string
}

export type ValidateConnectivityError = Fetcher.ErrorWrapper<undefined>

export type ValidateConnectivityVariables = {
  body: RequestBodies.SettingAttribute
  queryParams?: ValidateConnectivityQueryParams
} & PortalContext['fetcherOptions']

export const fetchValidateConnectivity = (variables: ValidateConnectivityVariables) =>
  portalFetch<
    Schemas.RestResponseValidationResult,
    ValidateConnectivityError,
    RequestBodies.SettingAttribute,
    {},
    ValidateConnectivityQueryParams,
    {}
  >({ url: '/settings/validate-connectivity', method: 'post', ...variables })

export const useValidateConnectivity = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.RestResponseValidationResult,
      ValidateConnectivityError,
      ValidateConnectivityVariables
    >,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<
    Schemas.RestResponseValidationResult,
    ValidateConnectivityError,
    ValidateConnectivityVariables
  >(
    (variables: ValidateConnectivityVariables) => fetchValidateConnectivity({ ...fetcherOptions, ...variables }),
    options
  )
}

export type GetBuilds1QueryParams = {
  artifactStreamId?: string
  settingId?: string
  /*
   * @format int32
   * @default -1
   */
  maxResults?: number
}

export type GetBuilds1Error = Fetcher.ErrorWrapper<undefined>

export type GetBuilds1Variables = {
  queryParams?: GetBuilds1QueryParams
} & PortalContext['fetcherOptions']

export const fetchGetBuilds1 = (variables: GetBuilds1Variables) =>
  portalFetch<Schemas.RestResponseListBuildDetails, GetBuilds1Error, undefined, {}, GetBuilds1QueryParams, {}>({
    url: '/settings/build-sources/builds',
    method: 'get',
    ...variables
  })

export const useGetBuilds1 = (
  variables: GetBuilds1Variables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponseListBuildDetails,
      GetBuilds1Error,
      Schemas.RestResponseListBuildDetails
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponseListBuildDetails,
    GetBuilds1Error,
    Schemas.RestResponseListBuildDetails
  >(
    queryKeyFn({ path: '/settings/build-sources/builds', operationId: 'getBuilds1', variables }),
    () => fetchGetBuilds1({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type ListTags2QueryParams = {
  region?: string
  computeProviderId?: string
  resourceType?: string
}

export type ListTags2Error = Fetcher.ErrorWrapper<undefined>

export type ListTags2Variables = {
  queryParams?: ListTags2QueryParams
} & PortalContext['fetcherOptions']

export const fetchListTags2 = (variables: ListTags2Variables) =>
  portalFetch<Schemas.RestResponseSetString, ListTags2Error, undefined, {}, ListTags2QueryParams, {}>({
    url: '/settings/tags',
    method: 'get',
    ...variables
  })

export const useListTags2 = (
  variables: ListTags2Variables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.RestResponseSetString, ListTags2Error, Schemas.RestResponseSetString>,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<Schemas.RestResponseSetString, ListTags2Error, Schemas.RestResponseSetString>(
    queryKeyFn({ path: '/settings/tags', operationId: 'listTags2', variables }),
    () => fetchListTags2({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type GetBuckets1QueryParams = {
  projectId?: string
  settingId?: string
}

export type GetBuckets1Error = Fetcher.ErrorWrapper<undefined>

export type GetBuckets1Variables = {
  queryParams?: GetBuckets1QueryParams
} & PortalContext['fetcherOptions']

export const fetchGetBuckets1 = (variables: GetBuckets1Variables) =>
  portalFetch<Schemas.RestResponseMapStringString, GetBuckets1Error, undefined, {}, GetBuckets1QueryParams, {}>({
    url: '/settings/build-sources/buckets',
    method: 'get',
    ...variables
  })

export const useGetBuckets1 = (
  variables: GetBuckets1Variables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponseMapStringString,
      GetBuckets1Error,
      Schemas.RestResponseMapStringString
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponseMapStringString,
    GetBuckets1Error,
    Schemas.RestResponseMapStringString
  >(
    queryKeyFn({ path: '/settings/build-sources/buckets', operationId: 'getBuckets1', variables }),
    () => fetchGetBuckets1({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type SaveUploadQueryParams = {
  /*
   * @default __GLOBAL_APP_ID__
   */
  appId?: string
  accountId?: string
}

export type SaveUploadError = Fetcher.ErrorWrapper<undefined>

export type SaveUploadVariables = {
  body?: RequestBodies.Update28
  queryParams?: SaveUploadQueryParams
} & PortalContext['fetcherOptions']

export const fetchSaveUpload = (variables: SaveUploadVariables) =>
  portalFetch<
    Schemas.RestResponseSettingAttribute,
    SaveUploadError,
    RequestBodies.Update28,
    {},
    SaveUploadQueryParams,
    {}
  >({ url: '/settings/upload', method: 'post', ...variables })

export const useSaveUpload = (
  options?: Omit<
    reactQuery.UseMutationOptions<Schemas.RestResponseSettingAttribute, SaveUploadError, SaveUploadVariables>,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<Schemas.RestResponseSettingAttribute, SaveUploadError, SaveUploadVariables>(
    (variables: SaveUploadVariables) => fetchSaveUpload({ ...fetcherOptions, ...variables }),
    options
  )
}

export type ValidateGcpConnectivityQueryParams = {
  attrId?: string
  /*
   * @default __GLOBAL_APP_ID__
   */
  appId?: string
  accountId?: string
}

export type ValidateGcpConnectivityError = Fetcher.ErrorWrapper<undefined>

export type ValidateGcpConnectivityVariables = {
  queryParams?: ValidateGcpConnectivityQueryParams
} & PortalContext['fetcherOptions']

export const fetchValidateGcpConnectivity = (variables: ValidateGcpConnectivityVariables) =>
  portalFetch<
    Schemas.RestResponseValidationResult,
    ValidateGcpConnectivityError,
    undefined,
    {},
    ValidateGcpConnectivityQueryParams,
    {}
  >({ url: '/settings/validate-gcp-connectivity', method: 'post', ...variables })

export const useValidateGcpConnectivity = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.RestResponseValidationResult,
      ValidateGcpConnectivityError,
      ValidateGcpConnectivityVariables
    >,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<
    Schemas.RestResponseValidationResult,
    ValidateGcpConnectivityError,
    ValidateGcpConnectivityVariables
  >(
    (variables: ValidateGcpConnectivityVariables) => fetchValidateGcpConnectivity({ ...fetcherOptions, ...variables }),
    options
  )
}

export type ListArtifactsQueryParams = {
  accountId?: string
  /*
   * @default 0
   */
  offset?: string
  limit?: string
  fieldsIncluded?: string[]
  fieldsExcluded?: string[]
}

export type ListArtifactsError = Fetcher.ErrorWrapper<undefined>

export type ListArtifactsVariables = {
  queryParams?: ListArtifactsQueryParams
} & PortalContext['fetcherOptions']

export const fetchListArtifacts = (variables: ListArtifactsVariables) =>
  portalFetch<
    Schemas.RestResponsePageResponseArtifact,
    ListArtifactsError,
    undefined,
    {},
    ListArtifactsQueryParams,
    {}
  >({ url: '/settings/artifact-streams/artifacts', method: 'get', ...variables })

export const useListArtifacts = (
  variables: ListArtifactsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponsePageResponseArtifact,
      ListArtifactsError,
      Schemas.RestResponsePageResponseArtifact
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponsePageResponseArtifact,
    ListArtifactsError,
    Schemas.RestResponsePageResponseArtifact
  >(
    queryKeyFn({ path: '/settings/artifact-streams/artifacts', operationId: 'listArtifacts', variables }),
    () => fetchListArtifacts({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type GetBuildPlans1QueryParams = {
  settingId?: string
  streamType?: string
  repositoryType?: string
  repositoryFormat?: string
}

export type GetBuildPlans1Error = Fetcher.ErrorWrapper<undefined>

export type GetBuildPlans1Variables = {
  queryParams?: GetBuildPlans1QueryParams
} & PortalContext['fetcherOptions']

export const fetchGetBuildPlans1 = (variables: GetBuildPlans1Variables) =>
  portalFetch<Schemas.RestResponseMapStringString, GetBuildPlans1Error, undefined, {}, GetBuildPlans1QueryParams, {}>({
    url: '/settings/build-sources/plans',
    method: 'get',
    ...variables
  })

export const useGetBuildPlans1 = (
  variables: GetBuildPlans1Variables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponseMapStringString,
      GetBuildPlans1Error,
      Schemas.RestResponseMapStringString
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponseMapStringString,
    GetBuildPlans1Error,
    Schemas.RestResponseMapStringString
  >(
    queryKeyFn({ path: '/settings/build-sources/plans', operationId: 'getBuildPlans1', variables }),
    () => fetchGetBuildPlans1({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type GetSftpPaths1QueryParams = {
  settingId?: string
  streamType?: string
}

export type GetSftpPaths1Error = Fetcher.ErrorWrapper<undefined>

export type GetSftpPaths1Variables = {
  queryParams?: GetSftpPaths1QueryParams
} & PortalContext['fetcherOptions']

export const fetchGetSftpPaths1 = (variables: GetSftpPaths1Variables) =>
  portalFetch<Schemas.RestResponseListString, GetSftpPaths1Error, undefined, {}, GetSftpPaths1QueryParams, {}>({
    url: '/settings/build-sources/artifact-paths',
    method: 'get',
    ...variables
  })

export const useGetSftpPaths1 = (
  variables: GetSftpPaths1Variables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.RestResponseListString, GetSftpPaths1Error, Schemas.RestResponseListString>,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<Schemas.RestResponseListString, GetSftpPaths1Error, Schemas.RestResponseListString>(
    queryKeyFn({ path: '/settings/build-sources/artifact-paths', operationId: 'getSftpPaths1', variables }),
    () => fetchGetSftpPaths1({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type FetchPackageNames1PathParams = {
  repositoryName: string
}

export type FetchPackageNames1QueryParams = {
  repositoryFormat?: string
  settingId?: string
}

export type FetchPackageNames1Error = Fetcher.ErrorWrapper<undefined>

export type FetchPackageNames1Variables = {
  pathParams: FetchPackageNames1PathParams
  queryParams?: FetchPackageNames1QueryParams
} & PortalContext['fetcherOptions']

export const fetchFetchPackageNames1 = (variables: FetchPackageNames1Variables) =>
  portalFetch<
    Schemas.RestResponseSetString,
    FetchPackageNames1Error,
    undefined,
    {},
    FetchPackageNames1QueryParams,
    FetchPackageNames1PathParams
  >({ url: '/settings/build-sources/nexus/repositories/{repositoryName}/packageNames', method: 'get', ...variables })

export const useFetchPackageNames1 = (
  variables: FetchPackageNames1Variables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.RestResponseSetString, FetchPackageNames1Error, Schemas.RestResponseSetString>,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<Schemas.RestResponseSetString, FetchPackageNames1Error, Schemas.RestResponseSetString>(
    queryKeyFn({
      path: '/settings/build-sources/nexus/repositories/{repositoryName}/packageNames',
      operationId: 'fetchPackageNames1',
      variables
    }),
    () => fetchFetchPackageNames1({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type ListAwsRegions1QueryParams = {
  accountId?: string
}

export type ListAwsRegions1Error = Fetcher.ErrorWrapper<undefined>

export type ListAwsRegions1Variables = {
  queryParams?: ListAwsRegions1QueryParams
} & PortalContext['fetcherOptions']

export const fetchListAwsRegions1 = (variables: ListAwsRegions1Variables) =>
  portalFetch<
    Schemas.RestResponseListNameValuePair,
    ListAwsRegions1Error,
    undefined,
    {},
    ListAwsRegions1QueryParams,
    {}
  >({ url: '/settings/aws-regions', method: 'get', ...variables })

export const useListAwsRegions1 = (
  variables: ListAwsRegions1Variables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponseListNameValuePair,
      ListAwsRegions1Error,
      Schemas.RestResponseListNameValuePair
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponseListNameValuePair,
    ListAwsRegions1Error,
    Schemas.RestResponseListNameValuePair
  >(
    queryKeyFn({ path: '/settings/aws-regions', operationId: 'listAwsRegions1', variables }),
    () => fetchListAwsRegions1({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type ValidateTokenQueryParams = {
  token?: string
}

export type ValidateTokenError = Fetcher.ErrorWrapper<undefined>

export type ValidateTokenVariables = {
  queryParams?: ValidateTokenQueryParams
} & PortalContext['fetcherOptions']

export const fetchValidateToken = (variables: ValidateTokenVariables) =>
  portalFetch<undefined, ValidateTokenError, undefined, {}, ValidateTokenQueryParams, {}>({
    url: '/signup/check-validity/azure-marketplace',
    method: 'get',
    ...variables
  })

export const useValidateToken = (
  variables: ValidateTokenVariables,
  options?: Omit<reactQuery.UseQueryOptions<undefined, ValidateTokenError, undefined>, 'queryKey' | 'queryFn'>
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<undefined, ValidateTokenError, undefined>(
    queryKeyFn({ path: '/signup/check-validity/azure-marketplace', operationId: 'validateToken', variables }),
    () => fetchValidateToken({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type CompleteSignupPathParams = {
  token: string
}

export type CompleteSignupError = Fetcher.ErrorWrapper<undefined>

export type CompleteSignupVariables = {
  pathParams: CompleteSignupPathParams
} & PortalContext['fetcherOptions']

export const fetchCompleteSignup = (variables: CompleteSignupVariables) =>
  portalFetch<Schemas.RestResponseUser, CompleteSignupError, undefined, {}, {}, CompleteSignupPathParams>({
    url: '/signup/complete/{token}',
    method: 'post',
    ...variables
  })

export const useCompleteSignup = (
  options?: Omit<
    reactQuery.UseMutationOptions<Schemas.RestResponseUser, CompleteSignupError, CompleteSignupVariables>,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<Schemas.RestResponseUser, CompleteSignupError, CompleteSignupVariables>(
    (variables: CompleteSignupVariables) => fetchCompleteSignup({ ...fetcherOptions, ...variables }),
    options
  )
}

export type SignupPathParams = {
  source: string
}

export type SignupError = Fetcher.ErrorWrapper<undefined>

export type SignupVariables = {
  body: RequestBodies.UserInvite
  pathParams: SignupPathParams
} & PortalContext['fetcherOptions']

export const fetchSignup = (variables: SignupVariables) =>
  portalFetch<Schemas.RestResponseBoolean, SignupError, RequestBodies.UserInvite, {}, {}, SignupPathParams>({
    url: '/signup/{source}',
    method: 'post',
    ...variables
  })

export const useSignup = (
  options?: Omit<reactQuery.UseMutationOptions<Schemas.RestResponseBoolean, SignupError, SignupVariables>, 'mutationFn'>
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<Schemas.RestResponseBoolean, SignupError, SignupVariables>(
    (variables: SignupVariables) => fetchSignup({ ...fetcherOptions, ...variables }),
    options
  )
}

export type CompleteAzureSignupQueryParams = {
  token?: string
}

export type CompleteAzureSignupError = Fetcher.ErrorWrapper<undefined>

export type CompleteAzureSignupVariables = {
  queryParams?: CompleteAzureSignupQueryParams
} & PortalContext['fetcherOptions']

export const fetchCompleteAzureSignup = (variables: CompleteAzureSignupVariables) =>
  portalFetch<Schemas.RestResponseUser, CompleteAzureSignupError, undefined, {}, CompleteAzureSignupQueryParams, {}>({
    url: '/signup/azure-marketplace/complete',
    method: 'put',
    ...variables
  })

export const useCompleteAzureSignup = (
  options?: Omit<
    reactQuery.UseMutationOptions<Schemas.RestResponseUser, CompleteAzureSignupError, CompleteAzureSignupVariables>,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<Schemas.RestResponseUser, CompleteAzureSignupError, CompleteAzureSignupVariables>(
    (variables: CompleteAzureSignupVariables) => fetchCompleteAzureSignup({ ...fetcherOptions, ...variables }),
    options
  )
}

export type HandleSlackApprovalError = Fetcher.ErrorWrapper<undefined>

export type HandleSlackApprovalVariables = PortalContext['fetcherOptions']

export const fetchHandleSlackApproval = (variables: HandleSlackApprovalVariables) =>
  portalFetch<Schemas.RestResponseBoolean, HandleSlackApprovalError, undefined, {}, {}, {}>({
    url: '/slack/approval',
    method: 'post',
    ...variables
  })

export const useHandleSlackApproval = (
  options?: Omit<
    reactQuery.UseMutationOptions<Schemas.RestResponseBoolean, HandleSlackApprovalError, HandleSlackApprovalVariables>,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<Schemas.RestResponseBoolean, HandleSlackApprovalError, HandleSlackApprovalVariables>(
    (variables: HandleSlackApprovalVariables) => fetchHandleSlackApproval({ ...fetcherOptions, ...variables }),
    options
  )
}

export type GetSmtpConfigQueryParams = {
  accountId?: string
}

export type GetSmtpConfigError = Fetcher.ErrorWrapper<undefined>

export type GetSmtpConfigVariables = {
  queryParams?: GetSmtpConfigQueryParams
} & PortalContext['fetcherOptions']

export const fetchGetSmtpConfig = (variables: GetSmtpConfigVariables) =>
  portalFetch<undefined, GetSmtpConfigError, undefined, {}, GetSmtpConfigQueryParams, {}>({
    url: '/ng/smtp-config',
    method: 'get',
    ...variables
  })

export const useGetSmtpConfig = (
  variables: GetSmtpConfigVariables,
  options?: Omit<reactQuery.UseQueryOptions<undefined, GetSmtpConfigError, undefined>, 'queryKey' | 'queryFn'>
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<undefined, GetSmtpConfigError, undefined>(
    queryKeyFn({ path: '/ng/smtp-config', operationId: 'getSmtpConfig', variables }),
    () => fetchGetSmtpConfig({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type GetLogRecords2QueryParams = {
  accountId?: string
}

export type GetLogRecords2Error = Fetcher.ErrorWrapper<undefined>

export type GetLogRecords2Variables = {
  body: Schemas.SplunkSetupTestNodeData
  queryParams?: GetLogRecords2QueryParams
} & PortalContext['fetcherOptions']

export const fetchGetLogRecords2 = (variables: GetLogRecords2Variables) =>
  portalFetch<
    Schemas.RestResponseVerificationNodeDataSetupResponse,
    GetLogRecords2Error,
    Schemas.SplunkSetupTestNodeData,
    {},
    GetLogRecords2QueryParams,
    {}
  >({ url: '/splunkv2/node-data', method: 'post', ...variables })

export const useGetLogRecords2 = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.RestResponseVerificationNodeDataSetupResponse,
      GetLogRecords2Error,
      GetLogRecords2Variables
    >,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<
    Schemas.RestResponseVerificationNodeDataSetupResponse,
    GetLogRecords2Error,
    GetLogRecords2Variables
  >((variables: GetLogRecords2Variables) => fetchGetLogRecords2({ ...fetcherOptions, ...variables }), options)
}

export type GetRegions1QueryParams = {
  accountId?: string
  settingId?: string
}

export type GetRegions1Error = Fetcher.ErrorWrapper<undefined>

export type GetRegions1Variables = {
  queryParams?: GetRegions1QueryParams
} & PortalContext['fetcherOptions']

export const fetchGetRegions1 = (variables: GetRegions1Variables) =>
  portalFetch<Schemas.RestResponseListString, GetRegions1Error, undefined, {}, GetRegions1QueryParams, {}>({
    url: '/stackdriver/get-regions',
    method: 'get',
    ...variables
  })

export const useGetRegions1 = (
  variables: GetRegions1Variables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.RestResponseListString, GetRegions1Error, Schemas.RestResponseListString>,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<Schemas.RestResponseListString, GetRegions1Error, Schemas.RestResponseListString>(
    queryKeyFn({ path: '/stackdriver/get-regions', operationId: 'getRegions1', variables }),
    () => fetchGetRegions1({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type GetDataForNodeQueryParams = {
  accountId?: string
}

export type GetDataForNodeError = Fetcher.ErrorWrapper<undefined>

export type GetDataForNodeVariables = {
  body: RequestBodies.StackDriverSetupTestNodeData
  queryParams?: GetDataForNodeQueryParams
} & PortalContext['fetcherOptions']

export const fetchGetDataForNode = (variables: GetDataForNodeVariables) =>
  portalFetch<
    Schemas.RestResponseVerificationNodeDataSetupResponse,
    GetDataForNodeError,
    RequestBodies.StackDriverSetupTestNodeData,
    {},
    GetDataForNodeQueryParams,
    {}
  >({ url: '/stackdriver/node-data', method: 'post', ...variables })

export const useGetDataForNode = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.RestResponseVerificationNodeDataSetupResponse,
      GetDataForNodeError,
      GetDataForNodeVariables
    >,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<
    Schemas.RestResponseVerificationNodeDataSetupResponse,
    GetDataForNodeError,
    GetDataForNodeVariables
  >((variables: GetDataForNodeVariables) => fetchGetDataForNode({ ...fetcherOptions, ...variables }), options)
}

export type GetMetricNames1QueryParams = {
  accountId?: string
  namespace?: string
}

export type GetMetricNames1Error = Fetcher.ErrorWrapper<undefined>

export type GetMetricNames1Variables = {
  queryParams?: GetMetricNames1QueryParams
} & PortalContext['fetcherOptions']

export const fetchGetMetricNames1 = (variables: GetMetricNames1Variables) =>
  portalFetch<
    Schemas.RestResponseListStackDriverMetric,
    GetMetricNames1Error,
    undefined,
    {},
    GetMetricNames1QueryParams,
    {}
  >({ url: '/stackdriver/get-metric-names', method: 'get', ...variables })

export const useGetMetricNames1 = (
  variables: GetMetricNames1Variables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponseListStackDriverMetric,
      GetMetricNames1Error,
      Schemas.RestResponseListStackDriverMetric
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponseListStackDriverMetric,
    GetMetricNames1Error,
    Schemas.RestResponseListStackDriverMetric
  >(
    queryKeyFn({ path: '/stackdriver/get-metric-names', operationId: 'getMetricNames1', variables }),
    () => fetchGetMetricNames1({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type GetLoadBalancers3QueryParams = {
  accountId?: string
  settingId?: string
  region?: string
}

export type GetLoadBalancers3Error = Fetcher.ErrorWrapper<undefined>

export type GetLoadBalancers3Variables = {
  queryParams?: GetLoadBalancers3QueryParams
} & PortalContext['fetcherOptions']

export const fetchGetLoadBalancers3 = (variables: GetLoadBalancers3Variables) =>
  portalFetch<
    Schemas.RestResponseMapStringString,
    GetLoadBalancers3Error,
    undefined,
    {},
    GetLoadBalancers3QueryParams,
    {}
  >({ url: '/stackdriver/get-load-balancers', method: 'get', ...variables })

export const useGetLoadBalancers3 = (
  variables: GetLoadBalancers3Variables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponseMapStringString,
      GetLoadBalancers3Error,
      Schemas.RestResponseMapStringString
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponseMapStringString,
    GetLoadBalancers3Error,
    Schemas.RestResponseMapStringString
  >(
    queryKeyFn({ path: '/stackdriver/get-load-balancers', operationId: 'getLoadBalancers3', variables }),
    () => fetchGetLoadBalancers3({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type GetSampleLogRecord2QueryParams = {
  accountId?: string
}

export type GetSampleLogRecord2Error = Fetcher.ErrorWrapper<undefined>

export type GetSampleLogRecord2Variables = {
  body: RequestBodies.StackDriverSetupTestNodeData
  queryParams?: GetSampleLogRecord2QueryParams
} & PortalContext['fetcherOptions']

export const fetchGetSampleLogRecord2 = (variables: GetSampleLogRecord2Variables) =>
  portalFetch<
    Schemas.RestResponseObject,
    GetSampleLogRecord2Error,
    RequestBodies.StackDriverSetupTestNodeData,
    {},
    GetSampleLogRecord2QueryParams,
    {}
  >({ url: '/stackdriver/get-sample-record', method: 'post', ...variables })

export const useGetSampleLogRecord2 = (
  options?: Omit<
    reactQuery.UseMutationOptions<Schemas.RestResponseObject, GetSampleLogRecord2Error, GetSampleLogRecord2Variables>,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<Schemas.RestResponseObject, GetSampleLogRecord2Error, GetSampleLogRecord2Variables>(
    (variables: GetSampleLogRecord2Variables) => fetchGetSampleLogRecord2({ ...fetcherOptions, ...variables }),
    options
  )
}

export type InstanceStatsQueryParams = {
  accountId?: string
  /*
   * @format int32
   * @default 30
   */
  numOfDays?: number
  appId?: string[]
}

export type InstanceStatsError = Fetcher.ErrorWrapper<undefined>

export type InstanceStatsVariables = {
  queryParams?: InstanceStatsQueryParams
} & PortalContext['fetcherOptions']

export const fetchInstanceStats = (variables: InstanceStatsVariables) =>
  portalFetch<
    Schemas.RestResponseServiceInstanceStatistics,
    InstanceStatsError,
    undefined,
    {},
    InstanceStatsQueryParams,
    {}
  >({ url: '/statistics/service-instance-stats', method: 'get', ...variables })

export const useInstanceStats = (
  variables: InstanceStatsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponseServiceInstanceStatistics,
      InstanceStatsError,
      Schemas.RestResponseServiceInstanceStatistics
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponseServiceInstanceStatistics,
    InstanceStatsError,
    Schemas.RestResponseServiceInstanceStatistics
  >(
    queryKeyFn({ path: '/statistics/service-instance-stats', operationId: 'instanceStats', variables }),
    () => fetchInstanceStats({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type DeploymentStatsQueryParams = {
  accountId?: string
  /*
   * @format int32
   * @default 30
   */
  numOfDays?: number
  appId?: string[]
}

export type DeploymentStatsError = Fetcher.ErrorWrapper<undefined>

export type DeploymentStatsVariables = {
  queryParams?: DeploymentStatsQueryParams
} & PortalContext['fetcherOptions']

export const fetchDeploymentStats = (variables: DeploymentStatsVariables) =>
  portalFetch<
    Schemas.RestResponseDeploymentStatistics,
    DeploymentStatsError,
    undefined,
    {},
    DeploymentStatsQueryParams,
    {}
  >({ url: '/statistics/deployment-stats', method: 'get', ...variables })

export const useDeploymentStats = (
  variables: DeploymentStatsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponseDeploymentStatistics,
      DeploymentStatsError,
      Schemas.RestResponseDeploymentStatistics
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponseDeploymentStatistics,
    DeploymentStatsError,
    Schemas.RestResponseDeploymentStatistics
  >(
    queryKeyFn({ path: '/statistics/deployment-stats', operationId: 'deploymentStats', variables }),
    () => fetchDeploymentStats({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type GetSampleLogRecord3QueryParams = {
  accountId?: string
  serverConfigId?: string
  /*
   * @format int32
   * @default 10
   */
  durationInMinutes?: number
}

export type GetSampleLogRecord3Error = Fetcher.ErrorWrapper<undefined>

export type GetSampleLogRecord3Variables = {
  queryParams?: GetSampleLogRecord3QueryParams
} & PortalContext['fetcherOptions']

export const fetchGetSampleLogRecord3 = (variables: GetSampleLogRecord3Variables) =>
  portalFetch<Schemas.RestResponseObject, GetSampleLogRecord3Error, undefined, {}, GetSampleLogRecord3QueryParams, {}>({
    url: '/sumo/get-sample-record',
    method: 'get',
    ...variables
  })

export const useGetSampleLogRecord3 = (
  variables: GetSampleLogRecord3Variables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.RestResponseObject, GetSampleLogRecord3Error, Schemas.RestResponseObject>,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<Schemas.RestResponseObject, GetSampleLogRecord3Error, Schemas.RestResponseObject>(
    queryKeyFn({ path: '/sumo/get-sample-record', operationId: 'getSampleLogRecord3', variables }),
    () => fetchGetSampleLogRecord3({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type GetLogRecords3QueryParams = {
  accountId?: string
  serverConfigId?: string
}

export type GetLogRecords3Error = Fetcher.ErrorWrapper<undefined>

export type GetLogRecords3Variables = {
  body: Schemas.SumoLogicSetupTestNodedata
  queryParams?: GetLogRecords3QueryParams
} & PortalContext['fetcherOptions']

export const fetchGetLogRecords3 = (variables: GetLogRecords3Variables) =>
  portalFetch<
    Schemas.RestResponseVerificationNodeDataSetupResponse,
    GetLogRecords3Error,
    Schemas.SumoLogicSetupTestNodedata,
    {},
    GetLogRecords3QueryParams,
    {}
  >({ url: '/sumo/node-data', method: 'post', ...variables })

export const useGetLogRecords3 = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.RestResponseVerificationNodeDataSetupResponse,
      GetLogRecords3Error,
      GetLogRecords3Variables
    >,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<
    Schemas.RestResponseVerificationNodeDataSetupResponse,
    GetLogRecords3Error,
    GetLogRecords3Variables
  >((variables: GetLogRecords3Variables) => fetchGetLogRecords3({ ...fetcherOptions, ...variables }), options)
}

export type FetchQueryParams = {
  accountId?: string
  serverConfigId?: string
}

export type FetchError = Fetcher.ErrorWrapper<undefined>

export type FetchVariables = {
  body?: Schemas.APMFetchConfig
  queryParams?: FetchQueryParams
} & PortalContext['fetcherOptions']

export const fetchFetch = (variables: FetchVariables) =>
  portalFetch<Schemas.RestResponseString, FetchError, Schemas.APMFetchConfig, {}, FetchQueryParams, {}>({
    url: '/timeseries/fetch',
    method: 'post',
    ...variables
  })

export const useFetch = (
  options?: Omit<reactQuery.UseMutationOptions<Schemas.RestResponseString, FetchError, FetchVariables>, 'mutationFn'>
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<Schemas.RestResponseString, FetchError, FetchVariables>(
    (variables: FetchVariables) => fetchFetch({ ...fetcherOptions, ...variables }),
    options
  )
}

export type GetMetricsAnalysisQueryParams = {
  stateExecutionId?: string
  accountId?: string
  /*
   * @format int32
   */
  offset?: number
  /*
   * @format int32
   */
  pageSize?: number
}

export type GetMetricsAnalysisError = Fetcher.ErrorWrapper<undefined>

export type GetMetricsAnalysisVariables = {
  queryParams?: GetMetricsAnalysisQueryParams
} & PortalContext['fetcherOptions']

export const fetchGetMetricsAnalysis = (variables: GetMetricsAnalysisVariables) =>
  portalFetch<
    Schemas.RestResponseDeploymentTimeSeriesAnalysis,
    GetMetricsAnalysisError,
    undefined,
    {},
    GetMetricsAnalysisQueryParams,
    {}
  >({ url: '/timeseries/metric-analysis', method: 'get', ...variables })

export const useGetMetricsAnalysis = (
  variables: GetMetricsAnalysisVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponseDeploymentTimeSeriesAnalysis,
      GetMetricsAnalysisError,
      Schemas.RestResponseDeploymentTimeSeriesAnalysis
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponseDeploymentTimeSeriesAnalysis,
    GetMetricsAnalysisError,
    Schemas.RestResponseDeploymentTimeSeriesAnalysis
  >(
    queryKeyFn({ path: '/timeseries/metric-analysis', operationId: 'getMetricsAnalysis', variables }),
    () => fetchGetMetricsAnalysis({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type GetCustomThresholdQueryParams = {
  accountId?: string
  appId?: string
  stateType?:
    | 'SUB_WORKFLOW'
    | 'REPEAT'
    | 'FORK'
    | 'WAIT'
    | 'PAUSE'
    | 'BARRIER'
    | 'RESOURCE_CONSTRAINT'
    | 'SHELL_SCRIPT'
    | 'HTTP'
    | 'TEMPLATIZED_SECRET_MANAGER'
    | 'EMAIL'
    | 'APP_DYNAMICS'
    | 'NEW_RELIC'
    | 'NEW_RELIC_DEPLOYMENT_MARKER'
    | 'DYNA_TRACE'
    | 'PROMETHEUS'
    | 'SPLUNKV2'
    | 'ELK'
    | 'LOGZ'
    | 'SUMO'
    | 'DATA_DOG'
    | 'DATA_DOG_LOG'
    | 'CVNG'
    | 'CLOUD_WATCH'
    | 'AWS_LAMBDA_VERIFICATION'
    | 'APM_VERIFICATION'
    | 'LOG_VERIFICATION'
    | 'BUG_SNAG'
    | 'STACK_DRIVER'
    | 'STACK_DRIVER_LOG'
    | 'INSTANA'
    | 'SCALYR'
    | 'ENV_STATE'
    | 'ENV_LOOP_STATE'
    | 'ENV_RESUME_STATE'
    | 'ENV_LOOP_RESUME_STATE'
    | 'COMMAND'
    | 'APPROVAL'
    | 'APPROVAL_RESUME'
    | 'ELASTIC_LOAD_BALANCER'
    | 'JENKINS'
    | 'GCB'
    | 'BAMBOO'
    | 'ARTIFACT_COLLECTION'
    | 'ARTIFACT_CHECK'
    | 'AZURE_NODE_SELECT'
    | 'AZURE_VMSS_SETUP'
    | 'AZURE_VMSS_DEPLOY'
    | 'AZURE_VMSS_ROLLBACK'
    | 'AZURE_VMSS_SWITCH_ROUTES'
    | 'AZURE_VMSS_SWITCH_ROUTES_ROLLBACK'
    | 'AZURE_WEBAPP_SLOT_SETUP'
    | 'AZURE_WEBAPP_SLOT_SWAP'
    | 'AZURE_WEBAPP_SLOT_SHIFT_TRAFFIC'
    | 'AZURE_WEBAPP_SLOT_ROLLBACK'
    | 'AWS_NODE_SELECT'
    | 'DC_NODE_SELECT'
    | 'ROLLING_NODE_SELECT'
    | 'PHASE'
    | 'PHASE_STEP'
    | 'STAGING_ORIGINAL_EXECUTION'
    | 'AWS_CODEDEPLOY_STATE'
    | 'AWS_CODEDEPLOY_ROLLBACK'
    | 'AWS_LAMBDA_STATE'
    | 'AWS_LAMBDA_ROLLBACK'
    | 'AWS_AMI_SERVICE_SETUP'
    | 'ASG_AMI_SERVICE_ALB_SHIFT_SETUP'
    | 'AWS_AMI_SERVICE_DEPLOY'
    | 'ASG_AMI_SERVICE_ALB_SHIFT_DEPLOY'
    | 'AWS_AMI_SWITCH_ROUTES'
    | 'ASG_AMI_ALB_SHIFT_SWITCH_ROUTES'
    | 'AWS_AMI_ROLLBACK_SWITCH_ROUTES'
    | 'ASG_AMI_ROLLBACK_ALB_SHIFT_SWITCH_ROUTES'
    | 'AWS_AMI_SERVICE_ROLLBACK'
    | 'ECS_SERVICE_SETUP'
    | 'SPOTINST_SETUP'
    | 'SPOTINST_ALB_SHIFT_SETUP'
    | 'SPOTINST_DEPLOY'
    | 'SPOTINST_ALB_SHIFT_DEPLOY'
    | 'SPOTINST_LISTENER_UPDATE'
    | 'SPOTINST_LISTENER_ALB_SHIFT'
    | 'SPOTINST_ROLLBACK'
    | 'SPOTINST_LISTENER_UPDATE_ROLLBACK'
    | 'SPOTINST_LISTENER_ALB_SHIFT_ROLLBACK'
    | 'ECS_SERVICE_SETUP_ROLLBACK'
    | 'ECS_DAEMON_SERVICE_SETUP'
    | 'ECS_BG_SERVICE_SETUP'
    | 'ECS_BG_SERVICE_SETUP_ROUTE53'
    | 'ECS_SERVICE_DEPLOY'
    | 'ECS_SERVICE_ROLLBACK'
    | 'ECS_LISTENER_UPDATE'
    | 'ECS_LISTENER_UPDATE_ROLLBACK'
    | 'ECS_ROUTE53_DNS_WEIGHT_UPDATE'
    | 'ECS_ROUTE53_DNS_WEIGHT_UPDATE_ROLLBACK'
    | 'KUBERNETES_SETUP'
    | 'KUBERNETES_SETUP_ROLLBACK'
    | 'KUBERNETES_DEPLOY'
    | 'KUBERNETES_DEPLOY_ROLLBACK'
    | 'KUBERNETES_STEADY_STATE_CHECK'
    | 'ECS_STEADY_STATE_CHECK'
    | 'ECS_RUN_TASK'
    | 'GCP_CLUSTER_SETUP'
    | 'HELM_DEPLOY'
    | 'HELM_ROLLBACK'
    | 'PCF_SETUP'
    | 'PCF_RESIZE'
    | 'PCF_ROLLBACK'
    | 'PCF_MAP_ROUTE'
    | 'PCF_UNMAP_ROUTE'
    | 'PCF_BG_MAP_ROUTE'
    | 'PCF_PLUGIN'
    | 'TERRAFORM_PROVISION'
    | 'TERRAFORM_APPLY'
    | 'TERRAGRUNT_PROVISION'
    | 'TERRAGRUNT_DESTROY'
    | 'TERRAGRUNT_ROLLBACK'
    | 'ARM_CREATE_RESOURCE'
    | 'ARM_ROLLBACK'
    | 'SHELL_SCRIPT_PROVISION'
    | 'TERRAFORM_DESTROY'
    | 'CLOUD_FORMATION_CREATE_STACK'
    | 'CLOUD_FORMATION_DELETE_STACK'
    | 'KUBERNETES_SWAP_SERVICE_SELECTORS'
    | 'CLOUD_FORMATION_ROLLBACK_STACK'
    | 'TERRAFORM_ROLLBACK'
    | 'K8S_DEPLOYMENT_ROLLING'
    | 'K8S_SCALE'
    | 'K8S_DEPLOYMENT_ROLLING_ROLLBACK'
    | 'K8S_BLUE_GREEN_DEPLOY'
    | 'K8S_CANARY_DEPLOY'
    | 'K8S_DELETE'
    | 'RANCHER_RESOLVE'
    | 'RANCHER_K8S_DEPLOYMENT_ROLLING'
    | 'RANCHER_K8S_CANARY_DEPLOY'
    | 'RANCHER_K8S_BLUE_GREEN_DEPLOY'
    | 'RANCHER_KUBERNETES_SWAP_SERVICE_SELECTORS'
    | 'RANCHER_K8S_DELETE'
    | 'RANCHER_K8S_DEPLOYMENT_ROLLING_ROLLBACK'
    | 'JIRA_CREATE_UPDATE'
    | 'SERVICENOW_CREATE_UPDATE'
    | 'K8S_TRAFFIC_SPLIT'
    | 'K8S_APPLY'
    | 'CUSTOM_DEPLOYMENT_FETCH_INSTANCES'
  serviceId?: string
  groupName?: string
  transactionName?: string
  metricName?: string
  customThresholdRefId?: string
  cvConfigId?: string
}

export type GetCustomThresholdError = Fetcher.ErrorWrapper<undefined>

export type GetCustomThresholdVariables = {
  queryParams?: GetCustomThresholdQueryParams
} & PortalContext['fetcherOptions']

export const fetchGetCustomThreshold = (variables: GetCustomThresholdVariables) =>
  portalFetch<
    Schemas.RestResponseTimeSeriesMLTransactionThresholds,
    GetCustomThresholdError,
    undefined,
    {},
    GetCustomThresholdQueryParams,
    {}
  >({ url: '/timeseries/threshold', method: 'get', ...variables })

export const useGetCustomThreshold = (
  variables: GetCustomThresholdVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponseTimeSeriesMLTransactionThresholds,
      GetCustomThresholdError,
      Schemas.RestResponseTimeSeriesMLTransactionThresholds
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponseTimeSeriesMLTransactionThresholds,
    GetCustomThresholdError,
    Schemas.RestResponseTimeSeriesMLTransactionThresholds
  >(
    queryKeyFn({ path: '/timeseries/threshold', operationId: 'getCustomThreshold', variables }),
    () => fetchGetCustomThreshold({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type SaveCustomThresholdQueryParams = {
  accountId?: string
  appId?: string
  stateType?:
    | 'SUB_WORKFLOW'
    | 'REPEAT'
    | 'FORK'
    | 'WAIT'
    | 'PAUSE'
    | 'BARRIER'
    | 'RESOURCE_CONSTRAINT'
    | 'SHELL_SCRIPT'
    | 'HTTP'
    | 'TEMPLATIZED_SECRET_MANAGER'
    | 'EMAIL'
    | 'APP_DYNAMICS'
    | 'NEW_RELIC'
    | 'NEW_RELIC_DEPLOYMENT_MARKER'
    | 'DYNA_TRACE'
    | 'PROMETHEUS'
    | 'SPLUNKV2'
    | 'ELK'
    | 'LOGZ'
    | 'SUMO'
    | 'DATA_DOG'
    | 'DATA_DOG_LOG'
    | 'CVNG'
    | 'CLOUD_WATCH'
    | 'AWS_LAMBDA_VERIFICATION'
    | 'APM_VERIFICATION'
    | 'LOG_VERIFICATION'
    | 'BUG_SNAG'
    | 'STACK_DRIVER'
    | 'STACK_DRIVER_LOG'
    | 'INSTANA'
    | 'SCALYR'
    | 'ENV_STATE'
    | 'ENV_LOOP_STATE'
    | 'ENV_RESUME_STATE'
    | 'ENV_LOOP_RESUME_STATE'
    | 'COMMAND'
    | 'APPROVAL'
    | 'APPROVAL_RESUME'
    | 'ELASTIC_LOAD_BALANCER'
    | 'JENKINS'
    | 'GCB'
    | 'BAMBOO'
    | 'ARTIFACT_COLLECTION'
    | 'ARTIFACT_CHECK'
    | 'AZURE_NODE_SELECT'
    | 'AZURE_VMSS_SETUP'
    | 'AZURE_VMSS_DEPLOY'
    | 'AZURE_VMSS_ROLLBACK'
    | 'AZURE_VMSS_SWITCH_ROUTES'
    | 'AZURE_VMSS_SWITCH_ROUTES_ROLLBACK'
    | 'AZURE_WEBAPP_SLOT_SETUP'
    | 'AZURE_WEBAPP_SLOT_SWAP'
    | 'AZURE_WEBAPP_SLOT_SHIFT_TRAFFIC'
    | 'AZURE_WEBAPP_SLOT_ROLLBACK'
    | 'AWS_NODE_SELECT'
    | 'DC_NODE_SELECT'
    | 'ROLLING_NODE_SELECT'
    | 'PHASE'
    | 'PHASE_STEP'
    | 'STAGING_ORIGINAL_EXECUTION'
    | 'AWS_CODEDEPLOY_STATE'
    | 'AWS_CODEDEPLOY_ROLLBACK'
    | 'AWS_LAMBDA_STATE'
    | 'AWS_LAMBDA_ROLLBACK'
    | 'AWS_AMI_SERVICE_SETUP'
    | 'ASG_AMI_SERVICE_ALB_SHIFT_SETUP'
    | 'AWS_AMI_SERVICE_DEPLOY'
    | 'ASG_AMI_SERVICE_ALB_SHIFT_DEPLOY'
    | 'AWS_AMI_SWITCH_ROUTES'
    | 'ASG_AMI_ALB_SHIFT_SWITCH_ROUTES'
    | 'AWS_AMI_ROLLBACK_SWITCH_ROUTES'
    | 'ASG_AMI_ROLLBACK_ALB_SHIFT_SWITCH_ROUTES'
    | 'AWS_AMI_SERVICE_ROLLBACK'
    | 'ECS_SERVICE_SETUP'
    | 'SPOTINST_SETUP'
    | 'SPOTINST_ALB_SHIFT_SETUP'
    | 'SPOTINST_DEPLOY'
    | 'SPOTINST_ALB_SHIFT_DEPLOY'
    | 'SPOTINST_LISTENER_UPDATE'
    | 'SPOTINST_LISTENER_ALB_SHIFT'
    | 'SPOTINST_ROLLBACK'
    | 'SPOTINST_LISTENER_UPDATE_ROLLBACK'
    | 'SPOTINST_LISTENER_ALB_SHIFT_ROLLBACK'
    | 'ECS_SERVICE_SETUP_ROLLBACK'
    | 'ECS_DAEMON_SERVICE_SETUP'
    | 'ECS_BG_SERVICE_SETUP'
    | 'ECS_BG_SERVICE_SETUP_ROUTE53'
    | 'ECS_SERVICE_DEPLOY'
    | 'ECS_SERVICE_ROLLBACK'
    | 'ECS_LISTENER_UPDATE'
    | 'ECS_LISTENER_UPDATE_ROLLBACK'
    | 'ECS_ROUTE53_DNS_WEIGHT_UPDATE'
    | 'ECS_ROUTE53_DNS_WEIGHT_UPDATE_ROLLBACK'
    | 'KUBERNETES_SETUP'
    | 'KUBERNETES_SETUP_ROLLBACK'
    | 'KUBERNETES_DEPLOY'
    | 'KUBERNETES_DEPLOY_ROLLBACK'
    | 'KUBERNETES_STEADY_STATE_CHECK'
    | 'ECS_STEADY_STATE_CHECK'
    | 'ECS_RUN_TASK'
    | 'GCP_CLUSTER_SETUP'
    | 'HELM_DEPLOY'
    | 'HELM_ROLLBACK'
    | 'PCF_SETUP'
    | 'PCF_RESIZE'
    | 'PCF_ROLLBACK'
    | 'PCF_MAP_ROUTE'
    | 'PCF_UNMAP_ROUTE'
    | 'PCF_BG_MAP_ROUTE'
    | 'PCF_PLUGIN'
    | 'TERRAFORM_PROVISION'
    | 'TERRAFORM_APPLY'
    | 'TERRAGRUNT_PROVISION'
    | 'TERRAGRUNT_DESTROY'
    | 'TERRAGRUNT_ROLLBACK'
    | 'ARM_CREATE_RESOURCE'
    | 'ARM_ROLLBACK'
    | 'SHELL_SCRIPT_PROVISION'
    | 'TERRAFORM_DESTROY'
    | 'CLOUD_FORMATION_CREATE_STACK'
    | 'CLOUD_FORMATION_DELETE_STACK'
    | 'KUBERNETES_SWAP_SERVICE_SELECTORS'
    | 'CLOUD_FORMATION_ROLLBACK_STACK'
    | 'TERRAFORM_ROLLBACK'
    | 'K8S_DEPLOYMENT_ROLLING'
    | 'K8S_SCALE'
    | 'K8S_DEPLOYMENT_ROLLING_ROLLBACK'
    | 'K8S_BLUE_GREEN_DEPLOY'
    | 'K8S_CANARY_DEPLOY'
    | 'K8S_DELETE'
    | 'RANCHER_RESOLVE'
    | 'RANCHER_K8S_DEPLOYMENT_ROLLING'
    | 'RANCHER_K8S_CANARY_DEPLOY'
    | 'RANCHER_K8S_BLUE_GREEN_DEPLOY'
    | 'RANCHER_KUBERNETES_SWAP_SERVICE_SELECTORS'
    | 'RANCHER_K8S_DELETE'
    | 'RANCHER_K8S_DEPLOYMENT_ROLLING_ROLLBACK'
    | 'JIRA_CREATE_UPDATE'
    | 'SERVICENOW_CREATE_UPDATE'
    | 'K8S_TRAFFIC_SPLIT'
    | 'K8S_APPLY'
    | 'CUSTOM_DEPLOYMENT_FETCH_INSTANCES'
  serviceId?: string
  groupName?: string
  transactionName?: string
  cvConfigId?: string
  customThresholdRefId?: string
}

export type SaveCustomThresholdError = Fetcher.ErrorWrapper<undefined>

export type SaveCustomThresholdVariables = {
  body?: Schemas.TimeSeriesMetricDefinition
  queryParams?: SaveCustomThresholdQueryParams
} & PortalContext['fetcherOptions']

export const fetchSaveCustomThreshold = (variables: SaveCustomThresholdVariables) =>
  portalFetch<
    Schemas.RestResponseBoolean,
    SaveCustomThresholdError,
    Schemas.TimeSeriesMetricDefinition,
    {},
    SaveCustomThresholdQueryParams,
    {}
  >({ url: '/timeseries/threshold', method: 'post', ...variables })

export const useSaveCustomThreshold = (
  options?: Omit<
    reactQuery.UseMutationOptions<Schemas.RestResponseBoolean, SaveCustomThresholdError, SaveCustomThresholdVariables>,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<Schemas.RestResponseBoolean, SaveCustomThresholdError, SaveCustomThresholdVariables>(
    (variables: SaveCustomThresholdVariables) => fetchSaveCustomThreshold({ ...fetcherOptions, ...variables }),
    options
  )
}

export type DeleteCustomThreshold1QueryParams = {
  accountId?: string
  appId?: string
  stateType?:
    | 'SUB_WORKFLOW'
    | 'REPEAT'
    | 'FORK'
    | 'WAIT'
    | 'PAUSE'
    | 'BARRIER'
    | 'RESOURCE_CONSTRAINT'
    | 'SHELL_SCRIPT'
    | 'HTTP'
    | 'TEMPLATIZED_SECRET_MANAGER'
    | 'EMAIL'
    | 'APP_DYNAMICS'
    | 'NEW_RELIC'
    | 'NEW_RELIC_DEPLOYMENT_MARKER'
    | 'DYNA_TRACE'
    | 'PROMETHEUS'
    | 'SPLUNKV2'
    | 'ELK'
    | 'LOGZ'
    | 'SUMO'
    | 'DATA_DOG'
    | 'DATA_DOG_LOG'
    | 'CVNG'
    | 'CLOUD_WATCH'
    | 'AWS_LAMBDA_VERIFICATION'
    | 'APM_VERIFICATION'
    | 'LOG_VERIFICATION'
    | 'BUG_SNAG'
    | 'STACK_DRIVER'
    | 'STACK_DRIVER_LOG'
    | 'INSTANA'
    | 'SCALYR'
    | 'ENV_STATE'
    | 'ENV_LOOP_STATE'
    | 'ENV_RESUME_STATE'
    | 'ENV_LOOP_RESUME_STATE'
    | 'COMMAND'
    | 'APPROVAL'
    | 'APPROVAL_RESUME'
    | 'ELASTIC_LOAD_BALANCER'
    | 'JENKINS'
    | 'GCB'
    | 'BAMBOO'
    | 'ARTIFACT_COLLECTION'
    | 'ARTIFACT_CHECK'
    | 'AZURE_NODE_SELECT'
    | 'AZURE_VMSS_SETUP'
    | 'AZURE_VMSS_DEPLOY'
    | 'AZURE_VMSS_ROLLBACK'
    | 'AZURE_VMSS_SWITCH_ROUTES'
    | 'AZURE_VMSS_SWITCH_ROUTES_ROLLBACK'
    | 'AZURE_WEBAPP_SLOT_SETUP'
    | 'AZURE_WEBAPP_SLOT_SWAP'
    | 'AZURE_WEBAPP_SLOT_SHIFT_TRAFFIC'
    | 'AZURE_WEBAPP_SLOT_ROLLBACK'
    | 'AWS_NODE_SELECT'
    | 'DC_NODE_SELECT'
    | 'ROLLING_NODE_SELECT'
    | 'PHASE'
    | 'PHASE_STEP'
    | 'STAGING_ORIGINAL_EXECUTION'
    | 'AWS_CODEDEPLOY_STATE'
    | 'AWS_CODEDEPLOY_ROLLBACK'
    | 'AWS_LAMBDA_STATE'
    | 'AWS_LAMBDA_ROLLBACK'
    | 'AWS_AMI_SERVICE_SETUP'
    | 'ASG_AMI_SERVICE_ALB_SHIFT_SETUP'
    | 'AWS_AMI_SERVICE_DEPLOY'
    | 'ASG_AMI_SERVICE_ALB_SHIFT_DEPLOY'
    | 'AWS_AMI_SWITCH_ROUTES'
    | 'ASG_AMI_ALB_SHIFT_SWITCH_ROUTES'
    | 'AWS_AMI_ROLLBACK_SWITCH_ROUTES'
    | 'ASG_AMI_ROLLBACK_ALB_SHIFT_SWITCH_ROUTES'
    | 'AWS_AMI_SERVICE_ROLLBACK'
    | 'ECS_SERVICE_SETUP'
    | 'SPOTINST_SETUP'
    | 'SPOTINST_ALB_SHIFT_SETUP'
    | 'SPOTINST_DEPLOY'
    | 'SPOTINST_ALB_SHIFT_DEPLOY'
    | 'SPOTINST_LISTENER_UPDATE'
    | 'SPOTINST_LISTENER_ALB_SHIFT'
    | 'SPOTINST_ROLLBACK'
    | 'SPOTINST_LISTENER_UPDATE_ROLLBACK'
    | 'SPOTINST_LISTENER_ALB_SHIFT_ROLLBACK'
    | 'ECS_SERVICE_SETUP_ROLLBACK'
    | 'ECS_DAEMON_SERVICE_SETUP'
    | 'ECS_BG_SERVICE_SETUP'
    | 'ECS_BG_SERVICE_SETUP_ROUTE53'
    | 'ECS_SERVICE_DEPLOY'
    | 'ECS_SERVICE_ROLLBACK'
    | 'ECS_LISTENER_UPDATE'
    | 'ECS_LISTENER_UPDATE_ROLLBACK'
    | 'ECS_ROUTE53_DNS_WEIGHT_UPDATE'
    | 'ECS_ROUTE53_DNS_WEIGHT_UPDATE_ROLLBACK'
    | 'KUBERNETES_SETUP'
    | 'KUBERNETES_SETUP_ROLLBACK'
    | 'KUBERNETES_DEPLOY'
    | 'KUBERNETES_DEPLOY_ROLLBACK'
    | 'KUBERNETES_STEADY_STATE_CHECK'
    | 'ECS_STEADY_STATE_CHECK'
    | 'ECS_RUN_TASK'
    | 'GCP_CLUSTER_SETUP'
    | 'HELM_DEPLOY'
    | 'HELM_ROLLBACK'
    | 'PCF_SETUP'
    | 'PCF_RESIZE'
    | 'PCF_ROLLBACK'
    | 'PCF_MAP_ROUTE'
    | 'PCF_UNMAP_ROUTE'
    | 'PCF_BG_MAP_ROUTE'
    | 'PCF_PLUGIN'
    | 'TERRAFORM_PROVISION'
    | 'TERRAFORM_APPLY'
    | 'TERRAGRUNT_PROVISION'
    | 'TERRAGRUNT_DESTROY'
    | 'TERRAGRUNT_ROLLBACK'
    | 'ARM_CREATE_RESOURCE'
    | 'ARM_ROLLBACK'
    | 'SHELL_SCRIPT_PROVISION'
    | 'TERRAFORM_DESTROY'
    | 'CLOUD_FORMATION_CREATE_STACK'
    | 'CLOUD_FORMATION_DELETE_STACK'
    | 'KUBERNETES_SWAP_SERVICE_SELECTORS'
    | 'CLOUD_FORMATION_ROLLBACK_STACK'
    | 'TERRAFORM_ROLLBACK'
    | 'K8S_DEPLOYMENT_ROLLING'
    | 'K8S_SCALE'
    | 'K8S_DEPLOYMENT_ROLLING_ROLLBACK'
    | 'K8S_BLUE_GREEN_DEPLOY'
    | 'K8S_CANARY_DEPLOY'
    | 'K8S_DELETE'
    | 'RANCHER_RESOLVE'
    | 'RANCHER_K8S_DEPLOYMENT_ROLLING'
    | 'RANCHER_K8S_CANARY_DEPLOY'
    | 'RANCHER_K8S_BLUE_GREEN_DEPLOY'
    | 'RANCHER_KUBERNETES_SWAP_SERVICE_SELECTORS'
    | 'RANCHER_K8S_DELETE'
    | 'RANCHER_K8S_DEPLOYMENT_ROLLING_ROLLBACK'
    | 'JIRA_CREATE_UPDATE'
    | 'SERVICENOW_CREATE_UPDATE'
    | 'K8S_TRAFFIC_SPLIT'
    | 'K8S_APPLY'
    | 'CUSTOM_DEPLOYMENT_FETCH_INSTANCES'
  serviceId?: string
  groupName?: string
  cvConfigId?: string
  transactionName?: string
  metricName?: string
  comparisonType?: 'RATIO' | 'DELTA' | 'ABSOLUTE'
  customThresholdRefId?: string
}

export type DeleteCustomThreshold1Error = Fetcher.ErrorWrapper<undefined>

export type DeleteCustomThreshold1Variables = {
  queryParams?: DeleteCustomThreshold1QueryParams
} & PortalContext['fetcherOptions']

export const fetchDeleteCustomThreshold1 = (variables: DeleteCustomThreshold1Variables) =>
  portalFetch<
    Schemas.RestResponseBoolean,
    DeleteCustomThreshold1Error,
    undefined,
    {},
    DeleteCustomThreshold1QueryParams,
    {}
  >({ url: '/timeseries/threshold', method: 'delete', ...variables })

export const useDeleteCustomThreshold1 = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.RestResponseBoolean,
      DeleteCustomThreshold1Error,
      DeleteCustomThreshold1Variables
    >,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<
    Schemas.RestResponseBoolean,
    DeleteCustomThreshold1Error,
    DeleteCustomThreshold1Variables
  >(
    (variables: DeleteCustomThreshold1Variables) => fetchDeleteCustomThreshold1({ ...fetcherOptions, ...variables }),
    options
  )
}

export type DeleteCustomThresholdQueryParams = {
  accountId?: string
  thresholdIdList?: string[]
}

export type DeleteCustomThresholdError = Fetcher.ErrorWrapper<undefined>

export type DeleteCustomThresholdVariables = {
  queryParams?: DeleteCustomThresholdQueryParams
} & PortalContext['fetcherOptions']

export const fetchDeleteCustomThreshold = (variables: DeleteCustomThresholdVariables) =>
  portalFetch<
    Schemas.RestResponseBoolean,
    DeleteCustomThresholdError,
    undefined,
    {},
    DeleteCustomThresholdQueryParams,
    {}
  >({ url: '/timeseries/threshold-by-id', method: 'delete', ...variables })

export const useDeleteCustomThreshold = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.RestResponseBoolean,
      DeleteCustomThresholdError,
      DeleteCustomThresholdVariables
    >,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<
    Schemas.RestResponseBoolean,
    DeleteCustomThresholdError,
    DeleteCustomThresholdVariables
  >(
    (variables: DeleteCustomThresholdVariables) => fetchDeleteCustomThreshold({ ...fetcherOptions, ...variables }),
    options
  )
}

export type GetMetricsAnalysisAppdynamicsQueryParams = {
  stateExecutionId?: string
  workflowExecutionId?: string
  accountId?: string
  appId?: string
}

export type GetMetricsAnalysisAppdynamicsError = Fetcher.ErrorWrapper<undefined>

export type GetMetricsAnalysisAppdynamicsVariables = {
  queryParams?: GetMetricsAnalysisAppdynamicsQueryParams
} & PortalContext['fetcherOptions']

export const fetchGetMetricsAnalysisAppdynamics = (variables: GetMetricsAnalysisAppdynamicsVariables) =>
  portalFetch<
    Schemas.RestResponseSetNewRelicMetricAnalysisRecord,
    GetMetricsAnalysisAppdynamicsError,
    undefined,
    {},
    GetMetricsAnalysisAppdynamicsQueryParams,
    {}
  >({ url: '/timeseries/generate-metrics-appdynamics', method: 'get', ...variables })

export const useGetMetricsAnalysisAppdynamics = (
  variables: GetMetricsAnalysisAppdynamicsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponseSetNewRelicMetricAnalysisRecord,
      GetMetricsAnalysisAppdynamicsError,
      Schemas.RestResponseSetNewRelicMetricAnalysisRecord
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponseSetNewRelicMetricAnalysisRecord,
    GetMetricsAnalysisAppdynamicsError,
    Schemas.RestResponseSetNewRelicMetricAnalysisRecord
  >(
    queryKeyFn({
      path: '/timeseries/generate-metrics-appdynamics',
      operationId: 'getMetricsAnalysisAppdynamics',
      variables
    }),
    () => fetchGetMetricsAnalysisAppdynamics({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type GetTooltipQueryParams = {
  accountId?: string
  stateExecutionId?: string
  workflowExecutionId?: string
  /*
   * @format int32
   */
  analysisMinute?: number
  transactionName?: string
  metricName?: string
  groupName?: string
}

export type GetTooltipError = Fetcher.ErrorWrapper<undefined>

export type GetTooltipVariables = {
  queryParams?: GetTooltipQueryParams
} & PortalContext['fetcherOptions']

export const fetchGetTooltip = (variables: GetTooltipVariables) =>
  portalFetch<
    Schemas.RestResponseListNewRelicMetricHostAnalysisValue,
    GetTooltipError,
    undefined,
    {},
    GetTooltipQueryParams,
    {}
  >({ url: '/timeseries/get-tooltip', method: 'get', ...variables })

export const useGetTooltip = (
  variables: GetTooltipVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponseListNewRelicMetricHostAnalysisValue,
      GetTooltipError,
      Schemas.RestResponseListNewRelicMetricHostAnalysisValue
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponseListNewRelicMetricHostAnalysisValue,
    GetTooltipError,
    Schemas.RestResponseListNewRelicMetricHostAnalysisValue
  >(
    queryKeyFn({ path: '/timeseries/get-tooltip', operationId: 'getTooltip', variables }),
    () => fetchGetTooltip({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type SaveCustomThresholdListQueryParams = {
  accountId?: string
  serviceId?: string
  cvConfigId?: string
}

export type SaveCustomThresholdListError = Fetcher.ErrorWrapper<undefined>

export type SaveCustomThresholdListRequestBody = Schemas.TimeSeriesMLTransactionThresholds[]

export type SaveCustomThresholdListVariables = {
  body?: SaveCustomThresholdListRequestBody
  queryParams?: SaveCustomThresholdListQueryParams
} & PortalContext['fetcherOptions']

export const fetchSaveCustomThresholdList = (variables: SaveCustomThresholdListVariables) =>
  portalFetch<
    Schemas.RestResponseBoolean,
    SaveCustomThresholdListError,
    SaveCustomThresholdListRequestBody,
    {},
    SaveCustomThresholdListQueryParams,
    {}
  >({ url: '/timeseries/custom-threshold-list', method: 'post', ...variables })

export const useSaveCustomThresholdList = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.RestResponseBoolean,
      SaveCustomThresholdListError,
      SaveCustomThresholdListVariables
    >,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<
    Schemas.RestResponseBoolean,
    SaveCustomThresholdListError,
    SaveCustomThresholdListVariables
  >(
    (variables: SaveCustomThresholdListVariables) => fetchSaveCustomThresholdList({ ...fetcherOptions, ...variables }),
    options
  )
}

export type GetCustomThresholdForCVConfigQueryParams = {
  accountId?: string
  cvConfigId?: string
}

export type GetCustomThresholdForCVConfigError = Fetcher.ErrorWrapper<undefined>

export type GetCustomThresholdForCVConfigVariables = {
  queryParams?: GetCustomThresholdForCVConfigQueryParams
} & PortalContext['fetcherOptions']

export const fetchGetCustomThresholdForCVConfig = (variables: GetCustomThresholdForCVConfigVariables) =>
  portalFetch<
    Schemas.RestResponseListTimeSeriesMLTransactionThresholds,
    GetCustomThresholdForCVConfigError,
    undefined,
    {},
    GetCustomThresholdForCVConfigQueryParams,
    {}
  >({ url: '/timeseries/thresholds-for-cvconfig', method: 'get', ...variables })

export const useGetCustomThresholdForCVConfig = (
  variables: GetCustomThresholdForCVConfigVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponseListTimeSeriesMLTransactionThresholds,
      GetCustomThresholdForCVConfigError,
      Schemas.RestResponseListTimeSeriesMLTransactionThresholds
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponseListTimeSeriesMLTransactionThresholds,
    GetCustomThresholdForCVConfigError,
    Schemas.RestResponseListTimeSeriesMLTransactionThresholds
  >(
    queryKeyFn({
      path: '/timeseries/thresholds-for-cvconfig',
      operationId: 'getCustomThresholdForCVConfig',
      variables
    }),
    () => fetchGetCustomThresholdForCVConfig({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type GetCustomThresholdForWorkflowQueryParams = {
  accountId?: string
  serviceId?: string
}

export type GetCustomThresholdForWorkflowError = Fetcher.ErrorWrapper<undefined>

export type GetCustomThresholdForWorkflowVariables = {
  queryParams?: GetCustomThresholdForWorkflowQueryParams
} & PortalContext['fetcherOptions']

export const fetchGetCustomThresholdForWorkflow = (variables: GetCustomThresholdForWorkflowVariables) =>
  portalFetch<
    Schemas.RestResponseListTimeSeriesMLTransactionThresholds,
    GetCustomThresholdForWorkflowError,
    undefined,
    {},
    GetCustomThresholdForWorkflowQueryParams,
    {}
  >({ url: '/timeseries/thresholds-for-workflow', method: 'get', ...variables })

export const useGetCustomThresholdForWorkflow = (
  variables: GetCustomThresholdForWorkflowVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponseListTimeSeriesMLTransactionThresholds,
      GetCustomThresholdForWorkflowError,
      Schemas.RestResponseListTimeSeriesMLTransactionThresholds
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponseListTimeSeriesMLTransactionThresholds,
    GetCustomThresholdForWorkflowError,
    Schemas.RestResponseListTimeSeriesMLTransactionThresholds
  >(
    queryKeyFn({
      path: '/timeseries/thresholds-for-workflow',
      operationId: 'getCustomThresholdForWorkflow',
      variables
    }),
    () => fetchGetCustomThresholdForWorkflow({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type GetCustomThresholdWithRefIdQueryParams = {
  accountId?: string
  customThresholdRefId?: string
}

export type GetCustomThresholdWithRefIdError = Fetcher.ErrorWrapper<undefined>

export type GetCustomThresholdWithRefIdVariables = {
  queryParams?: GetCustomThresholdWithRefIdQueryParams
} & PortalContext['fetcherOptions']

export const fetchGetCustomThresholdWithRefId = (variables: GetCustomThresholdWithRefIdVariables) =>
  portalFetch<
    Schemas.RestResponseListTimeSeriesMLTransactionThresholds,
    GetCustomThresholdWithRefIdError,
    undefined,
    {},
    GetCustomThresholdWithRefIdQueryParams,
    {}
  >({ url: '/timeseries/thresholds', method: 'get', ...variables })

export const useGetCustomThresholdWithRefId = (
  variables: GetCustomThresholdWithRefIdVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponseListTimeSeriesMLTransactionThresholds,
      GetCustomThresholdWithRefIdError,
      Schemas.RestResponseListTimeSeriesMLTransactionThresholds
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponseListTimeSeriesMLTransactionThresholds,
    GetCustomThresholdWithRefIdError,
    Schemas.RestResponseListTimeSeriesMLTransactionThresholds
  >(
    queryKeyFn({ path: '/timeseries/thresholds', operationId: 'getCustomThresholdWithRefId', variables }),
    () => fetchGetCustomThresholdWithRefId({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type BulkDeleteCustomThresholdsQueryParams = {
  accountId?: string
  customThresholdRefId?: string
}

export type BulkDeleteCustomThresholdsError = Fetcher.ErrorWrapper<undefined>

export type BulkDeleteCustomThresholdsVariables = {
  queryParams?: BulkDeleteCustomThresholdsQueryParams
} & PortalContext['fetcherOptions']

export const fetchBulkDeleteCustomThresholds = (variables: BulkDeleteCustomThresholdsVariables) =>
  portalFetch<
    Schemas.RestResponseBoolean,
    BulkDeleteCustomThresholdsError,
    undefined,
    {},
    BulkDeleteCustomThresholdsQueryParams,
    {}
  >({ url: '/timeseries/bulk-threshold', method: 'delete', ...variables })

export const useBulkDeleteCustomThresholds = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.RestResponseBoolean,
      BulkDeleteCustomThresholdsError,
      BulkDeleteCustomThresholdsVariables
    >,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<
    Schemas.RestResponseBoolean,
    BulkDeleteCustomThresholdsError,
    BulkDeleteCustomThresholdsVariables
  >(
    (variables: BulkDeleteCustomThresholdsVariables) =>
      fetchBulkDeleteCustomThresholds({ ...fetcherOptions, ...variables }),
    options
  )
}

export type GetTxnMetricPairsForAPMCVConfigQueryParams = {
  accountId?: string
  cvConfigId?: string
}

export type GetTxnMetricPairsForAPMCVConfigError = Fetcher.ErrorWrapper<undefined>

export type GetTxnMetricPairsForAPMCVConfigVariables = {
  queryParams?: GetTxnMetricPairsForAPMCVConfigQueryParams
} & PortalContext['fetcherOptions']

export const fetchGetTxnMetricPairsForAPMCVConfig = (variables: GetTxnMetricPairsForAPMCVConfigVariables) =>
  portalFetch<
    Schemas.RestResponseMapStringString,
    GetTxnMetricPairsForAPMCVConfigError,
    undefined,
    {},
    GetTxnMetricPairsForAPMCVConfigQueryParams,
    {}
  >({ url: '/timeseries/txn-metric-for-cvconfig', method: 'get', ...variables })

export const useGetTxnMetricPairsForAPMCVConfig = (
  variables: GetTxnMetricPairsForAPMCVConfigVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponseMapStringString,
      GetTxnMetricPairsForAPMCVConfigError,
      Schemas.RestResponseMapStringString
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponseMapStringString,
    GetTxnMetricPairsForAPMCVConfigError,
    Schemas.RestResponseMapStringString
  >(
    queryKeyFn({
      path: '/timeseries/txn-metric-for-cvconfig',
      operationId: 'getTxnMetricPairsForAPMCVConfig',
      variables
    }),
    () => fetchGetTxnMetricPairsForAPMCVConfig({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type GetKeyTransactionsQueryParams = {
  accountId?: string
  cvConfigId?: string
}

export type GetKeyTransactionsError = Fetcher.ErrorWrapper<undefined>

export type GetKeyTransactionsVariables = {
  queryParams?: GetKeyTransactionsQueryParams
} & PortalContext['fetcherOptions']

export const fetchGetKeyTransactions = (variables: GetKeyTransactionsVariables) =>
  portalFetch<
    Schemas.RestResponseTimeSeriesKeyTransactions,
    GetKeyTransactionsError,
    undefined,
    {},
    GetKeyTransactionsQueryParams,
    {}
  >({ url: '/timeseries/key-transactions', method: 'get', ...variables })

export const useGetKeyTransactions = (
  variables: GetKeyTransactionsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponseTimeSeriesKeyTransactions,
      GetKeyTransactionsError,
      Schemas.RestResponseTimeSeriesKeyTransactions
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponseTimeSeriesKeyTransactions,
    GetKeyTransactionsError,
    Schemas.RestResponseTimeSeriesKeyTransactions
  >(
    queryKeyFn({ path: '/timeseries/key-transactions', operationId: 'getKeyTransactions', variables }),
    () => fetchGetKeyTransactions({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type SaveKeyTransactionsQueryParams = {
  accountId?: string
  cvConfigId?: string
}

export type SaveKeyTransactionsError = Fetcher.ErrorWrapper<undefined>

export type SaveKeyTransactionsVariables = {
  body?: RequestBodies.UpdateWhitelistedDomainsBody
  queryParams?: SaveKeyTransactionsQueryParams
} & PortalContext['fetcherOptions']

export const fetchSaveKeyTransactions = (variables: SaveKeyTransactionsVariables) =>
  portalFetch<
    Schemas.RestResponseBoolean,
    SaveKeyTransactionsError,
    RequestBodies.UpdateWhitelistedDomainsBody,
    {},
    SaveKeyTransactionsQueryParams,
    {}
  >({ url: '/timeseries/key-transactions', method: 'post', ...variables })

export const useSaveKeyTransactions = (
  options?: Omit<
    reactQuery.UseMutationOptions<Schemas.RestResponseBoolean, SaveKeyTransactionsError, SaveKeyTransactionsVariables>,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<Schemas.RestResponseBoolean, SaveKeyTransactionsError, SaveKeyTransactionsVariables>(
    (variables: SaveKeyTransactionsVariables) => fetchSaveKeyTransactions({ ...fetcherOptions, ...variables }),
    options
  )
}

export type AddToKeyTransactionsQueryParams = {
  accountId?: string
  cvConfigId?: string
}

export type AddToKeyTransactionsError = Fetcher.ErrorWrapper<undefined>

export type AddToKeyTransactionsVariables = {
  body?: RequestBodies.UpdateWhitelistedDomainsBody
  queryParams?: AddToKeyTransactionsQueryParams
} & PortalContext['fetcherOptions']

export const fetchAddToKeyTransactions = (variables: AddToKeyTransactionsVariables) =>
  portalFetch<
    Schemas.RestResponseBoolean,
    AddToKeyTransactionsError,
    RequestBodies.UpdateWhitelistedDomainsBody,
    {},
    AddToKeyTransactionsQueryParams,
    {}
  >({ url: '/timeseries/add-to-key-transactions', method: 'post', ...variables })

export const useAddToKeyTransactions = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.RestResponseBoolean,
      AddToKeyTransactionsError,
      AddToKeyTransactionsVariables
    >,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<Schemas.RestResponseBoolean, AddToKeyTransactionsError, AddToKeyTransactionsVariables>(
    (variables: AddToKeyTransactionsVariables) => fetchAddToKeyTransactions({ ...fetcherOptions, ...variables }),
    options
  )
}

export type RemoveFromKeyTransactionsQueryParams = {
  accountId?: string
  cvConfigId?: string
}

export type RemoveFromKeyTransactionsError = Fetcher.ErrorWrapper<undefined>

export type RemoveFromKeyTransactionsVariables = {
  body?: RequestBodies.UpdateWhitelistedDomainsBody
  queryParams?: RemoveFromKeyTransactionsQueryParams
} & PortalContext['fetcherOptions']

export const fetchRemoveFromKeyTransactions = (variables: RemoveFromKeyTransactionsVariables) =>
  portalFetch<
    Schemas.RestResponseBoolean,
    RemoveFromKeyTransactionsError,
    RequestBodies.UpdateWhitelistedDomainsBody,
    {},
    RemoveFromKeyTransactionsQueryParams,
    {}
  >({ url: '/timeseries/remove-from-key-transactions', method: 'post', ...variables })

export const useRemoveFromKeyTransactions = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.RestResponseBoolean,
      RemoveFromKeyTransactionsError,
      RemoveFromKeyTransactionsVariables
    >,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<
    Schemas.RestResponseBoolean,
    RemoveFromKeyTransactionsError,
    RemoveFromKeyTransactionsVariables
  >(
    (variables: RemoveFromKeyTransactionsVariables) =>
      fetchRemoveFromKeyTransactions({ ...fetcherOptions, ...variables }),
    options
  )
}

export type Get38PathParams = {
  triggerId: string
}

export type Get38QueryParams = {
  appId?: string
}

export type Get38Error = Fetcher.ErrorWrapper<undefined>

export type Get38Variables = {
  pathParams: Get38PathParams
  queryParams?: Get38QueryParams
} & PortalContext['fetcherOptions']

export const fetchGet38 = (variables: Get38Variables) =>
  portalFetch<Schemas.RestResponseTrigger, Get38Error, undefined, {}, Get38QueryParams, Get38PathParams>({
    url: '/triggers/{triggerId}',
    method: 'get',
    ...variables
  })

export const useGet38 = (
  variables: Get38Variables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.RestResponseTrigger, Get38Error, Schemas.RestResponseTrigger>,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<Schemas.RestResponseTrigger, Get38Error, Schemas.RestResponseTrigger>(
    queryKeyFn({ path: '/triggers/{triggerId}', operationId: 'get38', variables }),
    () => fetchGet38({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type Update31PathParams = {
  triggerId: string
}

export type Update31QueryParams = {
  appId?: string
}

export type Update31Error = Fetcher.ErrorWrapper<undefined>

export type Update31Variables = {
  body: RequestBodies.Trigger
  pathParams: Update31PathParams
  queryParams?: Update31QueryParams
} & PortalContext['fetcherOptions']

export const fetchUpdate31 = (variables: Update31Variables) =>
  portalFetch<
    Schemas.RestResponseTrigger,
    Update31Error,
    RequestBodies.Trigger,
    {},
    Update31QueryParams,
    Update31PathParams
  >({ url: '/triggers/{triggerId}', method: 'put', ...variables })

export const useUpdate31 = (
  options?: Omit<
    reactQuery.UseMutationOptions<Schemas.RestResponseTrigger, Update31Error, Update31Variables>,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<Schemas.RestResponseTrigger, Update31Error, Update31Variables>(
    (variables: Update31Variables) => fetchUpdate31({ ...fetcherOptions, ...variables }),
    options
  )
}

export type Delete28PathParams = {
  triggerId: string
}

export type Delete28QueryParams = {
  appId?: string
}

export type Delete28Error = Fetcher.ErrorWrapper<undefined>

export type Delete28Variables = {
  pathParams: Delete28PathParams
  queryParams?: Delete28QueryParams
} & PortalContext['fetcherOptions']

export const fetchDelete28 = (variables: Delete28Variables) =>
  portalFetch<Schemas.RestResponse, Delete28Error, undefined, {}, Delete28QueryParams, Delete28PathParams>({
    url: '/triggers/{triggerId}',
    method: 'delete',
    ...variables
  })

export const useDelete28 = (
  options?: Omit<reactQuery.UseMutationOptions<Schemas.RestResponse, Delete28Error, Delete28Variables>, 'mutationFn'>
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<Schemas.RestResponse, Delete28Error, Delete28Variables>(
    (variables: Delete28Variables) => fetchDelete28({ ...fetcherOptions, ...variables }),
    options
  )
}

export type List41QueryParams = {
  appId?: string[]
  tagFilter?: string
  /*
   * @default false
   */
  withTags?: boolean
  /*
   * @default 0
   */
  offset?: string
  limit?: string
  fieldsIncluded?: string[]
  fieldsExcluded?: string[]
}

export type List41Error = Fetcher.ErrorWrapper<undefined>

export type List41Variables = {
  queryParams?: List41QueryParams
} & PortalContext['fetcherOptions']

export const fetchList41 = (variables: List41Variables) =>
  portalFetch<Schemas.RestResponsePageResponseTrigger, List41Error, undefined, {}, List41QueryParams, {}>({
    url: '/triggers',
    method: 'get',
    ...variables
  })

export const useList41 = (
  variables: List41Variables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponsePageResponseTrigger,
      List41Error,
      Schemas.RestResponsePageResponseTrigger
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponsePageResponseTrigger,
    List41Error,
    Schemas.RestResponsePageResponseTrigger
  >(
    queryKeyFn({ path: '/triggers', operationId: 'list41', variables }),
    () => fetchList41({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type Save20QueryParams = {
  appId?: string
}

export type Save20Error = Fetcher.ErrorWrapper<undefined>

export type Save20Variables = {
  body: RequestBodies.Trigger
  queryParams?: Save20QueryParams
} & PortalContext['fetcherOptions']

export const fetchSave20 = (variables: Save20Variables) =>
  portalFetch<Schemas.RestResponseTrigger, Save20Error, RequestBodies.Trigger, {}, Save20QueryParams, {}>({
    url: '/triggers',
    method: 'post',
    ...variables
  })

export const useSave20 = (
  options?: Omit<reactQuery.UseMutationOptions<Schemas.RestResponseTrigger, Save20Error, Save20Variables>, 'mutationFn'>
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<Schemas.RestResponseTrigger, Save20Error, Save20Variables>(
    (variables: Save20Variables) => fetchSave20({ ...fetcherOptions, ...variables }),
    options
  )
}

export type GenerateWebhookTokenPathParams = {
  triggerId: string
}

export type GenerateWebhookTokenQueryParams = {
  appId?: string
}

export type GenerateWebhookTokenError = Fetcher.ErrorWrapper<undefined>

export type GenerateWebhookTokenVariables = {
  pathParams: GenerateWebhookTokenPathParams
  queryParams?: GenerateWebhookTokenQueryParams
} & PortalContext['fetcherOptions']

export const fetchGenerateWebhookToken = (variables: GenerateWebhookTokenVariables) =>
  portalFetch<
    Schemas.RestResponseWebHookToken,
    GenerateWebhookTokenError,
    undefined,
    {},
    GenerateWebhookTokenQueryParams,
    GenerateWebhookTokenPathParams
  >({ url: '/triggers/{triggerId}/webhook_token', method: 'get', ...variables })

export const useGenerateWebhookToken = (
  variables: GenerateWebhookTokenVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponseWebHookToken,
      GenerateWebhookTokenError,
      Schemas.RestResponseWebHookToken
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponseWebHookToken,
    GenerateWebhookTokenError,
    Schemas.RestResponseWebHookToken
  >(
    queryKeyFn({ path: '/triggers/{triggerId}/webhook_token', operationId: 'generateWebhookToken', variables }),
    () => fetchGenerateWebhookToken({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type GenerateGitWebhookTokenPathParams = {
  triggerId: string
}

export type GenerateGitWebhookTokenQueryParams = {
  appId?: string
}

export type GenerateGitWebhookTokenError = Fetcher.ErrorWrapper<undefined>

export type GenerateGitWebhookTokenVariables = {
  pathParams: GenerateGitWebhookTokenPathParams
  queryParams?: GenerateGitWebhookTokenQueryParams
} & PortalContext['fetcherOptions']

export const fetchGenerateGitWebhookToken = (variables: GenerateGitWebhookTokenVariables) =>
  portalFetch<
    Schemas.RestResponseWebHookToken,
    GenerateGitWebhookTokenError,
    undefined,
    {},
    GenerateGitWebhookTokenQueryParams,
    GenerateGitWebhookTokenPathParams
  >({ url: '/triggers/{triggerId}/webhook_token/git', method: 'get', ...variables })

export const useGenerateGitWebhookToken = (
  variables: GenerateGitWebhookTokenVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponseWebHookToken,
      GenerateGitWebhookTokenError,
      Schemas.RestResponseWebHookToken
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponseWebHookToken,
    GenerateGitWebhookTokenError,
    Schemas.RestResponseWebHookToken
  >(
    queryKeyFn({ path: '/triggers/{triggerId}/webhook_token/git', operationId: 'generateGitWebhookToken', variables }),
    () => fetchGenerateGitWebhookToken({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type TranslateCronError = Fetcher.ErrorWrapper<undefined>

export type TranslateCronVariables = {
  body?: RequestBodies.SaveMessageComparisonListBody
} & PortalContext['fetcherOptions']

export const fetchTranslateCron = (variables: TranslateCronVariables) =>
  portalFetch<Schemas.RestResponseString, TranslateCronError, RequestBodies.SaveMessageComparisonListBody, {}, {}, {}>({
    url: '/triggers/cron/translate',
    method: 'post',
    ...variables
  })

export const useTranslateCron = (
  options?: Omit<
    reactQuery.UseMutationOptions<Schemas.RestResponseString, TranslateCronError, TranslateCronVariables>,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<Schemas.RestResponseString, TranslateCronError, TranslateCronVariables>(
    (variables: TranslateCronVariables) => fetchTranslateCron({ ...fetcherOptions, ...variables }),
    options
  )
}

export type ListWebhookParametersQueryParams = {
  appId?: string
  workflowId?: string
  workflowType?: 'PIPELINE' | 'ORCHESTRATION'
  webhookSource?: 'GITHUB' | 'GITLAB' | 'BITBUCKET' | 'AZURE_DEVOPS'
  eventType?: string
}

export type ListWebhookParametersError = Fetcher.ErrorWrapper<undefined>

export type ListWebhookParametersVariables = {
  queryParams?: ListWebhookParametersQueryParams
} & PortalContext['fetcherOptions']

export const fetchListWebhookParameters = (variables: ListWebhookParametersVariables) =>
  portalFetch<
    Schemas.RestResponseWebhookParameters,
    ListWebhookParametersError,
    undefined,
    {},
    ListWebhookParametersQueryParams,
    {}
  >({ url: '/triggers/webhook/parameters', method: 'get', ...variables })

export const useListWebhookParameters = (
  variables: ListWebhookParametersVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponseWebhookParameters,
      ListWebhookParametersError,
      Schemas.RestResponseWebhookParameters
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponseWebhookParameters,
    ListWebhookParametersError,
    Schemas.RestResponseWebhookParameters
  >(
    queryKeyFn({ path: '/triggers/webhook/parameters', operationId: 'listWebhookParameters', variables }),
    () => fetchListWebhookParameters({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type ListWebhookEventTypesQueryParams = {
  appId?: string
}

export type ListWebhookEventTypesError = Fetcher.ErrorWrapper<undefined>

export type ListWebhookEventTypesVariables = {
  queryParams?: ListWebhookEventTypesQueryParams
} & PortalContext['fetcherOptions']

export const fetchListWebhookEventTypes = (variables: ListWebhookEventTypesVariables) =>
  portalFetch<
    Schemas.RestResponseWebhookEventType,
    ListWebhookEventTypesError,
    undefined,
    {},
    ListWebhookEventTypesQueryParams,
    {}
  >({ url: '/triggers/webhook/eventTypes', method: 'get', ...variables })

export const useListWebhookEventTypes = (
  variables: ListWebhookEventTypesVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponseWebhookEventType,
      ListWebhookEventTypesError,
      Schemas.RestResponseWebhookEventType
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponseWebhookEventType,
    ListWebhookEventTypesError,
    Schemas.RestResponseWebhookEventType
  >(
    queryKeyFn({ path: '/triggers/webhook/eventTypes', operationId: 'listWebhookEventTypes', variables }),
    () => fetchListWebhookEventTypes({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type ListAppsWithEnvUpdatePermissionsQueryParams = {
  accountId?: string
}

export type ListAppsWithEnvUpdatePermissionsError = Fetcher.ErrorWrapper<undefined>

export type ListAppsWithEnvUpdatePermissionsVariables = {
  queryParams?: ListAppsWithEnvUpdatePermissionsQueryParams
} & PortalContext['fetcherOptions']

export const fetchListAppsWithEnvUpdatePermissions = (variables: ListAppsWithEnvUpdatePermissionsVariables) =>
  portalFetch<
    Schemas.RestResponseRestrictionsSummary,
    ListAppsWithEnvUpdatePermissionsError,
    undefined,
    {},
    ListAppsWithEnvUpdatePermissionsQueryParams,
    {}
  >({ url: '/usageRestrictions/apps', method: 'get', ...variables })

export const useListAppsWithEnvUpdatePermissions = (
  variables: ListAppsWithEnvUpdatePermissionsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponseRestrictionsSummary,
      ListAppsWithEnvUpdatePermissionsError,
      Schemas.RestResponseRestrictionsSummary
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponseRestrictionsSummary,
    ListAppsWithEnvUpdatePermissionsError,
    Schemas.RestResponseRestrictionsSummary
  >(
    queryKeyFn({ path: '/usageRestrictions/apps', operationId: 'listAppsWithEnvUpdatePermissions', variables }),
    () => fetchListAppsWithEnvUpdatePermissions({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type GetReferenceSummaryForAppPathParams = {
  appId: string
}

export type GetReferenceSummaryForAppQueryParams = {
  accountId?: string
}

export type GetReferenceSummaryForAppError = Fetcher.ErrorWrapper<undefined>

export type GetReferenceSummaryForAppVariables = {
  pathParams: GetReferenceSummaryForAppPathParams
  queryParams?: GetReferenceSummaryForAppQueryParams
} & PortalContext['fetcherOptions']

export const fetchGetReferenceSummaryForApp = (variables: GetReferenceSummaryForAppVariables) =>
  portalFetch<
    Schemas.RestResponseUsageRestrictionsReferenceSummary,
    GetReferenceSummaryForAppError,
    undefined,
    {},
    GetReferenceSummaryForAppQueryParams,
    GetReferenceSummaryForAppPathParams
  >({ url: '/usageRestrictions/appReferences/{appId}', method: 'get', ...variables })

export const useGetReferenceSummaryForApp = (
  variables: GetReferenceSummaryForAppVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponseUsageRestrictionsReferenceSummary,
      GetReferenceSummaryForAppError,
      Schemas.RestResponseUsageRestrictionsReferenceSummary
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponseUsageRestrictionsReferenceSummary,
    GetReferenceSummaryForAppError,
    Schemas.RestResponseUsageRestrictionsReferenceSummary
  >(
    queryKeyFn({
      path: '/usageRestrictions/appReferences/{appId}',
      operationId: 'getReferenceSummaryForApp',
      variables
    }),
    () => fetchGetReferenceSummaryForApp({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type GetReferenceSummaryForEnvPathParams = {
  envId: string
}

export type GetReferenceSummaryForEnvQueryParams = {
  accountId?: string
}

export type GetReferenceSummaryForEnvError = Fetcher.ErrorWrapper<undefined>

export type GetReferenceSummaryForEnvVariables = {
  pathParams: GetReferenceSummaryForEnvPathParams
  queryParams?: GetReferenceSummaryForEnvQueryParams
} & PortalContext['fetcherOptions']

export const fetchGetReferenceSummaryForEnv = (variables: GetReferenceSummaryForEnvVariables) =>
  portalFetch<
    Schemas.RestResponseUsageRestrictionsReferenceSummary,
    GetReferenceSummaryForEnvError,
    undefined,
    {},
    GetReferenceSummaryForEnvQueryParams,
    GetReferenceSummaryForEnvPathParams
  >({ url: '/usageRestrictions/envReferences/{envId}', method: 'get', ...variables })

export const useGetReferenceSummaryForEnv = (
  variables: GetReferenceSummaryForEnvVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponseUsageRestrictionsReferenceSummary,
      GetReferenceSummaryForEnvError,
      Schemas.RestResponseUsageRestrictionsReferenceSummary
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponseUsageRestrictionsReferenceSummary,
    GetReferenceSummaryForEnvError,
    Schemas.RestResponseUsageRestrictionsReferenceSummary
  >(
    queryKeyFn({
      path: '/usageRestrictions/envReferences/{envId}',
      operationId: 'getReferenceSummaryForEnv',
      variables
    }),
    () => fetchGetReferenceSummaryForEnv({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type IsEditablePathParams = {
  entityId: string
}

export type IsEditableQueryParams = {
  accountId?: string
  entityType?: string
}

export type IsEditableError = Fetcher.ErrorWrapper<undefined>

export type IsEditableVariables = {
  pathParams: IsEditablePathParams
  queryParams?: IsEditableQueryParams
} & PortalContext['fetcherOptions']

export const fetchIsEditable = (variables: IsEditableVariables) =>
  portalFetch<Schemas.RestResponseBoolean, IsEditableError, undefined, {}, IsEditableQueryParams, IsEditablePathParams>(
    { url: '/usageRestrictions/editable/{entityId}', method: 'get', ...variables }
  )

export const useIsEditable = (
  variables: IsEditableVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.RestResponseBoolean, IsEditableError, Schemas.RestResponseBoolean>,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<Schemas.RestResponseBoolean, IsEditableError, Schemas.RestResponseBoolean>(
    queryKeyFn({ path: '/usageRestrictions/editable/{entityId}', operationId: 'isEditable', variables }),
    () => fetchIsEditable({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type GetDefaultRestrictionsQueryParams = {
  accountId?: string
  appId?: string
  envId?: string
}

export type GetDefaultRestrictionsError = Fetcher.ErrorWrapper<undefined>

export type GetDefaultRestrictionsVariables = {
  queryParams?: GetDefaultRestrictionsQueryParams
} & PortalContext['fetcherOptions']

export const fetchGetDefaultRestrictions = (variables: GetDefaultRestrictionsVariables) =>
  portalFetch<
    Schemas.RestResponseUsageRestrictions,
    GetDefaultRestrictionsError,
    undefined,
    {},
    GetDefaultRestrictionsQueryParams,
    {}
  >({ url: '/usageRestrictions/defaultRestrictions', method: 'get', ...variables })

export const useGetDefaultRestrictions = (
  variables: GetDefaultRestrictionsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponseUsageRestrictions,
      GetDefaultRestrictionsError,
      Schemas.RestResponseUsageRestrictions
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponseUsageRestrictions,
    GetDefaultRestrictionsError,
    Schemas.RestResponseUsageRestrictions
  >(
    queryKeyFn({ path: '/usageRestrictions/defaultRestrictions', operationId: 'getDefaultRestrictions', variables }),
    () => fetchGetDefaultRestrictions({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type PurgeDanglingReferencesForConnectorsQueryParams = {
  accountId?: string
}

export type PurgeDanglingReferencesForConnectorsError = Fetcher.ErrorWrapper<undefined>

export type PurgeDanglingReferencesForConnectorsVariables = {
  queryParams?: PurgeDanglingReferencesForConnectorsQueryParams
} & PortalContext['fetcherOptions']

export const fetchPurgeDanglingReferencesForConnectors = (variables: PurgeDanglingReferencesForConnectorsVariables) =>
  portalFetch<
    Schemas.RestResponseBoolean,
    PurgeDanglingReferencesForConnectorsError,
    undefined,
    {},
    PurgeDanglingReferencesForConnectorsQueryParams,
    {}
  >({ url: '/usageRestrictions/references/connectors', method: 'delete', ...variables })

export const usePurgeDanglingReferencesForConnectors = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.RestResponseBoolean,
      PurgeDanglingReferencesForConnectorsError,
      PurgeDanglingReferencesForConnectorsVariables
    >,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<
    Schemas.RestResponseBoolean,
    PurgeDanglingReferencesForConnectorsError,
    PurgeDanglingReferencesForConnectorsVariables
  >(
    (variables: PurgeDanglingReferencesForConnectorsVariables) =>
      fetchPurgeDanglingReferencesForConnectors({ ...fetcherOptions, ...variables }),
    options
  )
}

export type PurgeDanglingReferencesForSecretsQueryParams = {
  accountId?: string
}

export type PurgeDanglingReferencesForSecretsError = Fetcher.ErrorWrapper<undefined>

export type PurgeDanglingReferencesForSecretsVariables = {
  queryParams?: PurgeDanglingReferencesForSecretsQueryParams
} & PortalContext['fetcherOptions']

export const fetchPurgeDanglingReferencesForSecrets = (variables: PurgeDanglingReferencesForSecretsVariables) =>
  portalFetch<
    Schemas.RestResponseBoolean,
    PurgeDanglingReferencesForSecretsError,
    undefined,
    {},
    PurgeDanglingReferencesForSecretsQueryParams,
    {}
  >({ url: '/usageRestrictions/references/secrets', method: 'delete', ...variables })

export const usePurgeDanglingReferencesForSecrets = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.RestResponseBoolean,
      PurgeDanglingReferencesForSecretsError,
      PurgeDanglingReferencesForSecretsVariables
    >,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<
    Schemas.RestResponseBoolean,
    PurgeDanglingReferencesForSecretsError,
    PurgeDanglingReferencesForSecretsVariables
  >(
    (variables: PurgeDanglingReferencesForSecretsVariables) =>
      fetchPurgeDanglingReferencesForSecrets({ ...fetcherOptions, ...variables }),
    options
  )
}

export type PurgeDanglingReferencesQueryParams = {
  accountId?: string
}

export type PurgeDanglingReferencesError = Fetcher.ErrorWrapper<undefined>

export type PurgeDanglingReferencesVariables = {
  queryParams?: PurgeDanglingReferencesQueryParams
} & PortalContext['fetcherOptions']

export const fetchPurgeDanglingReferences = (variables: PurgeDanglingReferencesVariables) =>
  portalFetch<
    Schemas.RestResponseBoolean,
    PurgeDanglingReferencesError,
    undefined,
    {},
    PurgeDanglingReferencesQueryParams,
    {}
  >({ url: '/usageRestrictions/references/all', method: 'delete', ...variables })

export const usePurgeDanglingReferences = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.RestResponseBoolean,
      PurgeDanglingReferencesError,
      PurgeDanglingReferencesVariables
    >,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<
    Schemas.RestResponseBoolean,
    PurgeDanglingReferencesError,
    PurgeDanglingReferencesVariables
  >(
    (variables: PurgeDanglingReferencesVariables) => fetchPurgeDanglingReferences({ ...fetcherOptions, ...variables }),
    options
  )
}

export type Get39PathParams = {
  userGroupId: string
}

export type Get39QueryParams = {
  accountId?: string
}

export type Get39Error = Fetcher.ErrorWrapper<undefined>

export type Get39Variables = {
  pathParams: Get39PathParams
  queryParams?: Get39QueryParams
} & PortalContext['fetcherOptions']

export const fetchGet39 = (variables: Get39Variables) =>
  portalFetch<Schemas.RestResponseUserGroup, Get39Error, undefined, {}, Get39QueryParams, Get39PathParams>({
    url: '/userGroups/{userGroupId}',
    method: 'get',
    ...variables
  })

export const useGet39 = (
  variables: Get39Variables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.RestResponseUserGroup, Get39Error, Schemas.RestResponseUserGroup>,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<Schemas.RestResponseUserGroup, Get39Error, Schemas.RestResponseUserGroup>(
    queryKeyFn({ path: '/userGroups/{userGroupId}', operationId: 'get39', variables }),
    () => fetchGet39({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type Delete29PathParams = {
  userGroupId: string
}

export type Delete29QueryParams = {
  accountId?: string
}

export type Delete29Error = Fetcher.ErrorWrapper<undefined>

export type Delete29Variables = {
  pathParams: Delete29PathParams
  queryParams?: Delete29QueryParams
} & PortalContext['fetcherOptions']

export const fetchDelete29 = (variables: Delete29Variables) =>
  portalFetch<Schemas.RestResponseBoolean, Delete29Error, undefined, {}, Delete29QueryParams, Delete29PathParams>({
    url: '/userGroups/{userGroupId}',
    method: 'delete',
    ...variables
  })

export const useDelete29 = (
  options?: Omit<
    reactQuery.UseMutationOptions<Schemas.RestResponseBoolean, Delete29Error, Delete29Variables>,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<Schemas.RestResponseBoolean, Delete29Error, Delete29Variables>(
    (variables: Delete29Variables) => fetchDelete29({ ...fetcherOptions, ...variables }),
    options
  )
}

export type Clone3PathParams = {
  userGroupId: string
}

export type Clone3QueryParams = {
  accountId?: string
  newName?: string
  newDescription?: string
}

export type Clone3Error = Fetcher.ErrorWrapper<undefined>

export type Clone3Variables = {
  pathParams: Clone3PathParams
  queryParams?: Clone3QueryParams
} & PortalContext['fetcherOptions']

export const fetchClone3 = (variables: Clone3Variables) =>
  portalFetch<Schemas.RestResponseUserGroup, Clone3Error, undefined, {}, Clone3QueryParams, Clone3PathParams>({
    url: '/userGroups/{userGroupId}/clone',
    method: 'post',
    ...variables
  })

export const useClone3 = (
  options?: Omit<
    reactQuery.UseMutationOptions<Schemas.RestResponseUserGroup, Clone3Error, Clone3Variables>,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<Schemas.RestResponseUserGroup, Clone3Error, Clone3Variables>(
    (variables: Clone3Variables) => fetchClone3({ ...fetcherOptions, ...variables }),
    options
  )
}

export type List42QueryParams = {
  /*
   * @default 0
   */
  offset?: string
  limit?: string
  fieldsIncluded?: string[]
  fieldsExcluded?: string[]
  accountId?: string
  searchTerm?: string
  /*
   * @default true
   */
  details?: boolean
}

export type List42Error = Fetcher.ErrorWrapper<undefined>

export type List42Variables = {
  queryParams?: List42QueryParams
} & PortalContext['fetcherOptions']

export const fetchList42 = (variables: List42Variables) =>
  portalFetch<Schemas.RestResponsePageResponseUserGroup, List42Error, undefined, {}, List42QueryParams, {}>({
    url: '/userGroups',
    method: 'get',
    ...variables
  })

export const useList42 = (
  variables: List42Variables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponsePageResponseUserGroup,
      List42Error,
      Schemas.RestResponsePageResponseUserGroup
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponsePageResponseUserGroup,
    List42Error,
    Schemas.RestResponsePageResponseUserGroup
  >(
    queryKeyFn({ path: '/userGroups', operationId: 'list42', variables }),
    () => fetchList42({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type Save21QueryParams = {
  accountId?: string
}

export type Save21Error = Fetcher.ErrorWrapper<undefined>

export type Save21Variables = {
  body: RequestBodies.UserGroup
  queryParams?: Save21QueryParams
} & PortalContext['fetcherOptions']

export const fetchSave21 = (variables: Save21Variables) =>
  portalFetch<Schemas.RestResponseUserGroup, Save21Error, RequestBodies.UserGroup, {}, Save21QueryParams, {}>({
    url: '/userGroups',
    method: 'post',
    ...variables
  })

export const useSave21 = (
  options?: Omit<
    reactQuery.UseMutationOptions<Schemas.RestResponseUserGroup, Save21Error, Save21Variables>,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<Schemas.RestResponseUserGroup, Save21Error, Save21Variables>(
    (variables: Save21Variables) => fetchSave21({ ...fetcherOptions, ...variables }),
    options
  )
}

export type Delete30QueryParams = {
  accountId?: string
}

export type Delete30Error = Fetcher.ErrorWrapper<undefined>

export type Delete30Variables = {
  body?: RequestBodies.UpdateWhitelistedDomainsBody
  queryParams?: Delete30QueryParams
} & PortalContext['fetcherOptions']

export const fetchDelete30 = (variables: Delete30Variables) =>
  portalFetch<
    Schemas.RestResponseBoolean,
    Delete30Error,
    RequestBodies.UpdateWhitelistedDomainsBody,
    {},
    Delete30QueryParams,
    {}
  >({ url: '/userGroups', method: 'delete', ...variables })

export const useDelete30 = (
  options?: Omit<
    reactQuery.UseMutationOptions<Schemas.RestResponseBoolean, Delete30Error, Delete30Variables>,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<Schemas.RestResponseBoolean, Delete30Error, Delete30Variables>(
    (variables: Delete30Variables) => fetchDelete30({ ...fetcherOptions, ...variables }),
    options
  )
}

export type UpdateMembersPathParams = {
  userGroupId: string
}

export type UpdateMembersQueryParams = {
  accountId?: string
}

export type UpdateMembersError = Fetcher.ErrorWrapper<undefined>

export type UpdateMembersVariables = {
  body: RequestBodies.UserGroup
  pathParams: UpdateMembersPathParams
  queryParams?: UpdateMembersQueryParams
} & PortalContext['fetcherOptions']

export const fetchUpdateMembers = (variables: UpdateMembersVariables) =>
  portalFetch<
    Schemas.RestResponseUserGroup,
    UpdateMembersError,
    RequestBodies.UserGroup,
    {},
    UpdateMembersQueryParams,
    UpdateMembersPathParams
  >({ url: '/userGroups/{userGroupId}/members', method: 'put', ...variables })

export const useUpdateMembers = (
  options?: Omit<
    reactQuery.UseMutationOptions<Schemas.RestResponseUserGroup, UpdateMembersError, UpdateMembersVariables>,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<Schemas.RestResponseUserGroup, UpdateMembersError, UpdateMembersVariables>(
    (variables: UpdateMembersVariables) => fetchUpdateMembers({ ...fetcherOptions, ...variables }),
    options
  )
}

export type UpdateOverviewPathParams = {
  userGroupId: string
}

export type UpdateOverviewQueryParams = {
  accountId?: string
}

export type UpdateOverviewError = Fetcher.ErrorWrapper<undefined>

export type UpdateOverviewVariables = {
  body: RequestBodies.UserGroup
  pathParams: UpdateOverviewPathParams
  queryParams?: UpdateOverviewQueryParams
} & PortalContext['fetcherOptions']

export const fetchUpdateOverview = (variables: UpdateOverviewVariables) =>
  portalFetch<
    Schemas.RestResponseUserGroup,
    UpdateOverviewError,
    RequestBodies.UserGroup,
    {},
    UpdateOverviewQueryParams,
    UpdateOverviewPathParams
  >({ url: '/userGroups/{userGroupId}/overview', method: 'put', ...variables })

export const useUpdateOverview = (
  options?: Omit<
    reactQuery.UseMutationOptions<Schemas.RestResponseUserGroup, UpdateOverviewError, UpdateOverviewVariables>,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<Schemas.RestResponseUserGroup, UpdateOverviewError, UpdateOverviewVariables>(
    (variables: UpdateOverviewVariables) => fetchUpdateOverview({ ...fetcherOptions, ...variables }),
    options
  )
}

export type UpdateNotificationSettingsPathParams = {
  userGroupId: string
}

export type UpdateNotificationSettingsQueryParams = {
  accountId?: string
}

export type UpdateNotificationSettingsError = Fetcher.ErrorWrapper<undefined>

export type UpdateNotificationSettingsVariables = {
  body: Schemas.NotificationSettings
  pathParams: UpdateNotificationSettingsPathParams
  queryParams?: UpdateNotificationSettingsQueryParams
} & PortalContext['fetcherOptions']

export const fetchUpdateNotificationSettings = (variables: UpdateNotificationSettingsVariables) =>
  portalFetch<
    Schemas.RestResponseUserGroup,
    UpdateNotificationSettingsError,
    Schemas.NotificationSettings,
    {},
    UpdateNotificationSettingsQueryParams,
    UpdateNotificationSettingsPathParams
  >({ url: '/userGroups/{userGroupId}/notification-settings', method: 'put', ...variables })

export const useUpdateNotificationSettings = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.RestResponseUserGroup,
      UpdateNotificationSettingsError,
      UpdateNotificationSettingsVariables
    >,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<
    Schemas.RestResponseUserGroup,
    UpdateNotificationSettingsError,
    UpdateNotificationSettingsVariables
  >(
    (variables: UpdateNotificationSettingsVariables) =>
      fetchUpdateNotificationSettings({ ...fetcherOptions, ...variables }),
    options
  )
}

export type UpdatePermissionsPathParams = {
  userGroupId: string
}

export type UpdatePermissionsQueryParams = {
  accountId?: string
}

export type UpdatePermissionsError = Fetcher.ErrorWrapper<undefined>

export type UpdatePermissionsVariables = {
  body: RequestBodies.UserGroup
  pathParams: UpdatePermissionsPathParams
  queryParams?: UpdatePermissionsQueryParams
} & PortalContext['fetcherOptions']

export const fetchUpdatePermissions = (variables: UpdatePermissionsVariables) =>
  portalFetch<
    Schemas.RestResponseUserGroup,
    UpdatePermissionsError,
    RequestBodies.UserGroup,
    {},
    UpdatePermissionsQueryParams,
    UpdatePermissionsPathParams
  >({ url: '/userGroups/{userGroupId}/permissions', method: 'put', ...variables })

export const useUpdatePermissions = (
  options?: Omit<
    reactQuery.UseMutationOptions<Schemas.RestResponseUserGroup, UpdatePermissionsError, UpdatePermissionsVariables>,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<Schemas.RestResponseUserGroup, UpdatePermissionsError, UpdatePermissionsVariables>(
    (variables: UpdatePermissionsVariables) => fetchUpdatePermissions({ ...fetcherOptions, ...variables }),
    options
  )
}

export type DeleteNonAdminUserGroupsQueryParams = {
  accountId?: string
}

export type DeleteNonAdminUserGroupsError = Fetcher.ErrorWrapper<undefined>

export type DeleteNonAdminUserGroupsVariables = {
  queryParams?: DeleteNonAdminUserGroupsQueryParams
} & PortalContext['fetcherOptions']

export const fetchDeleteNonAdminUserGroups = (variables: DeleteNonAdminUserGroupsVariables) =>
  portalFetch<
    Schemas.RestResponseBoolean,
    DeleteNonAdminUserGroupsError,
    undefined,
    {},
    DeleteNonAdminUserGroupsQueryParams,
    {}
  >({ url: '/userGroups/non-admin', method: 'delete', ...variables })

export const useDeleteNonAdminUserGroups = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.RestResponseBoolean,
      DeleteNonAdminUserGroupsError,
      DeleteNonAdminUserGroupsVariables
    >,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<
    Schemas.RestResponseBoolean,
    DeleteNonAdminUserGroupsError,
    DeleteNonAdminUserGroupsVariables
  >(
    (variables: DeleteNonAdminUserGroupsVariables) =>
      fetchDeleteNonAdminUserGroups({ ...fetcherOptions, ...variables }),
    options
  )
}

export type ListForApprovalsQueryParams = {
  accountId?: string
}

export type ListForApprovalsError = Fetcher.ErrorWrapper<undefined>

export type ListForApprovalsVariables = {
  queryParams?: ListForApprovalsQueryParams
} & PortalContext['fetcherOptions']

export const fetchListForApprovals = (variables: ListForApprovalsVariables) =>
  portalFetch<
    Schemas.RestResponsePageResponseUserGroup,
    ListForApprovalsError,
    undefined,
    {},
    ListForApprovalsQueryParams,
    {}
  >({ url: '/userGroups/approvals', method: 'get', ...variables })

export const useListForApprovals = (
  variables: ListForApprovalsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponsePageResponseUserGroup,
      ListForApprovalsError,
      Schemas.RestResponsePageResponseUserGroup
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponsePageResponseUserGroup,
    ListForApprovalsError,
    Schemas.RestResponsePageResponseUserGroup
  >(
    queryKeyFn({ path: '/userGroups/approvals', operationId: 'listForApprovals', variables }),
    () => fetchListForApprovals({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type LinkToLdapGroupPathParams = {
  userGroupId: string
  ldapId: string
}

export type LinkToLdapGroupQueryParams = {
  accountId?: string
}

export type LinkToLdapGroupError = Fetcher.ErrorWrapper<undefined>

export type LinkToLdapGroupVariables = {
  body?: Schemas.LdapLinkGroupRequest
  pathParams: LinkToLdapGroupPathParams
  queryParams?: LinkToLdapGroupQueryParams
} & PortalContext['fetcherOptions']

export const fetchLinkToLdapGroup = (variables: LinkToLdapGroupVariables) =>
  portalFetch<
    Schemas.RestResponseUserGroup,
    LinkToLdapGroupError,
    Schemas.LdapLinkGroupRequest,
    {},
    LinkToLdapGroupQueryParams,
    LinkToLdapGroupPathParams
  >({ url: '/userGroups/{userGroupId}/link/ldap/{ldapId}', method: 'put', ...variables })

export const useLinkToLdapGroup = (
  options?: Omit<
    reactQuery.UseMutationOptions<Schemas.RestResponseUserGroup, LinkToLdapGroupError, LinkToLdapGroupVariables>,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<Schemas.RestResponseUserGroup, LinkToLdapGroupError, LinkToLdapGroupVariables>(
    (variables: LinkToLdapGroupVariables) => fetchLinkToLdapGroup({ ...fetcherOptions, ...variables }),
    options
  )
}

export type UnlinkSsoGroupPathParams = {
  userGroupId: string
}

export type UnlinkSsoGroupQueryParams = {
  accountId?: string
  retainMembers?: boolean
}

export type UnlinkSsoGroupError = Fetcher.ErrorWrapper<undefined>

export type UnlinkSsoGroupVariables = {
  pathParams: UnlinkSsoGroupPathParams
  queryParams?: UnlinkSsoGroupQueryParams
} & PortalContext['fetcherOptions']

export const fetchUnlinkSsoGroup = (variables: UnlinkSsoGroupVariables) =>
  portalFetch<
    Schemas.RestResponseUserGroup,
    UnlinkSsoGroupError,
    undefined,
    {},
    UnlinkSsoGroupQueryParams,
    UnlinkSsoGroupPathParams
  >({ url: '/userGroups/{userGroupId}/unlink', method: 'put', ...variables })

export const useUnlinkSsoGroup = (
  options?: Omit<
    reactQuery.UseMutationOptions<Schemas.RestResponseUserGroup, UnlinkSsoGroupError, UnlinkSsoGroupVariables>,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<Schemas.RestResponseUserGroup, UnlinkSsoGroupError, UnlinkSsoGroupVariables>(
    (variables: UnlinkSsoGroupVariables) => fetchUnlinkSsoGroup({ ...fetcherOptions, ...variables }),
    options
  )
}

export type LinkToSamlGroupPathParams = {
  userGroupId: string
  samlId: string
}

export type LinkToSamlGroupQueryParams = {
  accountId?: string
}

export type LinkToSamlGroupError = Fetcher.ErrorWrapper<undefined>

export type LinkToSamlGroupVariables = {
  body?: Schemas.SamlLinkGroupRequest
  pathParams: LinkToSamlGroupPathParams
  queryParams?: LinkToSamlGroupQueryParams
} & PortalContext['fetcherOptions']

export const fetchLinkToSamlGroup = (variables: LinkToSamlGroupVariables) =>
  portalFetch<
    Schemas.RestResponseUserGroup,
    LinkToSamlGroupError,
    Schemas.SamlLinkGroupRequest,
    {},
    LinkToSamlGroupQueryParams,
    LinkToSamlGroupPathParams
  >({ url: '/userGroups/{userGroupId}/link/saml/{samlId}', method: 'put', ...variables })

export const useLinkToSamlGroup = (
  options?: Omit<
    reactQuery.UseMutationOptions<Schemas.RestResponseUserGroup, LinkToSamlGroupError, LinkToSamlGroupVariables>,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<Schemas.RestResponseUserGroup, LinkToSamlGroupError, LinkToSamlGroupVariables>(
    (variables: LinkToSamlGroupVariables) => fetchLinkToSamlGroup({ ...fetcherOptions, ...variables }),
    options
  )
}

export type Get40Error = Fetcher.ErrorWrapper<undefined>

export type Get40Variables = PortalContext['fetcherOptions']

export const fetchGet40 = (variables: Get40Variables) =>
  portalFetch<Schemas.RestResponseUser, Get40Error, undefined, {}, {}, {}>({
    url: '/users/user',
    method: 'get',
    ...variables
  })

export const useGet40 = (
  variables: Get40Variables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.RestResponseUser, Get40Error, Schemas.RestResponseUser>,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<Schemas.RestResponseUser, Get40Error, Schemas.RestResponseUser>(
    queryKeyFn({ path: '/users/user', operationId: 'get40', variables }),
    () => fetchGet40({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type List43QueryParams = {
  /*
   * @default 0
   */
  offset?: string
  limit?: string
  fieldsIncluded?: string[]
  fieldsExcluded?: string[]
  accountId?: string
  searchTerm?: string
  /*
   * @default true
   */
  details?: boolean
}

export type List43Error = Fetcher.ErrorWrapper<undefined>

export type List43Variables = {
  queryParams?: List43QueryParams
} & PortalContext['fetcherOptions']

export const fetchList43 = (variables: List43Variables) =>
  portalFetch<Schemas.RestResponsePageResponsePublicUser, List43Error, undefined, {}, List43QueryParams, {}>({
    url: '/users',
    method: 'get',
    ...variables
  })

export const useList43 = (
  variables: List43Variables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponsePageResponsePublicUser,
      List43Error,
      Schemas.RestResponsePageResponsePublicUser
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponsePageResponsePublicUser,
    List43Error,
    Schemas.RestResponsePageResponsePublicUser
  >(
    queryKeyFn({ path: '/users', operationId: 'list43', variables }),
    () => fetchList43({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type Register1Error = Fetcher.ErrorWrapper<undefined>

export type Register1Variables = {
  body: RequestBodies.User
} & PortalContext['fetcherOptions']

export const fetchRegister1 = (variables: Register1Variables) =>
  portalFetch<Schemas.RestResponseUser, Register1Error, RequestBodies.User, {}, {}, {}>({
    url: '/users',
    method: 'post',
    ...variables
  })

export const useRegister1 = (
  options?: Omit<
    reactQuery.UseMutationOptions<Schemas.RestResponseUser, Register1Error, Register1Variables>,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<Schemas.RestResponseUser, Register1Error, Register1Variables>(
    (variables: Register1Variables) => fetchRegister1({ ...fetcherOptions, ...variables }),
    options
  )
}

export type Delete31QueryParams = {
  accountId?: string
}

export type Delete31Error = Fetcher.ErrorWrapper<undefined>

export type Delete31Variables = {
  body?: RequestBodies.UpdateWhitelistedDomainsBody
  queryParams?: Delete31QueryParams
} & PortalContext['fetcherOptions']

export const fetchDelete31 = (variables: Delete31Variables) =>
  portalFetch<
    Schemas.RestResponseBoolean,
    Delete31Error,
    RequestBodies.UpdateWhitelistedDomainsBody,
    {},
    Delete31QueryParams,
    {}
  >({ url: '/users', method: 'delete', ...variables })

export const useDelete31 = (
  options?: Omit<
    reactQuery.UseMutationOptions<Schemas.RestResponseBoolean, Delete31Error, Delete31Variables>,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<Schemas.RestResponseBoolean, Delete31Error, Delete31Variables>(
    (variables: Delete31Variables) => fetchDelete31({ ...fetcherOptions, ...variables }),
    options
  )
}

export type Delete32PathParams = {
  userId: string
}

export type Delete32QueryParams = {
  accountId?: string
}

export type Delete32Error = Fetcher.ErrorWrapper<undefined>

export type Delete32Variables = {
  pathParams: Delete32PathParams
  queryParams?: Delete32QueryParams
} & PortalContext['fetcherOptions']

export const fetchDelete32 = (variables: Delete32Variables) =>
  portalFetch<Schemas.RestResponse, Delete32Error, undefined, {}, Delete32QueryParams, Delete32PathParams>({
    url: '/users/{userId}',
    method: 'delete',
    ...variables
  })

export const useDelete32 = (
  options?: Omit<reactQuery.UseMutationOptions<Schemas.RestResponse, Delete32Error, Delete32Variables>, 'mutationFn'>
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<Schemas.RestResponse, Delete32Error, Delete32Variables>(
    (variables: Delete32Variables) => fetchDelete32({ ...fetcherOptions, ...variables }),
    options
  )
}

export type GetUserPermissionInfoPathParams = {
  accountId: string
}

export type GetUserPermissionInfoError = Fetcher.ErrorWrapper<undefined>

export type GetUserPermissionInfoVariables = {
  pathParams: GetUserPermissionInfoPathParams
} & PortalContext['fetcherOptions']

export const fetchGetUserPermissionInfo = (variables: GetUserPermissionInfoVariables) =>
  portalFetch<
    Schemas.RestResponseUserPermissionInfo,
    GetUserPermissionInfoError,
    undefined,
    {},
    {},
    GetUserPermissionInfoPathParams
  >({ url: '/users/user-permissions/{accountId}', method: 'get', ...variables })

export const useGetUserPermissionInfo = (
  variables: GetUserPermissionInfoVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponseUserPermissionInfo,
      GetUserPermissionInfoError,
      Schemas.RestResponseUserPermissionInfo
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponseUserPermissionInfo,
    GetUserPermissionInfoError,
    Schemas.RestResponseUserPermissionInfo
  >(
    queryKeyFn({ path: '/users/user-permissions/{accountId}', operationId: 'getUserPermissionInfo', variables }),
    () => fetchGetUserPermissionInfo({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type RefreshTokenHeaders = {
  Authorization?: string
}

export type RefreshTokenError = Fetcher.ErrorWrapper<undefined>

export type RefreshTokenVariables = {
  headers?: RefreshTokenHeaders
} & PortalContext['fetcherOptions']

export const fetchRefreshToken = (variables: RefreshTokenVariables) =>
  portalFetch<Schemas.RestResponseString, RefreshTokenError, undefined, RefreshTokenHeaders, {}, {}>({
    url: '/users/refresh-token',
    method: 'get',
    ...variables
  })

export const useRefreshToken = (
  variables: RefreshTokenVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.RestResponseString, RefreshTokenError, Schemas.RestResponseString>,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<Schemas.RestResponseString, RefreshTokenError, Schemas.RestResponseString>(
    queryKeyFn({ path: '/users/refresh-token', operationId: 'refreshToken', variables }),
    () => fetchRefreshToken({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type SuggestAccountNamePathParams = {
  accountName: string
}

export type SuggestAccountNameError = Fetcher.ErrorWrapper<undefined>

export type SuggestAccountNameVariables = {
  pathParams: SuggestAccountNamePathParams
} & PortalContext['fetcherOptions']

export const fetchSuggestAccountName = (variables: SuggestAccountNameVariables) =>
  portalFetch<Schemas.RestResponseString, SuggestAccountNameError, undefined, {}, {}, SuggestAccountNamePathParams>({
    url: '/users/account-name/{accountName}',
    method: 'get',
    ...variables
  })

export const useSuggestAccountName = (
  variables: SuggestAccountNameVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.RestResponseString, SuggestAccountNameError, Schemas.RestResponseString>,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<Schemas.RestResponseString, SuggestAccountNameError, Schemas.RestResponseString>(
    queryKeyFn({ path: '/users/account-name/{accountName}', operationId: 'suggestAccountName', variables }),
    () => fetchSuggestAccountName({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type GetFeatureFlagsPathParams = {
  accountId: string
}

export type GetFeatureFlagsError = Fetcher.ErrorWrapper<undefined>

export type GetFeatureFlagsVariables = {
  pathParams: GetFeatureFlagsPathParams
} & PortalContext['fetcherOptions']

export const fetchGetFeatureFlags = (variables: GetFeatureFlagsVariables) =>
  portalFetch<
    Schemas.RestResponseCollectionFeatureFlag,
    GetFeatureFlagsError,
    undefined,
    {},
    {},
    GetFeatureFlagsPathParams
  >({ url: '/users/feature-flags/{accountId}', method: 'get', ...variables })

export const useGetFeatureFlags = (
  variables: GetFeatureFlagsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponseCollectionFeatureFlag,
      GetFeatureFlagsError,
      Schemas.RestResponseCollectionFeatureFlag
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponseCollectionFeatureFlag,
    GetFeatureFlagsError,
    Schemas.RestResponseCollectionFeatureFlag
  >(
    queryKeyFn({ path: '/users/feature-flags/{accountId}', operationId: 'getFeatureFlags', variables }),
    () => fetchGetFeatureFlags({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type PostCustomEvent1QueryParams = {
  accountId?: string
}

export type PostCustomEvent1Error = Fetcher.ErrorWrapper<undefined>

export type PostCustomEvent1Variables = {
  body?: RequestBodies.ValidateBody
  queryParams?: PostCustomEvent1QueryParams
} & PortalContext['fetcherOptions']

export const fetchPostCustomEvent1 = (variables: PostCustomEvent1Variables) =>
  portalFetch<
    Schemas.RestResponseBoolean,
    PostCustomEvent1Error,
    RequestBodies.ValidateBody,
    {},
    PostCustomEvent1QueryParams,
    {}
  >({ url: '/users/custom-event', method: 'post', ...variables })

export const usePostCustomEvent1 = (
  options?: Omit<
    reactQuery.UseMutationOptions<Schemas.RestResponseBoolean, PostCustomEvent1Error, PostCustomEvent1Variables>,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<Schemas.RestResponseBoolean, PostCustomEvent1Error, PostCustomEvent1Variables>(
    (variables: PostCustomEvent1Variables) => fetchPostCustomEvent1({ ...fetcherOptions, ...variables }),
    options
  )
}

export type LoginQueryParams = {
  accountId?: string
  captcha?: string
}

export type LoginError = Fetcher.ErrorWrapper<undefined>

export type LoginVariables = {
  body?: RequestBodies.LoginRequest
  queryParams?: LoginQueryParams
} & PortalContext['fetcherOptions']

export const fetchLogin = (variables: LoginVariables) =>
  portalFetch<Schemas.RestResponseUser, LoginError, RequestBodies.LoginRequest, {}, LoginQueryParams, {}>({
    url: '/users/login',
    method: 'post',
    ...variables
  })

export const useLogin = (
  options?: Omit<reactQuery.UseMutationOptions<Schemas.RestResponseUser, LoginError, LoginVariables>, 'mutationFn'>
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<Schemas.RestResponseUser, LoginError, LoginVariables>(
    (variables: LoginVariables) => fetchLogin({ ...fetcherOptions, ...variables }),
    options
  )
}

export type ResetCacheError = Fetcher.ErrorWrapper<undefined>

export type ResetCacheVariables = PortalContext['fetcherOptions']

export const fetchResetCache = (variables: ResetCacheVariables) =>
  portalFetch<Schemas.RestResponse, ResetCacheError, undefined, {}, {}, {}>({
    url: '/users/reset-cache',
    method: 'put',
    ...variables
  })

export const useResetCache = (
  options?: Omit<
    reactQuery.UseMutationOptions<Schemas.RestResponse, ResetCacheError, ResetCacheVariables>,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<Schemas.RestResponse, ResetCacheError, ResetCacheVariables>(
    (variables: ResetCacheVariables) => fetchResetCache({ ...fetcherOptions, ...variables }),
    options
  )
}

export type Logout1PathParams = {
  userId: string
}

export type Logout1Error = Fetcher.ErrorWrapper<undefined>

export type Logout1Variables = {
  pathParams: Logout1PathParams
} & PortalContext['fetcherOptions']

export const fetchLogout1 = (variables: Logout1Variables) =>
  portalFetch<Schemas.RestResponse, Logout1Error, undefined, {}, {}, Logout1PathParams>({
    url: '/users/{userId}/logout',
    method: 'post',
    ...variables
  })

export const useLogout1 = (
  options?: Omit<reactQuery.UseMutationOptions<Schemas.RestResponse, Logout1Error, Logout1Variables>, 'mutationFn'>
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<Schemas.RestResponse, Logout1Error, Logout1Variables>(
    (variables: Logout1Variables) => fetchLogout1({ ...fetcherOptions, ...variables }),
    options
  )
}

export type LoginUser1QueryParams = {
  email?: string
}

export type LoginUser1Error = Fetcher.ErrorWrapper<undefined>

export type LoginUser1Variables = {
  queryParams?: LoginUser1QueryParams
} & PortalContext['fetcherOptions']

export const fetchLoginUser1 = (variables: LoginUser1Variables) =>
  portalFetch<Schemas.RestResponseUser, LoginUser1Error, undefined, {}, LoginUser1QueryParams, {}>({
    url: '/users/user/login',
    method: 'get',
    ...variables
  })

export const useLoginUser1 = (
  variables: LoginUser1Variables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.RestResponseUser, LoginUser1Error, Schemas.RestResponseUser>,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<Schemas.RestResponseUser, LoginUser1Error, Schemas.RestResponseUser>(
    queryKeyFn({ path: '/users/user/login', operationId: 'loginUser1', variables }),
    () => fetchLoginUser1({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type TrialSignupError = Fetcher.ErrorWrapper<undefined>

export type TrialSignupVariables = {
  body: RequestBodies.UserInvite
} & PortalContext['fetcherOptions']

export const fetchTrialSignup = (variables: TrialSignupVariables) =>
  portalFetch<Schemas.RestResponseBoolean, TrialSignupError, RequestBodies.UserInvite, {}, {}, {}>({
    url: '/users/new-trial',
    method: 'post',
    ...variables
  })

export const useTrialSignup = (
  options?: Omit<
    reactQuery.UseMutationOptions<Schemas.RestResponseBoolean, TrialSignupError, TrialSignupVariables>,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<Schemas.RestResponseBoolean, TrialSignupError, TrialSignupVariables>(
    (variables: TrialSignupVariables) => fetchTrialSignup({ ...fetcherOptions, ...variables }),
    options
  )
}

export type AccountJoinRequestError = Fetcher.ErrorWrapper<undefined>

export type AccountJoinRequestVariables = {
  body?: Schemas.AccountJoinRequest
} & PortalContext['fetcherOptions']

export const fetchAccountJoinRequest = (variables: AccountJoinRequestVariables) =>
  portalFetch<Schemas.RestResponseBoolean, AccountJoinRequestError, Schemas.AccountJoinRequest, {}, {}, {}>({
    url: '/users/join-account',
    method: 'post',
    ...variables
  })

export const useAccountJoinRequest = (
  options?: Omit<
    reactQuery.UseMutationOptions<Schemas.RestResponseBoolean, AccountJoinRequestError, AccountJoinRequestVariables>,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<Schemas.RestResponseBoolean, AccountJoinRequestError, AccountJoinRequestVariables>(
    (variables: AccountJoinRequestVariables) => fetchAccountJoinRequest({ ...fetcherOptions, ...variables }),
    options
  )
}

export type AddAccountQueryParams = {
  /*
   * @default true
   */
  addUser?: boolean
}

export type AddAccountError = Fetcher.ErrorWrapper<undefined>

export type AddAccountVariables = {
  body: RequestBodies.Account
  queryParams?: AddAccountQueryParams
} & PortalContext['fetcherOptions']

export const fetchAddAccount = (variables: AddAccountVariables) =>
  portalFetch<Schemas.RestResponseAccount, AddAccountError, RequestBodies.Account, {}, AddAccountQueryParams, {}>({
    url: '/users/account',
    method: 'post',
    ...variables
  })

export const useAddAccount = (
  options?: Omit<
    reactQuery.UseMutationOptions<Schemas.RestResponseAccount, AddAccountError, AddAccountVariables>,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<Schemas.RestResponseAccount, AddAccountError, AddAccountVariables>(
    (variables: AddAccountVariables) => fetchAddAccount({ ...fetcherOptions, ...variables }),
    options
  )
}

export type UpdateUserGroupsOfUserPathParams = {
  userId: string
}

export type UpdateUserGroupsOfUserQueryParams = {
  accountId?: string
}

export type UpdateUserGroupsOfUserError = Fetcher.ErrorWrapper<undefined>

export type UpdateUserGroupsOfUserVariables = {
  body: RequestBodies.User
  pathParams: UpdateUserGroupsOfUserPathParams
  queryParams?: UpdateUserGroupsOfUserQueryParams
} & PortalContext['fetcherOptions']

export const fetchUpdateUserGroupsOfUser = (variables: UpdateUserGroupsOfUserVariables) =>
  portalFetch<
    Schemas.RestResponseUser,
    UpdateUserGroupsOfUserError,
    RequestBodies.User,
    {},
    UpdateUserGroupsOfUserQueryParams,
    UpdateUserGroupsOfUserPathParams
  >({ url: '/users/user/{userId}', method: 'put', ...variables })

export const useUpdateUserGroupsOfUser = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.RestResponseUser,
      UpdateUserGroupsOfUserError,
      UpdateUserGroupsOfUserVariables
    >,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<Schemas.RestResponseUser, UpdateUserGroupsOfUserError, UpdateUserGroupsOfUserVariables>(
    (variables: UpdateUserGroupsOfUserVariables) => fetchUpdateUserGroupsOfUser({ ...fetcherOptions, ...variables }),
    options
  )
}

export type UpdateUserProfilePathParams = {
  userId: string
}

export type UpdateUserProfileQueryParams = {
  accountId?: string
}

export type UpdateUserProfileError = Fetcher.ErrorWrapper<undefined>

export type UpdateUserProfileVariables = {
  body: RequestBodies.User
  pathParams: UpdateUserProfilePathParams
  queryParams?: UpdateUserProfileQueryParams
} & PortalContext['fetcherOptions']

export const fetchUpdateUserProfile = (variables: UpdateUserProfileVariables) =>
  portalFetch<
    Schemas.RestResponseUser,
    UpdateUserProfileError,
    RequestBodies.User,
    {},
    UpdateUserProfileQueryParams,
    UpdateUserProfilePathParams
  >({ url: '/users/profile/{userId}', method: 'put', ...variables })

export const useUpdateUserProfile = (
  options?: Omit<
    reactQuery.UseMutationOptions<Schemas.RestResponseUser, UpdateUserProfileError, UpdateUserProfileVariables>,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<Schemas.RestResponseUser, UpdateUserProfileError, UpdateUserProfileVariables>(
    (variables: UpdateUserProfileVariables) => fetchUpdateUserProfile({ ...fetcherOptions, ...variables }),
    options
  )
}

export type ResetPasswordError = Fetcher.ErrorWrapper<undefined>

export type ResetPasswordVariables = {
  body?: Schemas.ResetPasswordRequest
} & PortalContext['fetcherOptions']

export const fetchResetPassword = (variables: ResetPasswordVariables) =>
  portalFetch<Schemas.RestResponse, ResetPasswordError, Schemas.ResetPasswordRequest, {}, {}, {}>({
    url: '/users/reset-password',
    method: 'post',
    ...variables
  })

export const useResetPassword = (
  options?: Omit<
    reactQuery.UseMutationOptions<Schemas.RestResponse, ResetPasswordError, ResetPasswordVariables>,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<Schemas.RestResponse, ResetPasswordError, ResetPasswordVariables>(
    (variables: ResetPasswordVariables) => fetchResetPassword({ ...fetcherOptions, ...variables }),
    options
  )
}

export type ResendInvitationEmailQueryParams = {
  accountId?: string
}

export type ResendInvitationEmailError = Fetcher.ErrorWrapper<undefined>

export type ResendInvitationEmailVariables = {
  body?: Schemas.ResendInvitationEmailRequest
  queryParams?: ResendInvitationEmailQueryParams
} & PortalContext['fetcherOptions']

export const fetchResendInvitationEmail = (variables: ResendInvitationEmailVariables) =>
  portalFetch<
    Schemas.RestResponse,
    ResendInvitationEmailError,
    Schemas.ResendInvitationEmailRequest,
    {},
    ResendInvitationEmailQueryParams,
    {}
  >({ url: '/users/resend-invitation-email', method: 'post', ...variables })

export const useResendInvitationEmail = (
  options?: Omit<
    reactQuery.UseMutationOptions<Schemas.RestResponse, ResendInvitationEmailError, ResendInvitationEmailVariables>,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<Schemas.RestResponse, ResendInvitationEmailError, ResendInvitationEmailVariables>(
    (variables: ResendInvitationEmailVariables) => fetchResendInvitationEmail({ ...fetcherOptions, ...variables }),
    options
  )
}

export type UpdatePasswordPathParams = {
  token: string
}

export type UpdatePasswordError = Fetcher.ErrorWrapper<undefined>

export type UpdatePasswordVariables = {
  body?: Schemas.UpdatePasswordRequest
  pathParams: UpdatePasswordPathParams
} & PortalContext['fetcherOptions']

export const fetchUpdatePassword = (variables: UpdatePasswordVariables) =>
  portalFetch<
    Schemas.RestResponse,
    UpdatePasswordError,
    Schemas.UpdatePasswordRequest,
    {},
    {},
    UpdatePasswordPathParams
  >({ url: '/users/reset-password/{token}', method: 'post', ...variables })

export const useUpdatePassword = (
  options?: Omit<
    reactQuery.UseMutationOptions<Schemas.RestResponse, UpdatePasswordError, UpdatePasswordVariables>,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<Schemas.RestResponse, UpdatePasswordError, UpdatePasswordVariables>(
    (variables: UpdatePasswordVariables) => fetchUpdatePassword({ ...fetcherOptions, ...variables }),
    options
  )
}

export type CheckPasswordViolationsQueryParams = {
  token?: string
  pollType?: 'SIGN_UP_FLOW' | 'PASSWORD_RESET_FLOW'
  accountId?: string
}

export type CheckPasswordViolationsHeaders = {
  Authorization?: string
}

export type CheckPasswordViolationsError = Fetcher.ErrorWrapper<undefined>

export type CheckPasswordViolationsVariables = {
  headers?: CheckPasswordViolationsHeaders
  queryParams?: CheckPasswordViolationsQueryParams
} & PortalContext['fetcherOptions']

export const fetchCheckPasswordViolations = (variables: CheckPasswordViolationsVariables) =>
  portalFetch<
    Schemas.RestResponse,
    CheckPasswordViolationsError,
    undefined,
    CheckPasswordViolationsHeaders,
    CheckPasswordViolationsQueryParams,
    {}
  >({ url: '/users/check-password-violations', method: 'get', ...variables })

export const useCheckPasswordViolations = (
  variables: CheckPasswordViolationsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.RestResponse, CheckPasswordViolationsError, Schemas.RestResponse>,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<Schemas.RestResponse, CheckPasswordViolationsError, Schemas.RestResponse>(
    queryKeyFn({ path: '/users/check-password-violations', operationId: 'checkPasswordViolations', variables }),
    () => fetchCheckPasswordViolations({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type GetAccountRolePathParams = {
  accountId: string
}

export type GetAccountRoleError = Fetcher.ErrorWrapper<undefined>

export type GetAccountRoleVariables = {
  pathParams: GetAccountRolePathParams
} & PortalContext['fetcherOptions']

export const fetchGetAccountRole = (variables: GetAccountRoleVariables) =>
  portalFetch<Schemas.RestResponseAccountRole, GetAccountRoleError, undefined, {}, {}, GetAccountRolePathParams>({
    url: '/users/account-roles/{accountId}',
    method: 'get',
    ...variables
  })

export const useGetAccountRole = (
  variables: GetAccountRoleVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.RestResponseAccountRole, GetAccountRoleError, Schemas.RestResponseAccountRole>,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<Schemas.RestResponseAccountRole, GetAccountRoleError, Schemas.RestResponseAccountRole>(
    queryKeyFn({ path: '/users/account-roles/{accountId}', operationId: 'getAccountRole', variables }),
    () => fetchGetAccountRole({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type GetApplicationRolePathParams = {
  appId: string
}

export type GetApplicationRoleError = Fetcher.ErrorWrapper<undefined>

export type GetApplicationRoleVariables = {
  pathParams: GetApplicationRolePathParams
} & PortalContext['fetcherOptions']

export const fetchGetApplicationRole = (variables: GetApplicationRoleVariables) =>
  portalFetch<
    Schemas.RestResponseApplicationRole,
    GetApplicationRoleError,
    undefined,
    {},
    {},
    GetApplicationRolePathParams
  >({ url: '/users/application-roles/{appId}', method: 'get', ...variables })

export const useGetApplicationRole = (
  variables: GetApplicationRoleVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponseApplicationRole,
      GetApplicationRoleError,
      Schemas.RestResponseApplicationRole
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponseApplicationRole,
    GetApplicationRoleError,
    Schemas.RestResponseApplicationRole
  >(
    queryKeyFn({ path: '/users/application-roles/{appId}', operationId: 'getApplicationRole', variables }),
    () => fetchGetApplicationRole({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type SwitchAccountQueryParams = {
  accountId?: string
}

export type SwitchAccountHeaders = {
  Authorization?: string
}

export type SwitchAccountError = Fetcher.ErrorWrapper<undefined>

export type SwitchAccountVariables = {
  headers?: SwitchAccountHeaders
  queryParams?: SwitchAccountQueryParams
} & PortalContext['fetcherOptions']

export const fetchSwitchAccount = (variables: SwitchAccountVariables) =>
  portalFetch<
    Schemas.RestResponseUser,
    SwitchAccountError,
    undefined,
    SwitchAccountHeaders,
    SwitchAccountQueryParams,
    {}
  >({ url: '/users/switch-account', method: 'get', ...variables })

export const useSwitchAccount = (
  variables: SwitchAccountVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.RestResponseUser, SwitchAccountError, Schemas.RestResponseUser>,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<Schemas.RestResponseUser, SwitchAccountError, Schemas.RestResponseUser>(
    queryKeyFn({ path: '/users/switch-account', operationId: 'switchAccount', variables }),
    () => fetchSwitchAccount({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type NewSwitchAccountHeaders = {
  Authorization?: string
}

export type NewSwitchAccountError = Fetcher.ErrorWrapper<undefined>

export type NewSwitchAccountVariables = {
  body?: RequestBodies.SwitchAccountRequest
  headers?: NewSwitchAccountHeaders
} & PortalContext['fetcherOptions']

export const fetchNewSwitchAccount = (variables: NewSwitchAccountVariables) =>
  portalFetch<
    Schemas.RestResponseBoolean,
    NewSwitchAccountError,
    RequestBodies.SwitchAccountRequest,
    NewSwitchAccountHeaders,
    {},
    {}
  >({ url: '/users/switch-account', method: 'post', ...variables })

export const useNewSwitchAccount = (
  options?: Omit<
    reactQuery.UseMutationOptions<Schemas.RestResponseBoolean, NewSwitchAccountError, NewSwitchAccountVariables>,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<Schemas.RestResponseBoolean, NewSwitchAccountError, NewSwitchAccountVariables>(
    (variables: NewSwitchAccountVariables) => fetchNewSwitchAccount({ ...fetcherOptions, ...variables }),
    options
  )
}

export type RestrictedSwitchAccountQueryParams = {
  routingId?: string
}

export type RestrictedSwitchAccountHeaders = {
  Authorization?: string
}

export type RestrictedSwitchAccountError = Fetcher.ErrorWrapper<undefined>

export type RestrictedSwitchAccountVariables = {
  body?: RequestBodies.SwitchAccountRequest
  headers?: RestrictedSwitchAccountHeaders
  queryParams?: RestrictedSwitchAccountQueryParams
} & PortalContext['fetcherOptions']

export const fetchRestrictedSwitchAccount = (variables: RestrictedSwitchAccountVariables) =>
  portalFetch<
    Schemas.RestResponseSwitchAccountResponse,
    RestrictedSwitchAccountError,
    RequestBodies.SwitchAccountRequest,
    RestrictedSwitchAccountHeaders,
    RestrictedSwitchAccountQueryParams,
    {}
  >({ url: '/users/restricted-switch-account', method: 'post', ...variables })

export const useRestrictedSwitchAccount = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.RestResponseSwitchAccountResponse,
      RestrictedSwitchAccountError,
      RestrictedSwitchAccountVariables
    >,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<
    Schemas.RestResponseSwitchAccountResponse,
    RestrictedSwitchAccountError,
    RestrictedSwitchAccountVariables
  >(
    (variables: RestrictedSwitchAccountVariables) => fetchRestrictedSwitchAccount({ ...fetcherOptions, ...variables }),
    options
  )
}

export type SetDefaultAccountForCurrentUserPathParams = {
  accountId: string
}

export type SetDefaultAccountForCurrentUserError = Fetcher.ErrorWrapper<undefined>

export type SetDefaultAccountForCurrentUserVariables = {
  pathParams: SetDefaultAccountForCurrentUserPathParams
} & PortalContext['fetcherOptions']

export const fetchSetDefaultAccountForCurrentUser = (variables: SetDefaultAccountForCurrentUserVariables) =>
  portalFetch<
    Schemas.RestResponseBoolean,
    SetDefaultAccountForCurrentUserError,
    undefined,
    {},
    {},
    SetDefaultAccountForCurrentUserPathParams
  >({ url: '/users/set-default-account/{accountId}', method: 'put', ...variables })

export const useSetDefaultAccountForCurrentUser = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.RestResponseBoolean,
      SetDefaultAccountForCurrentUserError,
      SetDefaultAccountForCurrentUserVariables
    >,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<
    Schemas.RestResponseBoolean,
    SetDefaultAccountForCurrentUserError,
    SetDefaultAccountForCurrentUserVariables
  >(
    (variables: SetDefaultAccountForCurrentUserVariables) =>
      fetchSetDefaultAccountForCurrentUser({ ...fetcherOptions, ...variables }),
    options
  )
}

export type ForceLoginUsingHarnessPasswordQueryParams = {
  accountId?: string
}

export type ForceLoginUsingHarnessPasswordError = Fetcher.ErrorWrapper<undefined>

export type ForceLoginUsingHarnessPasswordVariables = {
  body?: RequestBodies.LoginRequest
  queryParams?: ForceLoginUsingHarnessPasswordQueryParams
} & PortalContext['fetcherOptions']

export const fetchForceLoginUsingHarnessPassword = (variables: ForceLoginUsingHarnessPasswordVariables) =>
  portalFetch<
    Schemas.RestResponseUser,
    ForceLoginUsingHarnessPasswordError,
    RequestBodies.LoginRequest,
    {},
    ForceLoginUsingHarnessPasswordQueryParams,
    {}
  >({ url: '/users/harness-local-login', method: 'post', ...variables })

export const useForceLoginUsingHarnessPassword = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.RestResponseUser,
      ForceLoginUsingHarnessPasswordError,
      ForceLoginUsingHarnessPasswordVariables
    >,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<
    Schemas.RestResponseUser,
    ForceLoginUsingHarnessPasswordError,
    ForceLoginUsingHarnessPasswordVariables
  >(
    (variables: ForceLoginUsingHarnessPasswordVariables) =>
      fetchForceLoginUsingHarnessPassword({ ...fetcherOptions, ...variables }),
    options
  )
}

export type TwoFactorLoginError = Fetcher.ErrorWrapper<undefined>

export type TwoFactorLoginVariables = {
  body?: RequestBodies.LoginRequest
} & PortalContext['fetcherOptions']

export const fetchTwoFactorLogin = (variables: TwoFactorLoginVariables) =>
  portalFetch<Schemas.RestResponseUser, TwoFactorLoginError, RequestBodies.LoginRequest, {}, {}, {}>({
    url: '/users/two-factor-login',
    method: 'post',
    ...variables
  })

export const useTwoFactorLogin = (
  options?: Omit<
    reactQuery.UseMutationOptions<Schemas.RestResponseUser, TwoFactorLoginError, TwoFactorLoginVariables>,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<Schemas.RestResponseUser, TwoFactorLoginError, TwoFactorLoginVariables>(
    (variables: TwoFactorLoginVariables) => fetchTwoFactorLogin({ ...fetcherOptions, ...variables }),
    options
  )
}

export type GetLoginTypeQueryParams = {
  accountId?: string
}

export type GetLoginTypeError = Fetcher.ErrorWrapper<undefined>

export type GetLoginTypeVariables = {
  body?: Schemas.LoginTypeRequest
  queryParams?: GetLoginTypeQueryParams
} & PortalContext['fetcherOptions']

export const fetchGetLoginType = (variables: GetLoginTypeVariables) =>
  portalFetch<
    Schemas.RestResponseLoginTypeResponse,
    GetLoginTypeError,
    Schemas.LoginTypeRequest,
    {},
    GetLoginTypeQueryParams,
    {}
  >({ url: '/users/logintype', method: 'post', ...variables })

export const useGetLoginType = (
  options?: Omit<
    reactQuery.UseMutationOptions<Schemas.RestResponseLoginTypeResponse, GetLoginTypeError, GetLoginTypeVariables>,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<Schemas.RestResponseLoginTypeResponse, GetLoginTypeError, GetLoginTypeVariables>(
    (variables: GetLoginTypeVariables) => fetchGetLoginType({ ...fetcherOptions, ...variables }),
    options
  )
}

export type GetLoginTypeForOnPremSetupError = Fetcher.ErrorWrapper<undefined>

export type GetLoginTypeForOnPremSetupVariables = PortalContext['fetcherOptions']

export const fetchGetLoginTypeForOnPremSetup = (variables: GetLoginTypeForOnPremSetupVariables) =>
  portalFetch<Schemas.RestResponseLoginTypeResponse, GetLoginTypeForOnPremSetupError, undefined, {}, {}, {}>({
    url: '/users/onprem-logintype',
    method: 'get',
    ...variables
  })

export const useGetLoginTypeForOnPremSetup = (
  variables: GetLoginTypeForOnPremSetupVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponseLoginTypeResponse,
      GetLoginTypeForOnPremSetupError,
      Schemas.RestResponseLoginTypeResponse
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponseLoginTypeResponse,
    GetLoginTypeForOnPremSetupError,
    Schemas.RestResponseLoginTypeResponse
  >(
    queryKeyFn({ path: '/users/onprem-logintype', operationId: 'getLoginTypeForOnPremSetup', variables }),
    () => fetchGetLoginTypeForOnPremSetup({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type Oauth2RedirectQueryParams = {
  provider: string
}

export type Oauth2RedirectError = Fetcher.ErrorWrapper<undefined>

export type Oauth2RedirectVariables = {
  queryParams: Oauth2RedirectQueryParams
} & PortalContext['fetcherOptions']

export const fetchOauth2Redirect = (variables: Oauth2RedirectVariables) =>
  portalFetch<undefined, Oauth2RedirectError, undefined, {}, Oauth2RedirectQueryParams, {}>({
    url: '/users/oauth2Redirect',
    method: 'get',
    ...variables
  })

export const useOauth2Redirect = (
  variables: Oauth2RedirectVariables,
  options?: Omit<reactQuery.UseQueryOptions<undefined, Oauth2RedirectError, undefined>, 'queryKey' | 'queryFn'>
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<undefined, Oauth2RedirectError, undefined>(
    queryKeyFn({ path: '/users/oauth2Redirect', operationId: 'oauth2Redirect', variables }),
    () => fetchOauth2Redirect({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type Oauth2CallbackUrlPathParams = {
  provider: string
}

export type Oauth2CallbackUrlQueryParams = {
  code?: string
  state?: string
}

export type Oauth2CallbackUrlError = Fetcher.ErrorWrapper<undefined>

export type Oauth2CallbackUrlVariables = {
  pathParams: Oauth2CallbackUrlPathParams
  queryParams?: Oauth2CallbackUrlQueryParams
} & PortalContext['fetcherOptions']

export const fetchOauth2CallbackUrl = (variables: Oauth2CallbackUrlVariables) =>
  portalFetch<
    undefined,
    Oauth2CallbackUrlError,
    undefined,
    {},
    Oauth2CallbackUrlQueryParams,
    Oauth2CallbackUrlPathParams
  >({ url: '/users/oauth2/{provider}', method: 'get', ...variables })

export const useOauth2CallbackUrl = (
  variables: Oauth2CallbackUrlVariables,
  options?: Omit<reactQuery.UseQueryOptions<undefined, Oauth2CallbackUrlError, undefined>, 'queryKey' | 'queryFn'>
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<undefined, Oauth2CallbackUrlError, undefined>(
    queryKeyFn({ path: '/users/oauth2/{provider}', operationId: 'oauth2CallbackUrl', variables }),
    () => fetchOauth2CallbackUrl({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type RedirectloginError = Fetcher.ErrorWrapper<undefined>

export type RedirectloginVariables = {
  body?: Schemas.SsoRedirectRequest
} & PortalContext['fetcherOptions']

export const fetchRedirectlogin = (variables: RedirectloginVariables) =>
  portalFetch<Schemas.RestResponseUser, RedirectloginError, Schemas.SsoRedirectRequest, {}, {}, {}>({
    url: '/users/sso-redirect-login',
    method: 'post',
    ...variables
  })

export const useRedirectlogin = (
  options?: Omit<
    reactQuery.UseMutationOptions<Schemas.RestResponseUser, RedirectloginError, RedirectloginVariables>,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<Schemas.RestResponseUser, RedirectloginError, RedirectloginVariables>(
    (variables: RedirectloginVariables) => fetchRedirectlogin({ ...fetcherOptions, ...variables }),
    options
  )
}

export type GetUserInvitationIdQueryParams = {
  email?: string
}

export type GetUserInvitationIdError = Fetcher.ErrorWrapper<undefined>

export type GetUserInvitationIdVariables = {
  queryParams?: GetUserInvitationIdQueryParams
} & PortalContext['fetcherOptions']

export const fetchGetUserInvitationId = (variables: GetUserInvitationIdVariables) =>
  portalFetch<Schemas.RestResponseString, GetUserInvitationIdError, undefined, {}, GetUserInvitationIdQueryParams, {}>({
    url: '/users/invitation-id',
    method: 'get',
    ...variables
  })

export const useGetUserInvitationId = (
  variables: GetUserInvitationIdVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.RestResponseString, GetUserInvitationIdError, Schemas.RestResponseString>,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<Schemas.RestResponseString, GetUserInvitationIdError, Schemas.RestResponseString>(
    queryKeyFn({ path: '/users/invitation-id', operationId: 'getUserInvitationId', variables }),
    () => fetchGetUserInvitationId({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type DisableUserPathParams = {
  userId: string
}

export type DisableUserQueryParams = {
  accountId?: string
}

export type DisableUserError = Fetcher.ErrorWrapper<undefined>

export type DisableUserVariables = {
  pathParams: DisableUserPathParams
  queryParams?: DisableUserQueryParams
} & PortalContext['fetcherOptions']

export const fetchDisableUser = (variables: DisableUserVariables) =>
  portalFetch<
    Schemas.RestResponseBoolean,
    DisableUserError,
    undefined,
    {},
    DisableUserQueryParams,
    DisableUserPathParams
  >({ url: '/users/disable/{userId}', method: 'put', ...variables })

export const useDisableUser = (
  options?: Omit<
    reactQuery.UseMutationOptions<Schemas.RestResponseBoolean, DisableUserError, DisableUserVariables>,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<Schemas.RestResponseBoolean, DisableUserError, DisableUserVariables>(
    (variables: DisableUserVariables) => fetchDisableUser({ ...fetcherOptions, ...variables }),
    options
  )
}

export type EnableUserPathParams = {
  userId: string
}

export type EnableUserQueryParams = {
  accountId?: string
}

export type EnableUserError = Fetcher.ErrorWrapper<undefined>

export type EnableUserVariables = {
  pathParams: EnableUserPathParams
  queryParams?: EnableUserQueryParams
} & PortalContext['fetcherOptions']

export const fetchEnableUser = (variables: EnableUserVariables) =>
  portalFetch<Schemas.RestResponseBoolean, EnableUserError, undefined, {}, EnableUserQueryParams, EnableUserPathParams>(
    { url: '/users/enable/{userId}', method: 'put', ...variables }
  )

export const useEnableUser = (
  options?: Omit<
    reactQuery.UseMutationOptions<Schemas.RestResponseBoolean, EnableUserError, EnableUserVariables>,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<Schemas.RestResponseBoolean, EnableUserError, EnableUserVariables>(
    (variables: EnableUserVariables) => fetchEnableUser({ ...fetcherOptions, ...variables }),
    options
  )
}

export type SamlLoginQueryParams = {
  accountId?: string
}

export type SamlLoginError = Fetcher.ErrorWrapper<undefined>

export type SamlLoginVariables = {
  queryParams?: SamlLoginQueryParams
} & PortalContext['fetcherOptions']

export const fetchSamlLogin = (variables: SamlLoginVariables) =>
  portalFetch<undefined, SamlLoginError, undefined, {}, SamlLoginQueryParams, {}>({
    url: '/users/saml-login',
    method: 'post',
    ...variables
  })

export const useSamlLogin = (
  options?: Omit<reactQuery.UseMutationOptions<undefined, SamlLoginError, SamlLoginVariables>, 'mutationFn'>
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<undefined, SamlLoginError, SamlLoginVariables>(
    (variables: SamlLoginVariables) => fetchSamlLogin({ ...fetcherOptions, ...variables }),
    options
  )
}

export type VerifyEmailQueryParams = {
  email?: string
}

export type VerifyEmailError = Fetcher.ErrorWrapper<undefined>

export type VerifyEmailVariables = {
  queryParams?: VerifyEmailQueryParams
} & PortalContext['fetcherOptions']

export const fetchVerifyEmail = (variables: VerifyEmailVariables) =>
  portalFetch<Schemas.RestResponseBoolean, VerifyEmailError, undefined, {}, VerifyEmailQueryParams, {}>({
    url: '/users/verify-email',
    method: 'get',
    ...variables
  })

export const useVerifyEmail = (
  variables: VerifyEmailVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.RestResponseBoolean, VerifyEmailError, Schemas.RestResponseBoolean>,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<Schemas.RestResponseBoolean, VerifyEmailError, Schemas.RestResponseBoolean>(
    queryKeyFn({ path: '/users/verify-email', operationId: 'verifyEmail', variables }),
    () => fetchVerifyEmail({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type ResendVerificationEmailPathParams = {
  email: string
}

export type ResendVerificationEmailError = Fetcher.ErrorWrapper<undefined>

export type ResendVerificationEmailVariables = {
  pathParams: ResendVerificationEmailPathParams
} & PortalContext['fetcherOptions']

export const fetchResendVerificationEmail = (variables: ResendVerificationEmailVariables) =>
  portalFetch<
    Schemas.RestResponseBoolean,
    ResendVerificationEmailError,
    undefined,
    {},
    {},
    ResendVerificationEmailPathParams
  >({ url: '/users/resend-verification-email/{email}', method: 'get', ...variables })

export const useResendVerificationEmail = (
  variables: ResendVerificationEmailVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.RestResponseBoolean, ResendVerificationEmailError, Schemas.RestResponseBoolean>,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<Schemas.RestResponseBoolean, ResendVerificationEmailError, Schemas.RestResponseBoolean>(
    queryKeyFn({ path: '/users/resend-verification-email/{email}', operationId: 'resendVerificationEmail', variables }),
    () => fetchResendVerificationEmail({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type AssignRolePathParams = {
  userId: string
  roleId: string
}

export type AssignRoleError = Fetcher.ErrorWrapper<undefined>

export type AssignRoleVariables = {
  pathParams: AssignRolePathParams
} & PortalContext['fetcherOptions']

export const fetchAssignRole = (variables: AssignRoleVariables) =>
  portalFetch<Schemas.RestResponseUser, AssignRoleError, undefined, {}, {}, AssignRolePathParams>({
    url: '/users/{userId}/role/{roleId}',
    method: 'put',
    ...variables
  })

export const useAssignRole = (
  options?: Omit<
    reactQuery.UseMutationOptions<Schemas.RestResponseUser, AssignRoleError, AssignRoleVariables>,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<Schemas.RestResponseUser, AssignRoleError, AssignRoleVariables>(
    (variables: AssignRoleVariables) => fetchAssignRole({ ...fetcherOptions, ...variables }),
    options
  )
}

export type RevokeRolePathParams = {
  userId: string
  roleId: string
}

export type RevokeRoleError = Fetcher.ErrorWrapper<undefined>

export type RevokeRoleVariables = {
  pathParams: RevokeRolePathParams
} & PortalContext['fetcherOptions']

export const fetchRevokeRole = (variables: RevokeRoleVariables) =>
  portalFetch<Schemas.RestResponseUser, RevokeRoleError, undefined, {}, {}, RevokeRolePathParams>({
    url: '/users/{userId}/role/{roleId}',
    method: 'delete',
    ...variables
  })

export const useRevokeRole = (
  options?: Omit<
    reactQuery.UseMutationOptions<Schemas.RestResponseUser, RevokeRoleError, RevokeRoleVariables>,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<Schemas.RestResponseUser, RevokeRoleError, RevokeRoleVariables>(
    (variables: RevokeRoleVariables) => fetchRevokeRole({ ...fetcherOptions, ...variables }),
    options
  )
}

export type ListInvitesQueryParams = {
  accountId?: string
  /*
   * @default 0
   */
  offset?: string
  limit?: string
  fieldsIncluded?: string[]
  fieldsExcluded?: string[]
}

export type ListInvitesError = Fetcher.ErrorWrapper<undefined>

export type ListInvitesVariables = {
  queryParams?: ListInvitesQueryParams
} & PortalContext['fetcherOptions']

export const fetchListInvites = (variables: ListInvitesVariables) =>
  portalFetch<Schemas.RestResponsePageResponseUserInvite, ListInvitesError, undefined, {}, ListInvitesQueryParams, {}>({
    url: '/users/invites',
    method: 'get',
    ...variables
  })

export const useListInvites = (
  variables: ListInvitesVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponsePageResponseUserInvite,
      ListInvitesError,
      Schemas.RestResponsePageResponseUserInvite
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponsePageResponseUserInvite,
    ListInvitesError,
    Schemas.RestResponsePageResponseUserInvite
  >(
    queryKeyFn({ path: '/users/invites', operationId: 'listInvites', variables }),
    () => fetchListInvites({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type InviteUsersQueryParams = {
  accountId?: string
}

export type InviteUsersError = Fetcher.ErrorWrapper<undefined>

export type InviteUsersVariables = {
  body: RequestBodies.UserInvite
  queryParams?: InviteUsersQueryParams
} & PortalContext['fetcherOptions']

export const fetchInviteUsers = (variables: InviteUsersVariables) =>
  portalFetch<
    Schemas.RestResponseListInviteOperationResponse,
    InviteUsersError,
    RequestBodies.UserInvite,
    {},
    InviteUsersQueryParams,
    {}
  >({ url: '/users/invites', method: 'post', ...variables })

export const useInviteUsers = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.RestResponseListInviteOperationResponse,
      InviteUsersError,
      InviteUsersVariables
    >,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<
    Schemas.RestResponseListInviteOperationResponse,
    InviteUsersError,
    InviteUsersVariables
  >((variables: InviteUsersVariables) => fetchInviteUsers({ ...fetcherOptions, ...variables }), options)
}

export type TriggerAccountPasswordExpirationCheckJobError = Fetcher.ErrorWrapper<undefined>

export type TriggerAccountPasswordExpirationCheckJobVariables = PortalContext['fetcherOptions']

export const fetchTriggerAccountPasswordExpirationCheckJob = (
  variables: TriggerAccountPasswordExpirationCheckJobVariables
) =>
  portalFetch<Schemas.RestResponseString, TriggerAccountPasswordExpirationCheckJobError, undefined, {}, {}, {}>({
    url: '/users/trigger-account-password-expiration-job',
    method: 'post',
    ...variables
  })

export const useTriggerAccountPasswordExpirationCheckJob = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.RestResponseString,
      TriggerAccountPasswordExpirationCheckJobError,
      TriggerAccountPasswordExpirationCheckJobVariables
    >,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<
    Schemas.RestResponseString,
    TriggerAccountPasswordExpirationCheckJobError,
    TriggerAccountPasswordExpirationCheckJobVariables
  >(
    (variables: TriggerAccountPasswordExpirationCheckJobVariables) =>
      fetchTriggerAccountPasswordExpirationCheckJob({ ...fetcherOptions, ...variables }),
    options
  )
}

export type GetInvitePathParams = {
  inviteId: string
}

export type GetInviteQueryParams = {
  accountId?: string
}

export type GetInviteError = Fetcher.ErrorWrapper<undefined>

export type GetInviteVariables = {
  pathParams: GetInvitePathParams
  queryParams?: GetInviteQueryParams
} & PortalContext['fetcherOptions']

export const fetchGetInvite = (variables: GetInviteVariables) =>
  portalFetch<Schemas.RestResponseUserInvite, GetInviteError, undefined, {}, GetInviteQueryParams, GetInvitePathParams>(
    { url: '/users/invites/{inviteId}', method: 'get', ...variables }
  )

export const useGetInvite = (
  variables: GetInviteVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.RestResponseUserInvite, GetInviteError, Schemas.RestResponseUserInvite>,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<Schemas.RestResponseUserInvite, GetInviteError, Schemas.RestResponseUserInvite>(
    queryKeyFn({ path: '/users/invites/{inviteId}', operationId: 'getInvite', variables }),
    () => fetchGetInvite({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type CompleteInvitePathParams = {
  inviteId: string
}

export type CompleteInviteQueryParams = {
  accountId?: string
}

export type CompleteInviteError = Fetcher.ErrorWrapper<undefined>

export type CompleteInviteVariables = {
  body: RequestBodies.UserInvite
  pathParams: CompleteInvitePathParams
  queryParams?: CompleteInviteQueryParams
} & PortalContext['fetcherOptions']

export const fetchCompleteInvite = (variables: CompleteInviteVariables) =>
  portalFetch<
    Schemas.RestResponseInviteOperationResponse,
    CompleteInviteError,
    RequestBodies.UserInvite,
    {},
    CompleteInviteQueryParams,
    CompleteInvitePathParams
  >({ url: '/users/invites/{inviteId}', method: 'put', ...variables })

export const useCompleteInvite = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.RestResponseInviteOperationResponse,
      CompleteInviteError,
      CompleteInviteVariables
    >,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<
    Schemas.RestResponseInviteOperationResponse,
    CompleteInviteError,
    CompleteInviteVariables
  >((variables: CompleteInviteVariables) => fetchCompleteInvite({ ...fetcherOptions, ...variables }), options)
}

export type DeleteInvitePathParams = {
  inviteId: string
}

export type DeleteInviteQueryParams = {
  accountId?: string
}

export type DeleteInviteError = Fetcher.ErrorWrapper<undefined>

export type DeleteInviteVariables = {
  pathParams: DeleteInvitePathParams
  queryParams?: DeleteInviteQueryParams
} & PortalContext['fetcherOptions']

export const fetchDeleteInvite = (variables: DeleteInviteVariables) =>
  portalFetch<
    Schemas.RestResponseUserInvite,
    DeleteInviteError,
    undefined,
    {},
    DeleteInviteQueryParams,
    DeleteInvitePathParams
  >({ url: '/users/invites/{inviteId}', method: 'delete', ...variables })

export const useDeleteInvite = (
  options?: Omit<
    reactQuery.UseMutationOptions<Schemas.RestResponseUserInvite, DeleteInviteError, DeleteInviteVariables>,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<Schemas.RestResponseUserInvite, DeleteInviteError, DeleteInviteVariables>(
    (variables: DeleteInviteVariables) => fetchDeleteInvite({ ...fetcherOptions, ...variables }),
    options
  )
}

export type CheckInvitePathParams = {
  inviteId: string
}

export type CheckInviteQueryParams = {
  accountId?: string
  generation?: 'CG' | 'NG'
}

export type CheckInviteError = Fetcher.ErrorWrapper<undefined>

export type CheckInviteVariables = {
  pathParams: CheckInvitePathParams
  queryParams?: CheckInviteQueryParams
} & PortalContext['fetcherOptions']

export const fetchCheckInvite = (variables: CheckInviteVariables) =>
  portalFetch<
    Schemas.RestResponseInviteOperationResponse,
    CheckInviteError,
    undefined,
    {},
    CheckInviteQueryParams,
    CheckInvitePathParams
  >({ url: '/users/invites/{inviteId}/status', method: 'get', ...variables })

export const useCheckInvite = (
  variables: CheckInviteVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponseInviteOperationResponse,
      CheckInviteError,
      Schemas.RestResponseInviteOperationResponse
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponseInviteOperationResponse,
    CheckInviteError,
    Schemas.RestResponseInviteOperationResponse
  >(
    queryKeyFn({ path: '/users/invites/{inviteId}/status', operationId: 'checkInvite', variables }),
    () => fetchCheckInvite({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type CompleteMarketPlaceInvitePathParams = {
  inviteId: string
}

export type CompleteMarketPlaceInviteQueryParams = {
  account?: string
  company?: string
  marketPlaceType?: 'AWS' | 'GCP' | 'AZURE'
}

export type CompleteMarketPlaceInviteError = Fetcher.ErrorWrapper<undefined>

export type CompleteMarketPlaceInviteVariables = {
  body: RequestBodies.UserInvite
  pathParams: CompleteMarketPlaceInvitePathParams
  queryParams?: CompleteMarketPlaceInviteQueryParams
} & PortalContext['fetcherOptions']

export const fetchCompleteMarketPlaceInvite = (variables: CompleteMarketPlaceInviteVariables) =>
  portalFetch<
    Schemas.RestResponseUser,
    CompleteMarketPlaceInviteError,
    RequestBodies.UserInvite,
    {},
    CompleteMarketPlaceInviteQueryParams,
    CompleteMarketPlaceInvitePathParams
  >({ url: '/users/invites/mktplace/{inviteId}/signin', method: 'put', ...variables })

export const useCompleteMarketPlaceInvite = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.RestResponseUser,
      CompleteMarketPlaceInviteError,
      CompleteMarketPlaceInviteVariables
    >,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<
    Schemas.RestResponseUser,
    CompleteMarketPlaceInviteError,
    CompleteMarketPlaceInviteVariables
  >(
    (variables: CompleteMarketPlaceInviteVariables) =>
      fetchCompleteMarketPlaceInvite({ ...fetcherOptions, ...variables }),
    options
  )
}

export type CompleteInviteAndSignInQueryParams = {
  accountId?: string
  generation?: 'CG' | 'NG'
}

export type CompleteInviteAndSignInError = Fetcher.ErrorWrapper<undefined>

export type CompleteInviteAndSignInVariables = {
  body: Schemas.UserInviteDTO
  queryParams?: CompleteInviteAndSignInQueryParams
} & PortalContext['fetcherOptions']

export const fetchCompleteInviteAndSignIn = (variables: CompleteInviteAndSignInVariables) =>
  portalFetch<
    Schemas.RestResponseUser,
    CompleteInviteAndSignInError,
    Schemas.UserInviteDTO,
    {},
    CompleteInviteAndSignInQueryParams,
    {}
  >({ url: '/users/invites/ngsignin', method: 'put', ...variables })

export const useCompleteInviteAndSignIn = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.RestResponseUser,
      CompleteInviteAndSignInError,
      CompleteInviteAndSignInVariables
    >,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<
    Schemas.RestResponseUser,
    CompleteInviteAndSignInError,
    CompleteInviteAndSignInVariables
  >(
    (variables: CompleteInviteAndSignInVariables) => fetchCompleteInviteAndSignIn({ ...fetcherOptions, ...variables }),
    options
  )
}

export type CompleteInviteAndSignIn1PathParams = {
  inviteId: string
}

export type CompleteInviteAndSignIn1QueryParams = {
  accountId?: string
  generation?: 'CG' | 'NG'
}

export type CompleteInviteAndSignIn1Error = Fetcher.ErrorWrapper<undefined>

export type CompleteInviteAndSignIn1Variables = {
  body: RequestBodies.UserInvite
  pathParams: CompleteInviteAndSignIn1PathParams
  queryParams?: CompleteInviteAndSignIn1QueryParams
} & PortalContext['fetcherOptions']

export const fetchCompleteInviteAndSignIn1 = (variables: CompleteInviteAndSignIn1Variables) =>
  portalFetch<
    Schemas.RestResponseUser,
    CompleteInviteAndSignIn1Error,
    RequestBodies.UserInvite,
    {},
    CompleteInviteAndSignIn1QueryParams,
    CompleteInviteAndSignIn1PathParams
  >({ url: '/users/invites/{inviteId}/signin', method: 'put', ...variables })

export const useCompleteInviteAndSignIn1 = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.RestResponseUser,
      CompleteInviteAndSignIn1Error,
      CompleteInviteAndSignIn1Variables
    >,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<
    Schemas.RestResponseUser,
    CompleteInviteAndSignIn1Error,
    CompleteInviteAndSignIn1Variables
  >(
    (variables: CompleteInviteAndSignIn1Variables) =>
      fetchCompleteInviteAndSignIn1({ ...fetcherOptions, ...variables }),
    options
  )
}

export type AcceptInviteAndRedirectQueryParams = {
  accountId?: string
  token: string
  email: string
}

export type AcceptInviteAndRedirectError = Fetcher.ErrorWrapper<undefined>

export type AcceptInviteAndRedirectVariables = {
  queryParams: AcceptInviteAndRedirectQueryParams
} & PortalContext['fetcherOptions']

export const fetchAcceptInviteAndRedirect = (variables: AcceptInviteAndRedirectVariables) =>
  portalFetch<undefined, AcceptInviteAndRedirectError, undefined, {}, AcceptInviteAndRedirectQueryParams, {}>({
    url: '/users/invites/verify',
    method: 'get',
    ...variables
  })

export const useAcceptInviteAndRedirect = (
  variables: AcceptInviteAndRedirectVariables,
  options?: Omit<reactQuery.UseQueryOptions<undefined, AcceptInviteAndRedirectError, undefined>, 'queryKey' | 'queryFn'>
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<undefined, AcceptInviteAndRedirectError, undefined>(
    queryKeyFn({ path: '/users/invites/verify', operationId: 'acceptInviteAndRedirect', variables }),
    () => fetchAcceptInviteAndRedirect({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type CompleteTrialSignupAndSignInPathParams = {
  inviteId: string
}

export type CompleteTrialSignupAndSignInError = Fetcher.ErrorWrapper<undefined>

export type CompleteTrialSignupAndSignInVariables = {
  pathParams: CompleteTrialSignupAndSignInPathParams
} & PortalContext['fetcherOptions']

export const fetchCompleteTrialSignupAndSignIn = (variables: CompleteTrialSignupAndSignInVariables) =>
  portalFetch<
    Schemas.RestResponseUser,
    CompleteTrialSignupAndSignInError,
    undefined,
    {},
    {},
    CompleteTrialSignupAndSignInPathParams
  >({ url: '/users/invites/trial/{inviteId}/new-signin', method: 'put', ...variables })

export const useCompleteTrialSignupAndSignIn = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.RestResponseUser,
      CompleteTrialSignupAndSignInError,
      CompleteTrialSignupAndSignInVariables
    >,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<
    Schemas.RestResponseUser,
    CompleteTrialSignupAndSignInError,
    CompleteTrialSignupAndSignInVariables
  >(
    (variables: CompleteTrialSignupAndSignInVariables) =>
      fetchCompleteTrialSignupAndSignIn({ ...fetcherOptions, ...variables }),
    options
  )
}

export type ZendDeskQueryParams = {
  returnTo?: string
}

export type ZendDeskError = Fetcher.ErrorWrapper<undefined>

export type ZendDeskVariables = {
  queryParams?: ZendDeskQueryParams
} & PortalContext['fetcherOptions']

export const fetchZendDesk = (variables: ZendDeskVariables) =>
  portalFetch<Schemas.RestResponseZendeskSsoLoginResponse, ZendDeskError, undefined, {}, ZendDeskQueryParams, {}>({
    url: '/users/sso/zendesk',
    method: 'post',
    ...variables
  })

export const useZendDesk = (
  options?: Omit<
    reactQuery.UseMutationOptions<Schemas.RestResponseZendeskSsoLoginResponse, ZendDeskError, ZendDeskVariables>,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<Schemas.RestResponseZendeskSsoLoginResponse, ZendDeskError, ZendDeskVariables>(
    (variables: ZendDeskVariables) => fetchZendDesk({ ...fetcherOptions, ...variables }),
    options
  )
}

export type Reset2faPathParams = {
  userId: string
}

export type Reset2faQueryParams = {
  accountId?: string
}

export type Reset2faError = Fetcher.ErrorWrapper<undefined>

export type Reset2faVariables = {
  pathParams: Reset2faPathParams
  queryParams?: Reset2faQueryParams
} & PortalContext['fetcherOptions']

export const fetchReset2fa = (variables: Reset2faVariables) =>
  portalFetch<Schemas.RestResponseBoolean, Reset2faError, undefined, {}, Reset2faQueryParams, Reset2faPathParams>({
    url: '/users/reset-two-factor-auth/{userId}',
    method: 'get',
    ...variables
  })

export const useReset2fa = (
  variables: Reset2faVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.RestResponseBoolean, Reset2faError, Schemas.RestResponseBoolean>,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<Schemas.RestResponseBoolean, Reset2faError, Schemas.RestResponseBoolean>(
    queryKeyFn({ path: '/users/reset-two-factor-auth/{userId}', operationId: 'reset2fa', variables }),
    () => fetchReset2fa({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type UpdateMarketoForUserQueryParams = {
  email?: string
  accountId?: string
}

export type UpdateMarketoForUserError = Fetcher.ErrorWrapper<undefined>

export type UpdateMarketoForUserVariables = {
  queryParams?: UpdateMarketoForUserQueryParams
} & PortalContext['fetcherOptions']

export const fetchUpdateMarketoForUser = (variables: UpdateMarketoForUserVariables) =>
  portalFetch<
    Schemas.RestResponseBoolean,
    UpdateMarketoForUserError,
    undefined,
    {},
    UpdateMarketoForUserQueryParams,
    {}
  >({ url: '/users/lead-update', method: 'put', ...variables })

export const useUpdateMarketoForUser = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.RestResponseBoolean,
      UpdateMarketoForUserError,
      UpdateMarketoForUserVariables
    >,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<Schemas.RestResponseBoolean, UpdateMarketoForUserError, UpdateMarketoForUserVariables>(
    (variables: UpdateMarketoForUserVariables) => fetchUpdateMarketoForUser({ ...fetcherOptions, ...variables }),
    options
  )
}

export type GetTwoFactorAuthAdminEnforceInfoPathParams = {
  accountId: string
}

export type GetTwoFactorAuthAdminEnforceInfoError = Fetcher.ErrorWrapper<undefined>

export type GetTwoFactorAuthAdminEnforceInfoVariables = {
  pathParams: GetTwoFactorAuthAdminEnforceInfoPathParams
} & PortalContext['fetcherOptions']

export const fetchGetTwoFactorAuthAdminEnforceInfo = (variables: GetTwoFactorAuthAdminEnforceInfoVariables) =>
  portalFetch<
    Schemas.RestResponseBoolean,
    GetTwoFactorAuthAdminEnforceInfoError,
    undefined,
    {},
    {},
    GetTwoFactorAuthAdminEnforceInfoPathParams
  >({ url: '/users/two-factor-auth-info/{accountId}', method: 'get', ...variables })

export const useGetTwoFactorAuthAdminEnforceInfo = (
  variables: GetTwoFactorAuthAdminEnforceInfoVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponseBoolean,
      GetTwoFactorAuthAdminEnforceInfoError,
      Schemas.RestResponseBoolean
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponseBoolean,
    GetTwoFactorAuthAdminEnforceInfoError,
    Schemas.RestResponseBoolean
  >(
    queryKeyFn({
      path: '/users/two-factor-auth-info/{accountId}',
      operationId: 'getTwoFactorAuthAdminEnforceInfo',
      variables
    }),
    () => fetchGetTwoFactorAuthAdminEnforceInfo({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type GetTwoFactorAuthSettingsPathParams = {
  authMechanism: 'TOTP'
}

export type GetTwoFactorAuthSettingsError = Fetcher.ErrorWrapper<undefined>

export type GetTwoFactorAuthSettingsVariables = {
  pathParams: GetTwoFactorAuthSettingsPathParams
} & PortalContext['fetcherOptions']

export const fetchGetTwoFactorAuthSettings = (variables: GetTwoFactorAuthSettingsVariables) =>
  portalFetch<
    Schemas.RestResponseTwoFactorAuthenticationSettings,
    GetTwoFactorAuthSettingsError,
    undefined,
    {},
    {},
    GetTwoFactorAuthSettingsPathParams
  >({ url: '/users/two-factor-auth/{auth-mechanism}', method: 'get', ...variables })

export const useGetTwoFactorAuthSettings = (
  variables: GetTwoFactorAuthSettingsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponseTwoFactorAuthenticationSettings,
      GetTwoFactorAuthSettingsError,
      Schemas.RestResponseTwoFactorAuthenticationSettings
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponseTwoFactorAuthenticationSettings,
    GetTwoFactorAuthSettingsError,
    Schemas.RestResponseTwoFactorAuthenticationSettings
  >(
    queryKeyFn({ path: '/users/two-factor-auth/{auth-mechanism}', operationId: 'getTwoFactorAuthSettings', variables }),
    () => fetchGetTwoFactorAuthSettings({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type EnableTwoFactorAuthError = Fetcher.ErrorWrapper<undefined>

export type EnableTwoFactorAuthVariables = {
  body?: Schemas.TwoFactorAuthenticationSettings
} & PortalContext['fetcherOptions']

export const fetchEnableTwoFactorAuth = (variables: EnableTwoFactorAuthVariables) =>
  portalFetch<Schemas.RestResponseUser, EnableTwoFactorAuthError, Schemas.TwoFactorAuthenticationSettings, {}, {}, {}>({
    url: '/users/enable-two-factor-auth',
    method: 'put',
    ...variables
  })

export const useEnableTwoFactorAuth = (
  options?: Omit<
    reactQuery.UseMutationOptions<Schemas.RestResponseUser, EnableTwoFactorAuthError, EnableTwoFactorAuthVariables>,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<Schemas.RestResponseUser, EnableTwoFactorAuthError, EnableTwoFactorAuthVariables>(
    (variables: EnableTwoFactorAuthVariables) => fetchEnableTwoFactorAuth({ ...fetcherOptions, ...variables }),
    options
  )
}

export type DisableTwoFactorAuthPathParams = {
  accountId: string
}

export type DisableTwoFactorAuthError = Fetcher.ErrorWrapper<undefined>

export type DisableTwoFactorAuthVariables = {
  pathParams: DisableTwoFactorAuthPathParams
} & PortalContext['fetcherOptions']

export const fetchDisableTwoFactorAuth = (variables: DisableTwoFactorAuthVariables) =>
  portalFetch<
    Schemas.RestResponseBoolean,
    DisableTwoFactorAuthError,
    undefined,
    {},
    {},
    DisableTwoFactorAuthPathParams
  >({ url: '/users/disable-two-factor-auth/{accountId}', method: 'put', ...variables })

export const useDisableTwoFactorAuth = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.RestResponseBoolean,
      DisableTwoFactorAuthError,
      DisableTwoFactorAuthVariables
    >,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<Schemas.RestResponseBoolean, DisableTwoFactorAuthError, DisableTwoFactorAuthVariables>(
    (variables: DisableTwoFactorAuthVariables) => fetchDisableTwoFactorAuth({ ...fetcherOptions, ...variables }),
    options
  )
}

export type DisableTwoFactorAuth1Error = Fetcher.ErrorWrapper<undefined>

export type DisableTwoFactorAuth1Variables = PortalContext['fetcherOptions']

export const fetchDisableTwoFactorAuth1 = (variables: DisableTwoFactorAuth1Variables) =>
  portalFetch<Schemas.RestResponseUser, DisableTwoFactorAuth1Error, undefined, {}, {}, {}>({
    url: '/users/disable-two-factor-auth',
    method: 'put',
    ...variables
  })

export const useDisableTwoFactorAuth1 = (
  options?: Omit<
    reactQuery.UseMutationOptions<Schemas.RestResponseUser, DisableTwoFactorAuth1Error, DisableTwoFactorAuth1Variables>,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<Schemas.RestResponseUser, DisableTwoFactorAuth1Error, DisableTwoFactorAuth1Variables>(
    (variables: DisableTwoFactorAuth1Variables) => fetchDisableTwoFactorAuth1({ ...fetcherOptions, ...variables }),
    options
  )
}

export type VerifyTokenPathParams = {
  token: string
}

export type VerifyTokenError = Fetcher.ErrorWrapper<undefined>

export type VerifyTokenVariables = {
  pathParams: VerifyTokenPathParams
} & PortalContext['fetcherOptions']

export const fetchVerifyToken = (variables: VerifyTokenVariables) =>
  portalFetch<Schemas.RestResponseMapStringObject, VerifyTokenError, undefined, {}, {}, VerifyTokenPathParams>({
    url: '/users/verify/{token}',
    method: 'get',
    ...variables
  })

export const useVerifyToken = (
  variables: VerifyTokenVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponseMapStringObject,
      VerifyTokenError,
      Schemas.RestResponseMapStringObject
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponseMapStringObject,
    VerifyTokenError,
    Schemas.RestResponseMapStringObject
  >(
    queryKeyFn({ path: '/users/verify/{token}', operationId: 'verifyToken', variables }),
    () => fetchVerifyToken({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type SetTwoFactorAuthAtAccountLevelPathParams = {
  accountId: string
}

export type SetTwoFactorAuthAtAccountLevelError = Fetcher.ErrorWrapper<undefined>

export type SetTwoFactorAuthAtAccountLevelVariables = {
  body?: Schemas.TwoFactorAdminOverrideSettings
  pathParams: SetTwoFactorAuthAtAccountLevelPathParams
} & PortalContext['fetcherOptions']

export const fetchSetTwoFactorAuthAtAccountLevel = (variables: SetTwoFactorAuthAtAccountLevelVariables) =>
  portalFetch<
    Schemas.RestResponseTwoFactorAdminOverrideSettings,
    SetTwoFactorAuthAtAccountLevelError,
    Schemas.TwoFactorAdminOverrideSettings,
    {},
    {},
    SetTwoFactorAuthAtAccountLevelPathParams
  >({ url: '/users/override-two-factor-auth/{accountId}', method: 'put', ...variables })

export const useSetTwoFactorAuthAtAccountLevel = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.RestResponseTwoFactorAdminOverrideSettings,
      SetTwoFactorAuthAtAccountLevelError,
      SetTwoFactorAuthAtAccountLevelVariables
    >,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<
    Schemas.RestResponseTwoFactorAdminOverrideSettings,
    SetTwoFactorAuthAtAccountLevelError,
    SetTwoFactorAuthAtAccountLevelVariables
  >(
    (variables: SetTwoFactorAuthAtAccountLevelVariables) =>
      fetchSetTwoFactorAuthAtAccountLevel({ ...fetcherOptions, ...variables }),
    options
  )
}

export type UnlockUserQueryParams = {
  email?: string
  accountId?: string
}

export type UnlockUserError = Fetcher.ErrorWrapper<undefined>

export type UnlockUserVariables = {
  queryParams?: UnlockUserQueryParams
} & PortalContext['fetcherOptions']

export const fetchUnlockUser = (variables: UnlockUserVariables) =>
  portalFetch<Schemas.RestResponseUser, UnlockUserError, undefined, {}, UnlockUserQueryParams, {}>({
    url: '/users/unlock-user',
    method: 'put',
    ...variables
  })

export const useUnlockUser = (
  options?: Omit<
    reactQuery.UseMutationOptions<Schemas.RestResponseUser, UnlockUserError, UnlockUserVariables>,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<Schemas.RestResponseUser, UnlockUserError, UnlockUserVariables>(
    (variables: UnlockUserVariables) => fetchUnlockUser({ ...fetcherOptions, ...variables }),
    options
  )
}

export type Get41Error = Fetcher.ErrorWrapper<undefined>

export type Get41Variables = PortalContext['fetcherOptions']

export const fetchGet41 = (variables: Get41Variables) =>
  portalFetch<Schemas.RestResponseVersionPackage, Get41Error, undefined, {}, {}, {}>({
    url: '/version',
    method: 'get',
    ...variables
  })

export const useGet41 = (
  variables: Get41Variables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.RestResponseVersionPackage, Get41Error, Schemas.RestResponseVersionPackage>,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<Schemas.RestResponseVersionPackage, Get41Error, Schemas.RestResponseVersionPackage>(
    queryKeyFn({ path: '/version', operationId: 'get41', variables }),
    () => fetchGet41({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type List44QueryParams = {
  /*
   * @default 0
   */
  offset?: string
  limit?: string
  fieldsIncluded?: string[]
  fieldsExcluded?: string[]
}

export type List44Error = Fetcher.ErrorWrapper<undefined>

export type List44Variables = {
  queryParams?: List44QueryParams
} & PortalContext['fetcherOptions']

export const fetchList44 = (variables: List44Variables) =>
  portalFetch<
    Schemas.RestResponsePageResponseEntityVersionCollection,
    List44Error,
    undefined,
    {},
    List44QueryParams,
    {}
  >({ url: '/versions', method: 'get', ...variables })

export const useList44 = (
  variables: List44Variables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponsePageResponseEntityVersionCollection,
      List44Error,
      Schemas.RestResponsePageResponseEntityVersionCollection
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponsePageResponseEntityVersionCollection,
    List44Error,
    Schemas.RestResponsePageResponseEntityVersionCollection
  >(
    queryKeyFn({ path: '/versions', operationId: 'list44', variables }),
    () => fetchList44({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type PingPathParams = {
  webHookToken: string
}

export type PingError = Fetcher.ErrorWrapper<undefined>

export type PingVariables = {
  body?: RequestBodies.WebHookRequest
  pathParams: PingPathParams
} & PortalContext['fetcherOptions']

export const fetchPing = (variables: PingVariables) =>
  portalFetch<undefined, PingError, RequestBodies.WebHookRequest, {}, {}, PingPathParams>({
    url: '/webhooks/{webHookToken}',
    method: 'get',
    ...variables
  })

export const usePing = (
  variables: PingVariables,
  options?: Omit<reactQuery.UseQueryOptions<undefined, PingError, undefined>, 'queryKey' | 'queryFn'>
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<undefined, PingError, undefined>(
    queryKeyFn({ path: '/webhooks/{webHookToken}', operationId: 'ping', variables }),
    () => fetchPing({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type ExecutePathParams = {
  webHookToken: string
}

export type ExecuteError = Fetcher.ErrorWrapper<undefined>

export type ExecuteVariables = {
  body?: RequestBodies.WebHookRequest
  pathParams: ExecutePathParams
} & PortalContext['fetcherOptions']

export const fetchExecute = (variables: ExecuteVariables) =>
  portalFetch<undefined, ExecuteError, RequestBodies.WebHookRequest, {}, {}, ExecutePathParams>({
    url: '/webhooks/{webHookToken}',
    method: 'post',
    ...variables
  })

export const useExecute = (
  options?: Omit<reactQuery.UseMutationOptions<undefined, ExecuteError, ExecuteVariables>, 'mutationFn'>
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<undefined, ExecuteError, ExecuteVariables>(
    (variables: ExecuteVariables) => fetchExecute({ ...fetcherOptions, ...variables }),
    options
  )
}

export type Execute1PathParams = {
  webHookToken: string
}

export type Execute1Error = Fetcher.ErrorWrapper<undefined>

export type Execute1Variables = {
  body?: RequestBodies.ValidateBody
  pathParams: Execute1PathParams
} & PortalContext['fetcherOptions']

export const fetchExecute1 = (variables: Execute1Variables) =>
  portalFetch<undefined, Execute1Error, RequestBodies.ValidateBody, {}, {}, Execute1PathParams>({
    url: '/webhooks/triggers/{webHookToken}',
    method: 'post',
    ...variables
  })

export const useExecute1 = (
  options?: Omit<reactQuery.UseMutationOptions<undefined, Execute1Error, Execute1Variables>, 'mutationFn'>
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<undefined, Execute1Error, Execute1Variables>(
    (variables: Execute1Variables) => fetchExecute1({ ...fetcherOptions, ...variables }),
    options
  )
}

export type ExecuteGitPathParams = {
  webHookToken: string
}

export type ExecuteGitError = Fetcher.ErrorWrapper<undefined>

export type ExecuteGitVariables = {
  body?: RequestBodies.ValidateBody
  pathParams: ExecuteGitPathParams
} & PortalContext['fetcherOptions']

export const fetchExecuteGit = (variables: ExecuteGitVariables) =>
  portalFetch<undefined, ExecuteGitError, RequestBodies.ValidateBody, {}, {}, ExecuteGitPathParams>({
    url: '/webhooks/{webHookToken}/git',
    method: 'post',
    ...variables
  })

export const useExecuteGit = (
  options?: Omit<reactQuery.UseMutationOptions<undefined, ExecuteGitError, ExecuteGitVariables>, 'mutationFn'>
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<undefined, ExecuteGitError, ExecuteGitVariables>(
    (variables: ExecuteGitVariables) => fetchExecuteGit({ ...fetcherOptions, ...variables }),
    options
  )
}

export type Get42PathParams = {
  whitelistId: string
}

export type Get42QueryParams = {
  accountId?: string
}

export type Get42Error = Fetcher.ErrorWrapper<undefined>

export type Get42Variables = {
  pathParams: Get42PathParams
  queryParams?: Get42QueryParams
} & PortalContext['fetcherOptions']

export const fetchGet42 = (variables: Get42Variables) =>
  portalFetch<Schemas.RestResponseWhitelist, Get42Error, undefined, {}, Get42QueryParams, Get42PathParams>({
    url: '/whitelist/{whitelistId}',
    method: 'get',
    ...variables
  })

export const useGet42 = (
  variables: Get42Variables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.RestResponseWhitelist, Get42Error, Schemas.RestResponseWhitelist>,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<Schemas.RestResponseWhitelist, Get42Error, Schemas.RestResponseWhitelist>(
    queryKeyFn({ path: '/whitelist/{whitelistId}', operationId: 'get42', variables }),
    () => fetchGet42({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type Update32PathParams = {
  whitelistId: string
}

export type Update32QueryParams = {
  accountId?: string
}

export type Update32Error = Fetcher.ErrorWrapper<undefined>

export type Update32Variables = {
  body: RequestBodies.Whitelist
  pathParams: Update32PathParams
  queryParams?: Update32QueryParams
} & PortalContext['fetcherOptions']

export const fetchUpdate32 = (variables: Update32Variables) =>
  portalFetch<
    Schemas.RestResponseWhitelist,
    Update32Error,
    RequestBodies.Whitelist,
    {},
    Update32QueryParams,
    Update32PathParams
  >({ url: '/whitelist/{whitelistId}', method: 'put', ...variables })

export const useUpdate32 = (
  options?: Omit<
    reactQuery.UseMutationOptions<Schemas.RestResponseWhitelist, Update32Error, Update32Variables>,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<Schemas.RestResponseWhitelist, Update32Error, Update32Variables>(
    (variables: Update32Variables) => fetchUpdate32({ ...fetcherOptions, ...variables }),
    options
  )
}

export type Delete33PathParams = {
  whitelistId: string
}

export type Delete33QueryParams = {
  accountId?: string
}

export type Delete33Error = Fetcher.ErrorWrapper<undefined>

export type Delete33Variables = {
  pathParams: Delete33PathParams
  queryParams?: Delete33QueryParams
} & PortalContext['fetcherOptions']

export const fetchDelete33 = (variables: Delete33Variables) =>
  portalFetch<Schemas.RestResponseBoolean, Delete33Error, undefined, {}, Delete33QueryParams, Delete33PathParams>({
    url: '/whitelist/{whitelistId}',
    method: 'delete',
    ...variables
  })

export const useDelete33 = (
  options?: Omit<
    reactQuery.UseMutationOptions<Schemas.RestResponseBoolean, Delete33Error, Delete33Variables>,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<Schemas.RestResponseBoolean, Delete33Error, Delete33Variables>(
    (variables: Delete33Variables) => fetchDelete33({ ...fetcherOptions, ...variables }),
    options
  )
}

export type List45QueryParams = {
  /*
   * @default 0
   */
  offset?: string
  limit?: string
  fieldsIncluded?: string[]
  fieldsExcluded?: string[]
  accountId?: string
}

export type List45Error = Fetcher.ErrorWrapper<undefined>

export type List45Variables = {
  queryParams?: List45QueryParams
} & PortalContext['fetcherOptions']

export const fetchList45 = (variables: List45Variables) =>
  portalFetch<Schemas.RestResponsePageResponseWhitelist, List45Error, undefined, {}, List45QueryParams, {}>({
    url: '/whitelist',
    method: 'get',
    ...variables
  })

export const useList45 = (
  variables: List45Variables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponsePageResponseWhitelist,
      List45Error,
      Schemas.RestResponsePageResponseWhitelist
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponsePageResponseWhitelist,
    List45Error,
    Schemas.RestResponsePageResponseWhitelist
  >(
    queryKeyFn({ path: '/whitelist', operationId: 'list45', variables }),
    () => fetchList45({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type Save22QueryParams = {
  accountId?: string
}

export type Save22Error = Fetcher.ErrorWrapper<undefined>

export type Save22Variables = {
  body: RequestBodies.Whitelist
  queryParams?: Save22QueryParams
} & PortalContext['fetcherOptions']

export const fetchSave22 = (variables: Save22Variables) =>
  portalFetch<Schemas.RestResponseWhitelist, Save22Error, RequestBodies.Whitelist, {}, Save22QueryParams, {}>({
    url: '/whitelist',
    method: 'post',
    ...variables
  })

export const useSave22 = (
  options?: Omit<
    reactQuery.UseMutationOptions<Schemas.RestResponseWhitelist, Save22Error, Save22Variables>,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<Schemas.RestResponseWhitelist, Save22Error, Save22Variables>(
    (variables: Save22Variables) => fetchSave22({ ...fetcherOptions, ...variables }),
    options
  )
}

export type DeleteAll1QueryParams = {
  accountId?: string
}

export type DeleteAll1Error = Fetcher.ErrorWrapper<undefined>

export type DeleteAll1Variables = {
  queryParams?: DeleteAll1QueryParams
} & PortalContext['fetcherOptions']

export const fetchDeleteAll1 = (variables: DeleteAll1Variables) =>
  portalFetch<Schemas.RestResponseBoolean, DeleteAll1Error, undefined, {}, DeleteAll1QueryParams, {}>({
    url: '/whitelist',
    method: 'delete',
    ...variables
  })

export const useDeleteAll1 = (
  options?: Omit<
    reactQuery.UseMutationOptions<Schemas.RestResponseBoolean, DeleteAll1Error, DeleteAll1Variables>,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<Schemas.RestResponseBoolean, DeleteAll1Error, DeleteAll1Variables>(
    (variables: DeleteAll1Variables) => fetchDeleteAll1({ ...fetcherOptions, ...variables }),
    options
  )
}

export type IsEnabledQueryParams = {
  accountId?: string
}

export type IsEnabledError = Fetcher.ErrorWrapper<undefined>

export type IsEnabledVariables = {
  queryParams?: IsEnabledQueryParams
} & PortalContext['fetcherOptions']

export const fetchIsEnabled = (variables: IsEnabledVariables) =>
  portalFetch<Schemas.RestResponseBoolean, IsEnabledError, undefined, {}, IsEnabledQueryParams, {}>({
    url: '/whitelist/isEnabled',
    method: 'get',
    ...variables
  })

export const useIsEnabled = (
  variables: IsEnabledVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.RestResponseBoolean, IsEnabledError, Schemas.RestResponseBoolean>,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<Schemas.RestResponseBoolean, IsEnabledError, Schemas.RestResponseBoolean>(
    queryKeyFn({ path: '/whitelist/isEnabled', operationId: 'isEnabled', variables }),
    () => fetchIsEnabled({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type IsIpAddressWhitelistedQueryParams = {
  accountId?: string
  ipAddress?: string
}

export type IsIpAddressWhitelistedError = Fetcher.ErrorWrapper<undefined>

export type IsIpAddressWhitelistedVariables = {
  queryParams?: IsIpAddressWhitelistedQueryParams
} & PortalContext['fetcherOptions']

export const fetchIsIpAddressWhitelisted = (variables: IsIpAddressWhitelistedVariables) =>
  portalFetch<
    Schemas.RestResponseBoolean,
    IsIpAddressWhitelistedError,
    undefined,
    {},
    IsIpAddressWhitelistedQueryParams,
    {}
  >({ url: '/whitelist/ip-address-whitelisted', method: 'get', ...variables })

export const useIsIpAddressWhitelisted = (
  variables: IsIpAddressWhitelistedVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.RestResponseBoolean, IsIpAddressWhitelistedError, Schemas.RestResponseBoolean>,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<Schemas.RestResponseBoolean, IsIpAddressWhitelistedError, Schemas.RestResponseBoolean>(
    queryKeyFn({ path: '/whitelist/ip-address-whitelisted', operationId: 'isIpAddressWhitelisted', variables }),
    () => fetchIsIpAddressWhitelisted({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type Clone4PathParams = {
  workflowId: string
}

export type Clone4QueryParams = {
  appId?: string
}

export type Clone4Error = Fetcher.ErrorWrapper<undefined>

export type Clone4Variables = {
  body?: RequestBodies.WorkflowPhase
  pathParams: Clone4PathParams
  queryParams?: Clone4QueryParams
} & PortalContext['fetcherOptions']

export const fetchClone4 = (variables: Clone4Variables) =>
  portalFetch<
    Schemas.RestResponseWorkflowPhase,
    Clone4Error,
    RequestBodies.WorkflowPhase,
    {},
    Clone4QueryParams,
    Clone4PathParams
  >({ url: '/workflows/{workflowId}/phases/clone', method: 'post', ...variables })

export const useClone4 = (
  options?: Omit<
    reactQuery.UseMutationOptions<Schemas.RestResponseWorkflowPhase, Clone4Error, Clone4Variables>,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<Schemas.RestResponseWorkflowPhase, Clone4Error, Clone4Variables>(
    (variables: Clone4Variables) => fetchClone4({ ...fetcherOptions, ...variables }),
    options
  )
}

export type Read1PathParams = {
  workflowId: string
}

export type Read1QueryParams = {
  appId?: string
  /*
   * @format int32
   */
  version?: number
  /*
   * @default false
   */
  withArtifactStreamSummary?: boolean
}

export type Read1Error = Fetcher.ErrorWrapper<undefined>

export type Read1Variables = {
  pathParams: Read1PathParams
  queryParams?: Read1QueryParams
} & PortalContext['fetcherOptions']

export const fetchRead1 = (variables: Read1Variables) =>
  portalFetch<Schemas.RestResponseWorkflow, Read1Error, undefined, {}, Read1QueryParams, Read1PathParams>({
    url: '/workflows/{workflowId}',
    method: 'get',
    ...variables
  })

export const useRead1 = (
  variables: Read1Variables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.RestResponseWorkflow, Read1Error, Schemas.RestResponseWorkflow>,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<Schemas.RestResponseWorkflow, Read1Error, Schemas.RestResponseWorkflow>(
    queryKeyFn({ path: '/workflows/{workflowId}', operationId: 'read1', variables }),
    () => fetchRead1({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type Update33PathParams = {
  workflowId: string
}

export type Update33QueryParams = {
  appId?: string
}

export type Update33Error = Fetcher.ErrorWrapper<undefined>

export type Update33Variables = {
  body?: Schemas.WorkflowVersion
  pathParams: Update33PathParams
  queryParams?: Update33QueryParams
} & PortalContext['fetcherOptions']

export const fetchUpdate33 = (variables: Update33Variables) =>
  portalFetch<
    Schemas.RestResponseWorkflow,
    Update33Error,
    Schemas.WorkflowVersion,
    {},
    Update33QueryParams,
    Update33PathParams
  >({ url: '/workflows/{workflowId}', method: 'put', ...variables })

export const useUpdate33 = (
  options?: Omit<
    reactQuery.UseMutationOptions<Schemas.RestResponseWorkflow, Update33Error, Update33Variables>,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<Schemas.RestResponseWorkflow, Update33Error, Update33Variables>(
    (variables: Update33Variables) => fetchUpdate33({ ...fetcherOptions, ...variables }),
    options
  )
}

export type Delete34PathParams = {
  workflowId: string
}

export type Delete34QueryParams = {
  appId?: string
}

export type Delete34Error = Fetcher.ErrorWrapper<undefined>

export type Delete34Variables = {
  pathParams: Delete34PathParams
  queryParams?: Delete34QueryParams
} & PortalContext['fetcherOptions']

export const fetchDelete34 = (variables: Delete34Variables) =>
  portalFetch<Schemas.RestResponse, Delete34Error, undefined, {}, Delete34QueryParams, Delete34PathParams>({
    url: '/workflows/{workflowId}',
    method: 'delete',
    ...variables
  })

export const useDelete34 = (
  options?: Omit<reactQuery.UseMutationOptions<Schemas.RestResponse, Delete34Error, Delete34Variables>, 'mutationFn'>
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<Schemas.RestResponse, Delete34Error, Delete34Variables>(
    (variables: Delete34Variables) => fetchDelete34({ ...fetcherOptions, ...variables }),
    options
  )
}

export type Update34PathParams = {
  workflowId: string
  phaseId: string
}

export type Update34QueryParams = {
  appId?: string
}

export type Update34Error = Fetcher.ErrorWrapper<undefined>

export type Update34Variables = {
  body?: RequestBodies.WorkflowPhase
  pathParams: Update34PathParams
  queryParams?: Update34QueryParams
} & PortalContext['fetcherOptions']

export const fetchUpdate34 = (variables: Update34Variables) =>
  portalFetch<
    Schemas.RestResponseWorkflowPhase,
    Update34Error,
    RequestBodies.WorkflowPhase,
    {},
    Update34QueryParams,
    Update34PathParams
  >({ url: '/workflows/{workflowId}/phases/{phaseId}', method: 'put', ...variables })

export const useUpdate34 = (
  options?: Omit<
    reactQuery.UseMutationOptions<Schemas.RestResponseWorkflowPhase, Update34Error, Update34Variables>,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<Schemas.RestResponseWorkflowPhase, Update34Error, Update34Variables>(
    (variables: Update34Variables) => fetchUpdate34({ ...fetcherOptions, ...variables }),
    options
  )
}

export type DeletePhasePathParams = {
  workflowId: string
  phaseId: string
}

export type DeletePhaseQueryParams = {
  appId?: string
}

export type DeletePhaseError = Fetcher.ErrorWrapper<undefined>

export type DeletePhaseVariables = {
  pathParams: DeletePhasePathParams
  queryParams?: DeletePhaseQueryParams
} & PortalContext['fetcherOptions']

export const fetchDeletePhase = (variables: DeletePhaseVariables) =>
  portalFetch<
    Schemas.RestResponseWorkflowPhase,
    DeletePhaseError,
    undefined,
    {},
    DeletePhaseQueryParams,
    DeletePhasePathParams
  >({ url: '/workflows/{workflowId}/phases/{phaseId}', method: 'delete', ...variables })

export const useDeletePhase = (
  options?: Omit<
    reactQuery.UseMutationOptions<Schemas.RestResponseWorkflowPhase, DeletePhaseError, DeletePhaseVariables>,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<Schemas.RestResponseWorkflowPhase, DeletePhaseError, DeletePhaseVariables>(
    (variables: DeletePhaseVariables) => fetchDeletePhase({ ...fetcherOptions, ...variables }),
    options
  )
}

export type Create6PathParams = {
  workflowId: string
}

export type Create6QueryParams = {
  appId?: string
}

export type Create6Error = Fetcher.ErrorWrapper<undefined>

export type Create6Variables = {
  body?: RequestBodies.WorkflowPhase
  pathParams: Create6PathParams
  queryParams?: Create6QueryParams
} & PortalContext['fetcherOptions']

export const fetchCreate6 = (variables: Create6Variables) =>
  portalFetch<
    Schemas.RestResponseWorkflowPhase,
    Create6Error,
    RequestBodies.WorkflowPhase,
    {},
    Create6QueryParams,
    Create6PathParams
  >({ url: '/workflows/{workflowId}/phases', method: 'post', ...variables })

export const useCreate6 = (
  options?: Omit<
    reactQuery.UseMutationOptions<Schemas.RestResponseWorkflowPhase, Create6Error, Create6Variables>,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<Schemas.RestResponseWorkflowPhase, Create6Error, Create6Variables>(
    (variables: Create6Variables) => fetchCreate6({ ...fetcherOptions, ...variables }),
    options
  )
}

export type List46QueryParams = {
  appId?: string[]
  /*
   * @default 0
   */
  offset?: string
  limit?: string
  fieldsIncluded?: string[]
  fieldsExcluded?: string[]
  /*
   * @format int32
   */
  previousExecutionsCount?: number
  workflowType?: string[]
  /*
   * @default true
   */
  details?: boolean
  /*
   * @default false
   */
  withArtifactStreamSummary?: boolean
  tagFilter?: string
  /*
   * @default false
   */
  withTags?: boolean
}

export type List46Error = Fetcher.ErrorWrapper<undefined>

export type List46Variables = {
  queryParams?: List46QueryParams
} & PortalContext['fetcherOptions']

export const fetchList46 = (variables: List46Variables) =>
  portalFetch<Schemas.RestResponsePageResponseWorkflow, List46Error, undefined, {}, List46QueryParams, {}>({
    url: '/workflows',
    method: 'get',
    ...variables
  })

export const useList46 = (
  variables: List46Variables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponsePageResponseWorkflow,
      List46Error,
      Schemas.RestResponsePageResponseWorkflow
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponsePageResponseWorkflow,
    List46Error,
    Schemas.RestResponsePageResponseWorkflow
  >(
    queryKeyFn({ path: '/workflows', operationId: 'list46', variables }),
    () => fetchList46({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type Create7QueryParams = {
  appId?: string
}

export type Create7Error = Fetcher.ErrorWrapper<undefined>

export type Create7Variables = {
  body: RequestBodies.Workflow
  queryParams?: Create7QueryParams
} & PortalContext['fetcherOptions']

export const fetchCreate7 = (variables: Create7Variables) =>
  portalFetch<Schemas.RestResponseWorkflow, Create7Error, RequestBodies.Workflow, {}, Create7QueryParams, {}>({
    url: '/workflows',
    method: 'post',
    ...variables
  })

export const useCreate7 = (
  options?: Omit<
    reactQuery.UseMutationOptions<Schemas.RestResponseWorkflow, Create7Error, Create7Variables>,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<Schemas.RestResponseWorkflow, Create7Error, Create7Variables>(
    (variables: Create7Variables) => fetchCreate7({ ...fetcherOptions, ...variables }),
    options
  )
}

export type GetStepsPathParams = {
  phaseId: string
  sectionId: string
  /*
   * @format int32
   */
  position: number
}

export type GetStepsQueryParams = {
  accountId?: string
  rollbackSection?: boolean
  appId?: string
  workflowId?: string
}

export type GetStepsError = Fetcher.ErrorWrapper<undefined>

export type GetStepsVariables = {
  pathParams: GetStepsPathParams
  queryParams?: GetStepsQueryParams
} & PortalContext['fetcherOptions']

export const fetchGetSteps = (variables: GetStepsVariables) =>
  portalFetch<
    Schemas.RestResponseWorkflowCategorySteps,
    GetStepsError,
    undefined,
    {},
    GetStepsQueryParams,
    GetStepsPathParams
  >({ url: '/workflows/steps/phase/{phaseId}/sections/{sectionId}/{position}', method: 'get', ...variables })

export const useGetSteps = (
  variables: GetStepsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponseWorkflowCategorySteps,
      GetStepsError,
      Schemas.RestResponseWorkflowCategorySteps
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponseWorkflowCategorySteps,
    GetStepsError,
    Schemas.RestResponseWorkflowCategorySteps
  >(
    queryKeyFn({
      path: '/workflows/steps/phase/{phaseId}/sections/{sectionId}/{position}',
      operationId: 'getSteps',
      variables
    }),
    () => fetchGetSteps({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type IsStateValidQueryParams = {
  appId?: string
  stateExecutionId?: string
}

export type IsStateValidError = Fetcher.ErrorWrapper<undefined>

export type IsStateValidVariables = {
  queryParams?: IsStateValidQueryParams
} & PortalContext['fetcherOptions']

export const fetchIsStateValid = (variables: IsStateValidVariables) =>
  portalFetch<Schemas.RestResponseBoolean, IsStateValidError, undefined, {}, IsStateValidQueryParams, {}>({
    url: '/workflows/state-valid',
    method: 'get',
    ...variables
  })

export const useIsStateValid = (
  variables: IsStateValidVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.RestResponseBoolean, IsStateValidError, Schemas.RestResponseBoolean>,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<Schemas.RestResponseBoolean, IsStateValidError, Schemas.RestResponseBoolean>(
    queryKeyFn({ path: '/workflows/state-valid', operationId: 'isStateValid', variables }),
    () => fetchIsStateValid({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type ConcurrencyStrategyPathParams = {
  workflowId: string
}

export type ConcurrencyStrategyQueryParams = {
  appId?: string
}

export type ConcurrencyStrategyError = Fetcher.ErrorWrapper<undefined>

export type ConcurrencyStrategyVariables = {
  body: Schemas.ConcurrencyStrategy
  pathParams: ConcurrencyStrategyPathParams
  queryParams?: ConcurrencyStrategyQueryParams
} & PortalContext['fetcherOptions']

export const fetchConcurrencyStrategy = (variables: ConcurrencyStrategyVariables) =>
  portalFetch<
    Schemas.RestResponseConcurrencyStrategy,
    ConcurrencyStrategyError,
    Schemas.ConcurrencyStrategy,
    {},
    ConcurrencyStrategyQueryParams,
    ConcurrencyStrategyPathParams
  >({ url: '/workflows/{workflowId}/concurrency-strategy', method: 'put', ...variables })

export const useConcurrencyStrategy = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.RestResponseConcurrencyStrategy,
      ConcurrencyStrategyError,
      ConcurrencyStrategyVariables
    >,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<
    Schemas.RestResponseConcurrencyStrategy,
    ConcurrencyStrategyError,
    ConcurrencyStrategyVariables
  >((variables: ConcurrencyStrategyVariables) => fetchConcurrencyStrategy({ ...fetcherOptions, ...variables }), options)
}

export type UpdateUserVariablesPathParams = {
  workflowId: string
}

export type UpdateUserVariablesQueryParams = {
  appId?: string
}

export type UpdateUserVariablesError = Fetcher.ErrorWrapper<undefined>

export type UpdateUserVariablesRequestBody = Schemas.Variable[]

export type UpdateUserVariablesVariables = {
  body?: UpdateUserVariablesRequestBody
  pathParams: UpdateUserVariablesPathParams
  queryParams?: UpdateUserVariablesQueryParams
} & PortalContext['fetcherOptions']

export const fetchUpdateUserVariables = (variables: UpdateUserVariablesVariables) =>
  portalFetch<
    Schemas.RestResponseListVariable,
    UpdateUserVariablesError,
    UpdateUserVariablesRequestBody,
    {},
    UpdateUserVariablesQueryParams,
    UpdateUserVariablesPathParams
  >({ url: '/workflows/{workflowId}/user-variables', method: 'put', ...variables })

export const useUpdateUserVariables = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.RestResponseListVariable,
      UpdateUserVariablesError,
      UpdateUserVariablesVariables
    >,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<
    Schemas.RestResponseListVariable,
    UpdateUserVariablesError,
    UpdateUserVariablesVariables
  >((variables: UpdateUserVariablesVariables) => fetchUpdateUserVariables({ ...fetcherOptions, ...variables }), options)
}

export type WorkflowHasSSHInfraMappingPathParams = {
  workflowId: string
}

export type WorkflowHasSSHInfraMappingQueryParams = {
  appId?: string
}

export type WorkflowHasSSHInfraMappingError = Fetcher.ErrorWrapper<undefined>

export type WorkflowHasSSHInfraMappingVariables = {
  pathParams: WorkflowHasSSHInfraMappingPathParams
  queryParams?: WorkflowHasSSHInfraMappingQueryParams
} & PortalContext['fetcherOptions']

export const fetchWorkflowHasSSHInfraMapping = (variables: WorkflowHasSSHInfraMappingVariables) =>
  portalFetch<
    Schemas.RestResponseBoolean,
    WorkflowHasSSHInfraMappingError,
    undefined,
    {},
    WorkflowHasSSHInfraMappingQueryParams,
    WorkflowHasSSHInfraMappingPathParams
  >({ url: '/workflows/{workflowId}/infra-types', method: 'get', ...variables })

export const useWorkflowHasSSHInfraMapping = (
  variables: WorkflowHasSSHInfraMappingVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponseBoolean,
      WorkflowHasSSHInfraMappingError,
      Schemas.RestResponseBoolean
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<Schemas.RestResponseBoolean, WorkflowHasSSHInfraMappingError, Schemas.RestResponseBoolean>(
    queryKeyFn({ path: '/workflows/{workflowId}/infra-types', operationId: 'workflowHasSSHInfraMapping', variables }),
    () => fetchWorkflowHasSSHInfraMapping({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type GetDeployedNodesPathParams = {
  workflowId: string
}

export type GetDeployedNodesQueryParams = {
  appId?: string
}

export type GetDeployedNodesError = Fetcher.ErrorWrapper<undefined>

export type GetDeployedNodesVariables = {
  pathParams: GetDeployedNodesPathParams
  queryParams?: GetDeployedNodesQueryParams
} & PortalContext['fetcherOptions']

export const fetchGetDeployedNodes = (variables: GetDeployedNodesVariables) =>
  portalFetch<
    Schemas.RestResponseListInstanceElement,
    GetDeployedNodesError,
    undefined,
    {},
    GetDeployedNodesQueryParams,
    GetDeployedNodesPathParams
  >({ url: '/workflows/{workflowId}/deployed-nodes', method: 'get', ...variables })

export const useGetDeployedNodes = (
  variables: GetDeployedNodesVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponseListInstanceElement,
      GetDeployedNodesError,
      Schemas.RestResponseListInstanceElement
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponseListInstanceElement,
    GetDeployedNodesError,
    Schemas.RestResponseListInstanceElement
  >(
    queryKeyFn({ path: '/workflows/{workflowId}/deployed-nodes', operationId: 'getDeployedNodes', variables }),
    () => fetchGetDeployedNodes({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type RequiredEntities1QueryParams = {
  appId?: string
  workflowId?: string
}

export type RequiredEntities1Error = Fetcher.ErrorWrapper<undefined>

export type RequiredEntities1Variables = {
  queryParams?: RequiredEntities1QueryParams
} & PortalContext['fetcherOptions']

export const fetchRequiredEntities1 = (variables: RequiredEntities1Variables) =>
  portalFetch<
    Schemas.RestResponseListEntityType,
    RequiredEntities1Error,
    undefined,
    {},
    RequiredEntities1QueryParams,
    {}
  >({ url: '/workflows/required-entities', method: 'get', ...variables })

export const useRequiredEntities1 = (
  variables: RequiredEntities1Variables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponseListEntityType,
      RequiredEntities1Error,
      Schemas.RestResponseListEntityType
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponseListEntityType,
    RequiredEntities1Error,
    Schemas.RestResponseListEntityType
  >(
    queryKeyFn({ path: '/workflows/required-entities', operationId: 'requiredEntities1', variables }),
    () => fetchRequiredEntities1({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type GetLastSuccessfulWorkflowExecutionIdsQueryParams = {
  appId?: string
  workflowId?: string
  serviceId?: string
}

export type GetLastSuccessfulWorkflowExecutionIdsError = Fetcher.ErrorWrapper<undefined>

export type GetLastSuccessfulWorkflowExecutionIdsVariables = {
  queryParams?: GetLastSuccessfulWorkflowExecutionIdsQueryParams
} & PortalContext['fetcherOptions']

export const fetchGetLastSuccessfulWorkflowExecutionIds = (variables: GetLastSuccessfulWorkflowExecutionIdsVariables) =>
  portalFetch<
    Schemas.RestResponseListString,
    GetLastSuccessfulWorkflowExecutionIdsError,
    undefined,
    {},
    GetLastSuccessfulWorkflowExecutionIdsQueryParams,
    {}
  >({ url: '/workflows/last-successful-workflow-ids', method: 'get', ...variables })

export const useGetLastSuccessfulWorkflowExecutionIds = (
  variables: GetLastSuccessfulWorkflowExecutionIdsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponseListString,
      GetLastSuccessfulWorkflowExecutionIdsError,
      Schemas.RestResponseListString
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponseListString,
    GetLastSuccessfulWorkflowExecutionIdsError,
    Schemas.RestResponseListString
  >(
    queryKeyFn({
      path: '/workflows/last-successful-workflow-ids',
      operationId: 'getLastSuccessfulWorkflowExecutionIds',
      variables
    }),
    () => fetchGetLastSuccessfulWorkflowExecutionIds({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type GetWorkflowExecutionForStateExecutionQueryParams = {
  appId?: string
  stateExecutionId?: string
}

export type GetWorkflowExecutionForStateExecutionError = Fetcher.ErrorWrapper<undefined>

export type GetWorkflowExecutionForStateExecutionVariables = {
  queryParams?: GetWorkflowExecutionForStateExecutionQueryParams
} & PortalContext['fetcherOptions']

export const fetchGetWorkflowExecutionForStateExecution = (variables: GetWorkflowExecutionForStateExecutionVariables) =>
  portalFetch<
    Schemas.RestResponseWorkflowExecution,
    GetWorkflowExecutionForStateExecutionError,
    undefined,
    {},
    GetWorkflowExecutionForStateExecutionQueryParams,
    {}
  >({ url: '/workflows/workflow-execution-for-state-execution', method: 'get', ...variables })

export const useGetWorkflowExecutionForStateExecution = (
  variables: GetWorkflowExecutionForStateExecutionVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponseWorkflowExecution,
      GetWorkflowExecutionForStateExecutionError,
      Schemas.RestResponseWorkflowExecution
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponseWorkflowExecution,
    GetWorkflowExecutionForStateExecutionError,
    Schemas.RestResponseWorkflowExecution
  >(
    queryKeyFn({
      path: '/workflows/workflow-execution-for-state-execution',
      operationId: 'getWorkflowExecutionForStateExecution',
      variables
    }),
    () => fetchGetWorkflowExecutionForStateExecution({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type Stencils2QueryParams = {
  appId?: string
  envId?: string
  workflowId?: string
  phaseId?: string
}

export type Stencils2Error = Fetcher.ErrorWrapper<undefined>

export type Stencils2Variables = {
  queryParams?: Stencils2QueryParams
} & PortalContext['fetcherOptions']

export const fetchStencils2 = (variables: Stencils2Variables) =>
  portalFetch<Schemas.RestResponseListStencil, Stencils2Error, undefined, {}, Stencils2QueryParams, {}>({
    url: '/workflows/stencils',
    method: 'get',
    ...variables
  })

export const useStencils2 = (
  variables: Stencils2Variables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.RestResponseListStencil, Stencils2Error, Schemas.RestResponseListStencil>,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<Schemas.RestResponseListStencil, Stencils2Error, Schemas.RestResponseListStencil>(
    queryKeyFn({ path: '/workflows/stencils', operationId: 'stencils2', variables }),
    () => fetchStencils2({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type GetHPAYamlStringWithCustomMetricQueryParams = {
  appId?: string
  /*
   * @format int32
   */
  minAutoscaleInstances?: number
  /*
   * @format int32
   */
  maxAutoscaleInstances?: number
  /*
   * @format int32
   */
  targetCpuUtilizationPercentage?: number
}

export type GetHPAYamlStringWithCustomMetricError = Fetcher.ErrorWrapper<undefined>

export type GetHPAYamlStringWithCustomMetricVariables = {
  queryParams?: GetHPAYamlStringWithCustomMetricQueryParams
} & PortalContext['fetcherOptions']

export const fetchGetHPAYamlStringWithCustomMetric = (variables: GetHPAYamlStringWithCustomMetricVariables) =>
  portalFetch<
    Schemas.RestResponseString,
    GetHPAYamlStringWithCustomMetricError,
    undefined,
    {},
    GetHPAYamlStringWithCustomMetricQueryParams,
    {}
  >({ url: '/workflows/hpa-metric-yaml', method: 'get', ...variables })

export const useGetHPAYamlStringWithCustomMetric = (
  variables: GetHPAYamlStringWithCustomMetricVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponseString,
      GetHPAYamlStringWithCustomMetricError,
      Schemas.RestResponseString
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponseString,
    GetHPAYamlStringWithCustomMetricError,
    Schemas.RestResponseString
  >(
    queryKeyFn({ path: '/workflows/hpa-metric-yaml', operationId: 'getHPAYamlStringWithCustomMetric', variables }),
    () => fetchGetHPAYamlStringWithCustomMetric({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type ReadTrafficShiftMetadataPathParams = {
  workflowId: string
}

export type ReadTrafficShiftMetadataQueryParams = {
  appId?: string
}

export type ReadTrafficShiftMetadataError = Fetcher.ErrorWrapper<undefined>

export type ReadTrafficShiftMetadataVariables = {
  pathParams: ReadTrafficShiftMetadataPathParams
  queryParams?: ReadTrafficShiftMetadataQueryParams
} & PortalContext['fetcherOptions']

export const fetchReadTrafficShiftMetadata = (variables: ReadTrafficShiftMetadataVariables) =>
  portalFetch<
    Schemas.RestResponseTrafficShiftMetadata,
    ReadTrafficShiftMetadataError,
    undefined,
    {},
    ReadTrafficShiftMetadataQueryParams,
    ReadTrafficShiftMetadataPathParams
  >({ url: '/workflows/{workflowId}/traffic-shift-metadata', method: 'get', ...variables })

export const useReadTrafficShiftMetadata = (
  variables: ReadTrafficShiftMetadataVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponseTrafficShiftMetadata,
      ReadTrafficShiftMetadataError,
      Schemas.RestResponseTrafficShiftMetadata
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponseTrafficShiftMetadata,
    ReadTrafficShiftMetadataError,
    Schemas.RestResponseTrafficShiftMetadata
  >(
    queryKeyFn({
      path: '/workflows/{workflowId}/traffic-shift-metadata',
      operationId: 'readTrafficShiftMetadata',
      variables
    }),
    () => fetchReadTrafficShiftMetadata({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type UpdatePreDeploymentPathParams = {
  workflowId: string
}

export type UpdatePreDeploymentQueryParams = {
  appId?: string
}

export type UpdatePreDeploymentError = Fetcher.ErrorWrapper<undefined>

export type UpdatePreDeploymentVariables = {
  body?: RequestBodies.PhaseStep
  pathParams: UpdatePreDeploymentPathParams
  queryParams?: UpdatePreDeploymentQueryParams
} & PortalContext['fetcherOptions']

export const fetchUpdatePreDeployment = (variables: UpdatePreDeploymentVariables) =>
  portalFetch<
    Schemas.RestResponsePhaseStep,
    UpdatePreDeploymentError,
    RequestBodies.PhaseStep,
    {},
    UpdatePreDeploymentQueryParams,
    UpdatePreDeploymentPathParams
  >({ url: '/workflows/{workflowId}/pre-deploy', method: 'put', ...variables })

export const useUpdatePreDeployment = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.RestResponsePhaseStep,
      UpdatePreDeploymentError,
      UpdatePreDeploymentVariables
    >,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<Schemas.RestResponsePhaseStep, UpdatePreDeploymentError, UpdatePreDeploymentVariables>(
    (variables: UpdatePreDeploymentVariables) => fetchUpdatePreDeployment({ ...fetcherOptions, ...variables }),
    options
  )
}

export type UpdatePreDeployment1PathParams = {
  workflowId: string
}

export type UpdatePreDeployment1QueryParams = {
  appId?: string
}

export type UpdatePreDeployment1Error = Fetcher.ErrorWrapper<undefined>

export type UpdatePreDeployment1Variables = {
  body: RequestBodies.Workflow
  pathParams: UpdatePreDeployment1PathParams
  queryParams?: UpdatePreDeployment1QueryParams
} & PortalContext['fetcherOptions']

export const fetchUpdatePreDeployment1 = (variables: UpdatePreDeployment1Variables) =>
  portalFetch<
    Schemas.RestResponseWorkflow,
    UpdatePreDeployment1Error,
    RequestBodies.Workflow,
    {},
    UpdatePreDeployment1QueryParams,
    UpdatePreDeployment1PathParams
  >({ url: '/workflows/{workflowId}/basic', method: 'put', ...variables })

export const useUpdatePreDeployment1 = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.RestResponseWorkflow,
      UpdatePreDeployment1Error,
      UpdatePreDeployment1Variables
    >,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<Schemas.RestResponseWorkflow, UpdatePreDeployment1Error, UpdatePreDeployment1Variables>(
    (variables: UpdatePreDeployment1Variables) => fetchUpdatePreDeployment1({ ...fetcherOptions, ...variables }),
    options
  )
}

export type CloneWorkflowPathParams = {
  workflowId: string
}

export type CloneWorkflowQueryParams = {
  appId?: string
}

export type CloneWorkflowError = Fetcher.ErrorWrapper<undefined>

export type CloneWorkflowVariables = {
  body?: RequestBodies.CloneMetadata
  pathParams: CloneWorkflowPathParams
  queryParams?: CloneWorkflowQueryParams
} & PortalContext['fetcherOptions']

export const fetchCloneWorkflow = (variables: CloneWorkflowVariables) =>
  portalFetch<
    Schemas.RestResponseWorkflow,
    CloneWorkflowError,
    RequestBodies.CloneMetadata,
    {},
    CloneWorkflowQueryParams,
    CloneWorkflowPathParams
  >({ url: '/workflows/{workflowId}/clone', method: 'post', ...variables })

export const useCloneWorkflow = (
  options?: Omit<
    reactQuery.UseMutationOptions<Schemas.RestResponseWorkflow, CloneWorkflowError, CloneWorkflowVariables>,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<Schemas.RestResponseWorkflow, CloneWorkflowError, CloneWorkflowVariables>(
    (variables: CloneWorkflowVariables) => fetchCloneWorkflow({ ...fetcherOptions, ...variables }),
    options
  )
}

export type UpdatePostDeploymentPathParams = {
  workflowId: string
}

export type UpdatePostDeploymentQueryParams = {
  appId?: string
}

export type UpdatePostDeploymentError = Fetcher.ErrorWrapper<undefined>

export type UpdatePostDeploymentVariables = {
  body?: RequestBodies.PhaseStep
  pathParams: UpdatePostDeploymentPathParams
  queryParams?: UpdatePostDeploymentQueryParams
} & PortalContext['fetcherOptions']

export const fetchUpdatePostDeployment = (variables: UpdatePostDeploymentVariables) =>
  portalFetch<
    Schemas.RestResponsePhaseStep,
    UpdatePostDeploymentError,
    RequestBodies.PhaseStep,
    {},
    UpdatePostDeploymentQueryParams,
    UpdatePostDeploymentPathParams
  >({ url: '/workflows/{workflowId}/post-deploy', method: 'put', ...variables })

export const useUpdatePostDeployment = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.RestResponsePhaseStep,
      UpdatePostDeploymentError,
      UpdatePostDeploymentVariables
    >,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<
    Schemas.RestResponsePhaseStep,
    UpdatePostDeploymentError,
    UpdatePostDeploymentVariables
  >(
    (variables: UpdatePostDeploymentVariables) => fetchUpdatePostDeployment({ ...fetcherOptions, ...variables }),
    options
  )
}

export type UpdateRollbackPathParams = {
  workflowId: string
  phaseId: string
}

export type UpdateRollbackQueryParams = {
  appId?: string
}

export type UpdateRollbackError = Fetcher.ErrorWrapper<undefined>

export type UpdateRollbackVariables = {
  body?: RequestBodies.WorkflowPhase
  pathParams: UpdateRollbackPathParams
  queryParams?: UpdateRollbackQueryParams
} & PortalContext['fetcherOptions']

export const fetchUpdateRollback = (variables: UpdateRollbackVariables) =>
  portalFetch<
    Schemas.RestResponseWorkflowPhase,
    UpdateRollbackError,
    RequestBodies.WorkflowPhase,
    {},
    UpdateRollbackQueryParams,
    UpdateRollbackPathParams
  >({ url: '/workflows/{workflowId}/phases/{phaseId}/rollback', method: 'put', ...variables })

export const useUpdateRollback = (
  options?: Omit<
    reactQuery.UseMutationOptions<Schemas.RestResponseWorkflowPhase, UpdateRollbackError, UpdateRollbackVariables>,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<Schemas.RestResponseWorkflowPhase, UpdateRollbackError, UpdateRollbackVariables>(
    (variables: UpdateRollbackVariables) => fetchUpdateRollback({ ...fetcherOptions, ...variables }),
    options
  )
}

export type ReadGraphNodePathParams = {
  workflowId: string
  nodeId: string
}

export type ReadGraphNodeQueryParams = {
  appId?: string
}

export type ReadGraphNodeError = Fetcher.ErrorWrapper<undefined>

export type ReadGraphNodeVariables = {
  pathParams: ReadGraphNodePathParams
  queryParams?: ReadGraphNodeQueryParams
} & PortalContext['fetcherOptions']

export const fetchReadGraphNode = (variables: ReadGraphNodeVariables) =>
  portalFetch<
    Schemas.RestResponseGraphNode,
    ReadGraphNodeError,
    undefined,
    {},
    ReadGraphNodeQueryParams,
    ReadGraphNodePathParams
  >({ url: '/workflows/{workflowId}/nodes/{nodeId}', method: 'get', ...variables })

export const useReadGraphNode = (
  variables: ReadGraphNodeVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.RestResponseGraphNode, ReadGraphNodeError, Schemas.RestResponseGraphNode>,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<Schemas.RestResponseGraphNode, ReadGraphNodeError, Schemas.RestResponseGraphNode>(
    queryKeyFn({ path: '/workflows/{workflowId}/nodes/{nodeId}', operationId: 'readGraphNode', variables }),
    () => fetchReadGraphNode({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type UpdateGraphNodePathParams = {
  workflowId: string
  nodeId: string
}

export type UpdateGraphNodeQueryParams = {
  appId?: string
  subworkflowId?: string
}

export type UpdateGraphNodeError = Fetcher.ErrorWrapper<undefined>

export type UpdateGraphNodeVariables = {
  body?: Schemas.GraphNode
  pathParams: UpdateGraphNodePathParams
  queryParams?: UpdateGraphNodeQueryParams
} & PortalContext['fetcherOptions']

export const fetchUpdateGraphNode = (variables: UpdateGraphNodeVariables) =>
  portalFetch<
    Schemas.RestResponseGraphNode,
    UpdateGraphNodeError,
    Schemas.GraphNode,
    {},
    UpdateGraphNodeQueryParams,
    UpdateGraphNodePathParams
  >({ url: '/workflows/{workflowId}/nodes/{nodeId}', method: 'put', ...variables })

export const useUpdateGraphNode = (
  options?: Omit<
    reactQuery.UseMutationOptions<Schemas.RestResponseGraphNode, UpdateGraphNodeError, UpdateGraphNodeVariables>,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<Schemas.RestResponseGraphNode, UpdateGraphNodeError, UpdateGraphNodeVariables>(
    (variables: UpdateGraphNodeVariables) => fetchUpdateGraphNode({ ...fetcherOptions, ...variables }),
    options
  )
}

export type UpdateNotificationRulesPathParams = {
  workflowId: string
}

export type UpdateNotificationRulesQueryParams = {
  appId?: string
}

export type UpdateNotificationRulesError = Fetcher.ErrorWrapper<undefined>

export type UpdateNotificationRulesRequestBody = Schemas.NotificationRule[]

export type UpdateNotificationRulesVariables = {
  body?: UpdateNotificationRulesRequestBody
  pathParams: UpdateNotificationRulesPathParams
  queryParams?: UpdateNotificationRulesQueryParams
} & PortalContext['fetcherOptions']

export const fetchUpdateNotificationRules = (variables: UpdateNotificationRulesVariables) =>
  portalFetch<
    Schemas.RestResponseListNotificationRule,
    UpdateNotificationRulesError,
    UpdateNotificationRulesRequestBody,
    {},
    UpdateNotificationRulesQueryParams,
    UpdateNotificationRulesPathParams
  >({ url: '/workflows/{workflowId}/notification-rules', method: 'put', ...variables })

export const useUpdateNotificationRules = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.RestResponseListNotificationRule,
      UpdateNotificationRulesError,
      UpdateNotificationRulesVariables
    >,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<
    Schemas.RestResponseListNotificationRule,
    UpdateNotificationRulesError,
    UpdateNotificationRulesVariables
  >(
    (variables: UpdateNotificationRulesVariables) => fetchUpdateNotificationRules({ ...fetcherOptions, ...variables }),
    options
  )
}

export type UpdateFailureStrategies1PathParams = {
  workflowId: string
}

export type UpdateFailureStrategies1QueryParams = {
  appId?: string
}

export type UpdateFailureStrategies1Error = Fetcher.ErrorWrapper<undefined>

export type UpdateFailureStrategies1Variables = {
  body?: RequestBodies.FailureStrategyArray
  pathParams: UpdateFailureStrategies1PathParams
  queryParams?: UpdateFailureStrategies1QueryParams
} & PortalContext['fetcherOptions']

export const fetchUpdateFailureStrategies1 = (variables: UpdateFailureStrategies1Variables) =>
  portalFetch<
    Schemas.RestResponseListFailureStrategy,
    UpdateFailureStrategies1Error,
    RequestBodies.FailureStrategyArray,
    {},
    UpdateFailureStrategies1QueryParams,
    UpdateFailureStrategies1PathParams
  >({ url: '/workflows/{workflowId}/failure-strategies', method: 'put', ...variables })

export const useUpdateFailureStrategies1 = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.RestResponseListFailureStrategy,
      UpdateFailureStrategies1Error,
      UpdateFailureStrategies1Variables
    >,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<
    Schemas.RestResponseListFailureStrategy,
    UpdateFailureStrategies1Error,
    UpdateFailureStrategies1Variables
  >(
    (variables: UpdateFailureStrategies1Variables) =>
      fetchUpdateFailureStrategies1({ ...fetcherOptions, ...variables }),
    options
  )
}

export type StateDefaultsQueryParams = {
  appId?: string
  serviceId?: string
  stateType?: string
}

export type StateDefaultsError = Fetcher.ErrorWrapper<undefined>

export type StateDefaultsVariables = {
  queryParams?: StateDefaultsQueryParams
} & PortalContext['fetcherOptions']

export const fetchStateDefaults = (variables: StateDefaultsVariables) =>
  portalFetch<Schemas.RestResponseMapStringString, StateDefaultsError, undefined, {}, StateDefaultsQueryParams, {}>({
    url: '/workflows/state-defaults',
    method: 'get',
    ...variables
  })

export const useStateDefaults = (
  variables: StateDefaultsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponseMapStringString,
      StateDefaultsError,
      Schemas.RestResponseMapStringString
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponseMapStringString,
    StateDefaultsError,
    Schemas.RestResponseMapStringString
  >(
    queryKeyFn({ path: '/workflows/state-defaults', operationId: 'stateDefaults', variables }),
    () => fetchStateDefaults({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type List47QueryParams = {
  accountId?: string
  /*
   * @default 0
   */
  offset?: string
  limit?: string
  fieldsIncluded?: string[]
  fieldsExcluded?: string[]
}

export type List47Error = Fetcher.ErrorWrapper<undefined>

export type List47Variables = {
  queryParams?: List47QueryParams
} & PortalContext['fetcherOptions']

export const fetchList47 = (variables: List47Variables) =>
  portalFetch<Schemas.RestResponsePageResponseAlert, List47Error, undefined, {}, List47QueryParams, {}>({
    url: '/alerts',
    method: 'get',
    ...variables
  })

export const useList47 = (
  variables: List47Variables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponsePageResponseAlert,
      List47Error,
      Schemas.RestResponsePageResponseAlert
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<Schemas.RestResponsePageResponseAlert, List47Error, Schemas.RestResponsePageResponseAlert>(
    queryKeyFn({ path: '/alerts', operationId: 'list47', variables }),
    () => fetchList47({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type OpenCVAlertQueryParams = {
  cvConfigId?: string
}

export type OpenCVAlertError = Fetcher.ErrorWrapper<undefined>

export type OpenCVAlertVariables = {
  body?: RequestBodies.ContinuousVerificationAlertData
  queryParams?: OpenCVAlertQueryParams
} & PortalContext['fetcherOptions']

export const fetchOpenCVAlert = (variables: OpenCVAlertVariables) =>
  portalFetch<
    Schemas.RestResponseBoolean,
    OpenCVAlertError,
    RequestBodies.ContinuousVerificationAlertData,
    {},
    OpenCVAlertQueryParams,
    {}
  >({ url: '/alerts/open-cv-alert', method: 'post', ...variables })

export const useOpenCVAlert = (
  options?: Omit<
    reactQuery.UseMutationOptions<Schemas.RestResponseBoolean, OpenCVAlertError, OpenCVAlertVariables>,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<Schemas.RestResponseBoolean, OpenCVAlertError, OpenCVAlertVariables>(
    (variables: OpenCVAlertVariables) => fetchOpenCVAlert({ ...fetcherOptions, ...variables }),
    options
  )
}

export type OpenCVAlert1QueryParams = {
  cvConfigId?: string
  /*
   * @format int64
   */
  validUntil?: number
}

export type OpenCVAlert1Error = Fetcher.ErrorWrapper<undefined>

export type OpenCVAlert1Variables = {
  body?: RequestBodies.ContinuousVerificationAlertData
  queryParams?: OpenCVAlert1QueryParams
} & PortalContext['fetcherOptions']

export const fetchOpenCVAlert1 = (variables: OpenCVAlert1Variables) =>
  portalFetch<
    Schemas.RestResponseBoolean,
    OpenCVAlert1Error,
    RequestBodies.ContinuousVerificationAlertData,
    {},
    OpenCVAlert1QueryParams,
    {}
  >({ url: '/alerts/open-cv-alert-with-ttl', method: 'post', ...variables })

export const useOpenCVAlert1 = (
  options?: Omit<
    reactQuery.UseMutationOptions<Schemas.RestResponseBoolean, OpenCVAlert1Error, OpenCVAlert1Variables>,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<Schemas.RestResponseBoolean, OpenCVAlert1Error, OpenCVAlert1Variables>(
    (variables: OpenCVAlert1Variables) => fetchOpenCVAlert1({ ...fetcherOptions, ...variables }),
    options
  )
}

export type ListCategoriesAndTypesQueryParams = {
  accountId?: string
}

export type ListCategoriesAndTypesError = Fetcher.ErrorWrapper<undefined>

export type ListCategoriesAndTypesVariables = {
  queryParams?: ListCategoriesAndTypesQueryParams
} & PortalContext['fetcherOptions']

export const fetchListCategoriesAndTypes = (variables: ListCategoriesAndTypesVariables) =>
  portalFetch<
    Schemas.RestResponseListAlertType,
    ListCategoriesAndTypesError,
    undefined,
    {},
    ListCategoriesAndTypesQueryParams,
    {}
  >({ url: '/alerts/types', method: 'get', ...variables })

export const useListCategoriesAndTypes = (
  variables: ListCategoriesAndTypesVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponseListAlertType,
      ListCategoriesAndTypesError,
      Schemas.RestResponseListAlertType
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponseListAlertType,
    ListCategoriesAndTypesError,
    Schemas.RestResponseListAlertType
  >(
    queryKeyFn({ path: '/alerts/types', operationId: 'listCategoriesAndTypes', variables }),
    () => fetchListCategoriesAndTypes({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type CloseCVAlertQueryParams = {
  cvConfigId?: string
}

export type CloseCVAlertError = Fetcher.ErrorWrapper<undefined>

export type CloseCVAlertVariables = {
  body?: RequestBodies.ContinuousVerificationAlertData
  queryParams?: CloseCVAlertQueryParams
} & PortalContext['fetcherOptions']

export const fetchCloseCVAlert = (variables: CloseCVAlertVariables) =>
  portalFetch<
    Schemas.RestResponseBoolean,
    CloseCVAlertError,
    RequestBodies.ContinuousVerificationAlertData,
    {},
    CloseCVAlertQueryParams,
    {}
  >({ url: '/alerts/close-cv-alert', method: 'post', ...variables })

export const useCloseCVAlert = (
  options?: Omit<
    reactQuery.UseMutationOptions<Schemas.RestResponseBoolean, CloseCVAlertError, CloseCVAlertVariables>,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<Schemas.RestResponseBoolean, CloseCVAlertError, CloseCVAlertVariables>(
    (variables: CloseCVAlertVariables) => fetchCloseCVAlert({ ...fetcherOptions, ...variables }),
    options
  )
}

export type DeletePerpetualTaskQueryParams = {
  accountIdentifier?: string
  taskId?: string
}

export type DeletePerpetualTaskError = Fetcher.ErrorWrapper<undefined>

export type DeletePerpetualTaskVariables = {
  queryParams?: DeletePerpetualTaskQueryParams
} & PortalContext['fetcherOptions']

export const fetchDeletePerpetualTask = (variables: DeletePerpetualTaskVariables) =>
  portalFetch<Schemas.ResponseBoolean, DeletePerpetualTaskError, undefined, {}, DeletePerpetualTaskQueryParams, {}>({
    url: '/ccm/perpetual-task/delete',
    method: 'get',
    ...variables
  })

export const useDeletePerpetualTask = (
  variables: DeletePerpetualTaskVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.ResponseBoolean, DeletePerpetualTaskError, Schemas.ResponseBoolean>,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<Schemas.ResponseBoolean, DeletePerpetualTaskError, Schemas.ResponseBoolean>(
    queryKeyFn({ path: '/ccm/perpetual-task/delete', operationId: 'deletePerpetualTask', variables }),
    () => fetchDeletePerpetualTask({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type CreatePerpetualTaskQueryParams = {
  accountIdentifier?: string
}

export type CreatePerpetualTaskError = Fetcher.ErrorWrapper<undefined>

export type CreatePerpetualTaskVariables = {
  body: RequestBodies.K8sEventCollectionBundle
  queryParams?: CreatePerpetualTaskQueryParams
} & PortalContext['fetcherOptions']

export const fetchCreatePerpetualTask = (variables: CreatePerpetualTaskVariables) =>
  portalFetch<
    Schemas.ResponseString,
    CreatePerpetualTaskError,
    RequestBodies.K8sEventCollectionBundle,
    {},
    CreatePerpetualTaskQueryParams,
    {}
  >({ url: '/ccm/perpetual-task/create', method: 'post', ...variables })

export const useCreatePerpetualTask = (
  options?: Omit<
    reactQuery.UseMutationOptions<Schemas.ResponseString, CreatePerpetualTaskError, CreatePerpetualTaskVariables>,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<Schemas.ResponseString, CreatePerpetualTaskError, CreatePerpetualTaskVariables>(
    (variables: CreatePerpetualTaskVariables) => fetchCreatePerpetualTask({ ...fetcherOptions, ...variables }),
    options
  )
}

export type ResetPerpetualTaskQueryParams = {
  accountIdentifier?: string
  taskId: string
}

export type ResetPerpetualTaskError = Fetcher.ErrorWrapper<undefined>

export type ResetPerpetualTaskVariables = {
  body: RequestBodies.K8sEventCollectionBundle
  queryParams: ResetPerpetualTaskQueryParams
} & PortalContext['fetcherOptions']

export const fetchResetPerpetualTask = (variables: ResetPerpetualTaskVariables) =>
  portalFetch<
    Schemas.ResponseBoolean,
    ResetPerpetualTaskError,
    RequestBodies.K8sEventCollectionBundle,
    {},
    ResetPerpetualTaskQueryParams,
    {}
  >({ url: '/ccm/perpetual-task/reset', method: 'post', ...variables })

export const useResetPerpetualTask = (
  options?: Omit<
    reactQuery.UseMutationOptions<Schemas.ResponseBoolean, ResetPerpetualTaskError, ResetPerpetualTaskVariables>,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<Schemas.ResponseBoolean, ResetPerpetualTaskError, ResetPerpetualTaskVariables>(
    (variables: ResetPerpetualTaskVariables) => fetchResetPerpetualTask({ ...fetcherOptions, ...variables }),
    options
  )
}

export type StatusOfAPerpetualTaskQueryParams = {
  taskId?: string
}

export type StatusOfAPerpetualTaskError = Fetcher.ErrorWrapper<undefined>

export type StatusOfAPerpetualTaskVariables = {
  queryParams?: StatusOfAPerpetualTaskQueryParams
} & PortalContext['fetcherOptions']

export const fetchStatusOfAPerpetualTask = (variables: StatusOfAPerpetualTaskVariables) =>
  portalFetch<
    Schemas.ResponsePerpetualTaskRecord,
    StatusOfAPerpetualTaskError,
    undefined,
    {},
    StatusOfAPerpetualTaskQueryParams,
    {}
  >({ url: '/ccm/perpetual-task/status', method: 'get', ...variables })

export const useStatusOfAPerpetualTask = (
  variables: StatusOfAPerpetualTaskVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.ResponsePerpetualTaskRecord,
      StatusOfAPerpetualTaskError,
      Schemas.ResponsePerpetualTaskRecord
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.ResponsePerpetualTaskRecord,
    StatusOfAPerpetualTaskError,
    Schemas.ResponsePerpetualTaskRecord
  >(
    queryKeyFn({ path: '/ccm/perpetual-task/status', operationId: 'statusOfAPerpetualTask', variables }),
    () => fetchStatusOfAPerpetualTask({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type GetCommandStoresQueryParams = {
  accountId?: string
}

export type GetCommandStoresError = Fetcher.ErrorWrapper<undefined>

export type GetCommandStoresVariables = {
  queryParams?: GetCommandStoresQueryParams
} & PortalContext['fetcherOptions']

export const fetchGetCommandStores = (variables: GetCommandStoresVariables) =>
  portalFetch<
    Schemas.RestResponseCommandLibraryConfigurationDTO,
    GetCommandStoresError,
    undefined,
    {},
    GetCommandStoresQueryParams,
    {}
  >({ url: '/command-library/configuration', method: 'get', ...variables })

export const useGetCommandStores = (
  variables: GetCommandStoresVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponseCommandLibraryConfigurationDTO,
      GetCommandStoresError,
      Schemas.RestResponseCommandLibraryConfigurationDTO
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponseCommandLibraryConfigurationDTO,
    GetCommandStoresError,
    Schemas.RestResponseCommandLibraryConfigurationDTO
  >(
    queryKeyFn({ path: '/command-library/configuration', operationId: 'getCommandStores', variables }),
    () => fetchGetCommandStores({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type ListImportedCommandVersionsPathParams = {
  commandStoreName: string
}

export type ListImportedCommandVersionsQueryParams = {
  accountId?: string
  /*
   * @default __GLOBAL_APP_ID__
   */
  appId?: string
  commandNames?: string[]
}

export type ListImportedCommandVersionsError = Fetcher.ErrorWrapper<undefined>

export type ListImportedCommandVersionsVariables = {
  pathParams: ListImportedCommandVersionsPathParams
  queryParams?: ListImportedCommandVersionsQueryParams
} & PortalContext['fetcherOptions']

export const fetchListImportedCommandVersions = (variables: ListImportedCommandVersionsVariables) =>
  portalFetch<
    Schemas.RestResponseListImportedCommand,
    ListImportedCommandVersionsError,
    undefined,
    {},
    ListImportedCommandVersionsQueryParams,
    ListImportedCommandVersionsPathParams
  >({ url: '/command-library/command-stores/{commandStoreName}/commands', method: 'get', ...variables })

export const useListImportedCommandVersions = (
  variables: ListImportedCommandVersionsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponseListImportedCommand,
      ListImportedCommandVersionsError,
      Schemas.RestResponseListImportedCommand
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponseListImportedCommand,
    ListImportedCommandVersionsError,
    Schemas.RestResponseListImportedCommand
  >(
    queryKeyFn({
      path: '/command-library/command-stores/{commandStoreName}/commands',
      operationId: 'listImportedCommandVersions',
      variables
    }),
    () => fetchListImportedCommandVersions({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type ListLatestVersionsOfTemplatesPathParams = {
  commandName: string
  commandStoreName: string
}

export type ListLatestVersionsOfTemplatesQueryParams = {
  accountId?: string
  /*
   * @default __GLOBAL_APP_ID__
   */
  appId?: string
}

export type ListLatestVersionsOfTemplatesError = Fetcher.ErrorWrapper<undefined>

export type ListLatestVersionsOfTemplatesVariables = {
  pathParams: ListLatestVersionsOfTemplatesPathParams
  queryParams?: ListLatestVersionsOfTemplatesQueryParams
} & PortalContext['fetcherOptions']

export const fetchListLatestVersionsOfTemplates = (variables: ListLatestVersionsOfTemplatesVariables) =>
  portalFetch<
    Schemas.RestResponseImportedCommand,
    ListLatestVersionsOfTemplatesError,
    undefined,
    {},
    ListLatestVersionsOfTemplatesQueryParams,
    ListLatestVersionsOfTemplatesPathParams
  >({ url: '/command-library/command-stores/{commandStoreName}/commands/{commandName}', method: 'get', ...variables })

export const useListLatestVersionsOfTemplates = (
  variables: ListLatestVersionsOfTemplatesVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponseImportedCommand,
      ListLatestVersionsOfTemplatesError,
      Schemas.RestResponseImportedCommand
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponseImportedCommand,
    ListLatestVersionsOfTemplatesError,
    Schemas.RestResponseImportedCommand
  >(
    queryKeyFn({
      path: '/command-library/command-stores/{commandStoreName}/commands/{commandName}',
      operationId: 'listLatestVersionsOfTemplates',
      variables
    }),
    () => fetchListLatestVersionsOfTemplates({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type ImportTemplatePathParams = {
  commandName: string
  commandStoreName: string
  version: string
}

export type ImportTemplateQueryParams = {
  accountId?: string
  /*
   * @default __GLOBAL_APP_ID__
   */
  appId?: string
}

export type ImportTemplateError = Fetcher.ErrorWrapper<undefined>

export type ImportTemplateVariables = {
  pathParams: ImportTemplatePathParams
  queryParams?: ImportTemplateQueryParams
} & PortalContext['fetcherOptions']

export const fetchImportTemplate = (variables: ImportTemplateVariables) =>
  portalFetch<
    Schemas.RestResponseTemplate,
    ImportTemplateError,
    undefined,
    {},
    ImportTemplateQueryParams,
    ImportTemplatePathParams
  >({
    url: '/command-library/command-stores/{commandStoreName}/commands/{commandName}/versions/{version}',
    method: 'post',
    ...variables
  })

export const useImportTemplate = (
  options?: Omit<
    reactQuery.UseMutationOptions<Schemas.RestResponseTemplate, ImportTemplateError, ImportTemplateVariables>,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<Schemas.RestResponseTemplate, ImportTemplateError, ImportTemplateVariables>(
    (variables: ImportTemplateVariables) => fetchImportTemplate({ ...fetcherOptions, ...variables }),
    options
  )
}

export type GetCommandTagsPathParams = {
  commandStoreName: string
}

export type GetCommandTagsQueryParams = {
  accountId?: string
}

export type GetCommandTagsError = Fetcher.ErrorWrapper<undefined>

export type GetCommandTagsVariables = {
  pathParams: GetCommandTagsPathParams
  queryParams?: GetCommandTagsQueryParams
} & PortalContext['fetcherOptions']

export const fetchGetCommandTags = (variables: GetCommandTagsVariables) =>
  portalFetch<undefined, GetCommandTagsError, undefined, {}, GetCommandTagsQueryParams, GetCommandTagsPathParams>({
    url: '/command-library-service/command-stores/{commandStoreName}/commands/tags',
    method: 'get',
    ...variables
  })

export const useGetCommandTags = (
  variables: GetCommandTagsVariables,
  options?: Omit<reactQuery.UseQueryOptions<undefined, GetCommandTagsError, undefined>, 'queryKey' | 'queryFn'>
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<undefined, GetCommandTagsError, undefined>(
    queryKeyFn({
      path: '/command-library-service/command-stores/{commandStoreName}/commands/tags',
      operationId: 'getCommandTags',
      variables
    }),
    () => fetchGetCommandTags({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type ListCommandsPathParams = {
  commandStoreName: string
}

export type ListCommandsQueryParams = {
  accountId?: string
  /*
   * @default 0
   */
  offset?: string
  limit?: string
  fieldsIncluded?: string[]
  fieldsExcluded?: string[]
}

export type ListCommandsError = Fetcher.ErrorWrapper<undefined>

export type ListCommandsVariables = {
  pathParams: ListCommandsPathParams
  queryParams?: ListCommandsQueryParams
} & PortalContext['fetcherOptions']

export const fetchListCommands = (variables: ListCommandsVariables) =>
  portalFetch<undefined, ListCommandsError, undefined, {}, ListCommandsQueryParams, ListCommandsPathParams>({
    url: '/command-library-service/command-stores/{commandStoreName}/commands',
    method: 'get',
    ...variables
  })

export const useListCommands = (
  variables: ListCommandsVariables,
  options?: Omit<reactQuery.UseQueryOptions<undefined, ListCommandsError, undefined>, 'queryKey' | 'queryFn'>
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<undefined, ListCommandsError, undefined>(
    queryKeyFn({
      path: '/command-library-service/command-stores/{commandStoreName}/commands',
      operationId: 'listCommands',
      variables
    }),
    () => fetchListCommands({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type PublishCommandPathParams = {
  commandStoreName: string
}

export type PublishCommandQueryParams = {
  accountId?: string
}

export type PublishCommandError = Fetcher.ErrorWrapper<undefined>

export type PublishCommandVariables = {
  pathParams: PublishCommandPathParams
  queryParams?: PublishCommandQueryParams
} & PortalContext['fetcherOptions']

export const fetchPublishCommand = (variables: PublishCommandVariables) =>
  portalFetch<undefined, PublishCommandError, undefined, {}, PublishCommandQueryParams, PublishCommandPathParams>({
    url: '/command-library-service/command-stores/{commandStoreName}/commands',
    method: 'post',
    ...variables
  })

export const usePublishCommand = (
  options?: Omit<reactQuery.UseMutationOptions<undefined, PublishCommandError, PublishCommandVariables>, 'mutationFn'>
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<undefined, PublishCommandError, PublishCommandVariables>(
    (variables: PublishCommandVariables) => fetchPublishCommand({ ...fetcherOptions, ...variables }),
    options
  )
}

export type GetCommandDetailsPathParams = {
  commandStoreName: string
  commandName: string
}

export type GetCommandDetailsQueryParams = {
  accountId?: string
}

export type GetCommandDetailsError = Fetcher.ErrorWrapper<undefined>

export type GetCommandDetailsVariables = {
  pathParams: GetCommandDetailsPathParams
  queryParams?: GetCommandDetailsQueryParams
} & PortalContext['fetcherOptions']

export const fetchGetCommandDetails = (variables: GetCommandDetailsVariables) =>
  portalFetch<
    undefined,
    GetCommandDetailsError,
    undefined,
    {},
    GetCommandDetailsQueryParams,
    GetCommandDetailsPathParams
  >({
    url: '/command-library-service/command-stores/{commandStoreName}/commands/{commandName}',
    method: 'get',
    ...variables
  })

export const useGetCommandDetails = (
  variables: GetCommandDetailsVariables,
  options?: Omit<reactQuery.UseQueryOptions<undefined, GetCommandDetailsError, undefined>, 'queryKey' | 'queryFn'>
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<undefined, GetCommandDetailsError, undefined>(
    queryKeyFn({
      path: '/command-library-service/command-stores/{commandStoreName}/commands/{commandName}',
      operationId: 'getCommandDetails',
      variables
    }),
    () => fetchGetCommandDetails({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type GetVersionDetailsPathParams = {
  commandStoreName: string
  commandName: string
  version: string
}

export type GetVersionDetailsQueryParams = {
  accountId?: string
}

export type GetVersionDetailsError = Fetcher.ErrorWrapper<undefined>

export type GetVersionDetailsVariables = {
  pathParams: GetVersionDetailsPathParams
  queryParams?: GetVersionDetailsQueryParams
} & PortalContext['fetcherOptions']

export const fetchGetVersionDetails = (variables: GetVersionDetailsVariables) =>
  portalFetch<
    undefined,
    GetVersionDetailsError,
    undefined,
    {},
    GetVersionDetailsQueryParams,
    GetVersionDetailsPathParams
  >({
    url: '/command-library-service/command-stores/{commandStoreName}/commands/{commandName}/versions/{version}',
    method: 'get',
    ...variables
  })

export const useGetVersionDetails = (
  variables: GetVersionDetailsVariables,
  options?: Omit<reactQuery.UseQueryOptions<undefined, GetVersionDetailsError, undefined>, 'queryKey' | 'queryFn'>
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<undefined, GetVersionDetailsError, undefined>(
    queryKeyFn({
      path: '/command-library-service/command-stores/{commandStoreName}/commands/{commandName}/versions/{version}',
      operationId: 'getVersionDetails',
      variables
    }),
    () => fetchGetVersionDetails({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type GetCommandStores1QueryParams = {
  accountId?: string
}

export type GetCommandStores1Error = Fetcher.ErrorWrapper<undefined>

export type GetCommandStores1Variables = {
  queryParams?: GetCommandStores1QueryParams
} & PortalContext['fetcherOptions']

export const fetchGetCommandStores1 = (variables: GetCommandStores1Variables) =>
  portalFetch<undefined, GetCommandStores1Error, undefined, {}, GetCommandStores1QueryParams, {}>({
    url: '/command-library-service/command-stores',
    method: 'get',
    ...variables
  })

export const useGetCommandStores1 = (
  variables: GetCommandStores1Variables,
  options?: Omit<reactQuery.UseQueryOptions<undefined, GetCommandStores1Error, undefined>, 'queryKey' | 'queryFn'>
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<undefined, GetCommandStores1Error, undefined>(
    queryKeyFn({ path: '/command-library-service/command-stores', operationId: 'getCommandStores1', variables }),
    () => fetchGetCommandStores1({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type Get43PathParams = {
  accountId: string
  templateId: string
}

export type Get43QueryParams = {
  version?: string
}

export type Get43Error = Fetcher.ErrorWrapper<undefined>

export type Get43Variables = {
  pathParams: Get43PathParams
  queryParams?: Get43QueryParams
} & PortalContext['fetcherOptions']

export const fetchGet43 = (variables: Get43Variables) =>
  portalFetch<
    Schemas.RestResponseCustomDeploymentTypeDTO,
    Get43Error,
    undefined,
    {},
    Get43QueryParams,
    Get43PathParams
  >({ url: '/customDeploymentType/{accountId}/{templateId}', method: 'get', ...variables })

export const useGet43 = (
  variables: Get43Variables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponseCustomDeploymentTypeDTO,
      Get43Error,
      Schemas.RestResponseCustomDeploymentTypeDTO
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponseCustomDeploymentTypeDTO,
    Get43Error,
    Schemas.RestResponseCustomDeploymentTypeDTO
  >(
    queryKeyFn({ path: '/customDeploymentType/{accountId}/{templateId}', operationId: 'get43', variables }),
    () => fetchGet43({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type List48PathParams = {
  accountId: string
}

export type List48QueryParams = {
  appId?: string
  withDetails?: boolean
}

export type List48Error = Fetcher.ErrorWrapper<undefined>

export type List48Variables = {
  pathParams: List48PathParams
  queryParams?: List48QueryParams
} & PortalContext['fetcherOptions']

export const fetchList48 = (variables: List48Variables) =>
  portalFetch<
    Schemas.RestResponseListCustomDeploymentTypeDTO,
    List48Error,
    undefined,
    {},
    List48QueryParams,
    List48PathParams
  >({ url: '/customDeploymentType/{accountId}', method: 'get', ...variables })

export const useList48 = (
  variables: List48Variables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponseListCustomDeploymentTypeDTO,
      List48Error,
      Schemas.RestResponseListCustomDeploymentTypeDTO
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponseListCustomDeploymentTypeDTO,
    List48Error,
    Schemas.RestResponseListCustomDeploymentTypeDTO
  >(
    queryKeyFn({ path: '/customDeploymentType/{accountId}', operationId: 'list48', variables }),
    () => fetchList48({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type GetChangeEventsQueryParams = {
  accountId?: string
  appId?: string
  serviceId?: string
  environmentId?: string
  /*
   * @format int64
   */
  startTime?: number
  /*
   * @format int64
   */
  endTime?: number
}

export type GetChangeEventsError = Fetcher.ErrorWrapper<undefined>

export type GetChangeEventsVariables = {
  queryParams?: GetChangeEventsQueryParams
} & PortalContext['fetcherOptions']

export const fetchGetChangeEvents = (variables: GetChangeEventsVariables) =>
  portalFetch<
    Schemas.RestResponseListHarnessCDCurrentGenEventMetadata,
    GetChangeEventsError,
    undefined,
    {},
    GetChangeEventsQueryParams,
    {}
  >({ url: '/cv-nextgen/service/change-events', method: 'get', ...variables })

export const useGetChangeEvents = (
  variables: GetChangeEventsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponseListHarnessCDCurrentGenEventMetadata,
      GetChangeEventsError,
      Schemas.RestResponseListHarnessCDCurrentGenEventMetadata
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponseListHarnessCDCurrentGenEventMetadata,
    GetChangeEventsError,
    Schemas.RestResponseListHarnessCDCurrentGenEventMetadata
  >(
    queryKeyFn({ path: '/cv-nextgen/service/change-events', operationId: 'getChangeEvents', variables }),
    () => fetchGetChangeEvents({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type CreateTaskQueryParams = {
  accountId: string
  orgIdentifier: string
  projectIdentifier: string
}

export type CreateTaskError = Fetcher.ErrorWrapper<undefined>

export type CreateTaskVariables = {
  body?: RequestBodies.DataCollectionConnectorBundle
  queryParams: CreateTaskQueryParams
} & PortalContext['fetcherOptions']

export const fetchCreateTask = (variables: CreateTaskVariables) =>
  portalFetch<
    Schemas.RestResponseString,
    CreateTaskError,
    RequestBodies.DataCollectionConnectorBundle,
    {},
    CreateTaskQueryParams,
    {}
  >({ url: '/cv-nextgen/service/cv-data-collection-task/create-task', method: 'post', ...variables })

export const useCreateTask = (
  options?: Omit<
    reactQuery.UseMutationOptions<Schemas.RestResponseString, CreateTaskError, CreateTaskVariables>,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<Schemas.RestResponseString, CreateTaskError, CreateTaskVariables>(
    (variables: CreateTaskVariables) => fetchCreateTask({ ...fetcherOptions, ...variables }),
    options
  )
}

export type DeleteTaskQueryParams = {
  accountId: string
  taskId: string
}

export type DeleteTaskError = Fetcher.ErrorWrapper<undefined>

export type DeleteTaskVariables = {
  queryParams: DeleteTaskQueryParams
} & PortalContext['fetcherOptions']

export const fetchDeleteTask = (variables: DeleteTaskVariables) =>
  portalFetch<undefined, DeleteTaskError, undefined, {}, DeleteTaskQueryParams, {}>({
    url: '/cv-nextgen/service/cv-data-collection-task/delete-task',
    method: 'delete',
    ...variables
  })

export const useDeleteTask = (
  options?: Omit<reactQuery.UseMutationOptions<undefined, DeleteTaskError, DeleteTaskVariables>, 'mutationFn'>
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<undefined, DeleteTaskError, DeleteTaskVariables>(
    (variables: DeleteTaskVariables) => fetchDeleteTask({ ...fetcherOptions, ...variables }),
    options
  )
}

export type GetTaskStatusQueryParams = {
  taskId: string
}

export type GetTaskStatusError = Fetcher.ErrorWrapper<undefined>

export type GetTaskStatusVariables = {
  queryParams: GetTaskStatusQueryParams
} & PortalContext['fetcherOptions']

export const fetchGetTaskStatus = (variables: GetTaskStatusVariables) =>
  portalFetch<
    Schemas.RestResponseCVNGPerpetualTaskDTO,
    GetTaskStatusError,
    undefined,
    {},
    GetTaskStatusQueryParams,
    {}
  >({ url: '/cv-nextgen/service/cv-data-collection-task/task-status', method: 'get', ...variables })

export const useGetTaskStatus = (
  variables: GetTaskStatusVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponseCVNGPerpetualTaskDTO,
      GetTaskStatusError,
      Schemas.RestResponseCVNGPerpetualTaskDTO
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponseCVNGPerpetualTaskDTO,
    GetTaskStatusError,
    Schemas.RestResponseCVNGPerpetualTaskDTO
  >(
    queryKeyFn({
      path: '/cv-nextgen/service/cv-data-collection-task/task-status',
      operationId: 'getTaskStatus',
      variables
    }),
    () => fetchGetTaskStatus({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type GetDataCollectionResultQueryParams = {
  accountId: string
  orgIdentifier: string
  projectIdentifier: string
}

export type GetDataCollectionResultError = Fetcher.ErrorWrapper<undefined>

export type GetDataCollectionResultVariables = {
  body?: Schemas.DataCollectionRequest
  queryParams: GetDataCollectionResultQueryParams
} & PortalContext['fetcherOptions']

export const fetchGetDataCollectionResult = (variables: GetDataCollectionResultVariables) =>
  portalFetch<
    Schemas.RestResponseString,
    GetDataCollectionResultError,
    Schemas.DataCollectionRequest,
    {},
    GetDataCollectionResultQueryParams,
    {}
  >({ url: '/cv-nextgen/service/cv-data-collection-task/get-data-collection-result', method: 'post', ...variables })

export const useGetDataCollectionResult = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.RestResponseString,
      GetDataCollectionResultError,
      GetDataCollectionResultVariables
    >,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<
    Schemas.RestResponseString,
    GetDataCollectionResultError,
    GetDataCollectionResultVariables
  >(
    (variables: GetDataCollectionResultVariables) => fetchGetDataCollectionResult({ ...fetcherOptions, ...variables }),
    options
  )
}

export type ResetTaskQueryParams = {
  accountId: string
  orgIdentifier: string
  projectIdentifier: string
  taskId: string
}

export type ResetTaskError = Fetcher.ErrorWrapper<undefined>

export type ResetTaskVariables = {
  body?: RequestBodies.DataCollectionConnectorBundle
  queryParams: ResetTaskQueryParams
} & PortalContext['fetcherOptions']

export const fetchResetTask = (variables: ResetTaskVariables) =>
  portalFetch<
    Schemas.RestResponseVoid,
    ResetTaskError,
    RequestBodies.DataCollectionConnectorBundle,
    {},
    ResetTaskQueryParams,
    {}
  >({ url: '/cv-nextgen/service/cv-data-collection-task/reset-task', method: 'post', ...variables })

export const useResetTask = (
  options?: Omit<
    reactQuery.UseMutationOptions<Schemas.RestResponseVoid, ResetTaskError, ResetTaskVariables>,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<Schemas.RestResponseVoid, ResetTaskError, ResetTaskVariables>(
    (variables: ResetTaskVariables) => fetchResetTask({ ...fetcherOptions, ...variables }),
    options
  )
}

export type GetNamespacesQueryParams = {
  accountId?: string
  orgIdentifier?: string
  projectIdentifier?: string
  filter?: string
}

export type GetNamespacesError = Fetcher.ErrorWrapper<undefined>

export type GetNamespacesVariables = {
  body?: RequestBodies.DataCollectionConnectorBundle
  queryParams?: GetNamespacesQueryParams
} & PortalContext['fetcherOptions']

export const fetchGetNamespaces = (variables: GetNamespacesVariables) =>
  portalFetch<
    Schemas.RestResponseListString,
    GetNamespacesError,
    RequestBodies.DataCollectionConnectorBundle,
    {},
    GetNamespacesQueryParams,
    {}
  >({ url: '/kubernetes/namespaces', method: 'post', ...variables })

export const useGetNamespaces = (
  options?: Omit<
    reactQuery.UseMutationOptions<Schemas.RestResponseListString, GetNamespacesError, GetNamespacesVariables>,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<Schemas.RestResponseListString, GetNamespacesError, GetNamespacesVariables>(
    (variables: GetNamespacesVariables) => fetchGetNamespaces({ ...fetcherOptions, ...variables }),
    options
  )
}

export type GetWorkloadsQueryParams = {
  accountId?: string
  orgIdentifier?: string
  projectIdentifier?: string
  namespace?: string
  filter?: string
}

export type GetWorkloadsError = Fetcher.ErrorWrapper<undefined>

export type GetWorkloadsVariables = {
  body?: RequestBodies.DataCollectionConnectorBundle
  queryParams?: GetWorkloadsQueryParams
} & PortalContext['fetcherOptions']

export const fetchGetWorkloads = (variables: GetWorkloadsVariables) =>
  portalFetch<
    Schemas.RestResponseListString,
    GetWorkloadsError,
    RequestBodies.DataCollectionConnectorBundle,
    {},
    GetWorkloadsQueryParams,
    {}
  >({ url: '/kubernetes/workloads', method: 'post', ...variables })

export const useGetWorkloads = (
  options?: Omit<
    reactQuery.UseMutationOptions<Schemas.RestResponseListString, GetWorkloadsError, GetWorkloadsVariables>,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<Schemas.RestResponseListString, GetWorkloadsError, GetWorkloadsVariables>(
    (variables: GetWorkloadsVariables) => fetchGetWorkloads({ ...fetcherOptions, ...variables }),
    options
  )
}

export type CheckCapabilityToGetEventsQueryParams = {
  accountId?: string
  orgIdentifier?: string
  projectIdentifier?: string
}

export type CheckCapabilityToGetEventsError = Fetcher.ErrorWrapper<undefined>

export type CheckCapabilityToGetEventsVariables = {
  body?: RequestBodies.DataCollectionConnectorBundle
  queryParams?: CheckCapabilityToGetEventsQueryParams
} & PortalContext['fetcherOptions']

export const fetchCheckCapabilityToGetEvents = (variables: CheckCapabilityToGetEventsVariables) =>
  portalFetch<
    Schemas.RestResponseListString,
    CheckCapabilityToGetEventsError,
    RequestBodies.DataCollectionConnectorBundle,
    {},
    CheckCapabilityToGetEventsQueryParams,
    {}
  >({ url: '/kubernetes/events', method: 'post', ...variables })

export const useCheckCapabilityToGetEvents = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.RestResponseListString,
      CheckCapabilityToGetEventsError,
      CheckCapabilityToGetEventsVariables
    >,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<
    Schemas.RestResponseListString,
    CheckCapabilityToGetEventsError,
    CheckCapabilityToGetEventsVariables
  >(
    (variables: CheckCapabilityToGetEventsVariables) =>
      fetchCheckCapabilityToGetEvents({ ...fetcherOptions, ...variables }),
    options
  )
}

export type GetSavedSearchesQueryParams = {
  accountId?: string
  connectorId?: string
  orgIdentifier: string
  projectIdentifier: string
  requestGuid: string
}

export type GetSavedSearchesError = Fetcher.ErrorWrapper<undefined>

export type GetSavedSearchesVariables = {
  body: RequestBodies.SplunkConnectorDTO
  queryParams: GetSavedSearchesQueryParams
} & PortalContext['fetcherOptions']

export const fetchGetSavedSearches = (variables: GetSavedSearchesVariables) =>
  portalFetch<
    Schemas.RestResponseListSplunkSavedSearch,
    GetSavedSearchesError,
    RequestBodies.SplunkConnectorDTO,
    {},
    GetSavedSearchesQueryParams,
    {}
  >({ url: '/cv-nextgen/splunk/saved-searches', method: 'post', ...variables })

export const useGetSavedSearches = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.RestResponseListSplunkSavedSearch,
      GetSavedSearchesError,
      GetSavedSearchesVariables
    >,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<
    Schemas.RestResponseListSplunkSavedSearch,
    GetSavedSearchesError,
    GetSavedSearchesVariables
  >((variables: GetSavedSearchesVariables) => fetchGetSavedSearches({ ...fetcherOptions, ...variables }), options)
}

export type GetValidationResponseQueryParams = {
  accountId?: string
  connectorId?: string
  orgIdentifier: string
  projectIdentifier: string
  query?: string
  requestGuid: string
}

export type GetValidationResponseError = Fetcher.ErrorWrapper<undefined>

export type GetValidationResponseVariables = {
  body: RequestBodies.SplunkConnectorDTO
  queryParams: GetValidationResponseQueryParams
} & PortalContext['fetcherOptions']

export const fetchGetValidationResponse = (variables: GetValidationResponseVariables) =>
  portalFetch<
    Schemas.RestResponseSplunkValidationResponse,
    GetValidationResponseError,
    RequestBodies.SplunkConnectorDTO,
    {},
    GetValidationResponseQueryParams,
    {}
  >({ url: '/cv-nextgen/splunk/validation', method: 'post', ...variables })

export const useGetValidationResponse = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.RestResponseSplunkValidationResponse,
      GetValidationResponseError,
      GetValidationResponseVariables
    >,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<
    Schemas.RestResponseSplunkValidationResponse,
    GetValidationResponseError,
    GetValidationResponseVariables
  >(
    (variables: GetValidationResponseVariables) => fetchGetValidationResponse({ ...fetcherOptions, ...variables }),
    options
  )
}

export type GetDashboardSettingsQueryParams = {
  accountId?: string
  /*
   * @default 0
   */
  offset?: string
  limit?: string
  fieldsIncluded?: string[]
  fieldsExcluded?: string[]
}

export type GetDashboardSettingsError = Fetcher.ErrorWrapper<undefined>

export type GetDashboardSettingsVariables = {
  queryParams?: GetDashboardSettingsQueryParams
} & PortalContext['fetcherOptions']

export const fetchGetDashboardSettings = (variables: GetDashboardSettingsVariables) =>
  portalFetch<
    Schemas.RestResponsePageResponseDashboardSettings,
    GetDashboardSettingsError,
    undefined,
    {},
    GetDashboardSettingsQueryParams,
    {}
  >({ url: '/custom-dashboard', method: 'get', ...variables })

export const useGetDashboardSettings = (
  variables: GetDashboardSettingsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponsePageResponseDashboardSettings,
      GetDashboardSettingsError,
      Schemas.RestResponsePageResponseDashboardSettings
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponsePageResponseDashboardSettings,
    GetDashboardSettingsError,
    Schemas.RestResponsePageResponseDashboardSettings
  >(
    queryKeyFn({ path: '/custom-dashboard', operationId: 'getDashboardSettings', variables }),
    () => fetchGetDashboardSettings({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type CreateDashboardSettingQueryParams = {
  accountId?: string
}

export type CreateDashboardSettingError = Fetcher.ErrorWrapper<undefined>

export type CreateDashboardSettingVariables = {
  body: RequestBodies.DashboardSettings
  queryParams?: CreateDashboardSettingQueryParams
} & PortalContext['fetcherOptions']

export const fetchCreateDashboardSetting = (variables: CreateDashboardSettingVariables) =>
  portalFetch<
    Schemas.RestResponseDashboardSettings,
    CreateDashboardSettingError,
    RequestBodies.DashboardSettings,
    {},
    CreateDashboardSettingQueryParams,
    {}
  >({ url: '/custom-dashboard', method: 'post', ...variables })

export const useCreateDashboardSetting = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.RestResponseDashboardSettings,
      CreateDashboardSettingError,
      CreateDashboardSettingVariables
    >,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<
    Schemas.RestResponseDashboardSettings,
    CreateDashboardSettingError,
    CreateDashboardSettingVariables
  >(
    (variables: CreateDashboardSettingVariables) => fetchCreateDashboardSetting({ ...fetcherOptions, ...variables }),
    options
  )
}

export type UpdateDashboardSettingsQueryParams = {
  accountId?: string
}

export type UpdateDashboardSettingsError = Fetcher.ErrorWrapper<undefined>

export type UpdateDashboardSettingsVariables = {
  body: RequestBodies.DashboardSettings
  queryParams?: UpdateDashboardSettingsQueryParams
} & PortalContext['fetcherOptions']

export const fetchUpdateDashboardSettings = (variables: UpdateDashboardSettingsVariables) =>
  portalFetch<
    Schemas.RestResponseDashboardSettings,
    UpdateDashboardSettingsError,
    RequestBodies.DashboardSettings,
    {},
    UpdateDashboardSettingsQueryParams,
    {}
  >({ url: '/custom-dashboard', method: 'put', ...variables })

export const useUpdateDashboardSettings = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.RestResponseDashboardSettings,
      UpdateDashboardSettingsError,
      UpdateDashboardSettingsVariables
    >,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<
    Schemas.RestResponseDashboardSettings,
    UpdateDashboardSettingsError,
    UpdateDashboardSettingsVariables
  >(
    (variables: UpdateDashboardSettingsVariables) => fetchUpdateDashboardSettings({ ...fetcherOptions, ...variables }),
    options
  )
}

export type DeleteDashboardSettingsQueryParams = {
  accountId?: string
  dashboardId?: string
}

export type DeleteDashboardSettingsError = Fetcher.ErrorWrapper<undefined>

export type DeleteDashboardSettingsVariables = {
  queryParams?: DeleteDashboardSettingsQueryParams
} & PortalContext['fetcherOptions']

export const fetchDeleteDashboardSettings = (variables: DeleteDashboardSettingsVariables) =>
  portalFetch<
    Schemas.RestResponseBoolean,
    DeleteDashboardSettingsError,
    undefined,
    {},
    DeleteDashboardSettingsQueryParams,
    {}
  >({ url: '/custom-dashboard', method: 'delete', ...variables })

export const useDeleteDashboardSettings = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.RestResponseBoolean,
      DeleteDashboardSettingsError,
      DeleteDashboardSettingsVariables
    >,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<
    Schemas.RestResponseBoolean,
    DeleteDashboardSettingsError,
    DeleteDashboardSettingsVariables
  >(
    (variables: DeleteDashboardSettingsVariables) => fetchDeleteDashboardSettings({ ...fetcherOptions, ...variables }),
    options
  )
}

export type GetDashboardSettingPathParams = {
  dashboardId: string
}

export type GetDashboardSettingQueryParams = {
  accountId?: string
}

export type GetDashboardSettingError = Fetcher.ErrorWrapper<undefined>

export type GetDashboardSettingVariables = {
  pathParams: GetDashboardSettingPathParams
  queryParams?: GetDashboardSettingQueryParams
} & PortalContext['fetcherOptions']

export const fetchGetDashboardSetting = (variables: GetDashboardSettingVariables) =>
  portalFetch<
    Schemas.RestResponseDashboardSettings,
    GetDashboardSettingError,
    undefined,
    {},
    GetDashboardSettingQueryParams,
    GetDashboardSettingPathParams
  >({ url: '/custom-dashboard/{dashboardId}', method: 'get', ...variables })

export const useGetDashboardSetting = (
  variables: GetDashboardSettingVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponseDashboardSettings,
      GetDashboardSettingError,
      Schemas.RestResponseDashboardSettings
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponseDashboardSettings,
    GetDashboardSettingError,
    Schemas.RestResponseDashboardSettings
  >(
    queryKeyFn({ path: '/custom-dashboard/{dashboardId}', operationId: 'getDashboardSetting', variables }),
    () => fetchGetDashboardSetting({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type PerformReconciliationSingleAccountQueryParams = {
  targetAccountId?: string
  /*
   * @format int64
   */
  durationStartTs?: number
  /*
   * @format int64
   */
  durationEndTs?: number
}

export type PerformReconciliationSingleAccountError = Fetcher.ErrorWrapper<undefined>

export type PerformReconciliationSingleAccountVariables = {
  queryParams?: PerformReconciliationSingleAccountQueryParams
} & PortalContext['fetcherOptions']

export const fetchPerformReconciliationSingleAccount = (variables: PerformReconciliationSingleAccountVariables) =>
  portalFetch<
    Schemas.RestResponse,
    PerformReconciliationSingleAccountError,
    undefined,
    {},
    PerformReconciliationSingleAccountQueryParams,
    {}
  >({ url: '/custom-dashboard/deployment-recon-per-account', method: 'put', ...variables })

export const usePerformReconciliationSingleAccount = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.RestResponse,
      PerformReconciliationSingleAccountError,
      PerformReconciliationSingleAccountVariables
    >,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<
    Schemas.RestResponse,
    PerformReconciliationSingleAccountError,
    PerformReconciliationSingleAccountVariables
  >(
    (variables: PerformReconciliationSingleAccountVariables) =>
      fetchPerformReconciliationSingleAccount({ ...fetcherOptions, ...variables }),
    options
  )
}

export type PerformReconciliationAllAccountsQueryParams = {
  /*
   * @format int64
   */
  durationStartTs?: number
  /*
   * @format int64
   */
  durationEndTs?: number
}

export type PerformReconciliationAllAccountsError = Fetcher.ErrorWrapper<undefined>

export type PerformReconciliationAllAccountsVariables = {
  queryParams?: PerformReconciliationAllAccountsQueryParams
} & PortalContext['fetcherOptions']

export const fetchPerformReconciliationAllAccounts = (variables: PerformReconciliationAllAccountsVariables) =>
  portalFetch<
    Schemas.RestResponse,
    PerformReconciliationAllAccountsError,
    undefined,
    {},
    PerformReconciliationAllAccountsQueryParams,
    {}
  >({ url: '/custom-dashboard/deployment-recon-all-accounts', method: 'put', ...variables })

export const usePerformReconciliationAllAccounts = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.RestResponse,
      PerformReconciliationAllAccountsError,
      PerformReconciliationAllAccountsVariables
    >,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<
    Schemas.RestResponse,
    PerformReconciliationAllAccountsError,
    PerformReconciliationAllAccountsVariables
  >(
    (variables: PerformReconciliationAllAccountsVariables) =>
      fetchPerformReconciliationAllAccounts({ ...fetcherOptions, ...variables }),
    options
  )
}

export type DoReconInstanceOnAccountQueryParams = {
  accountId?: string
  /*
   * @format int64
   */
  intervalStartTimeMs?: number
  /*
   * @format int64
   */
  intervalEndTimeMs?: number
}

export type DoReconInstanceOnAccountError = Fetcher.ErrorWrapper<undefined>

export type DoReconInstanceOnAccountVariables = {
  queryParams?: DoReconInstanceOnAccountQueryParams
} & PortalContext['fetcherOptions']

export const fetchDoReconInstanceOnAccount = (variables: DoReconInstanceOnAccountVariables) =>
  portalFetch<
    Schemas.RestResponse,
    DoReconInstanceOnAccountError,
    undefined,
    {},
    DoReconInstanceOnAccountQueryParams,
    {}
  >({ url: '/custom-dashboard/instance-recon-per-account', method: 'put', ...variables })

export const useDoReconInstanceOnAccount = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.RestResponse,
      DoReconInstanceOnAccountError,
      DoReconInstanceOnAccountVariables
    >,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<Schemas.RestResponse, DoReconInstanceOnAccountError, DoReconInstanceOnAccountVariables>(
    (variables: DoReconInstanceOnAccountVariables) =>
      fetchDoReconInstanceOnAccount({ ...fetcherOptions, ...variables }),
    options
  )
}

export type DoInstanceDataMigrationQueryParams = {
  accountId?: string
  /*
   * @format int32
   */
  batchSizeInHours?: number
}

export type DoInstanceDataMigrationError = Fetcher.ErrorWrapper<undefined>

export type DoInstanceDataMigrationVariables = {
  queryParams?: DoInstanceDataMigrationQueryParams
} & PortalContext['fetcherOptions']

export const fetchDoInstanceDataMigration = (variables: DoInstanceDataMigrationVariables) =>
  portalFetch<
    Schemas.RestResponse,
    DoInstanceDataMigrationError,
    undefined,
    {},
    DoInstanceDataMigrationQueryParams,
    {}
  >({ url: '/custom-dashboard/instance-data-migration', method: 'put', ...variables })

export const useDoInstanceDataMigration = (
  options?: Omit<
    reactQuery.UseMutationOptions<Schemas.RestResponse, DoInstanceDataMigrationError, DoInstanceDataMigrationVariables>,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<Schemas.RestResponse, DoInstanceDataMigrationError, DoInstanceDataMigrationVariables>(
    (variables: DoInstanceDataMigrationVariables) => fetchDoInstanceDataMigration({ ...fetcherOptions, ...variables }),
    options
  )
}

export type DoDeploymentDataMigrationQueryParams = {
  accountId?: string
  /*
   * @format int32
   */
  batchSizeInHours?: number
}

export type DoDeploymentDataMigrationError = Fetcher.ErrorWrapper<undefined>

export type DoDeploymentDataMigrationVariables = {
  queryParams?: DoDeploymentDataMigrationQueryParams
} & PortalContext['fetcherOptions']

export const fetchDoDeploymentDataMigration = (variables: DoDeploymentDataMigrationVariables) =>
  portalFetch<
    Schemas.RestResponse,
    DoDeploymentDataMigrationError,
    undefined,
    {},
    DoDeploymentDataMigrationQueryParams,
    {}
  >({ url: '/custom-dashboard/deployment-data-migration', method: 'put', ...variables })

export const useDoDeploymentDataMigration = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.RestResponse,
      DoDeploymentDataMigrationError,
      DoDeploymentDataMigrationVariables
    >,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<
    Schemas.RestResponse,
    DoDeploymentDataMigrationError,
    DoDeploymentDataMigrationVariables
  >(
    (variables: DoDeploymentDataMigrationVariables) =>
      fetchDoDeploymentDataMigration({ ...fetcherOptions, ...variables }),
    options
  )
}

export type DoDeploymentMigrationOnAccountQueryParams = {
  accountId?: string
  /*
   * @format int64
   */
  intervalStartTimeMs?: number
  /*
   * @format int64
   */
  intervalEndTimeMs?: number
}

export type DoDeploymentMigrationOnAccountError = Fetcher.ErrorWrapper<undefined>

export type DoDeploymentMigrationOnAccountVariables = {
  queryParams?: DoDeploymentMigrationOnAccountQueryParams
} & PortalContext['fetcherOptions']

export const fetchDoDeploymentMigrationOnAccount = (variables: DoDeploymentMigrationOnAccountVariables) =>
  portalFetch<
    Schemas.RestResponse,
    DoDeploymentMigrationOnAccountError,
    undefined,
    {},
    DoDeploymentMigrationOnAccountQueryParams,
    {}
  >({ url: '/custom-dashboard/deployment-migration-per-account', method: 'put', ...variables })

export const useDoDeploymentMigrationOnAccount = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.RestResponse,
      DoDeploymentMigrationOnAccountError,
      DoDeploymentMigrationOnAccountVariables
    >,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<
    Schemas.RestResponse,
    DoDeploymentMigrationOnAccountError,
    DoDeploymentMigrationOnAccountVariables
  >(
    (variables: DoDeploymentMigrationOnAccountVariables) =>
      fetchDoDeploymentMigrationOnAccount({ ...fetcherOptions, ...variables }),
    options
  )
}

export type Get44PathParams = {
  accountId: string
}

export type Get44Error = Fetcher.ErrorWrapper<undefined>

export type Get44Variables = {
  pathParams: Get44PathParams
} & PortalContext['fetcherOptions']

export const fetchGet44 = (variables: Get44Variables) =>
  portalFetch<Schemas.RestResponseGovernanceConfig, Get44Error, undefined, {}, {}, Get44PathParams>({
    url: '/compliance-config/{accountId}',
    method: 'get',
    ...variables
  })

export const useGet44 = (
  variables: Get44Variables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.RestResponseGovernanceConfig, Get44Error, Schemas.RestResponseGovernanceConfig>,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<Schemas.RestResponseGovernanceConfig, Get44Error, Schemas.RestResponseGovernanceConfig>(
    queryKeyFn({ path: '/compliance-config/{accountId}', operationId: 'get44', variables }),
    () => fetchGet44({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type Update35PathParams = {
  accountId: string
}

export type Update35Error = Fetcher.ErrorWrapper<undefined>

export type Update35Variables = {
  body: Schemas.GovernanceConfig
  pathParams: Update35PathParams
} & PortalContext['fetcherOptions']

export const fetchUpdate35 = (variables: Update35Variables) =>
  portalFetch<
    Schemas.RestResponseGovernanceConfig,
    Update35Error,
    Schemas.GovernanceConfig,
    {},
    {},
    Update35PathParams
  >({ url: '/compliance-config/{accountId}', method: 'put', ...variables })

export const useUpdate35 = (
  options?: Omit<
    reactQuery.UseMutationOptions<Schemas.RestResponseGovernanceConfig, Update35Error, Update35Variables>,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<Schemas.RestResponseGovernanceConfig, Update35Error, Update35Variables>(
    (variables: Update35Variables) => fetchUpdate35({ ...fetcherOptions, ...variables }),
    options
  )
}

export type GetDeploymentFreezeInfoPathParams = {
  accountId: string
}

export type GetDeploymentFreezeInfoError = Fetcher.ErrorWrapper<undefined>

export type GetDeploymentFreezeInfoVariables = {
  pathParams: GetDeploymentFreezeInfoPathParams
} & PortalContext['fetcherOptions']

export const fetchGetDeploymentFreezeInfo = (variables: GetDeploymentFreezeInfoVariables) =>
  portalFetch<
    Schemas.RestResponseDeploymentFreezeInfo,
    GetDeploymentFreezeInfoError,
    undefined,
    {},
    {},
    GetDeploymentFreezeInfoPathParams
  >({ url: '/compliance-config/deploymentfreeze/info/{accountId}', method: 'get', ...variables })

export const useGetDeploymentFreezeInfo = (
  variables: GetDeploymentFreezeInfoVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponseDeploymentFreezeInfo,
      GetDeploymentFreezeInfoError,
      Schemas.RestResponseDeploymentFreezeInfo
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponseDeploymentFreezeInfo,
    GetDeploymentFreezeInfoError,
    Schemas.RestResponseDeploymentFreezeInfo
  >(
    queryKeyFn({
      path: '/compliance-config/deploymentfreeze/info/{accountId}',
      operationId: 'getDeploymentFreezeInfo',
      variables
    }),
    () => fetchGetDeploymentFreezeInfo({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type List49QueryParams = {
  accountId?: string
}

export type List49Error = Fetcher.ErrorWrapper<undefined>

export type List49Variables = {
  queryParams?: List49QueryParams
} & PortalContext['fetcherOptions']

export const fetchList49 = (variables: List49Variables) =>
  portalFetch<Schemas.RestResponseListPipelineGovernanceConfig, List49Error, undefined, {}, List49QueryParams, {}>({
    url: '/compliance/pipeline',
    method: 'get',
    ...variables
  })

export const useList49 = (
  variables: List49Variables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponseListPipelineGovernanceConfig,
      List49Error,
      Schemas.RestResponseListPipelineGovernanceConfig
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponseListPipelineGovernanceConfig,
    List49Error,
    Schemas.RestResponseListPipelineGovernanceConfig
  >(
    queryKeyFn({ path: '/compliance/pipeline', operationId: 'list49', variables }),
    () => fetchList49({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type Add4QueryParams = {
  accountId?: string
}

export type Add4Error = Fetcher.ErrorWrapper<undefined>

export type Add4Variables = {
  body?: Schemas.PipelineGovernanceConfig
  queryParams?: Add4QueryParams
} & PortalContext['fetcherOptions']

export const fetchAdd4 = (variables: Add4Variables) =>
  portalFetch<
    Schemas.RestResponsePipelineGovernanceConfig,
    Add4Error,
    Schemas.PipelineGovernanceConfig,
    {},
    Add4QueryParams,
    {}
  >({ url: '/compliance/pipeline', method: 'post', ...variables })

export const useAdd4 = (
  options?: Omit<
    reactQuery.UseMutationOptions<Schemas.RestResponsePipelineGovernanceConfig, Add4Error, Add4Variables>,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<Schemas.RestResponsePipelineGovernanceConfig, Add4Error, Add4Variables>(
    (variables: Add4Variables) => fetchAdd4({ ...fetcherOptions, ...variables }),
    options
  )
}

export type Update36PathParams = {
  uuid: string
}

export type Update36QueryParams = {
  accountId?: string
}

export type Update36Error = Fetcher.ErrorWrapper<undefined>

export type Update36Variables = {
  pathParams: Update36PathParams
  queryParams?: Update36QueryParams
} & PortalContext['fetcherOptions']

export const fetchUpdate36 = (variables: Update36Variables) =>
  portalFetch<Schemas.RestResponseBoolean, Update36Error, undefined, {}, Update36QueryParams, Update36PathParams>({
    url: '/compliance/pipeline/{uuid}',
    method: 'delete',
    ...variables
  })

export const useUpdate36 = (
  options?: Omit<
    reactQuery.UseMutationOptions<Schemas.RestResponseBoolean, Update36Error, Update36Variables>,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<Schemas.RestResponseBoolean, Update36Error, Update36Variables>(
    (variables: Update36Variables) => fetchUpdate36({ ...fetcherOptions, ...variables }),
    options
  )
}

export type ReportQueryParams = {
  accountId?: string
  appId?: string
  pipelineId?: string
}

export type ReportError = Fetcher.ErrorWrapper<undefined>

export type ReportVariables = {
  queryParams?: ReportQueryParams
} & PortalContext['fetcherOptions']

export const fetchReport = (variables: ReportVariables) =>
  portalFetch<Schemas.RestResponseListPipelineReportCard, ReportError, undefined, {}, ReportQueryParams, {}>({
    url: '/compliance/pipeline/report',
    method: 'get',
    ...variables
  })

export const useReport = (
  variables: ReportVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponseListPipelineReportCard,
      ReportError,
      Schemas.RestResponseListPipelineReportCard
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponseListPipelineReportCard,
    ReportError,
    Schemas.RestResponseListPipelineReportCard
  >(
    queryKeyFn({ path: '/compliance/pipeline/report', operationId: 'report', variables }),
    () => fetchReport({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type Execute2QueryParams = {
  accountId?: string
}

export type Execute2Headers = {
  ['X-Api-Key']?: string
}

export type Execute2Error = Fetcher.ErrorWrapper<undefined>

export type Execute2Response = {
  [key: string]: Record<string, any>
}

export type Execute2Variables = {
  headers?: Execute2Headers
  queryParams?: Execute2QueryParams
} & PortalContext['fetcherOptions']

export const fetchExecute2 = (variables: Execute2Variables) =>
  portalFetch<Execute2Response, Execute2Error, undefined, Execute2Headers, Execute2QueryParams, {}>({
    url: '/graphql',
    method: 'post',
    ...variables
  })

export const useExecute2 = (
  options?: Omit<reactQuery.UseMutationOptions<Execute2Response, Execute2Error, Execute2Variables>, 'mutationFn'>
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<Execute2Response, Execute2Error, Execute2Variables>(
    (variables: Execute2Variables) => fetchExecute2({ ...fetcherOptions, ...variables }),
    options
  )
}

export type Execute4Error = Fetcher.ErrorWrapper<undefined>

export type Execute4Response = {
  [key: string]: Record<string, any>
}

export type Execute4Variables = PortalContext['fetcherOptions']

export const fetchExecute4 = (variables: Execute4Variables) =>
  portalFetch<Execute4Response, Execute4Error, undefined, {}, {}, {}>({
    url: '/graphql/int',
    method: 'post',
    ...variables
  })

export const useExecute4 = (
  options?: Omit<reactQuery.UseMutationOptions<Execute4Response, Execute4Error, Execute4Variables>, 'mutationFn'>
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<Execute4Response, Execute4Error, Execute4Variables>(
    (variables: Execute4Variables) => fetchExecute4({ ...fetcherOptions, ...variables }),
    options
  )
}

export type ConfigureStaticLimitQueryParams = {
  accountId?: string
  action?: string
}

export type ConfigureStaticLimitError = Fetcher.ErrorWrapper<undefined>

export type ConfigureStaticLimitVariables = {
  body?: Schemas.StaticLimit
  queryParams?: ConfigureStaticLimitQueryParams
} & PortalContext['fetcherOptions']

export const fetchConfigureStaticLimit = (variables: ConfigureStaticLimitVariables) =>
  portalFetch<
    Schemas.RestResponseBoolean,
    ConfigureStaticLimitError,
    Schemas.StaticLimit,
    {},
    ConfigureStaticLimitQueryParams,
    {}
  >({ url: '/limits/configure/static-limit', method: 'post', ...variables })

export const useConfigureStaticLimit = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.RestResponseBoolean,
      ConfigureStaticLimitError,
      ConfigureStaticLimitVariables
    >,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<Schemas.RestResponseBoolean, ConfigureStaticLimitError, ConfigureStaticLimitVariables>(
    (variables: ConfigureStaticLimitVariables) => fetchConfigureStaticLimit({ ...fetcherOptions, ...variables }),
    options
  )
}

export type ConfigureRateLimitQueryParams = {
  accountId?: string
  action?: string
}

export type ConfigureRateLimitError = Fetcher.ErrorWrapper<undefined>

export type ConfigureRateLimitVariables = {
  body: Schemas.RateLimit
  queryParams?: ConfigureRateLimitQueryParams
} & PortalContext['fetcherOptions']

export const fetchConfigureRateLimit = (variables: ConfigureRateLimitVariables) =>
  portalFetch<
    Schemas.RestResponseBoolean,
    ConfigureRateLimitError,
    Schemas.RateLimit,
    {},
    ConfigureRateLimitQueryParams,
    {}
  >({ url: '/limits/configure/rate-limit', method: 'post', ...variables })

export const useConfigureRateLimit = (
  options?: Omit<
    reactQuery.UseMutationOptions<Schemas.RestResponseBoolean, ConfigureRateLimitError, ConfigureRateLimitVariables>,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<Schemas.RestResponseBoolean, ConfigureRateLimitError, ConfigureRateLimitVariables>(
    (variables: ConfigureRateLimitVariables) => fetchConfigureRateLimit({ ...fetcherOptions, ...variables }),
    options
  )
}

export type FetchFavoriteTemplatesQueryParams = {
  accountId?: string
}

export type FetchFavoriteTemplatesError = Fetcher.ErrorWrapper<undefined>

export type FetchFavoriteTemplatesVariables = {
  queryParams?: FetchFavoriteTemplatesQueryParams
} & PortalContext['fetcherOptions']

export const fetchFetchFavoriteTemplates = (variables: FetchFavoriteTemplatesVariables) =>
  portalFetch<
    Schemas.RestResponseSetString,
    FetchFavoriteTemplatesError,
    undefined,
    {},
    FetchFavoriteTemplatesQueryParams,
    {}
  >({ url: '/personalization/templates/favorite', method: 'get', ...variables })

export const useFetchFavoriteTemplates = (
  variables: FetchFavoriteTemplatesVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponseSetString,
      FetchFavoriteTemplatesError,
      Schemas.RestResponseSetString
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<Schemas.RestResponseSetString, FetchFavoriteTemplatesError, Schemas.RestResponseSetString>(
    queryKeyFn({ path: '/personalization/templates/favorite', operationId: 'fetchFavoriteTemplates', variables }),
    () => fetchFetchFavoriteTemplates({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type AddFavoritePathParams = {
  stepId: string
}

export type AddFavoriteQueryParams = {
  accountId?: string
}

export type AddFavoriteError = Fetcher.ErrorWrapper<undefined>

export type AddFavoriteVariables = {
  pathParams: AddFavoritePathParams
  queryParams?: AddFavoriteQueryParams
} & PortalContext['fetcherOptions']

export const fetchAddFavorite = (variables: AddFavoriteVariables) =>
  portalFetch<undefined, AddFavoriteError, undefined, {}, AddFavoriteQueryParams, AddFavoritePathParams>({
    url: '/personalization/steps/{stepId}/favorite',
    method: 'put',
    ...variables
  })

export const useAddFavorite = (
  options?: Omit<reactQuery.UseMutationOptions<undefined, AddFavoriteError, AddFavoriteVariables>, 'mutationFn'>
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<undefined, AddFavoriteError, AddFavoriteVariables>(
    (variables: AddFavoriteVariables) => fetchAddFavorite({ ...fetcherOptions, ...variables }),
    options
  )
}

export type RemoveFavoritePathParams = {
  stepId: string
}

export type RemoveFavoriteQueryParams = {
  accountId?: string
}

export type RemoveFavoriteError = Fetcher.ErrorWrapper<undefined>

export type RemoveFavoriteVariables = {
  pathParams: RemoveFavoritePathParams
  queryParams?: RemoveFavoriteQueryParams
} & PortalContext['fetcherOptions']

export const fetchRemoveFavorite = (variables: RemoveFavoriteVariables) =>
  portalFetch<undefined, RemoveFavoriteError, undefined, {}, RemoveFavoriteQueryParams, RemoveFavoritePathParams>({
    url: '/personalization/steps/{stepId}/favorite',
    method: 'delete',
    ...variables
  })

export const useRemoveFavorite = (
  options?: Omit<reactQuery.UseMutationOptions<undefined, RemoveFavoriteError, RemoveFavoriteVariables>, 'mutationFn'>
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<undefined, RemoveFavoriteError, RemoveFavoriteVariables>(
    (variables: RemoveFavoriteVariables) => fetchRemoveFavorite({ ...fetcherOptions, ...variables }),
    options
  )
}

export type AddRecentPathParams = {
  stepId: string
}

export type AddRecentQueryParams = {
  accountId?: string
}

export type AddRecentError = Fetcher.ErrorWrapper<undefined>

export type AddRecentVariables = {
  pathParams: AddRecentPathParams
  queryParams?: AddRecentQueryParams
} & PortalContext['fetcherOptions']

export const fetchAddRecent = (variables: AddRecentVariables) =>
  portalFetch<undefined, AddRecentError, undefined, {}, AddRecentQueryParams, AddRecentPathParams>({
    url: '/personalization/steps/{stepId}/recent',
    method: 'put',
    ...variables
  })

export const useAddRecent = (
  options?: Omit<reactQuery.UseMutationOptions<undefined, AddRecentError, AddRecentVariables>, 'mutationFn'>
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<undefined, AddRecentError, AddRecentVariables>(
    (variables: AddRecentVariables) => fetchAddRecent({ ...fetcherOptions, ...variables }),
    options
  )
}

export type AddTemplateToFavoritePathParams = {
  templateId: string
}

export type AddTemplateToFavoriteQueryParams = {
  accountId?: string
}

export type AddTemplateToFavoriteError = Fetcher.ErrorWrapper<undefined>

export type AddTemplateToFavoriteVariables = {
  pathParams: AddTemplateToFavoritePathParams
  queryParams?: AddTemplateToFavoriteQueryParams
} & PortalContext['fetcherOptions']

export const fetchAddTemplateToFavorite = (variables: AddTemplateToFavoriteVariables) =>
  portalFetch<
    undefined,
    AddTemplateToFavoriteError,
    undefined,
    {},
    AddTemplateToFavoriteQueryParams,
    AddTemplateToFavoritePathParams
  >({ url: '/personalization/templates/{templateId}/favorite', method: 'put', ...variables })

export const useAddTemplateToFavorite = (
  options?: Omit<
    reactQuery.UseMutationOptions<undefined, AddTemplateToFavoriteError, AddTemplateToFavoriteVariables>,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<undefined, AddTemplateToFavoriteError, AddTemplateToFavoriteVariables>(
    (variables: AddTemplateToFavoriteVariables) => fetchAddTemplateToFavorite({ ...fetcherOptions, ...variables }),
    options
  )
}

export type RemoveTemplateFromFavoritePathParams = {
  templateId: string
}

export type RemoveTemplateFromFavoriteQueryParams = {
  accountId?: string
}

export type RemoveTemplateFromFavoriteError = Fetcher.ErrorWrapper<undefined>

export type RemoveTemplateFromFavoriteVariables = {
  pathParams: RemoveTemplateFromFavoritePathParams
  queryParams?: RemoveTemplateFromFavoriteQueryParams
} & PortalContext['fetcherOptions']

export const fetchRemoveTemplateFromFavorite = (variables: RemoveTemplateFromFavoriteVariables) =>
  portalFetch<
    undefined,
    RemoveTemplateFromFavoriteError,
    undefined,
    {},
    RemoveTemplateFromFavoriteQueryParams,
    RemoveTemplateFromFavoritePathParams
  >({ url: '/personalization/templates/{templateId}/favorite', method: 'delete', ...variables })

export const useRemoveTemplateFromFavorite = (
  options?: Omit<
    reactQuery.UseMutationOptions<undefined, RemoveTemplateFromFavoriteError, RemoveTemplateFromFavoriteVariables>,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<undefined, RemoveTemplateFromFavoriteError, RemoveTemplateFromFavoriteVariables>(
    (variables: RemoveTemplateFromFavoriteVariables) =>
      fetchRemoveTemplateFromFavorite({ ...fetcherOptions, ...variables }),
    options
  )
}

export type SaveAwsSecretsManagerConfigQueryParams = {
  accountId?: string
}

export type SaveAwsSecretsManagerConfigError = Fetcher.ErrorWrapper<undefined>

export type SaveAwsSecretsManagerConfigVariables = {
  body: Schemas.AwsSecretsManagerConfig
  queryParams?: SaveAwsSecretsManagerConfigQueryParams
} & PortalContext['fetcherOptions']

export const fetchSaveAwsSecretsManagerConfig = (variables: SaveAwsSecretsManagerConfigVariables) =>
  portalFetch<
    Schemas.RestResponseString,
    SaveAwsSecretsManagerConfigError,
    Schemas.AwsSecretsManagerConfig,
    {},
    SaveAwsSecretsManagerConfigQueryParams,
    {}
  >({ url: '/aws-secrets-manager', method: 'post', ...variables })

export const useSaveAwsSecretsManagerConfig = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.RestResponseString,
      SaveAwsSecretsManagerConfigError,
      SaveAwsSecretsManagerConfigVariables
    >,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<
    Schemas.RestResponseString,
    SaveAwsSecretsManagerConfigError,
    SaveAwsSecretsManagerConfigVariables
  >(
    (variables: SaveAwsSecretsManagerConfigVariables) =>
      fetchSaveAwsSecretsManagerConfig({ ...fetcherOptions, ...variables }),
    options
  )
}

export type DeleteAwsSecretsManagerConfigQueryParams = {
  accountId?: string
  configId?: string
}

export type DeleteAwsSecretsManagerConfigError = Fetcher.ErrorWrapper<undefined>

export type DeleteAwsSecretsManagerConfigVariables = {
  queryParams?: DeleteAwsSecretsManagerConfigQueryParams
} & PortalContext['fetcherOptions']

export const fetchDeleteAwsSecretsManagerConfig = (variables: DeleteAwsSecretsManagerConfigVariables) =>
  portalFetch<
    Schemas.RestResponseBoolean,
    DeleteAwsSecretsManagerConfigError,
    undefined,
    {},
    DeleteAwsSecretsManagerConfigQueryParams,
    {}
  >({ url: '/aws-secrets-manager', method: 'delete', ...variables })

export const useDeleteAwsSecretsManagerConfig = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.RestResponseBoolean,
      DeleteAwsSecretsManagerConfigError,
      DeleteAwsSecretsManagerConfigVariables
    >,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<
    Schemas.RestResponseBoolean,
    DeleteAwsSecretsManagerConfigError,
    DeleteAwsSecretsManagerConfigVariables
  >(
    (variables: DeleteAwsSecretsManagerConfigVariables) =>
      fetchDeleteAwsSecretsManagerConfig({ ...fetcherOptions, ...variables }),
    options
  )
}

export type SaveAzureSecretsManagerConfigQueryParams = {
  accountId?: string
}

export type SaveAzureSecretsManagerConfigError = Fetcher.ErrorWrapper<undefined>

export type SaveAzureSecretsManagerConfigVariables = {
  body: RequestBodies.AzureVaultConfig
  queryParams?: SaveAzureSecretsManagerConfigQueryParams
} & PortalContext['fetcherOptions']

export const fetchSaveAzureSecretsManagerConfig = (variables: SaveAzureSecretsManagerConfigVariables) =>
  portalFetch<
    Schemas.RestResponseString,
    SaveAzureSecretsManagerConfigError,
    RequestBodies.AzureVaultConfig,
    {},
    SaveAzureSecretsManagerConfigQueryParams,
    {}
  >({ url: '/azure-secrets-manager', method: 'post', ...variables })

export const useSaveAzureSecretsManagerConfig = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.RestResponseString,
      SaveAzureSecretsManagerConfigError,
      SaveAzureSecretsManagerConfigVariables
    >,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<
    Schemas.RestResponseString,
    SaveAzureSecretsManagerConfigError,
    SaveAzureSecretsManagerConfigVariables
  >(
    (variables: SaveAzureSecretsManagerConfigVariables) =>
      fetchSaveAzureSecretsManagerConfig({ ...fetcherOptions, ...variables }),
    options
  )
}

export type DeleteAzureVaultConfigQueryParams = {
  accountId?: string
  configId?: string
}

export type DeleteAzureVaultConfigError = Fetcher.ErrorWrapper<undefined>

export type DeleteAzureVaultConfigVariables = {
  queryParams?: DeleteAzureVaultConfigQueryParams
} & PortalContext['fetcherOptions']

export const fetchDeleteAzureVaultConfig = (variables: DeleteAzureVaultConfigVariables) =>
  portalFetch<
    Schemas.RestResponseBoolean,
    DeleteAzureVaultConfigError,
    undefined,
    {},
    DeleteAzureVaultConfigQueryParams,
    {}
  >({ url: '/azure-secrets-manager', method: 'delete', ...variables })

export const useDeleteAzureVaultConfig = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.RestResponseBoolean,
      DeleteAzureVaultConfigError,
      DeleteAzureVaultConfigVariables
    >,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<
    Schemas.RestResponseBoolean,
    DeleteAzureVaultConfigError,
    DeleteAzureVaultConfigVariables
  >(
    (variables: DeleteAzureVaultConfigVariables) => fetchDeleteAzureVaultConfig({ ...fetcherOptions, ...variables }),
    options
  )
}

export type ListVaultsQueryParams = {
  accountId?: string
}

export type ListVaultsError = Fetcher.ErrorWrapper<undefined>

export type ListVaultsVariables = {
  body: RequestBodies.AzureVaultConfig
  queryParams?: ListVaultsQueryParams
} & PortalContext['fetcherOptions']

export const fetchListVaults = (variables: ListVaultsVariables) =>
  portalFetch<
    Schemas.RestResponseListString,
    ListVaultsError,
    RequestBodies.AzureVaultConfig,
    {},
    ListVaultsQueryParams,
    {}
  >({ url: '/azure-secrets-manager/list-vaults', method: 'post', ...variables })

export const useListVaults = (
  options?: Omit<
    reactQuery.UseMutationOptions<Schemas.RestResponseListString, ListVaultsError, ListVaultsVariables>,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<Schemas.RestResponseListString, ListVaultsError, ListVaultsVariables>(
    (variables: ListVaultsVariables) => fetchListVaults({ ...fetcherOptions, ...variables }),
    options
  )
}

export type GetCustomSecretsManagerConfigPathParams = {
  configId: string
}

export type GetCustomSecretsManagerConfigQueryParams = {
  accountId?: string
}

export type GetCustomSecretsManagerConfigError = Fetcher.ErrorWrapper<undefined>

export type GetCustomSecretsManagerConfigVariables = {
  pathParams: GetCustomSecretsManagerConfigPathParams
  queryParams?: GetCustomSecretsManagerConfigQueryParams
} & PortalContext['fetcherOptions']

export const fetchGetCustomSecretsManagerConfig = (variables: GetCustomSecretsManagerConfigVariables) =>
  portalFetch<
    Schemas.RestResponseCustomSecretsManagerConfig,
    GetCustomSecretsManagerConfigError,
    undefined,
    {},
    GetCustomSecretsManagerConfigQueryParams,
    GetCustomSecretsManagerConfigPathParams
  >({ url: '/custom-secrets-managers/{configId}', method: 'get', ...variables })

export const useGetCustomSecretsManagerConfig = (
  variables: GetCustomSecretsManagerConfigVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponseCustomSecretsManagerConfig,
      GetCustomSecretsManagerConfigError,
      Schemas.RestResponseCustomSecretsManagerConfig
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponseCustomSecretsManagerConfig,
    GetCustomSecretsManagerConfigError,
    Schemas.RestResponseCustomSecretsManagerConfig
  >(
    queryKeyFn({
      path: '/custom-secrets-managers/{configId}',
      operationId: 'getCustomSecretsManagerConfig',
      variables
    }),
    () => fetchGetCustomSecretsManagerConfig({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type UpdateCustomSecretsManagerConfigPathParams = {
  configId: string
}

export type UpdateCustomSecretsManagerConfigQueryParams = {
  accountId?: string
}

export type UpdateCustomSecretsManagerConfigError = Fetcher.ErrorWrapper<undefined>

export type UpdateCustomSecretsManagerConfigVariables = {
  body: RequestBodies.CustomSecretsManagerConfig
  pathParams: UpdateCustomSecretsManagerConfigPathParams
  queryParams?: UpdateCustomSecretsManagerConfigQueryParams
} & PortalContext['fetcherOptions']

export const fetchUpdateCustomSecretsManagerConfig = (variables: UpdateCustomSecretsManagerConfigVariables) =>
  portalFetch<
    Schemas.RestResponseString,
    UpdateCustomSecretsManagerConfigError,
    RequestBodies.CustomSecretsManagerConfig,
    {},
    UpdateCustomSecretsManagerConfigQueryParams,
    UpdateCustomSecretsManagerConfigPathParams
  >({ url: '/custom-secrets-managers/{configId}', method: 'post', ...variables })

export const useUpdateCustomSecretsManagerConfig = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.RestResponseString,
      UpdateCustomSecretsManagerConfigError,
      UpdateCustomSecretsManagerConfigVariables
    >,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<
    Schemas.RestResponseString,
    UpdateCustomSecretsManagerConfigError,
    UpdateCustomSecretsManagerConfigVariables
  >(
    (variables: UpdateCustomSecretsManagerConfigVariables) =>
      fetchUpdateCustomSecretsManagerConfig({ ...fetcherOptions, ...variables }),
    options
  )
}

export type DeleteCustomSecretsManagerConfigPathParams = {
  configId: string
}

export type DeleteCustomSecretsManagerConfigQueryParams = {
  accountId?: string
}

export type DeleteCustomSecretsManagerConfigError = Fetcher.ErrorWrapper<undefined>

export type DeleteCustomSecretsManagerConfigVariables = {
  pathParams: DeleteCustomSecretsManagerConfigPathParams
  queryParams?: DeleteCustomSecretsManagerConfigQueryParams
} & PortalContext['fetcherOptions']

export const fetchDeleteCustomSecretsManagerConfig = (variables: DeleteCustomSecretsManagerConfigVariables) =>
  portalFetch<
    Schemas.RestResponseBoolean,
    DeleteCustomSecretsManagerConfigError,
    undefined,
    {},
    DeleteCustomSecretsManagerConfigQueryParams,
    DeleteCustomSecretsManagerConfigPathParams
  >({ url: '/custom-secrets-managers/{configId}', method: 'delete', ...variables })

export const useDeleteCustomSecretsManagerConfig = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.RestResponseBoolean,
      DeleteCustomSecretsManagerConfigError,
      DeleteCustomSecretsManagerConfigVariables
    >,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<
    Schemas.RestResponseBoolean,
    DeleteCustomSecretsManagerConfigError,
    DeleteCustomSecretsManagerConfigVariables
  >(
    (variables: DeleteCustomSecretsManagerConfigVariables) =>
      fetchDeleteCustomSecretsManagerConfig({ ...fetcherOptions, ...variables }),
    options
  )
}

export type ValidateCustomSecretsManagerConfigQueryParams = {
  accountId?: string
}

export type ValidateCustomSecretsManagerConfigError = Fetcher.ErrorWrapper<undefined>

export type ValidateCustomSecretsManagerConfigVariables = {
  body: RequestBodies.CustomSecretsManagerConfig
  queryParams?: ValidateCustomSecretsManagerConfigQueryParams
} & PortalContext['fetcherOptions']

export const fetchValidateCustomSecretsManagerConfig = (variables: ValidateCustomSecretsManagerConfigVariables) =>
  portalFetch<
    Schemas.RestResponseBoolean,
    ValidateCustomSecretsManagerConfigError,
    RequestBodies.CustomSecretsManagerConfig,
    {},
    ValidateCustomSecretsManagerConfigQueryParams,
    {}
  >({ url: '/custom-secrets-managers/validate', method: 'post', ...variables })

export const useValidateCustomSecretsManagerConfig = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.RestResponseBoolean,
      ValidateCustomSecretsManagerConfigError,
      ValidateCustomSecretsManagerConfigVariables
    >,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<
    Schemas.RestResponseBoolean,
    ValidateCustomSecretsManagerConfigError,
    ValidateCustomSecretsManagerConfigVariables
  >(
    (variables: ValidateCustomSecretsManagerConfigVariables) =>
      fetchValidateCustomSecretsManagerConfig({ ...fetcherOptions, ...variables }),
    options
  )
}

export type SaveCustomSecretsManagerConfigQueryParams = {
  accountId?: string
}

export type SaveCustomSecretsManagerConfigError = Fetcher.ErrorWrapper<undefined>

export type SaveCustomSecretsManagerConfigVariables = {
  body: RequestBodies.CustomSecretsManagerConfig
  queryParams?: SaveCustomSecretsManagerConfigQueryParams
} & PortalContext['fetcherOptions']

export const fetchSaveCustomSecretsManagerConfig = (variables: SaveCustomSecretsManagerConfigVariables) =>
  portalFetch<
    Schemas.RestResponseString,
    SaveCustomSecretsManagerConfigError,
    RequestBodies.CustomSecretsManagerConfig,
    {},
    SaveCustomSecretsManagerConfigQueryParams,
    {}
  >({ url: '/custom-secrets-managers', method: 'put', ...variables })

export const useSaveCustomSecretsManagerConfig = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.RestResponseString,
      SaveCustomSecretsManagerConfigError,
      SaveCustomSecretsManagerConfigVariables
    >,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<
    Schemas.RestResponseString,
    SaveCustomSecretsManagerConfigError,
    SaveCustomSecretsManagerConfigVariables
  >(
    (variables: SaveCustomSecretsManagerConfigVariables) =>
      fetchSaveCustomSecretsManagerConfig({ ...fetcherOptions, ...variables }),
    options
  )
}

export type SaveCyberArkConfigQueryParams = {
  accountId?: string
}

export type SaveCyberArkConfigError = Fetcher.ErrorWrapper<undefined>

export type SaveCyberArkConfigVariables = {
  body: Schemas.CyberArkConfig
  queryParams?: SaveCyberArkConfigQueryParams
} & PortalContext['fetcherOptions']

export const fetchSaveCyberArkConfig = (variables: SaveCyberArkConfigVariables) =>
  portalFetch<
    Schemas.RestResponseString,
    SaveCyberArkConfigError,
    Schemas.CyberArkConfig,
    {},
    SaveCyberArkConfigQueryParams,
    {}
  >({ url: '/cyberark', method: 'post', ...variables })

export const useSaveCyberArkConfig = (
  options?: Omit<
    reactQuery.UseMutationOptions<Schemas.RestResponseString, SaveCyberArkConfigError, SaveCyberArkConfigVariables>,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<Schemas.RestResponseString, SaveCyberArkConfigError, SaveCyberArkConfigVariables>(
    (variables: SaveCyberArkConfigVariables) => fetchSaveCyberArkConfig({ ...fetcherOptions, ...variables }),
    options
  )
}

export type DeleteCyberArkConfigQueryParams = {
  accountId?: string
  configId?: string
}

export type DeleteCyberArkConfigError = Fetcher.ErrorWrapper<undefined>

export type DeleteCyberArkConfigVariables = {
  queryParams?: DeleteCyberArkConfigQueryParams
} & PortalContext['fetcherOptions']

export const fetchDeleteCyberArkConfig = (variables: DeleteCyberArkConfigVariables) =>
  portalFetch<
    Schemas.RestResponseBoolean,
    DeleteCyberArkConfigError,
    undefined,
    {},
    DeleteCyberArkConfigQueryParams,
    {}
  >({ url: '/cyberark', method: 'delete', ...variables })

export const useDeleteCyberArkConfig = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.RestResponseBoolean,
      DeleteCyberArkConfigError,
      DeleteCyberArkConfigVariables
    >,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<Schemas.RestResponseBoolean, DeleteCyberArkConfigError, DeleteCyberArkConfigVariables>(
    (variables: DeleteCyberArkConfigVariables) => fetchDeleteCyberArkConfig({ ...fetcherOptions, ...variables }),
    options
  )
}

export type SaveGcpSecretsManagerConfigQueryParams = {
  accountId?: string
}

export type SaveGcpSecretsManagerConfigError = Fetcher.ErrorWrapper<undefined>

export type SaveGcpSecretsManagerConfigVariables = {
  body?: RequestBodies.SaveGcpSecretsManagerConfig
  queryParams?: SaveGcpSecretsManagerConfigQueryParams
} & PortalContext['fetcherOptions']

export const fetchSaveGcpSecretsManagerConfig = (variables: SaveGcpSecretsManagerConfigVariables) =>
  portalFetch<
    Schemas.RestResponseString,
    SaveGcpSecretsManagerConfigError,
    RequestBodies.SaveGcpSecretsManagerConfig,
    {},
    SaveGcpSecretsManagerConfigQueryParams,
    {}
  >({ url: '/gcp-secrets-manager', method: 'post', ...variables })

export const useSaveGcpSecretsManagerConfig = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.RestResponseString,
      SaveGcpSecretsManagerConfigError,
      SaveGcpSecretsManagerConfigVariables
    >,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<
    Schemas.RestResponseString,
    SaveGcpSecretsManagerConfigError,
    SaveGcpSecretsManagerConfigVariables
  >(
    (variables: SaveGcpSecretsManagerConfigVariables) =>
      fetchSaveGcpSecretsManagerConfig({ ...fetcherOptions, ...variables }),
    options
  )
}

export type DeleteGcpSecretsManagerConfigQueryParams = {
  accountId?: string
  configId?: string
}

export type DeleteGcpSecretsManagerConfigError = Fetcher.ErrorWrapper<undefined>

export type DeleteGcpSecretsManagerConfigVariables = {
  queryParams?: DeleteGcpSecretsManagerConfigQueryParams
} & PortalContext['fetcherOptions']

export const fetchDeleteGcpSecretsManagerConfig = (variables: DeleteGcpSecretsManagerConfigVariables) =>
  portalFetch<
    Schemas.RestResponseBoolean,
    DeleteGcpSecretsManagerConfigError,
    undefined,
    {},
    DeleteGcpSecretsManagerConfigQueryParams,
    {}
  >({ url: '/gcp-secrets-manager', method: 'delete', ...variables })

export const useDeleteGcpSecretsManagerConfig = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.RestResponseBoolean,
      DeleteGcpSecretsManagerConfigError,
      DeleteGcpSecretsManagerConfigVariables
    >,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<
    Schemas.RestResponseBoolean,
    DeleteGcpSecretsManagerConfigError,
    DeleteGcpSecretsManagerConfigVariables
  >(
    (variables: DeleteGcpSecretsManagerConfigVariables) =>
      fetchDeleteGcpSecretsManagerConfig({ ...fetcherOptions, ...variables }),
    options
  )
}

export type UpdateGcpSecretsManagerConfigPathParams = {
  secretMangerId: string
}

export type UpdateGcpSecretsManagerConfigQueryParams = {
  accountId?: string
}

export type UpdateGcpSecretsManagerConfigError = Fetcher.ErrorWrapper<undefined>

export type UpdateGcpSecretsManagerConfigVariables = {
  body?: RequestBodies.SaveGcpSecretsManagerConfig
  pathParams: UpdateGcpSecretsManagerConfigPathParams
  queryParams?: UpdateGcpSecretsManagerConfigQueryParams
} & PortalContext['fetcherOptions']

export const fetchUpdateGcpSecretsManagerConfig = (variables: UpdateGcpSecretsManagerConfigVariables) =>
  portalFetch<
    Schemas.RestResponseString,
    UpdateGcpSecretsManagerConfigError,
    RequestBodies.SaveGcpSecretsManagerConfig,
    {},
    UpdateGcpSecretsManagerConfigQueryParams,
    UpdateGcpSecretsManagerConfigPathParams
  >({ url: '/gcp-secrets-manager/{secretMangerId}', method: 'post', ...variables })

export const useUpdateGcpSecretsManagerConfig = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.RestResponseString,
      UpdateGcpSecretsManagerConfigError,
      UpdateGcpSecretsManagerConfigVariables
    >,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<
    Schemas.RestResponseString,
    UpdateGcpSecretsManagerConfigError,
    UpdateGcpSecretsManagerConfigVariables
  >(
    (variables: UpdateGcpSecretsManagerConfigVariables) =>
      fetchUpdateGcpSecretsManagerConfig({ ...fetcherOptions, ...variables }),
    options
  )
}

export type SaveGlobalKmsConfigQueryParams = {
  accountId?: string
}

export type SaveGlobalKmsConfigError = Fetcher.ErrorWrapper<undefined>

export type SaveGlobalKmsConfigVariables = {
  body?: RequestBodies.SaveGcpSecretsManagerConfig
  queryParams?: SaveGlobalKmsConfigQueryParams
} & PortalContext['fetcherOptions']

export const fetchSaveGlobalKmsConfig = (variables: SaveGlobalKmsConfigVariables) =>
  portalFetch<
    Schemas.RestResponseString,
    SaveGlobalKmsConfigError,
    RequestBodies.SaveGcpSecretsManagerConfig,
    {},
    SaveGlobalKmsConfigQueryParams,
    {}
  >({ url: '/gcp-secrets-manager/global-kms', method: 'put', ...variables })

export const useSaveGlobalKmsConfig = (
  options?: Omit<
    reactQuery.UseMutationOptions<Schemas.RestResponseString, SaveGlobalKmsConfigError, SaveGlobalKmsConfigVariables>,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<Schemas.RestResponseString, SaveGlobalKmsConfigError, SaveGlobalKmsConfigVariables>(
    (variables: SaveGlobalKmsConfigVariables) => fetchSaveGlobalKmsConfig({ ...fetcherOptions, ...variables }),
    options
  )
}

export type RegionsQueryParams = {
  accountId?: string
  configId?: string
}

export type RegionsError = Fetcher.ErrorWrapper<undefined>

export type RegionsVariables = {
  queryParams?: RegionsQueryParams
} & PortalContext['fetcherOptions']

export const fetchRegions = (variables: RegionsVariables) =>
  portalFetch<Schemas.RestResponseListString, RegionsError, undefined, {}, RegionsQueryParams, {}>({
    url: '/gcp-secrets-manager-v2/regions',
    method: 'get',
    ...variables
  })

export const useRegions = (
  variables: RegionsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.RestResponseListString, RegionsError, Schemas.RestResponseListString>,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<Schemas.RestResponseListString, RegionsError, Schemas.RestResponseListString>(
    queryKeyFn({ path: '/gcp-secrets-manager-v2/regions', operationId: 'regions', variables }),
    () => fetchRegions({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type SaveGcpSecretsManagerConfig1QueryParams = {
  accountId?: string
}

export type SaveGcpSecretsManagerConfig1Error = Fetcher.ErrorWrapper<undefined>

export type SaveGcpSecretsManagerConfig1Variables = {
  body?: RequestBodies.SaveGcpSecretsManagerConfig1
  queryParams?: SaveGcpSecretsManagerConfig1QueryParams
} & PortalContext['fetcherOptions']

export const fetchSaveGcpSecretsManagerConfig1 = (variables: SaveGcpSecretsManagerConfig1Variables) =>
  portalFetch<
    Schemas.RestResponseString,
    SaveGcpSecretsManagerConfig1Error,
    RequestBodies.SaveGcpSecretsManagerConfig1,
    {},
    SaveGcpSecretsManagerConfig1QueryParams,
    {}
  >({ url: '/gcp-secrets-manager-v2', method: 'post', ...variables })

export const useSaveGcpSecretsManagerConfig1 = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.RestResponseString,
      SaveGcpSecretsManagerConfig1Error,
      SaveGcpSecretsManagerConfig1Variables
    >,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<
    Schemas.RestResponseString,
    SaveGcpSecretsManagerConfig1Error,
    SaveGcpSecretsManagerConfig1Variables
  >(
    (variables: SaveGcpSecretsManagerConfig1Variables) =>
      fetchSaveGcpSecretsManagerConfig1({ ...fetcherOptions, ...variables }),
    options
  )
}

export type DeleteGcpSecretsManagerConfig1QueryParams = {
  accountId?: string
  configId?: string
}

export type DeleteGcpSecretsManagerConfig1Error = Fetcher.ErrorWrapper<undefined>

export type DeleteGcpSecretsManagerConfig1Variables = {
  queryParams?: DeleteGcpSecretsManagerConfig1QueryParams
} & PortalContext['fetcherOptions']

export const fetchDeleteGcpSecretsManagerConfig1 = (variables: DeleteGcpSecretsManagerConfig1Variables) =>
  portalFetch<
    Schemas.RestResponseBoolean,
    DeleteGcpSecretsManagerConfig1Error,
    undefined,
    {},
    DeleteGcpSecretsManagerConfig1QueryParams,
    {}
  >({ url: '/gcp-secrets-manager-v2', method: 'delete', ...variables })

export const useDeleteGcpSecretsManagerConfig1 = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.RestResponseBoolean,
      DeleteGcpSecretsManagerConfig1Error,
      DeleteGcpSecretsManagerConfig1Variables
    >,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<
    Schemas.RestResponseBoolean,
    DeleteGcpSecretsManagerConfig1Error,
    DeleteGcpSecretsManagerConfig1Variables
  >(
    (variables: DeleteGcpSecretsManagerConfig1Variables) =>
      fetchDeleteGcpSecretsManagerConfig1({ ...fetcherOptions, ...variables }),
    options
  )
}

export type UpdateGcpSecretsManagerConfig1PathParams = {
  secretManagerId: string
}

export type UpdateGcpSecretsManagerConfig1QueryParams = {
  accountId?: string
}

export type UpdateGcpSecretsManagerConfig1Error = Fetcher.ErrorWrapper<undefined>

export type UpdateGcpSecretsManagerConfig1Variables = {
  body?: RequestBodies.SaveGcpSecretsManagerConfig1
  pathParams: UpdateGcpSecretsManagerConfig1PathParams
  queryParams?: UpdateGcpSecretsManagerConfig1QueryParams
} & PortalContext['fetcherOptions']

export const fetchUpdateGcpSecretsManagerConfig1 = (variables: UpdateGcpSecretsManagerConfig1Variables) =>
  portalFetch<
    Schemas.RestResponseString,
    UpdateGcpSecretsManagerConfig1Error,
    RequestBodies.SaveGcpSecretsManagerConfig1,
    {},
    UpdateGcpSecretsManagerConfig1QueryParams,
    UpdateGcpSecretsManagerConfig1PathParams
  >({ url: '/gcp-secrets-manager-v2/{secretManagerId}', method: 'post', ...variables })

export const useUpdateGcpSecretsManagerConfig1 = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.RestResponseString,
      UpdateGcpSecretsManagerConfig1Error,
      UpdateGcpSecretsManagerConfig1Variables
    >,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<
    Schemas.RestResponseString,
    UpdateGcpSecretsManagerConfig1Error,
    UpdateGcpSecretsManagerConfig1Variables
  >(
    (variables: UpdateGcpSecretsManagerConfig1Variables) =>
      fetchUpdateGcpSecretsManagerConfig1({ ...fetcherOptions, ...variables }),
    options
  )
}

export type SaveGlobalKmsConfig1QueryParams = {
  accountId?: string
}

export type SaveGlobalKmsConfig1Error = Fetcher.ErrorWrapper<undefined>

export type SaveGlobalKmsConfig1Variables = {
  body: RequestBodies.KmsConfig
  queryParams?: SaveGlobalKmsConfig1QueryParams
} & PortalContext['fetcherOptions']

export const fetchSaveGlobalKmsConfig1 = (variables: SaveGlobalKmsConfig1Variables) =>
  portalFetch<
    Schemas.RestResponseString,
    SaveGlobalKmsConfig1Error,
    RequestBodies.KmsConfig,
    {},
    SaveGlobalKmsConfig1QueryParams,
    {}
  >({ url: '/kms/save-global-kms', method: 'post', ...variables })

export const useSaveGlobalKmsConfig1 = (
  options?: Omit<
    reactQuery.UseMutationOptions<Schemas.RestResponseString, SaveGlobalKmsConfig1Error, SaveGlobalKmsConfig1Variables>,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<Schemas.RestResponseString, SaveGlobalKmsConfig1Error, SaveGlobalKmsConfig1Variables>(
    (variables: SaveGlobalKmsConfig1Variables) => fetchSaveGlobalKmsConfig1({ ...fetcherOptions, ...variables }),
    options
  )
}

export type SaveKmsConfigQueryParams = {
  accountId?: string
}

export type SaveKmsConfigError = Fetcher.ErrorWrapper<undefined>

export type SaveKmsConfigVariables = {
  body: RequestBodies.KmsConfig
  queryParams?: SaveKmsConfigQueryParams
} & PortalContext['fetcherOptions']

export const fetchSaveKmsConfig = (variables: SaveKmsConfigVariables) =>
  portalFetch<
    Schemas.RestResponseString,
    SaveKmsConfigError,
    RequestBodies.KmsConfig,
    {},
    SaveKmsConfigQueryParams,
    {}
  >({ url: '/kms/save-kms', method: 'post', ...variables })

export const useSaveKmsConfig = (
  options?: Omit<
    reactQuery.UseMutationOptions<Schemas.RestResponseString, SaveKmsConfigError, SaveKmsConfigVariables>,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<Schemas.RestResponseString, SaveKmsConfigError, SaveKmsConfigVariables>(
    (variables: SaveKmsConfigVariables) => fetchSaveKmsConfig({ ...fetcherOptions, ...variables }),
    options
  )
}

export type DeleteKmsConfigQueryParams = {
  accountId?: string
  kmsConfigId?: string
}

export type DeleteKmsConfigError = Fetcher.ErrorWrapper<undefined>

export type DeleteKmsConfigVariables = {
  queryParams?: DeleteKmsConfigQueryParams
} & PortalContext['fetcherOptions']

export const fetchDeleteKmsConfig = (variables: DeleteKmsConfigVariables) =>
  portalFetch<Schemas.RestResponseBoolean, DeleteKmsConfigError, undefined, {}, DeleteKmsConfigQueryParams, {}>({
    url: '/kms/delete-kms',
    method: 'get',
    ...variables
  })

export const useDeleteKmsConfig = (
  variables: DeleteKmsConfigVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.RestResponseBoolean, DeleteKmsConfigError, Schemas.RestResponseBoolean>,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<Schemas.RestResponseBoolean, DeleteKmsConfigError, Schemas.RestResponseBoolean>(
    queryKeyFn({ path: '/kms/delete-kms', operationId: 'deleteKmsConfig', variables }),
    () => fetchDeleteKmsConfig({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type DeleteKmsConfig2QueryParams = {
  accountId?: string
  kmsConfigId?: string
}

export type DeleteKmsConfig2Error = Fetcher.ErrorWrapper<undefined>

export type DeleteKmsConfig2Variables = {
  queryParams?: DeleteKmsConfig2QueryParams
} & PortalContext['fetcherOptions']

export const fetchDeleteKmsConfig2 = (variables: DeleteKmsConfig2Variables) =>
  portalFetch<Schemas.RestResponseBoolean, DeleteKmsConfig2Error, undefined, {}, DeleteKmsConfig2QueryParams, {}>({
    url: '/kms',
    method: 'delete',
    ...variables
  })

export const useDeleteKmsConfig2 = (
  options?: Omit<
    reactQuery.UseMutationOptions<Schemas.RestResponseBoolean, DeleteKmsConfig2Error, DeleteKmsConfig2Variables>,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<Schemas.RestResponseBoolean, DeleteKmsConfig2Error, DeleteKmsConfig2Variables>(
    (variables: DeleteKmsConfig2Variables) => fetchDeleteKmsConfig2({ ...fetcherOptions, ...variables }),
    options
  )
}

export type SaveOrUpdateSSHVaultConfigQueryParams = {
  accountId?: string
}

export type SaveOrUpdateSSHVaultConfigError = Fetcher.ErrorWrapper<undefined>

export type SaveOrUpdateSSHVaultConfigVariables = {
  body: RequestBodies.SSHVaultConfig
  queryParams?: SaveOrUpdateSSHVaultConfigQueryParams
} & PortalContext['fetcherOptions']

export const fetchSaveOrUpdateSSHVaultConfig = (variables: SaveOrUpdateSSHVaultConfigVariables) =>
  portalFetch<
    Schemas.RestResponseString,
    SaveOrUpdateSSHVaultConfigError,
    RequestBodies.SSHVaultConfig,
    {},
    SaveOrUpdateSSHVaultConfigQueryParams,
    {}
  >({ url: '/ssh-vault', method: 'post', ...variables })

export const useSaveOrUpdateSSHVaultConfig = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.RestResponseString,
      SaveOrUpdateSSHVaultConfigError,
      SaveOrUpdateSSHVaultConfigVariables
    >,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<
    Schemas.RestResponseString,
    SaveOrUpdateSSHVaultConfigError,
    SaveOrUpdateSSHVaultConfigVariables
  >(
    (variables: SaveOrUpdateSSHVaultConfigVariables) =>
      fetchSaveOrUpdateSSHVaultConfig({ ...fetcherOptions, ...variables }),
    options
  )
}

export type DeleteVaultConfigQueryParams = {
  accountId?: string
  vaultConfigId?: string
}

export type DeleteVaultConfigError = Fetcher.ErrorWrapper<undefined>

export type DeleteVaultConfigVariables = {
  queryParams?: DeleteVaultConfigQueryParams
} & PortalContext['fetcherOptions']

export const fetchDeleteVaultConfig = (variables: DeleteVaultConfigVariables) =>
  portalFetch<Schemas.RestResponseBoolean, DeleteVaultConfigError, undefined, {}, DeleteVaultConfigQueryParams, {}>({
    url: '/ssh-vault',
    method: 'delete',
    ...variables
  })

export const useDeleteVaultConfig = (
  options?: Omit<
    reactQuery.UseMutationOptions<Schemas.RestResponseBoolean, DeleteVaultConfigError, DeleteVaultConfigVariables>,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<Schemas.RestResponseBoolean, DeleteVaultConfigError, DeleteVaultConfigVariables>(
    (variables: DeleteVaultConfigVariables) => fetchDeleteVaultConfig({ ...fetcherOptions, ...variables }),
    options
  )
}

export type ListSecretEnginesQueryParams = {
  accountId?: string
}

export type ListSecretEnginesError = Fetcher.ErrorWrapper<undefined>

export type ListSecretEnginesVariables = {
  body: RequestBodies.SSHVaultConfig
  queryParams?: ListSecretEnginesQueryParams
} & PortalContext['fetcherOptions']

export const fetchListSecretEngines = (variables: ListSecretEnginesVariables) =>
  portalFetch<
    Schemas.RestResponseListSecretEngineSummary,
    ListSecretEnginesError,
    RequestBodies.SSHVaultConfig,
    {},
    ListSecretEnginesQueryParams,
    {}
  >({ url: '/ssh-vault/list-engines', method: 'post', ...variables })

export const useListSecretEngines = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.RestResponseListSecretEngineSummary,
      ListSecretEnginesError,
      ListSecretEnginesVariables
    >,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<
    Schemas.RestResponseListSecretEngineSummary,
    ListSecretEnginesError,
    ListSecretEnginesVariables
  >((variables: ListSecretEnginesVariables) => fetchListSecretEngines({ ...fetcherOptions, ...variables }), options)
}

export type GetEncryptionConfigQueryParams = {
  accountId?: string
  secretsManagerConfigId?: string
}

export type GetEncryptionConfigError = Fetcher.ErrorWrapper<undefined>

export type GetEncryptionConfigVariables = {
  queryParams?: GetEncryptionConfigQueryParams
} & PortalContext['fetcherOptions']

export const fetchGetEncryptionConfig = (variables: GetEncryptionConfigVariables) =>
  portalFetch<
    Schemas.RestResponseSecretManagerConfig,
    GetEncryptionConfigError,
    undefined,
    {},
    GetEncryptionConfigQueryParams,
    {}
  >({ url: '/secrets/get-config', method: 'get', ...variables })

export const useGetEncryptionConfig = (
  variables: GetEncryptionConfigVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponseSecretManagerConfig,
      GetEncryptionConfigError,
      Schemas.RestResponseSecretManagerConfig
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponseSecretManagerConfig,
    GetEncryptionConfigError,
    Schemas.RestResponseSecretManagerConfig
  >(
    queryKeyFn({ path: '/secrets/get-config', operationId: 'getEncryptionConfig', variables }),
    () => fetchGetEncryptionConfig({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type GetSecretUsageQueryParams = {
  accountId?: string
  uuid?: string
}

export type GetSecretUsageError = Fetcher.ErrorWrapper<undefined>

export type GetSecretUsageVariables = {
  queryParams?: GetSecretUsageQueryParams
} & PortalContext['fetcherOptions']

export const fetchGetSecretUsage = (variables: GetSecretUsageVariables) =>
  portalFetch<Schemas.RestResponseListUuidAware, GetSecretUsageError, undefined, {}, GetSecretUsageQueryParams, {}>({
    url: '/secrets/list-secret-usage',
    method: 'get',
    ...variables
  })

export const useGetSecretUsage = (
  variables: GetSecretUsageVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponseListUuidAware,
      GetSecretUsageError,
      Schemas.RestResponseListUuidAware
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<Schemas.RestResponseListUuidAware, GetSecretUsageError, Schemas.RestResponseListUuidAware>(
    queryKeyFn({ path: '/secrets/list-secret-usage', operationId: 'getSecretUsage', variables }),
    () => fetchGetSecretUsage({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type SaveSecretQueryParams = {
  accountId?: string
}

export type SaveSecretError = Fetcher.ErrorWrapper<undefined>

export type SaveSecretVariables = {
  body?: RequestBodies.SecretText
  queryParams?: SaveSecretQueryParams
} & PortalContext['fetcherOptions']

export const fetchSaveSecret = (variables: SaveSecretVariables) =>
  portalFetch<Schemas.RestResponseString, SaveSecretError, RequestBodies.SecretText, {}, SaveSecretQueryParams, {}>({
    url: '/secrets/add-secret',
    method: 'post',
    ...variables
  })

export const useSaveSecret = (
  options?: Omit<
    reactQuery.UseMutationOptions<Schemas.RestResponseString, SaveSecretError, SaveSecretVariables>,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<Schemas.RestResponseString, SaveSecretError, SaveSecretVariables>(
    (variables: SaveSecretVariables) => fetchSaveSecret({ ...fetcherOptions, ...variables }),
    options
  )
}

export type UpdateFileQueryParams = {
  accountId?: string
}

export type UpdateFileError = Fetcher.ErrorWrapper<undefined>

export type UpdateFileVariables = {
  queryParams?: UpdateFileQueryParams
} & PortalContext['fetcherOptions']

export const fetchUpdateFile = (variables: UpdateFileVariables) =>
  portalFetch<Schemas.RestResponseBoolean, UpdateFileError, undefined, {}, UpdateFileQueryParams, {}>({
    url: '/secrets/update-file',
    method: 'post',
    ...variables
  })

export const useUpdateFile = (
  options?: Omit<
    reactQuery.UseMutationOptions<Schemas.RestResponseBoolean, UpdateFileError, UpdateFileVariables>,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<Schemas.RestResponseBoolean, UpdateFileError, UpdateFileVariables>(
    (variables: UpdateFileVariables) => fetchUpdateFile({ ...fetcherOptions, ...variables }),
    options
  )
}

export type DeleteFilePostQueryParams = {
  accountId?: string
  uuid?: string
}

export type DeleteFilePostError = Fetcher.ErrorWrapper<undefined>

export type DeleteFilePostVariables = {
  body?: RequestBodies.SaveMessageComparisonListBody
  queryParams?: DeleteFilePostQueryParams
} & PortalContext['fetcherOptions']

export const fetchDeleteFilePost = (variables: DeleteFilePostVariables) =>
  portalFetch<
    Schemas.RestResponseBoolean,
    DeleteFilePostError,
    RequestBodies.SaveMessageComparisonListBody,
    {},
    DeleteFilePostQueryParams,
    {}
  >({ url: '/secrets/delete-file', method: 'post', ...variables })

export const useDeleteFilePost = (
  options?: Omit<
    reactQuery.UseMutationOptions<Schemas.RestResponseBoolean, DeleteFilePostError, DeleteFilePostVariables>,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<Schemas.RestResponseBoolean, DeleteFilePostError, DeleteFilePostVariables>(
    (variables: DeleteFilePostVariables) => fetchDeleteFilePost({ ...fetcherOptions, ...variables }),
    options
  )
}

export type DeleteFileQueryParams = {
  accountId?: string
  uuid?: string
}

export type DeleteFileError = Fetcher.ErrorWrapper<undefined>

export type DeleteFileVariables = {
  queryParams?: DeleteFileQueryParams
} & PortalContext['fetcherOptions']

export const fetchDeleteFile = (variables: DeleteFileVariables) =>
  portalFetch<Schemas.RestResponseBoolean, DeleteFileError, undefined, {}, DeleteFileQueryParams, {}>({
    url: '/secrets/delete-file',
    method: 'delete',
    ...variables
  })

export const useDeleteFile = (
  options?: Omit<
    reactQuery.UseMutationOptions<Schemas.RestResponseBoolean, DeleteFileError, DeleteFileVariables>,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<Schemas.RestResponseBoolean, DeleteFileError, DeleteFileVariables>(
    (variables: DeleteFileVariables) => fetchDeleteFile({ ...fetcherOptions, ...variables }),
    options
  )
}

export type UpdateSecretQueryParams = {
  accountId?: string
  uuid?: string
}

export type UpdateSecretError = Fetcher.ErrorWrapper<undefined>

export type UpdateSecretVariables = {
  body?: RequestBodies.SecretText
  queryParams?: UpdateSecretQueryParams
} & PortalContext['fetcherOptions']

export const fetchUpdateSecret = (variables: UpdateSecretVariables) =>
  portalFetch<
    Schemas.RestResponseBoolean,
    UpdateSecretError,
    RequestBodies.SecretText,
    {},
    UpdateSecretQueryParams,
    {}
  >({ url: '/secrets/update-secret', method: 'post', ...variables })

export const useUpdateSecret = (
  options?: Omit<
    reactQuery.UseMutationOptions<Schemas.RestResponseBoolean, UpdateSecretError, UpdateSecretVariables>,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<Schemas.RestResponseBoolean, UpdateSecretError, UpdateSecretVariables>(
    (variables: UpdateSecretVariables) => fetchUpdateSecret({ ...fetcherOptions, ...variables }),
    options
  )
}

export type DeleteSecretQueryParams = {
  accountId?: string
  uuid?: string
}

export type DeleteSecretError = Fetcher.ErrorWrapper<undefined>

export type DeleteSecretVariables = {
  body?: RequestBodies.SaveMessageComparisonListBody
  queryParams?: DeleteSecretQueryParams
} & PortalContext['fetcherOptions']

export const fetchDeleteSecret = (variables: DeleteSecretVariables) =>
  portalFetch<
    Schemas.RestResponseBoolean,
    DeleteSecretError,
    RequestBodies.SaveMessageComparisonListBody,
    {},
    DeleteSecretQueryParams,
    {}
  >({ url: '/secrets/delete-secret', method: 'post', ...variables })

export const useDeleteSecret = (
  options?: Omit<
    reactQuery.UseMutationOptions<Schemas.RestResponseBoolean, DeleteSecretError, DeleteSecretVariables>,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<Schemas.RestResponseBoolean, DeleteSecretError, DeleteSecretVariables>(
    (variables: DeleteSecretVariables) => fetchDeleteSecret({ ...fetcherOptions, ...variables }),
    options
  )
}

export type DeleteSecret1QueryParams = {
  accountId?: string
  uuid?: string
}

export type DeleteSecret1Error = Fetcher.ErrorWrapper<undefined>

export type DeleteSecret1Variables = {
  queryParams?: DeleteSecret1QueryParams
} & PortalContext['fetcherOptions']

export const fetchDeleteSecret1 = (variables: DeleteSecret1Variables) =>
  portalFetch<Schemas.RestResponseBoolean, DeleteSecret1Error, undefined, {}, DeleteSecret1QueryParams, {}>({
    url: '/secrets/delete-secret',
    method: 'delete',
    ...variables
  })

export const useDeleteSecret1 = (
  options?: Omit<
    reactQuery.UseMutationOptions<Schemas.RestResponseBoolean, DeleteSecret1Error, DeleteSecret1Variables>,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<Schemas.RestResponseBoolean, DeleteSecret1Error, DeleteSecret1Variables>(
    (variables: DeleteSecret1Variables) => fetchDeleteSecret1({ ...fetcherOptions, ...variables }),
    options
  )
}

export type ListSecretsQueryParams = {
  accountId?: string
  type?:
    | 'HOST_CONNECTION_ATTRIBUTES'
    | 'BASTION_HOST_CONNECTION_ATTRIBUTES'
    | 'SMTP'
    | 'SFTP'
    | 'JENKINS'
    | 'BAMBOO'
    | 'STRING'
    | 'SPLUNK'
    | 'ELK'
    | 'LOGZ'
    | 'SUMO'
    | 'DATA_DOG'
    | 'APM_VERIFICATION'
    | 'BUG_SNAG'
    | 'LOG_VERIFICATION'
    | 'APP_DYNAMICS'
    | 'NEW_RELIC'
    | 'DYNA_TRACE'
    | 'INSTANA'
    | 'DATA_DOG_LOG'
    | 'CLOUD_WATCH'
    | 'SCALYR'
    | 'ELB'
    | 'SLACK'
    | 'AWS'
    | 'GCS'
    | 'GCP'
    | 'AZURE'
    | 'PCF'
    | 'RANCHER'
    | 'DIRECT'
    | 'KUBERNETES_CLUSTER'
    | 'DOCKER'
    | 'ECR'
    | 'GCR'
    | 'ACR'
    | 'PHYSICAL_DATA_CENTER'
    | 'KUBERNETES'
    | 'NEXUS'
    | 'ARTIFACTORY'
    | 'SMB'
    | 'AMAZON_S3'
    | 'GIT'
    | 'SSH_SESSION_CONFIG'
    | 'SERVICE_VARIABLE'
    | 'CONFIG_FILE'
    | 'KMS'
    | 'GCP_KMS'
    | 'JIRA'
    | 'SERVICENOW'
    | 'SECRET_TEXT'
    | 'YAML_GIT_SYNC'
    | 'VAULT'
    | 'VAULT_SSH'
    | 'AWS_SECRETS_MANAGER'
    | 'CYBERARK'
    | 'WINRM_CONNECTION_ATTRIBUTES'
    | 'WINRM_SESSION_CONFIG'
    | 'PROMETHEUS'
    | 'INFRASTRUCTURE_MAPPING'
    | 'HTTP_HELM_REPO'
    | 'AMAZON_S3_HELM_REPO'
    | 'GCS_HELM_REPO'
    | 'SPOT_INST'
    | 'AZURE_ARTIFACTS_PAT'
    | 'CUSTOM'
    | 'CE_AWS'
    | 'CE_GCP'
    | 'CE_AZURE'
    | 'AZURE_VAULT'
    | 'KUBERNETES_CLUSTER_NG'
    | 'GIT_NG'
    | 'SSO_SAML'
    | 'GCP_SECRETS_MANAGER'
    | 'TRIGGER'
  currentAppId?: string
  currentEnvId?: string
  /*
   * @default true
   */
  details?: boolean
  /*
   * @default 0
   */
  offset?: string
  limit?: string
  fieldsIncluded?: string[]
  fieldsExcluded?: string[]
}

export type ListSecretsError = Fetcher.ErrorWrapper<undefined>

export type ListSecretsVariables = {
  queryParams?: ListSecretsQueryParams
} & PortalContext['fetcherOptions']

export const fetchListSecrets = (variables: ListSecretsVariables) =>
  portalFetch<
    Schemas.RestResponsePageResponseEncryptedData,
    ListSecretsError,
    undefined,
    {},
    ListSecretsQueryParams,
    {}
  >({ url: '/secrets/list-secrets-page', method: 'get', ...variables })

export const useListSecrets = (
  variables: ListSecretsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponsePageResponseEncryptedData,
      ListSecretsError,
      Schemas.RestResponsePageResponseEncryptedData
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponsePageResponseEncryptedData,
    ListSecretsError,
    Schemas.RestResponsePageResponseEncryptedData
  >(
    queryKeyFn({ path: '/secrets/list-secrets-page', operationId: 'listSecrets', variables }),
    () => fetchListSecrets({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type ListSecrets1QueryParams = {
  accountId?: string
  type?:
    | 'HOST_CONNECTION_ATTRIBUTES'
    | 'BASTION_HOST_CONNECTION_ATTRIBUTES'
    | 'SMTP'
    | 'SFTP'
    | 'JENKINS'
    | 'BAMBOO'
    | 'STRING'
    | 'SPLUNK'
    | 'ELK'
    | 'LOGZ'
    | 'SUMO'
    | 'DATA_DOG'
    | 'APM_VERIFICATION'
    | 'BUG_SNAG'
    | 'LOG_VERIFICATION'
    | 'APP_DYNAMICS'
    | 'NEW_RELIC'
    | 'DYNA_TRACE'
    | 'INSTANA'
    | 'DATA_DOG_LOG'
    | 'CLOUD_WATCH'
    | 'SCALYR'
    | 'ELB'
    | 'SLACK'
    | 'AWS'
    | 'GCS'
    | 'GCP'
    | 'AZURE'
    | 'PCF'
    | 'RANCHER'
    | 'DIRECT'
    | 'KUBERNETES_CLUSTER'
    | 'DOCKER'
    | 'ECR'
    | 'GCR'
    | 'ACR'
    | 'PHYSICAL_DATA_CENTER'
    | 'KUBERNETES'
    | 'NEXUS'
    | 'ARTIFACTORY'
    | 'SMB'
    | 'AMAZON_S3'
    | 'GIT'
    | 'SSH_SESSION_CONFIG'
    | 'SERVICE_VARIABLE'
    | 'CONFIG_FILE'
    | 'KMS'
    | 'GCP_KMS'
    | 'JIRA'
    | 'SERVICENOW'
    | 'SECRET_TEXT'
    | 'YAML_GIT_SYNC'
    | 'VAULT'
    | 'VAULT_SSH'
    | 'AWS_SECRETS_MANAGER'
    | 'CYBERARK'
    | 'WINRM_CONNECTION_ATTRIBUTES'
    | 'WINRM_SESSION_CONFIG'
    | 'PROMETHEUS'
    | 'INFRASTRUCTURE_MAPPING'
    | 'HTTP_HELM_REPO'
    | 'AMAZON_S3_HELM_REPO'
    | 'GCS_HELM_REPO'
    | 'SPOT_INST'
    | 'AZURE_ARTIFACTS_PAT'
    | 'CUSTOM'
    | 'CE_AWS'
    | 'CE_GCP'
    | 'CE_AZURE'
    | 'AZURE_VAULT'
    | 'KUBERNETES_CLUSTER_NG'
    | 'GIT_NG'
    | 'SSO_SAML'
    | 'GCP_SECRETS_MANAGER'
    | 'TRIGGER'
  /*
   * @default true
   */
  details?: boolean
  /*
   * @default 0
   */
  offset?: string
  limit?: string
  fieldsIncluded?: string[]
  fieldsExcluded?: string[]
}

export type ListSecrets1Error = Fetcher.ErrorWrapper<undefined>

export type ListSecrets1Variables = {
  queryParams?: ListSecrets1QueryParams
} & PortalContext['fetcherOptions']

export const fetchListSecrets1 = (variables: ListSecrets1Variables) =>
  portalFetch<
    Schemas.RestResponsePageResponseEncryptedData,
    ListSecrets1Error,
    undefined,
    {},
    ListSecrets1QueryParams,
    {}
  >({ url: '/secrets/list-account-secrets', method: 'get', ...variables })

export const useListSecrets1 = (
  variables: ListSecrets1Variables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponsePageResponseEncryptedData,
      ListSecrets1Error,
      Schemas.RestResponsePageResponseEncryptedData
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponsePageResponseEncryptedData,
    ListSecrets1Error,
    Schemas.RestResponsePageResponseEncryptedData
  >(
    queryKeyFn({ path: '/secrets/list-account-secrets', operationId: 'listSecrets1', variables }),
    () => fetchListSecrets1({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type SaveFileQueryParams = {
  accountId?: string
}

export type SaveFileError = Fetcher.ErrorWrapper<undefined>

export type SaveFileVariables = {
  queryParams?: SaveFileQueryParams
} & PortalContext['fetcherOptions']

export const fetchSaveFile = (variables: SaveFileVariables) =>
  portalFetch<Schemas.RestResponseString, SaveFileError, undefined, {}, SaveFileQueryParams, {}>({
    url: '/secrets/add-file',
    method: 'post',
    ...variables
  })

export const useSaveFile = (
  options?: Omit<
    reactQuery.UseMutationOptions<Schemas.RestResponseString, SaveFileError, SaveFileVariables>,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<Schemas.RestResponseString, SaveFileError, SaveFileVariables>(
    (variables: SaveFileVariables) => fetchSaveFile({ ...fetcherOptions, ...variables }),
    options
  )
}

export type GetUsageLogsQueryParams = {
  /*
   * @default 0
   */
  offset?: string
  limit?: string
  fieldsIncluded?: string[]
  fieldsExcluded?: string[]
  accountId?: string
  entityId?: string
  type?:
    | 'HOST_CONNECTION_ATTRIBUTES'
    | 'BASTION_HOST_CONNECTION_ATTRIBUTES'
    | 'SMTP'
    | 'SFTP'
    | 'JENKINS'
    | 'BAMBOO'
    | 'STRING'
    | 'SPLUNK'
    | 'ELK'
    | 'LOGZ'
    | 'SUMO'
    | 'DATA_DOG'
    | 'APM_VERIFICATION'
    | 'BUG_SNAG'
    | 'LOG_VERIFICATION'
    | 'APP_DYNAMICS'
    | 'NEW_RELIC'
    | 'DYNA_TRACE'
    | 'INSTANA'
    | 'DATA_DOG_LOG'
    | 'CLOUD_WATCH'
    | 'SCALYR'
    | 'ELB'
    | 'SLACK'
    | 'AWS'
    | 'GCS'
    | 'GCP'
    | 'AZURE'
    | 'PCF'
    | 'RANCHER'
    | 'DIRECT'
    | 'KUBERNETES_CLUSTER'
    | 'DOCKER'
    | 'ECR'
    | 'GCR'
    | 'ACR'
    | 'PHYSICAL_DATA_CENTER'
    | 'KUBERNETES'
    | 'NEXUS'
    | 'ARTIFACTORY'
    | 'SMB'
    | 'AMAZON_S3'
    | 'GIT'
    | 'SSH_SESSION_CONFIG'
    | 'SERVICE_VARIABLE'
    | 'CONFIG_FILE'
    | 'KMS'
    | 'GCP_KMS'
    | 'JIRA'
    | 'SERVICENOW'
    | 'SECRET_TEXT'
    | 'YAML_GIT_SYNC'
    | 'VAULT'
    | 'VAULT_SSH'
    | 'AWS_SECRETS_MANAGER'
    | 'CYBERARK'
    | 'WINRM_CONNECTION_ATTRIBUTES'
    | 'WINRM_SESSION_CONFIG'
    | 'PROMETHEUS'
    | 'INFRASTRUCTURE_MAPPING'
    | 'HTTP_HELM_REPO'
    | 'AMAZON_S3_HELM_REPO'
    | 'GCS_HELM_REPO'
    | 'SPOT_INST'
    | 'AZURE_ARTIFACTS_PAT'
    | 'CUSTOM'
    | 'CE_AWS'
    | 'CE_GCP'
    | 'CE_AZURE'
    | 'AZURE_VAULT'
    | 'KUBERNETES_CLUSTER_NG'
    | 'GIT_NG'
    | 'SSO_SAML'
    | 'GCP_SECRETS_MANAGER'
    | 'TRIGGER'
}

export type GetUsageLogsError = Fetcher.ErrorWrapper<undefined>

export type GetUsageLogsVariables = {
  queryParams?: GetUsageLogsQueryParams
} & PortalContext['fetcherOptions']

export const fetchGetUsageLogs = (variables: GetUsageLogsVariables) =>
  portalFetch<
    Schemas.RestResponsePageResponseSecretUsageLog,
    GetUsageLogsError,
    undefined,
    {},
    GetUsageLogsQueryParams,
    {}
  >({ url: '/secrets/usage', method: 'get', ...variables })

export const useGetUsageLogs = (
  variables: GetUsageLogsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponsePageResponseSecretUsageLog,
      GetUsageLogsError,
      Schemas.RestResponsePageResponseSecretUsageLog
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponsePageResponseSecretUsageLog,
    GetUsageLogsError,
    Schemas.RestResponsePageResponseSecretUsageLog
  >(
    queryKeyFn({ path: '/secrets/usage', operationId: 'getUsageLogs', variables }),
    () => fetchGetUsageLogs({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type GetChangeLogsQueryParams = {
  accountId?: string
  entityId?: string
  type?:
    | 'HOST_CONNECTION_ATTRIBUTES'
    | 'BASTION_HOST_CONNECTION_ATTRIBUTES'
    | 'SMTP'
    | 'SFTP'
    | 'JENKINS'
    | 'BAMBOO'
    | 'STRING'
    | 'SPLUNK'
    | 'ELK'
    | 'LOGZ'
    | 'SUMO'
    | 'DATA_DOG'
    | 'APM_VERIFICATION'
    | 'BUG_SNAG'
    | 'LOG_VERIFICATION'
    | 'APP_DYNAMICS'
    | 'NEW_RELIC'
    | 'DYNA_TRACE'
    | 'INSTANA'
    | 'DATA_DOG_LOG'
    | 'CLOUD_WATCH'
    | 'SCALYR'
    | 'ELB'
    | 'SLACK'
    | 'AWS'
    | 'GCS'
    | 'GCP'
    | 'AZURE'
    | 'PCF'
    | 'RANCHER'
    | 'DIRECT'
    | 'KUBERNETES_CLUSTER'
    | 'DOCKER'
    | 'ECR'
    | 'GCR'
    | 'ACR'
    | 'PHYSICAL_DATA_CENTER'
    | 'KUBERNETES'
    | 'NEXUS'
    | 'ARTIFACTORY'
    | 'SMB'
    | 'AMAZON_S3'
    | 'GIT'
    | 'SSH_SESSION_CONFIG'
    | 'SERVICE_VARIABLE'
    | 'CONFIG_FILE'
    | 'KMS'
    | 'GCP_KMS'
    | 'JIRA'
    | 'SERVICENOW'
    | 'SECRET_TEXT'
    | 'YAML_GIT_SYNC'
    | 'VAULT'
    | 'VAULT_SSH'
    | 'AWS_SECRETS_MANAGER'
    | 'CYBERARK'
    | 'WINRM_CONNECTION_ATTRIBUTES'
    | 'WINRM_SESSION_CONFIG'
    | 'PROMETHEUS'
    | 'INFRASTRUCTURE_MAPPING'
    | 'HTTP_HELM_REPO'
    | 'AMAZON_S3_HELM_REPO'
    | 'GCS_HELM_REPO'
    | 'SPOT_INST'
    | 'AZURE_ARTIFACTS_PAT'
    | 'CUSTOM'
    | 'CE_AWS'
    | 'CE_GCP'
    | 'CE_AZURE'
    | 'AZURE_VAULT'
    | 'KUBERNETES_CLUSTER_NG'
    | 'GIT_NG'
    | 'SSO_SAML'
    | 'GCP_SECRETS_MANAGER'
    | 'TRIGGER'
}

export type GetChangeLogsError = Fetcher.ErrorWrapper<undefined>

export type GetChangeLogsVariables = {
  queryParams?: GetChangeLogsQueryParams
} & PortalContext['fetcherOptions']

export const fetchGetChangeLogs = (variables: GetChangeLogsVariables) =>
  portalFetch<Schemas.RestResponseListSecretChangeLog, GetChangeLogsError, undefined, {}, GetChangeLogsQueryParams, {}>(
    { url: '/secrets/change-logs', method: 'get', ...variables }
  )

export const useGetChangeLogs = (
  variables: GetChangeLogsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponseListSecretChangeLog,
      GetChangeLogsError,
      Schemas.RestResponseListSecretChangeLog
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponseListSecretChangeLog,
    GetChangeLogsError,
    Schemas.RestResponseListSecretChangeLog
  >(
    queryKeyFn({ path: '/secrets/change-logs', operationId: 'getChangeLogs', variables }),
    () => fetchGetChangeLogs({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type ListEncryptedSettingAttributesQueryParams = {
  accountId?: string
  category?: string
}

export type ListEncryptedSettingAttributesError = Fetcher.ErrorWrapper<undefined>

export type ListEncryptedSettingAttributesVariables = {
  queryParams?: ListEncryptedSettingAttributesQueryParams
} & PortalContext['fetcherOptions']

export const fetchListEncryptedSettingAttributes = (variables: ListEncryptedSettingAttributesVariables) =>
  portalFetch<
    Schemas.RestResponseCollectionSettingAttribute,
    ListEncryptedSettingAttributesError,
    undefined,
    {},
    ListEncryptedSettingAttributesQueryParams,
    {}
  >({ url: '/secrets/list-values', method: 'get', ...variables })

export const useListEncryptedSettingAttributes = (
  variables: ListEncryptedSettingAttributesVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponseCollectionSettingAttribute,
      ListEncryptedSettingAttributesError,
      Schemas.RestResponseCollectionSettingAttribute
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponseCollectionSettingAttribute,
    ListEncryptedSettingAttributesError,
    Schemas.RestResponseCollectionSettingAttribute
  >(
    queryKeyFn({ path: '/secrets/list-values', operationId: 'listEncryptedSettingAttributes', variables }),
    () => fetchListEncryptedSettingAttributes({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type ListEncryptionConfigQueryParams = {
  accountId?: string
}

export type ListEncryptionConfigError = Fetcher.ErrorWrapper<undefined>

export type ListEncryptionConfigVariables = {
  queryParams?: ListEncryptionConfigQueryParams
} & PortalContext['fetcherOptions']

export const fetchListEncryptionConfig = (variables: ListEncryptionConfigVariables) =>
  portalFetch<
    Schemas.RestResponseListSecretManagerConfig,
    ListEncryptionConfigError,
    undefined,
    {},
    ListEncryptionConfigQueryParams,
    {}
  >({ url: '/secrets/list-configs', method: 'get', ...variables })

export const useListEncryptionConfig = (
  variables: ListEncryptionConfigVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponseListSecretManagerConfig,
      ListEncryptionConfigError,
      Schemas.RestResponseListSecretManagerConfig
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponseListSecretManagerConfig,
    ListEncryptionConfigError,
    Schemas.RestResponseListSecretManagerConfig
  >(
    queryKeyFn({ path: '/secrets/list-configs', operationId: 'listEncryptionConfig', variables }),
    () => fetchListEncryptionConfig({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type GetAllowedUsageScopesToCreateSecretQueryParams = {
  accountId?: string
  secretsManagerConfigId?: string
}

export type GetAllowedUsageScopesToCreateSecretError = Fetcher.ErrorWrapper<undefined>

export type GetAllowedUsageScopesToCreateSecretVariables = {
  queryParams?: GetAllowedUsageScopesToCreateSecretQueryParams
} & PortalContext['fetcherOptions']

export const fetchGetAllowedUsageScopesToCreateSecret = (variables: GetAllowedUsageScopesToCreateSecretVariables) =>
  portalFetch<
    Schemas.RestResponseUsageRestrictions,
    GetAllowedUsageScopesToCreateSecretError,
    undefined,
    {},
    GetAllowedUsageScopesToCreateSecretQueryParams,
    {}
  >({ url: '/secrets/create-secret-allowed-scopes', method: 'get', ...variables })

export const useGetAllowedUsageScopesToCreateSecret = (
  variables: GetAllowedUsageScopesToCreateSecretVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponseUsageRestrictions,
      GetAllowedUsageScopesToCreateSecretError,
      Schemas.RestResponseUsageRestrictions
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponseUsageRestrictions,
    GetAllowedUsageScopesToCreateSecretError,
    Schemas.RestResponseUsageRestrictions
  >(
    queryKeyFn({
      path: '/secrets/create-secret-allowed-scopes',
      operationId: 'getAllowedUsageScopesToCreateSecret',
      variables
    }),
    () => fetchGetAllowedUsageScopesToCreateSecret({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type TransitionSecretsQueryParams = {
  accountId?: string
  fromEncryptionType?:
    | 'LOCAL'
    | 'KMS'
    | 'GCP_KMS'
    | 'AWS_SECRETS_MANAGER'
    | 'AZURE_VAULT'
    | 'CYBERARK'
    | 'VAULT'
    | 'GCP_SECRETS_MANAGER'
    | 'CUSTOM'
    | 'VAULT_SSH'
  fromKmsId?: string
  toEncryptionType?:
    | 'LOCAL'
    | 'KMS'
    | 'GCP_KMS'
    | 'AWS_SECRETS_MANAGER'
    | 'AZURE_VAULT'
    | 'CYBERARK'
    | 'VAULT'
    | 'GCP_SECRETS_MANAGER'
    | 'CUSTOM'
    | 'VAULT_SSH'
  toKmsId?: string
}

export type TransitionSecretsError = Fetcher.ErrorWrapper<undefined>

export type TransitionSecretsVariables = {
  queryParams?: TransitionSecretsQueryParams
} & PortalContext['fetcherOptions']

export const fetchTransitionSecrets = (variables: TransitionSecretsVariables) =>
  portalFetch<Schemas.RestResponseBoolean, TransitionSecretsError, undefined, {}, TransitionSecretsQueryParams, {}>({
    url: '/secrets/transition-config',
    method: 'get',
    ...variables
  })

export const useTransitionSecrets = (
  variables: TransitionSecretsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.RestResponseBoolean, TransitionSecretsError, Schemas.RestResponseBoolean>,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<Schemas.RestResponseBoolean, TransitionSecretsError, Schemas.RestResponseBoolean>(
    queryKeyFn({ path: '/secrets/transition-config', operationId: 'transitionSecrets', variables }),
    () => fetchTransitionSecrets({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type TransitionSecrets1QueryParams = {
  accountId?: string
  fromEncryptionType?:
    | 'LOCAL'
    | 'KMS'
    | 'GCP_KMS'
    | 'AWS_SECRETS_MANAGER'
    | 'AZURE_VAULT'
    | 'CYBERARK'
    | 'VAULT'
    | 'GCP_SECRETS_MANAGER'
    | 'CUSTOM'
    | 'VAULT_SSH'
  fromKmsId?: string
  toEncryptionType?:
    | 'LOCAL'
    | 'KMS'
    | 'GCP_KMS'
    | 'AWS_SECRETS_MANAGER'
    | 'AZURE_VAULT'
    | 'CYBERARK'
    | 'VAULT'
    | 'GCP_SECRETS_MANAGER'
    | 'CUSTOM'
    | 'VAULT_SSH'
  toKmsId?: string
}

export type TransitionSecrets1Error = Fetcher.ErrorWrapper<undefined>

export type TransitionSecrets1RequestBody = {
  [key: string]: {
    [key: string]: string
  }
}

export type TransitionSecrets1Variables = {
  body?: TransitionSecrets1RequestBody
  queryParams?: TransitionSecrets1QueryParams
} & PortalContext['fetcherOptions']

export const fetchTransitionSecrets1 = (variables: TransitionSecrets1Variables) =>
  portalFetch<
    Schemas.RestResponseBoolean,
    TransitionSecrets1Error,
    TransitionSecrets1RequestBody,
    {},
    TransitionSecrets1QueryParams,
    {}
  >({ url: '/secrets/transition-config', method: 'put', ...variables })

export const useTransitionSecrets1 = (
  options?: Omit<
    reactQuery.UseMutationOptions<Schemas.RestResponseBoolean, TransitionSecrets1Error, TransitionSecrets1Variables>,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<Schemas.RestResponseBoolean, TransitionSecrets1Error, TransitionSecrets1Variables>(
    (variables: TransitionSecrets1Variables) => fetchTransitionSecrets1({ ...fetcherOptions, ...variables }),
    options
  )
}

export type ImportSecretsQueryParams = {
  accountId?: string
}

export type ImportSecretsError = Fetcher.ErrorWrapper<undefined>

export type ImportSecretsVariables = {
  body?: RequestBodies.ImportAccountData
  queryParams?: ImportSecretsQueryParams
} & PortalContext['fetcherOptions']

export const fetchImportSecrets = (variables: ImportSecretsVariables) =>
  portalFetch<
    Schemas.RestResponseListString,
    ImportSecretsError,
    RequestBodies.ImportAccountData,
    {},
    ImportSecretsQueryParams,
    {}
  >({ url: '/secrets/import-secrets', method: 'post', ...variables })

export const useImportSecrets = (
  options?: Omit<
    reactQuery.UseMutationOptions<Schemas.RestResponseListString, ImportSecretsError, ImportSecretsVariables>,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<Schemas.RestResponseListString, ImportSecretsError, ImportSecretsVariables>(
    (variables: ImportSecretsVariables) => fetchImportSecrets({ ...fetcherOptions, ...variables }),
    options
  )
}

export type SaveSecretUsingLocalModeQueryParams = {
  accountId?: string
}

export type SaveSecretUsingLocalModeError = Fetcher.ErrorWrapper<undefined>

export type SaveSecretUsingLocalModeVariables = {
  body?: RequestBodies.SecretText
  queryParams?: SaveSecretUsingLocalModeQueryParams
} & PortalContext['fetcherOptions']

export const fetchSaveSecretUsingLocalMode = (variables: SaveSecretUsingLocalModeVariables) =>
  portalFetch<
    Schemas.RestResponseString,
    SaveSecretUsingLocalModeError,
    RequestBodies.SecretText,
    {},
    SaveSecretUsingLocalModeQueryParams,
    {}
  >({ url: '/secrets/add-local-secret', method: 'post', ...variables })

export const useSaveSecretUsingLocalMode = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.RestResponseString,
      SaveSecretUsingLocalModeError,
      SaveSecretUsingLocalModeVariables
    >,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<
    Schemas.RestResponseString,
    SaveSecretUsingLocalModeError,
    SaveSecretUsingLocalModeVariables
  >(
    (variables: SaveSecretUsingLocalModeVariables) =>
      fetchSaveSecretUsingLocalMode({ ...fetcherOptions, ...variables }),
    options
  )
}

export type GetSecretSetupUsageQueryParams = {
  accountId?: string
  uuid?: string
}

export type GetSecretSetupUsageError = Fetcher.ErrorWrapper<undefined>

export type GetSecretSetupUsageVariables = {
  queryParams?: GetSecretSetupUsageQueryParams
} & PortalContext['fetcherOptions']

export const fetchGetSecretSetupUsage = (variables: GetSecretSetupUsageVariables) =>
  portalFetch<
    Schemas.RestResponseSetSecretSetupUsage,
    GetSecretSetupUsageError,
    undefined,
    {},
    GetSecretSetupUsageQueryParams,
    {}
  >({ url: '/secrets/list-setup-usage', method: 'get', ...variables })

export const useGetSecretSetupUsage = (
  variables: GetSecretSetupUsageVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponseSetSecretSetupUsage,
      GetSecretSetupUsageError,
      Schemas.RestResponseSetSecretSetupUsage
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponseSetSecretSetupUsage,
    GetSecretSetupUsageError,
    Schemas.RestResponseSetSecretSetupUsage
  >(
    queryKeyFn({ path: '/secrets/list-setup-usage', operationId: 'getSecretSetupUsage', variables }),
    () => fetchGetSecretSetupUsage({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type SaveOrUpdateVaultConfigQueryParams = {
  accountId?: string
}

export type SaveOrUpdateVaultConfigError = Fetcher.ErrorWrapper<undefined>

export type SaveOrUpdateVaultConfigVariables = {
  body: RequestBodies.VaultConfig
  queryParams?: SaveOrUpdateVaultConfigQueryParams
} & PortalContext['fetcherOptions']

export const fetchSaveOrUpdateVaultConfig = (variables: SaveOrUpdateVaultConfigVariables) =>
  portalFetch<
    Schemas.RestResponseString,
    SaveOrUpdateVaultConfigError,
    RequestBodies.VaultConfig,
    {},
    SaveOrUpdateVaultConfigQueryParams,
    {}
  >({ url: '/vault', method: 'post', ...variables })

export const useSaveOrUpdateVaultConfig = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.RestResponseString,
      SaveOrUpdateVaultConfigError,
      SaveOrUpdateVaultConfigVariables
    >,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<
    Schemas.RestResponseString,
    SaveOrUpdateVaultConfigError,
    SaveOrUpdateVaultConfigVariables
  >(
    (variables: SaveOrUpdateVaultConfigVariables) => fetchSaveOrUpdateVaultConfig({ ...fetcherOptions, ...variables }),
    options
  )
}

export type DeleteVaultConfig1QueryParams = {
  accountId?: string
  vaultConfigId?: string
}

export type DeleteVaultConfig1Error = Fetcher.ErrorWrapper<undefined>

export type DeleteVaultConfig1Variables = {
  queryParams?: DeleteVaultConfig1QueryParams
} & PortalContext['fetcherOptions']

export const fetchDeleteVaultConfig1 = (variables: DeleteVaultConfig1Variables) =>
  portalFetch<Schemas.RestResponseBoolean, DeleteVaultConfig1Error, undefined, {}, DeleteVaultConfig1QueryParams, {}>({
    url: '/vault',
    method: 'delete',
    ...variables
  })

export const useDeleteVaultConfig1 = (
  options?: Omit<
    reactQuery.UseMutationOptions<Schemas.RestResponseBoolean, DeleteVaultConfig1Error, DeleteVaultConfig1Variables>,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<Schemas.RestResponseBoolean, DeleteVaultConfig1Error, DeleteVaultConfig1Variables>(
    (variables: DeleteVaultConfig1Variables) => fetchDeleteVaultConfig1({ ...fetcherOptions, ...variables }),
    options
  )
}

export type ListSecretEngines1QueryParams = {
  accountId?: string
}

export type ListSecretEngines1Error = Fetcher.ErrorWrapper<undefined>

export type ListSecretEngines1Variables = {
  body: RequestBodies.VaultConfig
  queryParams?: ListSecretEngines1QueryParams
} & PortalContext['fetcherOptions']

export const fetchListSecretEngines1 = (variables: ListSecretEngines1Variables) =>
  portalFetch<
    Schemas.RestResponseListSecretEngineSummary,
    ListSecretEngines1Error,
    RequestBodies.VaultConfig,
    {},
    ListSecretEngines1QueryParams,
    {}
  >({ url: '/vault/list-engines', method: 'post', ...variables })

export const useListSecretEngines1 = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.RestResponseListSecretEngineSummary,
      ListSecretEngines1Error,
      ListSecretEngines1Variables
    >,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<
    Schemas.RestResponseListSecretEngineSummary,
    ListSecretEngines1Error,
    ListSecretEngines1Variables
  >((variables: ListSecretEngines1Variables) => fetchListSecretEngines1({ ...fetcherOptions, ...variables }), options)
}

export type Update37PathParams = {
  templateGalleryId: string
}

export type Update37QueryParams = {
  accountId?: string
}

export type Update37Error = Fetcher.ErrorWrapper<undefined>

export type Update37Variables = {
  body: RequestBodies.TemplateGallery
  pathParams: Update37PathParams
  queryParams?: Update37QueryParams
} & PortalContext['fetcherOptions']

export const fetchUpdate37 = (variables: Update37Variables) =>
  portalFetch<
    Schemas.RestResponseTemplateGallery,
    Update37Error,
    RequestBodies.TemplateGallery,
    {},
    Update37QueryParams,
    Update37PathParams
  >({ url: '/template-galleries/{templateGalleryId}', method: 'put', ...variables })

export const useUpdate37 = (
  options?: Omit<
    reactQuery.UseMutationOptions<Schemas.RestResponseTemplateGallery, Update37Error, Update37Variables>,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<Schemas.RestResponseTemplateGallery, Update37Error, Update37Variables>(
    (variables: Update37Variables) => fetchUpdate37({ ...fetcherOptions, ...variables }),
    options
  )
}

export type GetTemplateGalleryPathParams = {
  galleryId: string
}

export type GetTemplateGalleryQueryParams = {
  accountId?: string
}

export type GetTemplateGalleryError = Fetcher.ErrorWrapper<undefined>

export type GetTemplateGalleryVariables = {
  pathParams: GetTemplateGalleryPathParams
  queryParams?: GetTemplateGalleryQueryParams
} & PortalContext['fetcherOptions']

export const fetchGetTemplateGallery = (variables: GetTemplateGalleryVariables) =>
  portalFetch<
    Schemas.RestResponseTemplateGallery,
    GetTemplateGalleryError,
    undefined,
    {},
    GetTemplateGalleryQueryParams,
    GetTemplateGalleryPathParams
  >({ url: '/template-galleries/{galleryId}', method: 'get', ...variables })

export const useGetTemplateGallery = (
  variables: GetTemplateGalleryVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponseTemplateGallery,
      GetTemplateGalleryError,
      Schemas.RestResponseTemplateGallery
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponseTemplateGallery,
    GetTemplateGalleryError,
    Schemas.RestResponseTemplateGallery
  >(
    queryKeyFn({ path: '/template-galleries/{galleryId}', operationId: 'getTemplateGallery', variables }),
    () => fetchGetTemplateGallery({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type Delete35PathParams = {
  galleryId: string
}

export type Delete35Error = Fetcher.ErrorWrapper<undefined>

export type Delete35Variables = {
  pathParams: Delete35PathParams
} & PortalContext['fetcherOptions']

export const fetchDelete35 = (variables: Delete35Variables) =>
  portalFetch<Schemas.RestResponse, Delete35Error, undefined, {}, {}, Delete35PathParams>({
    url: '/template-galleries/{galleryId}',
    method: 'delete',
    ...variables
  })

export const useDelete35 = (
  options?: Omit<reactQuery.UseMutationOptions<Schemas.RestResponse, Delete35Error, Delete35Variables>, 'mutationFn'>
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<Schemas.RestResponse, Delete35Error, Delete35Variables>(
    (variables: Delete35Variables) => fetchDelete35({ ...fetcherOptions, ...variables }),
    options
  )
}

export type List50QueryParams = {
  accountId?: string
  /*
   * @default 0
   */
  offset?: string
  limit?: string
  fieldsIncluded?: string[]
  fieldsExcluded?: string[]
}

export type List50Error = Fetcher.ErrorWrapper<undefined>

export type List50Variables = {
  queryParams?: List50QueryParams
} & PortalContext['fetcherOptions']

export const fetchList50 = (variables: List50Variables) =>
  portalFetch<Schemas.RestResponsePageResponseTemplateGallery, List50Error, undefined, {}, List50QueryParams, {}>({
    url: '/template-galleries',
    method: 'get',
    ...variables
  })

export const useList50 = (
  variables: List50Variables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponsePageResponseTemplateGallery,
      List50Error,
      Schemas.RestResponsePageResponseTemplateGallery
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponsePageResponseTemplateGallery,
    List50Error,
    Schemas.RestResponsePageResponseTemplateGallery
  >(
    queryKeyFn({ path: '/template-galleries', operationId: 'list50', variables }),
    () => fetchList50({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type Save23QueryParams = {
  accountId?: string
}

export type Save23Error = Fetcher.ErrorWrapper<undefined>

export type Save23Variables = {
  body: RequestBodies.TemplateGallery
  queryParams?: Save23QueryParams
} & PortalContext['fetcherOptions']

export const fetchSave23 = (variables: Save23Variables) =>
  portalFetch<
    Schemas.RestResponseTemplateGallery,
    Save23Error,
    RequestBodies.TemplateGallery,
    {},
    Save23QueryParams,
    {}
  >({ url: '/template-galleries', method: 'post', ...variables })

export const useSave23 = (
  options?: Omit<
    reactQuery.UseMutationOptions<Schemas.RestResponseTemplateGallery, Save23Error, Save23Variables>,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<Schemas.RestResponseTemplateGallery, Save23Error, Save23Variables>(
    (variables: Save23Variables) => fetchSave23({ ...fetcherOptions, ...variables }),
    options
  )
}

export type SaveFolderQueryParams = {
  accountId?: string
  /*
   * @default __GLOBAL_APP_ID__
   */
  appId?: string
}

export type SaveFolderError = Fetcher.ErrorWrapper<undefined>

export type SaveFolderVariables = {
  body: RequestBodies.TemplateFolder
  queryParams?: SaveFolderQueryParams
} & PortalContext['fetcherOptions']

export const fetchSaveFolder = (variables: SaveFolderVariables) =>
  portalFetch<
    Schemas.RestResponseTemplateFolder,
    SaveFolderError,
    RequestBodies.TemplateFolder,
    {},
    SaveFolderQueryParams,
    {}
  >({ url: '/template-galleries/folders', method: 'post', ...variables })

export const useSaveFolder = (
  options?: Omit<
    reactQuery.UseMutationOptions<Schemas.RestResponseTemplateFolder, SaveFolderError, SaveFolderVariables>,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<Schemas.RestResponseTemplateFolder, SaveFolderError, SaveFolderVariables>(
    (variables: SaveFolderVariables) => fetchSaveFolder({ ...fetcherOptions, ...variables }),
    options
  )
}

export type GetTemplateFolderPathParams = {
  templateFolderId: string
}

export type GetTemplateFolderQueryParams = {
  accountId?: string
}

export type GetTemplateFolderError = Fetcher.ErrorWrapper<undefined>

export type GetTemplateFolderVariables = {
  pathParams: GetTemplateFolderPathParams
  queryParams?: GetTemplateFolderQueryParams
} & PortalContext['fetcherOptions']

export const fetchGetTemplateFolder = (variables: GetTemplateFolderVariables) =>
  portalFetch<
    Schemas.RestResponseTemplateFolder,
    GetTemplateFolderError,
    undefined,
    {},
    GetTemplateFolderQueryParams,
    GetTemplateFolderPathParams
  >({ url: '/template-galleries/folders/{templateFolderId}', method: 'get', ...variables })

export const useGetTemplateFolder = (
  variables: GetTemplateFolderVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponseTemplateFolder,
      GetTemplateFolderError,
      Schemas.RestResponseTemplateFolder
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponseTemplateFolder,
    GetTemplateFolderError,
    Schemas.RestResponseTemplateFolder
  >(
    queryKeyFn({ path: '/template-galleries/folders/{templateFolderId}', operationId: 'getTemplateFolder', variables }),
    () => fetchGetTemplateFolder({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type UpdateFolderPathParams = {
  templateFolderId: string
}

export type UpdateFolderQueryParams = {
  accountId?: string
  /*
   * @default __GLOBAL_APP_ID__
   */
  appId?: string
}

export type UpdateFolderError = Fetcher.ErrorWrapper<undefined>

export type UpdateFolderVariables = {
  body: RequestBodies.TemplateFolder
  pathParams: UpdateFolderPathParams
  queryParams?: UpdateFolderQueryParams
} & PortalContext['fetcherOptions']

export const fetchUpdateFolder = (variables: UpdateFolderVariables) =>
  portalFetch<
    Schemas.RestResponseTemplateFolder,
    UpdateFolderError,
    RequestBodies.TemplateFolder,
    {},
    UpdateFolderQueryParams,
    UpdateFolderPathParams
  >({ url: '/template-galleries/folders/{templateFolderId}', method: 'put', ...variables })

export const useUpdateFolder = (
  options?: Omit<
    reactQuery.UseMutationOptions<Schemas.RestResponseTemplateFolder, UpdateFolderError, UpdateFolderVariables>,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<Schemas.RestResponseTemplateFolder, UpdateFolderError, UpdateFolderVariables>(
    (variables: UpdateFolderVariables) => fetchUpdateFolder({ ...fetcherOptions, ...variables }),
    options
  )
}

export type DeleteFolderPathParams = {
  templateFolderId: string
}

export type DeleteFolderQueryParams = {
  /*
   * @default __GLOBAL_APP_ID__
   */
  appId?: string
}

export type DeleteFolderError = Fetcher.ErrorWrapper<undefined>

export type DeleteFolderVariables = {
  pathParams: DeleteFolderPathParams
  queryParams?: DeleteFolderQueryParams
} & PortalContext['fetcherOptions']

export const fetchDeleteFolder = (variables: DeleteFolderVariables) =>
  portalFetch<Schemas.RestResponse, DeleteFolderError, undefined, {}, DeleteFolderQueryParams, DeleteFolderPathParams>({
    url: '/template-galleries/folders/{templateFolderId}',
    method: 'delete',
    ...variables
  })

export const useDeleteFolder = (
  options?: Omit<
    reactQuery.UseMutationOptions<Schemas.RestResponse, DeleteFolderError, DeleteFolderVariables>,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<Schemas.RestResponse, DeleteFolderError, DeleteFolderVariables>(
    (variables: DeleteFolderVariables) => fetchDeleteFolder({ ...fetcherOptions, ...variables }),
    options
  )
}

export type GetTemplatePathParams = {
  templateId: string
}

export type GetTemplateQueryParams = {
  accountId?: string
  /*
   * @default __GLOBAL_APP_ID__
   */
  appId?: string
  version?: string
}

export type GetTemplateError = Fetcher.ErrorWrapper<undefined>

export type GetTemplateVariables = {
  pathParams: GetTemplatePathParams
  queryParams?: GetTemplateQueryParams
} & PortalContext['fetcherOptions']

export const fetchGetTemplate = (variables: GetTemplateVariables) =>
  portalFetch<
    Schemas.RestResponseTemplate,
    GetTemplateError,
    undefined,
    {},
    GetTemplateQueryParams,
    GetTemplatePathParams
  >({ url: '/templates/{templateId}', method: 'get', ...variables })

export const useGetTemplate = (
  variables: GetTemplateVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.RestResponseTemplate, GetTemplateError, Schemas.RestResponseTemplate>,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<Schemas.RestResponseTemplate, GetTemplateError, Schemas.RestResponseTemplate>(
    queryKeyFn({ path: '/templates/{templateId}', operationId: 'getTemplate', variables }),
    () => fetchGetTemplate({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type Update38PathParams = {
  templateId: string
}

export type Update38QueryParams = {
  accountId?: string
  /*
   * @default __GLOBAL_APP_ID__
   */
  appId?: string
}

export type Update38Error = Fetcher.ErrorWrapper<undefined>

export type Update38Variables = {
  body: RequestBodies.Template
  pathParams: Update38PathParams
  queryParams?: Update38QueryParams
} & PortalContext['fetcherOptions']

export const fetchUpdate38 = (variables: Update38Variables) =>
  portalFetch<
    Schemas.RestResponseTemplate,
    Update38Error,
    RequestBodies.Template,
    {},
    Update38QueryParams,
    Update38PathParams
  >({ url: '/templates/{templateId}', method: 'put', ...variables })

export const useUpdate38 = (
  options?: Omit<
    reactQuery.UseMutationOptions<Schemas.RestResponseTemplate, Update38Error, Update38Variables>,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<Schemas.RestResponseTemplate, Update38Error, Update38Variables>(
    (variables: Update38Variables) => fetchUpdate38({ ...fetcherOptions, ...variables }),
    options
  )
}

export type Delete36PathParams = {
  templateId: string
}

export type Delete36QueryParams = {
  accountId?: string
}

export type Delete36Error = Fetcher.ErrorWrapper<undefined>

export type Delete36Variables = {
  pathParams: Delete36PathParams
  queryParams?: Delete36QueryParams
} & PortalContext['fetcherOptions']

export const fetchDelete36 = (variables: Delete36Variables) =>
  portalFetch<Schemas.RestResponse, Delete36Error, undefined, {}, Delete36QueryParams, Delete36PathParams>({
    url: '/templates/{templateId}',
    method: 'delete',
    ...variables
  })

export const useDelete36 = (
  options?: Omit<reactQuery.UseMutationOptions<Schemas.RestResponse, Delete36Error, Delete36Variables>, 'mutationFn'>
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<Schemas.RestResponse, Delete36Error, Delete36Variables>(
    (variables: Delete36Variables) => fetchDelete36({ ...fetcherOptions, ...variables }),
    options
  )
}

export type List51QueryParams = {
  /*
   * @default 0
   */
  offset?: string
  limit?: string
  fieldsIncluded?: string[]
  fieldsExcluded?: string[]
}

export type List51Error = Fetcher.ErrorWrapper<undefined>

export type List51Variables = {
  queryParams?: List51QueryParams
} & PortalContext['fetcherOptions']

export const fetchList51 = (variables: List51Variables) =>
  portalFetch<Schemas.RestResponsePageResponseTemplateVersion, List51Error, undefined, {}, List51QueryParams, {}>({
    url: '/templates/versions',
    method: 'get',
    ...variables
  })

export const useList51 = (
  variables: List51Variables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponsePageResponseTemplateVersion,
      List51Error,
      Schemas.RestResponsePageResponseTemplateVersion
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponsePageResponseTemplateVersion,
    List51Error,
    Schemas.RestResponsePageResponseTemplateVersion
  >(
    queryKeyFn({ path: '/templates/versions', operationId: 'list51', variables }),
    () => fetchList51({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type List52QueryParams = {
  accountId?: string
  appId?: string[]
  /*
   * @default 0
   */
  offset?: string
  limit?: string
  fieldsIncluded?: string[]
  fieldsExcluded?: string[]
  galleryKeys?: string[]
  defaultVersion?: boolean
}

export type List52Error = Fetcher.ErrorWrapper<undefined>

export type List52Variables = {
  queryParams?: List52QueryParams
} & PortalContext['fetcherOptions']

export const fetchList52 = (variables: List52Variables) =>
  portalFetch<Schemas.RestResponsePageResponseTemplate, List52Error, undefined, {}, List52QueryParams, {}>({
    url: '/templates',
    method: 'get',
    ...variables
  })

export const useList52 = (
  variables: List52Variables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponsePageResponseTemplate,
      List52Error,
      Schemas.RestResponsePageResponseTemplate
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponsePageResponseTemplate,
    List52Error,
    Schemas.RestResponsePageResponseTemplate
  >(
    queryKeyFn({ path: '/templates', operationId: 'list52', variables }),
    () => fetchList52({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type Save24QueryParams = {
  accountId?: string
  /*
   * @default __GLOBAL_APP_ID__
   */
  appId?: string
}

export type Save24Error = Fetcher.ErrorWrapper<undefined>

export type Save24Variables = {
  body: RequestBodies.Template
  queryParams?: Save24QueryParams
} & PortalContext['fetcherOptions']

export const fetchSave24 = (variables: Save24Variables) =>
  portalFetch<Schemas.RestResponseTemplate, Save24Error, RequestBodies.Template, {}, Save24QueryParams, {}>({
    url: '/templates',
    method: 'post',
    ...variables
  })

export const useSave24 = (
  options?: Omit<
    reactQuery.UseMutationOptions<Schemas.RestResponseTemplate, Save24Error, Save24Variables>,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<Schemas.RestResponseTemplate, Save24Error, Save24Variables>(
    (variables: Save24Variables) => fetchSave24({ ...fetcherOptions, ...variables }),
    options
  )
}

export type GetTemplateTreeQueryParams = {
  accountId?: string
  /*
   * @default __GLOBAL_APP_ID__
   */
  appId?: string
  folderId?: string
  keyword?: string
  type?: string[]
}

export type GetTemplateTreeError = Fetcher.ErrorWrapper<undefined>

export type GetTemplateTreeVariables = {
  queryParams?: GetTemplateTreeQueryParams
} & PortalContext['fetcherOptions']

export const fetchGetTemplateTree = (variables: GetTemplateTreeVariables) =>
  portalFetch<Schemas.RestResponseTemplateFolder, GetTemplateTreeError, undefined, {}, GetTemplateTreeQueryParams, {}>({
    url: '/templates/tree/search',
    method: 'get',
    ...variables
  })

export const useGetTemplateTree = (
  variables: GetTemplateTreeVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponseTemplateFolder,
      GetTemplateTreeError,
      Schemas.RestResponseTemplateFolder
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponseTemplateFolder,
    GetTemplateTreeError,
    Schemas.RestResponseTemplateFolder
  >(
    queryKeyFn({ path: '/templates/tree/search', operationId: 'getTemplateTree', variables }),
    () => fetchGetTemplateTree({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type GetTemplateMetadataQueryParams = {
  accountId?: string
}

export type GetTemplateMetadataError = Fetcher.ErrorWrapper<undefined>

export type GetTemplateMetadataVariables = {
  body?: RequestBodies.UpdateWhitelistedDomainsBody
  queryParams?: GetTemplateMetadataQueryParams
} & PortalContext['fetcherOptions']

export const fetchGetTemplateMetadata = (variables: GetTemplateMetadataVariables) =>
  portalFetch<
    Schemas.RestResponseListTemplateMetaData,
    GetTemplateMetadataError,
    RequestBodies.UpdateWhitelistedDomainsBody,
    {},
    GetTemplateMetadataQueryParams,
    {}
  >({ url: '/templates/metadata', method: 'post', ...variables })

export const useGetTemplateMetadata = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.RestResponseListTemplateMetaData,
      GetTemplateMetadataError,
      GetTemplateMetadataVariables
    >,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<
    Schemas.RestResponseListTemplateMetaData,
    GetTemplateMetadataError,
    GetTemplateMetadataVariables
  >((variables: GetTemplateMetadataVariables) => fetchGetTemplateMetadata({ ...fetcherOptions, ...variables }), options)
}

export type GetCommandCategoriesPathParams = {
  templateId: string
}

export type GetCommandCategoriesQueryParams = {
  accountId?: string
  /*
   * @default __GLOBAL_APP_ID__
   */
  appId?: string
}

export type GetCommandCategoriesError = Fetcher.ErrorWrapper<undefined>

export type GetCommandCategoriesVariables = {
  pathParams: GetCommandCategoriesPathParams
  queryParams?: GetCommandCategoriesQueryParams
} & PortalContext['fetcherOptions']

export const fetchGetCommandCategories = (variables: GetCommandCategoriesVariables) =>
  portalFetch<
    Schemas.RestResponseListCommandCategory,
    GetCommandCategoriesError,
    undefined,
    {},
    GetCommandCategoriesQueryParams,
    GetCommandCategoriesPathParams
  >({ url: '/templates/{templateId}/commands/categories', method: 'get', ...variables })

export const useGetCommandCategories = (
  variables: GetCommandCategoriesVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponseListCommandCategory,
      GetCommandCategoriesError,
      Schemas.RestResponseListCommandCategory
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponseListCommandCategory,
    GetCommandCategoriesError,
    Schemas.RestResponseListCommandCategory
  >(
    queryKeyFn({ path: '/templates/{templateId}/commands/categories', operationId: 'getCommandCategories', variables }),
    () => fetchGetCommandCategories({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type GetYamlPathParams = {
  templateId: string
  version: string
}

export type GetYamlQueryParams = {
  accountId?: string
  /*
   * @default __GLOBAL_APP_ID__
   */
  appId?: string
}

export type GetYamlError = Fetcher.ErrorWrapper<undefined>

export type GetYamlVariables = {
  pathParams: GetYamlPathParams
  queryParams?: GetYamlQueryParams
} & PortalContext['fetcherOptions']

export const fetchGetYaml = (variables: GetYamlVariables) =>
  portalFetch<Schemas.RestResponseString, GetYamlError, undefined, {}, GetYamlQueryParams, GetYamlPathParams>({
    url: '/templates/{templateId}/versions/{version}/yaml',
    method: 'get',
    ...variables
  })

export const useGetYaml = (
  variables: GetYamlVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.RestResponseString, GetYamlError, Schemas.RestResponseString>,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<Schemas.RestResponseString, GetYamlError, Schemas.RestResponseString>(
    queryKeyFn({ path: '/templates/{templateId}/versions/{version}/yaml', operationId: 'getYaml', variables }),
    () => fetchGetYaml({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type Get45QueryParams = {
  accountId?: string
  viewId?: string
}

export type Get45Error = Fetcher.ErrorWrapper<undefined>

export type Get45Variables = {
  queryParams?: Get45QueryParams
} & PortalContext['fetcherOptions']

export const fetchGet45 = (variables: Get45Variables) =>
  portalFetch<Schemas.RestResponseCEView, Get45Error, undefined, {}, Get45QueryParams, {}>({
    url: '/view',
    method: 'get',
    ...variables
  })

export const useGet45 = (
  variables: Get45Variables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.RestResponseCEView, Get45Error, Schemas.RestResponseCEView>,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<Schemas.RestResponseCEView, Get45Error, Schemas.RestResponseCEView>(
    queryKeyFn({ path: '/view', operationId: 'get45', variables }),
    () => fetchGet45({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type Create8QueryParams = {
  accountId?: string
  clone?: boolean
}

export type Create8Error = Fetcher.ErrorWrapper<undefined>

export type Create8Variables = {
  body?: RequestBodies.CEView
  queryParams?: Create8QueryParams
} & PortalContext['fetcherOptions']

export const fetchCreate8 = (variables: Create8Variables) =>
  portalFetch<Schemas.RestResponseCEView, Create8Error, RequestBodies.CEView, {}, Create8QueryParams, {}>({
    url: '/view',
    method: 'post',
    ...variables
  })

export const useCreate8 = (
  options?: Omit<
    reactQuery.UseMutationOptions<Schemas.RestResponseCEView, Create8Error, Create8Variables>,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<Schemas.RestResponseCEView, Create8Error, Create8Variables>(
    (variables: Create8Variables) => fetchCreate8({ ...fetcherOptions, ...variables }),
    options
  )
}

export type Update39QueryParams = {
  accountId?: string
}

export type Update39Error = Fetcher.ErrorWrapper<undefined>

export type Update39Variables = {
  body?: RequestBodies.CEView
  queryParams?: Update39QueryParams
} & PortalContext['fetcherOptions']

export const fetchUpdate39 = (variables: Update39Variables) =>
  portalFetch<Schemas.RestResponseCEView, Update39Error, RequestBodies.CEView, {}, Update39QueryParams, {}>({
    url: '/view',
    method: 'put',
    ...variables
  })

export const useUpdate39 = (
  options?: Omit<
    reactQuery.UseMutationOptions<Schemas.RestResponseCEView, Update39Error, Update39Variables>,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<Schemas.RestResponseCEView, Update39Error, Update39Variables>(
    (variables: Update39Variables) => fetchUpdate39({ ...fetcherOptions, ...variables }),
    options
  )
}

export type Delete37QueryParams = {
  accountId?: string
  viewId?: string
}

export type Delete37Error = Fetcher.ErrorWrapper<undefined>

export type Delete37Variables = {
  queryParams?: Delete37QueryParams
} & PortalContext['fetcherOptions']

export const fetchDelete37 = (variables: Delete37Variables) =>
  portalFetch<undefined, Delete37Error, undefined, {}, Delete37QueryParams, {}>({
    url: '/view',
    method: 'delete',
    ...variables
  })

export const useDelete37 = (
  options?: Omit<reactQuery.UseMutationOptions<undefined, Delete37Error, Delete37Variables>, 'mutationFn'>
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<undefined, Delete37Error, Delete37Variables>(
    (variables: Delete37Variables) => fetchDelete37({ ...fetcherOptions, ...variables }),
    options
  )
}

export type Get46QueryParams = {
  accountId?: string
  customFieldId?: string
}

export type Get46Error = Fetcher.ErrorWrapper<undefined>

export type Get46Variables = {
  queryParams?: Get46QueryParams
} & PortalContext['fetcherOptions']

export const fetchGet46 = (variables: Get46Variables) =>
  portalFetch<Schemas.RestResponseViewCustomField, Get46Error, undefined, {}, Get46QueryParams, {}>({
    url: '/view-custom-field',
    method: 'get',
    ...variables
  })

export const useGet46 = (
  variables: Get46Variables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.RestResponseViewCustomField, Get46Error, Schemas.RestResponseViewCustomField>,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<Schemas.RestResponseViewCustomField, Get46Error, Schemas.RestResponseViewCustomField>(
    queryKeyFn({ path: '/view-custom-field', operationId: 'get46', variables }),
    () => fetchGet46({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type SaveCustomFieldQueryParams = {
  accountId?: string
}

export type SaveCustomFieldError = Fetcher.ErrorWrapper<undefined>

export type SaveCustomFieldVariables = {
  body?: RequestBodies.ViewCustomField
  queryParams?: SaveCustomFieldQueryParams
} & PortalContext['fetcherOptions']

export const fetchSaveCustomField = (variables: SaveCustomFieldVariables) =>
  portalFetch<
    Schemas.RestResponseViewCustomField,
    SaveCustomFieldError,
    RequestBodies.ViewCustomField,
    {},
    SaveCustomFieldQueryParams,
    {}
  >({ url: '/view-custom-field', method: 'post', ...variables })

export const useSaveCustomField = (
  options?: Omit<
    reactQuery.UseMutationOptions<Schemas.RestResponseViewCustomField, SaveCustomFieldError, SaveCustomFieldVariables>,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<Schemas.RestResponseViewCustomField, SaveCustomFieldError, SaveCustomFieldVariables>(
    (variables: SaveCustomFieldVariables) => fetchSaveCustomField({ ...fetcherOptions, ...variables }),
    options
  )
}

export type Update40QueryParams = {
  accountId?: string
}

export type Update40Error = Fetcher.ErrorWrapper<undefined>

export type Update40Variables = {
  body?: RequestBodies.ViewCustomField
  queryParams?: Update40QueryParams
} & PortalContext['fetcherOptions']

export const fetchUpdate40 = (variables: Update40Variables) =>
  portalFetch<
    Schemas.RestResponseViewCustomField,
    Update40Error,
    RequestBodies.ViewCustomField,
    {},
    Update40QueryParams,
    {}
  >({ url: '/view-custom-field', method: 'put', ...variables })

export const useUpdate40 = (
  options?: Omit<
    reactQuery.UseMutationOptions<Schemas.RestResponseViewCustomField, Update40Error, Update40Variables>,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<Schemas.RestResponseViewCustomField, Update40Error, Update40Variables>(
    (variables: Update40Variables) => fetchUpdate40({ ...fetcherOptions, ...variables }),
    options
  )
}

export type Delete38QueryParams = {
  accountId?: string
  customFieldId?: string
}

export type Delete38Error = Fetcher.ErrorWrapper<undefined>

export type Delete38Variables = {
  body?: RequestBodies.CEView
  queryParams?: Delete38QueryParams
} & PortalContext['fetcherOptions']

export const fetchDelete38 = (variables: Delete38Variables) =>
  portalFetch<undefined, Delete38Error, RequestBodies.CEView, {}, Delete38QueryParams, {}>({
    url: '/view-custom-field',
    method: 'delete',
    ...variables
  })

export const useDelete38 = (
  options?: Omit<reactQuery.UseMutationOptions<undefined, Delete38Error, Delete38Variables>, 'mutationFn'>
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<undefined, Delete38Error, Delete38Variables>(
    (variables: Delete38Variables) => fetchDelete38({ ...fetcherOptions, ...variables }),
    options
  )
}

export type Validate3QueryParams = {
  accountId?: string
}

export type Validate3Error = Fetcher.ErrorWrapper<undefined>

export type Validate3Variables = {
  body?: RequestBodies.ViewCustomField
  queryParams?: Validate3QueryParams
} & PortalContext['fetcherOptions']

export const fetchValidate3 = (variables: Validate3Variables) =>
  portalFetch<undefined, Validate3Error, RequestBodies.ViewCustomField, {}, Validate3QueryParams, {}>({
    url: '/view-custom-field/validate',
    method: 'post',
    ...variables
  })

export const useValidate3 = (
  options?: Omit<reactQuery.UseMutationOptions<undefined, Validate3Error, Validate3Variables>, 'mutationFn'>
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<undefined, Validate3Error, Validate3Variables>(
    (variables: Validate3Variables) => fetchValidate3({ ...fetcherOptions, ...variables }),
    options
  )
}

export type Get47PathParams = {
  accountId: string
}

export type Get47QueryParams = {
  entityId?: string
  type?:
    | 'SETUP'
    | 'APP'
    | 'SERVICE'
    | 'SERVICE_COMMAND'
    | 'CONFIG_FILE'
    | 'ENVIRONMENT'
    | 'CONFIG_FILE_OVERRIDE'
    | 'SETTING'
    | 'WORKFLOW'
    | 'PIPELINE'
    | 'PROVISIONER'
    | 'TRIGGER'
    | 'ARTIFACT_STREAM'
    | 'INFRA_MAPPING'
    | 'INFRA_DEFINITION'
    | 'DEPLOYMENT_SPEC'
    | 'APPLICATION_DEFAULTS'
    | 'ACCOUNT_DEFAULTS'
    | 'NOTIFICATION_GROUP'
    | 'APPLICATION_MANIFEST'
    | 'APPLICATION_MANIFEST_FILE'
    | 'SERVICE_CV_CONFIG'
    | 'TAGS'
    | 'GLOBAL_TEMPLATE_LIBRARY'
    | 'APPLICATION_TEMPLATE_LIBRARY'
    | 'GOVERNANCE_CONFIG'
    | 'EVENT_RULE'
  versionId?: string
}

export type Get47Error = Fetcher.ErrorWrapper<undefined>

export type Get47Variables = {
  pathParams: Get47PathParams
  queryParams?: Get47QueryParams
} & PortalContext['fetcherOptions']

export const fetchGet47 = (variables: Get47Variables) =>
  portalFetch<Schemas.RestResponseYamlHistory, Get47Error, undefined, {}, Get47QueryParams, Get47PathParams>({
    url: '/yaml-history/{accountId}',
    method: 'get',
    ...variables
  })

export const useGet47 = (
  variables: Get47Variables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.RestResponseYamlHistory, Get47Error, Schemas.RestResponseYamlHistory>,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<Schemas.RestResponseYamlHistory, Get47Error, Schemas.RestResponseYamlHistory>(
    queryKeyFn({ path: '/yaml-history/{accountId}', operationId: 'get47', variables }),
    () => fetchGet47({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type Save25PathParams = {
  accountId: string
}

export type Save25QueryParams = {
  entityId?: string
  type?:
    | 'SETUP'
    | 'APP'
    | 'SERVICE'
    | 'SERVICE_COMMAND'
    | 'CONFIG_FILE'
    | 'ENVIRONMENT'
    | 'CONFIG_FILE_OVERRIDE'
    | 'SETTING'
    | 'WORKFLOW'
    | 'PIPELINE'
    | 'PROVISIONER'
    | 'TRIGGER'
    | 'ARTIFACT_STREAM'
    | 'INFRA_MAPPING'
    | 'INFRA_DEFINITION'
    | 'DEPLOYMENT_SPEC'
    | 'APPLICATION_DEFAULTS'
    | 'ACCOUNT_DEFAULTS'
    | 'NOTIFICATION_GROUP'
    | 'APPLICATION_MANIFEST'
    | 'APPLICATION_MANIFEST_FILE'
    | 'SERVICE_CV_CONFIG'
    | 'TAGS'
    | 'GLOBAL_TEMPLATE_LIBRARY'
    | 'APPLICATION_TEMPLATE_LIBRARY'
    | 'GOVERNANCE_CONFIG'
    | 'EVENT_RULE'
}

export type Save25Error = Fetcher.ErrorWrapper<undefined>

export type Save25Variables = {
  body: Schemas.YamlVersion
  pathParams: Save25PathParams
  queryParams?: Save25QueryParams
} & PortalContext['fetcherOptions']

export const fetchSave25 = (variables: Save25Variables) =>
  portalFetch<
    Schemas.RestResponseYamlVersion,
    Save25Error,
    Schemas.YamlVersion,
    {},
    Save25QueryParams,
    Save25PathParams
  >({ url: '/yaml-history/{accountId}', method: 'post', ...variables })

export const useSave25 = (
  options?: Omit<
    reactQuery.UseMutationOptions<Schemas.RestResponseYamlVersion, Save25Error, Save25Variables>,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<Schemas.RestResponseYamlVersion, Save25Error, Save25Variables>(
    (variables: Save25Variables) => fetchSave25({ ...fetcherOptions, ...variables }),
    options
  )
}

export type GetSettingAttributePathParams = {
  uuid: string
}

export type GetSettingAttributeQueryParams = {
  accountId?: string
}

export type GetSettingAttributeError = Fetcher.ErrorWrapper<undefined>

export type GetSettingAttributeVariables = {
  pathParams: GetSettingAttributePathParams
  queryParams?: GetSettingAttributeQueryParams
} & PortalContext['fetcherOptions']

export const fetchGetSettingAttribute = (variables: GetSettingAttributeVariables) =>
  portalFetch<
    Schemas.RestResponseYamlPayload,
    GetSettingAttributeError,
    undefined,
    {},
    GetSettingAttributeQueryParams,
    GetSettingAttributePathParams
  >({ url: '/setup-as-code/yaml/settings/{uuid}', method: 'get', ...variables })

export const useGetSettingAttribute = (
  variables: GetSettingAttributeVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponseYamlPayload,
      GetSettingAttributeError,
      Schemas.RestResponseYamlPayload
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponseYamlPayload,
    GetSettingAttributeError,
    Schemas.RestResponseYamlPayload
  >(
    queryKeyFn({ path: '/setup-as-code/yaml/settings/{uuid}', operationId: 'getSettingAttribute', variables }),
    () => fetchGetSettingAttribute({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type UpdateSettingAttributePathParams = {
  uuid: string
}

export type UpdateSettingAttributeQueryParams = {
  accountId?: string
  type?: string
  /*
   * @default false
   */
  deleteEnabled?: boolean
}

export type UpdateSettingAttributeError = Fetcher.ErrorWrapper<undefined>

export type UpdateSettingAttributeVariables = {
  body?: RequestBodies.YamlPayload
  pathParams: UpdateSettingAttributePathParams
  queryParams?: UpdateSettingAttributeQueryParams
} & PortalContext['fetcherOptions']

export const fetchUpdateSettingAttribute = (variables: UpdateSettingAttributeVariables) =>
  portalFetch<
    Schemas.RestResponseSettingAttribute,
    UpdateSettingAttributeError,
    RequestBodies.YamlPayload,
    {},
    UpdateSettingAttributeQueryParams,
    UpdateSettingAttributePathParams
  >({ url: '/setup-as-code/yaml/settings/{uuid}', method: 'put', ...variables })

export const useUpdateSettingAttribute = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.RestResponseSettingAttribute,
      UpdateSettingAttributeError,
      UpdateSettingAttributeVariables
    >,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<
    Schemas.RestResponseSettingAttribute,
    UpdateSettingAttributeError,
    UpdateSettingAttributeVariables
  >(
    (variables: UpdateSettingAttributeVariables) => fetchUpdateSettingAttribute({ ...fetcherOptions, ...variables }),
    options
  )
}

export type GetArtifactTriggerPathParams = {
  artifactStreamId: string
}

export type GetArtifactTriggerQueryParams = {
  appId?: string
}

export type GetArtifactTriggerError = Fetcher.ErrorWrapper<undefined>

export type GetArtifactTriggerVariables = {
  pathParams: GetArtifactTriggerPathParams
  queryParams?: GetArtifactTriggerQueryParams
} & PortalContext['fetcherOptions']

export const fetchGetArtifactTrigger = (variables: GetArtifactTriggerVariables) =>
  portalFetch<
    Schemas.RestResponseYamlPayload,
    GetArtifactTriggerError,
    undefined,
    {},
    GetArtifactTriggerQueryParams,
    GetArtifactTriggerPathParams
  >({ url: '/setup-as-code/yaml/artifactTriggers/{artifactStreamId}', method: 'get', ...variables })

export const useGetArtifactTrigger = (
  variables: GetArtifactTriggerVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponseYamlPayload,
      GetArtifactTriggerError,
      Schemas.RestResponseYamlPayload
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<Schemas.RestResponseYamlPayload, GetArtifactTriggerError, Schemas.RestResponseYamlPayload>(
    queryKeyFn({
      path: '/setup-as-code/yaml/artifactTriggers/{artifactStreamId}',
      operationId: 'getArtifactTrigger',
      variables
    }),
    () => fetchGetArtifactTrigger({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type UpdateArtifactTriggerPathParams = {
  artifactStreamId: string
}

export type UpdateArtifactTriggerQueryParams = {
  accountId?: string
  appId?: string
}

export type UpdateArtifactTriggerError = Fetcher.ErrorWrapper<undefined>

export type UpdateArtifactTriggerVariables = {
  body?: RequestBodies.YamlPayload
  pathParams: UpdateArtifactTriggerPathParams
  queryParams?: UpdateArtifactTriggerQueryParams
} & PortalContext['fetcherOptions']

export const fetchUpdateArtifactTrigger = (variables: UpdateArtifactTriggerVariables) =>
  portalFetch<
    Schemas.RestResponseArtifactStream,
    UpdateArtifactTriggerError,
    RequestBodies.YamlPayload,
    {},
    UpdateArtifactTriggerQueryParams,
    UpdateArtifactTriggerPathParams
  >({ url: '/setup-as-code/yaml/artifactTriggers/{artifactStreamId}', method: 'put', ...variables })

export const useUpdateArtifactTrigger = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.RestResponseArtifactStream,
      UpdateArtifactTriggerError,
      UpdateArtifactTriggerVariables
    >,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<
    Schemas.RestResponseArtifactStream,
    UpdateArtifactTriggerError,
    UpdateArtifactTriggerVariables
  >(
    (variables: UpdateArtifactTriggerVariables) => fetchUpdateArtifactTrigger({ ...fetcherOptions, ...variables }),
    options
  )
}

export type GetTriggerPathParams = {
  triggerId: string
}

export type GetTriggerQueryParams = {
  appId?: string
}

export type GetTriggerError = Fetcher.ErrorWrapper<undefined>

export type GetTriggerVariables = {
  pathParams: GetTriggerPathParams
  queryParams?: GetTriggerQueryParams
} & PortalContext['fetcherOptions']

export const fetchGetTrigger = (variables: GetTriggerVariables) =>
  portalFetch<
    Schemas.RestResponseYamlPayload,
    GetTriggerError,
    undefined,
    {},
    GetTriggerQueryParams,
    GetTriggerPathParams
  >({ url: '/setup-as-code/yaml/triggers/{triggerId}', method: 'get', ...variables })

export const useGetTrigger = (
  variables: GetTriggerVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.RestResponseYamlPayload, GetTriggerError, Schemas.RestResponseYamlPayload>,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<Schemas.RestResponseYamlPayload, GetTriggerError, Schemas.RestResponseYamlPayload>(
    queryKeyFn({ path: '/setup-as-code/yaml/triggers/{triggerId}', operationId: 'getTrigger', variables }),
    () => fetchGetTrigger({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type UpdateTriggerPathParams = {
  triggerId: string
}

export type UpdateTriggerQueryParams = {
  appId?: string
  accountId?: string
  /*
   * @default false
   */
  deleteEnabled?: boolean
}

export type UpdateTriggerError = Fetcher.ErrorWrapper<undefined>

export type UpdateTriggerVariables = {
  body?: RequestBodies.YamlPayload
  pathParams: UpdateTriggerPathParams
  queryParams?: UpdateTriggerQueryParams
} & PortalContext['fetcherOptions']

export const fetchUpdateTrigger = (variables: UpdateTriggerVariables) =>
  portalFetch<
    Schemas.RestResponseBase,
    UpdateTriggerError,
    RequestBodies.YamlPayload,
    {},
    UpdateTriggerQueryParams,
    UpdateTriggerPathParams
  >({ url: '/setup-as-code/yaml/triggers/{triggerId}', method: 'put', ...variables })

export const useUpdateTrigger = (
  options?: Omit<
    reactQuery.UseMutationOptions<Schemas.RestResponseBase, UpdateTriggerError, UpdateTriggerVariables>,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<Schemas.RestResponseBase, UpdateTriggerError, UpdateTriggerVariables>(
    (variables: UpdateTriggerVariables) => fetchUpdateTrigger({ ...fetcherOptions, ...variables }),
    options
  )
}

export type GetPipelinePathParams = {
  pipelineId: string
}

export type GetPipelineQueryParams = {
  appId?: string
}

export type GetPipelineError = Fetcher.ErrorWrapper<undefined>

export type GetPipelineVariables = {
  pathParams: GetPipelinePathParams
  queryParams?: GetPipelineQueryParams
} & PortalContext['fetcherOptions']

export const fetchGetPipeline = (variables: GetPipelineVariables) =>
  portalFetch<
    Schemas.RestResponseYamlPayload,
    GetPipelineError,
    undefined,
    {},
    GetPipelineQueryParams,
    GetPipelinePathParams
  >({ url: '/setup-as-code/yaml/pipelines/{pipelineId}', method: 'get', ...variables })

export const useGetPipeline = (
  variables: GetPipelineVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.RestResponseYamlPayload, GetPipelineError, Schemas.RestResponseYamlPayload>,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<Schemas.RestResponseYamlPayload, GetPipelineError, Schemas.RestResponseYamlPayload>(
    queryKeyFn({ path: '/setup-as-code/yaml/pipelines/{pipelineId}', operationId: 'getPipeline', variables }),
    () => fetchGetPipeline({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type UpdatePipelinePathParams = {
  pipelineId: string
}

export type UpdatePipelineQueryParams = {
  accountId?: string
  appId?: string
}

export type UpdatePipelineError = Fetcher.ErrorWrapper<undefined>

export type UpdatePipelineVariables = {
  body?: RequestBodies.YamlPayload
  pathParams: UpdatePipelinePathParams
  queryParams?: UpdatePipelineQueryParams
} & PortalContext['fetcherOptions']

export const fetchUpdatePipeline = (variables: UpdatePipelineVariables) =>
  portalFetch<
    Schemas.RestResponsePipeline,
    UpdatePipelineError,
    RequestBodies.YamlPayload,
    {},
    UpdatePipelineQueryParams,
    UpdatePipelinePathParams
  >({ url: '/setup-as-code/yaml/pipelines/{pipelineId}', method: 'put', ...variables })

export const useUpdatePipeline = (
  options?: Omit<
    reactQuery.UseMutationOptions<Schemas.RestResponsePipeline, UpdatePipelineError, UpdatePipelineVariables>,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<Schemas.RestResponsePipeline, UpdatePipelineError, UpdatePipelineVariables>(
    (variables: UpdatePipelineVariables) => fetchUpdatePipeline({ ...fetcherOptions, ...variables }),
    options
  )
}

export type GetWorkflowPathParams = {
  workflowId: string
}

export type GetWorkflowQueryParams = {
  appId?: string
}

export type GetWorkflowError = Fetcher.ErrorWrapper<undefined>

export type GetWorkflowVariables = {
  pathParams: GetWorkflowPathParams
  queryParams?: GetWorkflowQueryParams
} & PortalContext['fetcherOptions']

export const fetchGetWorkflow = (variables: GetWorkflowVariables) =>
  portalFetch<
    Schemas.RestResponseYamlPayload,
    GetWorkflowError,
    undefined,
    {},
    GetWorkflowQueryParams,
    GetWorkflowPathParams
  >({ url: '/setup-as-code/yaml/workflows/{workflowId}', method: 'get', ...variables })

export const useGetWorkflow = (
  variables: GetWorkflowVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.RestResponseYamlPayload, GetWorkflowError, Schemas.RestResponseYamlPayload>,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<Schemas.RestResponseYamlPayload, GetWorkflowError, Schemas.RestResponseYamlPayload>(
    queryKeyFn({ path: '/setup-as-code/yaml/workflows/{workflowId}', operationId: 'getWorkflow', variables }),
    () => fetchGetWorkflow({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type UpdateWorkflowPathParams = {
  workflowId: string
}

export type UpdateWorkflowQueryParams = {
  accountId?: string
  appId?: string
}

export type UpdateWorkflowError = Fetcher.ErrorWrapper<undefined>

export type UpdateWorkflowVariables = {
  body?: RequestBodies.YamlPayload
  pathParams: UpdateWorkflowPathParams
  queryParams?: UpdateWorkflowQueryParams
} & PortalContext['fetcherOptions']

export const fetchUpdateWorkflow = (variables: UpdateWorkflowVariables) =>
  portalFetch<
    Schemas.RestResponseWorkflow,
    UpdateWorkflowError,
    RequestBodies.YamlPayload,
    {},
    UpdateWorkflowQueryParams,
    UpdateWorkflowPathParams
  >({ url: '/setup-as-code/yaml/workflows/{workflowId}', method: 'put', ...variables })

export const useUpdateWorkflow = (
  options?: Omit<
    reactQuery.UseMutationOptions<Schemas.RestResponseWorkflow, UpdateWorkflowError, UpdateWorkflowVariables>,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<Schemas.RestResponseWorkflow, UpdateWorkflowError, UpdateWorkflowVariables>(
    (variables: UpdateWorkflowVariables) => fetchUpdateWorkflow({ ...fetcherOptions, ...variables }),
    options
  )
}

export type GetInfraMappingPathParams = {
  infraMappingId: string
}

export type GetInfraMappingQueryParams = {
  appId?: string
  accountId?: string
}

export type GetInfraMappingError = Fetcher.ErrorWrapper<undefined>

export type GetInfraMappingVariables = {
  pathParams: GetInfraMappingPathParams
  queryParams?: GetInfraMappingQueryParams
} & PortalContext['fetcherOptions']

export const fetchGetInfraMapping = (variables: GetInfraMappingVariables) =>
  portalFetch<
    Schemas.RestResponseYamlPayload,
    GetInfraMappingError,
    undefined,
    {},
    GetInfraMappingQueryParams,
    GetInfraMappingPathParams
  >({ url: '/setup-as-code/yaml/infrastructuremappings/{infraMappingId}', method: 'get', ...variables })

export const useGetInfraMapping = (
  variables: GetInfraMappingVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.RestResponseYamlPayload, GetInfraMappingError, Schemas.RestResponseYamlPayload>,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<Schemas.RestResponseYamlPayload, GetInfraMappingError, Schemas.RestResponseYamlPayload>(
    queryKeyFn({
      path: '/setup-as-code/yaml/infrastructuremappings/{infraMappingId}',
      operationId: 'getInfraMapping',
      variables
    }),
    () => fetchGetInfraMapping({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type UpdateInfraMappingPathParams = {
  infraMappingId: string
}

export type UpdateInfraMappingQueryParams = {
  appId?: string
  accountId?: string
  /*
   * @default false
   */
  deleteEnabled?: boolean
}

export type UpdateInfraMappingError = Fetcher.ErrorWrapper<undefined>

export type UpdateInfraMappingVariables = {
  body?: RequestBodies.YamlPayload
  pathParams: UpdateInfraMappingPathParams
  queryParams?: UpdateInfraMappingQueryParams
} & PortalContext['fetcherOptions']

export const fetchUpdateInfraMapping = (variables: UpdateInfraMappingVariables) =>
  portalFetch<
    Schemas.RestResponseBase,
    UpdateInfraMappingError,
    RequestBodies.YamlPayload,
    {},
    UpdateInfraMappingQueryParams,
    UpdateInfraMappingPathParams
  >({ url: '/setup-as-code/yaml/infrastructuremappings/{infraMappingId}', method: 'put', ...variables })

export const useUpdateInfraMapping = (
  options?: Omit<
    reactQuery.UseMutationOptions<Schemas.RestResponseBase, UpdateInfraMappingError, UpdateInfraMappingVariables>,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<Schemas.RestResponseBase, UpdateInfraMappingError, UpdateInfraMappingVariables>(
    (variables: UpdateInfraMappingVariables) => fetchUpdateInfraMapping({ ...fetcherOptions, ...variables }),
    options
  )
}

export type GetHelmChartSpecificationPathParams = {
  helmChartSpecificationId: string
}

export type GetHelmChartSpecificationQueryParams = {
  appId?: string
  accountId?: string
}

export type GetHelmChartSpecificationError = Fetcher.ErrorWrapper<undefined>

export type GetHelmChartSpecificationVariables = {
  pathParams: GetHelmChartSpecificationPathParams
  queryParams?: GetHelmChartSpecificationQueryParams
} & PortalContext['fetcherOptions']

export const fetchGetHelmChartSpecification = (variables: GetHelmChartSpecificationVariables) =>
  portalFetch<
    Schemas.RestResponseYamlPayload,
    GetHelmChartSpecificationError,
    undefined,
    {},
    GetHelmChartSpecificationQueryParams,
    GetHelmChartSpecificationPathParams
  >({ url: '/setup-as-code/yaml/helm-charts/{helmChartSpecificationId}', method: 'get', ...variables })

export const useGetHelmChartSpecification = (
  variables: GetHelmChartSpecificationVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponseYamlPayload,
      GetHelmChartSpecificationError,
      Schemas.RestResponseYamlPayload
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponseYamlPayload,
    GetHelmChartSpecificationError,
    Schemas.RestResponseYamlPayload
  >(
    queryKeyFn({
      path: '/setup-as-code/yaml/helm-charts/{helmChartSpecificationId}',
      operationId: 'getHelmChartSpecification',
      variables
    }),
    () => fetchGetHelmChartSpecification({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type UpdateHelmChartSpecification1PathParams = {
  helmChartSpecificationId: string
}

export type UpdateHelmChartSpecification1QueryParams = {
  appId?: string
  accountId?: string
  /*
   * @default false
   */
  deleteEnabled?: boolean
}

export type UpdateHelmChartSpecification1Error = Fetcher.ErrorWrapper<undefined>

export type UpdateHelmChartSpecification1Variables = {
  body?: RequestBodies.YamlPayload
  pathParams: UpdateHelmChartSpecification1PathParams
  queryParams?: UpdateHelmChartSpecification1QueryParams
} & PortalContext['fetcherOptions']

export const fetchUpdateHelmChartSpecification1 = (variables: UpdateHelmChartSpecification1Variables) =>
  portalFetch<
    Schemas.RestResponseBase,
    UpdateHelmChartSpecification1Error,
    RequestBodies.YamlPayload,
    {},
    UpdateHelmChartSpecification1QueryParams,
    UpdateHelmChartSpecification1PathParams
  >({ url: '/setup-as-code/yaml/helm-charts/{helmChartSpecificationId}', method: 'put', ...variables })

export const useUpdateHelmChartSpecification1 = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.RestResponseBase,
      UpdateHelmChartSpecification1Error,
      UpdateHelmChartSpecification1Variables
    >,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<
    Schemas.RestResponseBase,
    UpdateHelmChartSpecification1Error,
    UpdateHelmChartSpecification1Variables
  >(
    (variables: UpdateHelmChartSpecification1Variables) =>
      fetchUpdateHelmChartSpecification1({ ...fetcherOptions, ...variables }),
    options
  )
}

export type GetUserDataSpecPathParams = {
  userDataSpecId: string
}

export type GetUserDataSpecQueryParams = {
  appId?: string
  accountId?: string
}

export type GetUserDataSpecError = Fetcher.ErrorWrapper<undefined>

export type GetUserDataSpecVariables = {
  pathParams: GetUserDataSpecPathParams
  queryParams?: GetUserDataSpecQueryParams
} & PortalContext['fetcherOptions']

export const fetchGetUserDataSpec = (variables: GetUserDataSpecVariables) =>
  portalFetch<
    Schemas.RestResponseYamlPayload,
    GetUserDataSpecError,
    undefined,
    {},
    GetUserDataSpecQueryParams,
    GetUserDataSpecPathParams
  >({ url: '/setup-as-code/yaml/user-data-specs/{userDataSpecId}', method: 'get', ...variables })

export const useGetUserDataSpec = (
  variables: GetUserDataSpecVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.RestResponseYamlPayload, GetUserDataSpecError, Schemas.RestResponseYamlPayload>,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<Schemas.RestResponseYamlPayload, GetUserDataSpecError, Schemas.RestResponseYamlPayload>(
    queryKeyFn({
      path: '/setup-as-code/yaml/user-data-specs/{userDataSpecId}',
      operationId: 'getUserDataSpec',
      variables
    }),
    () => fetchGetUserDataSpec({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type UpdateUserDataSpecPathParams = {
  userDataSpecId: string
}

export type UpdateUserDataSpecQueryParams = {
  appId?: string
  accountId?: string
  /*
   * @default false
   */
  deleteEnabled?: boolean
}

export type UpdateUserDataSpecError = Fetcher.ErrorWrapper<undefined>

export type UpdateUserDataSpecVariables = {
  body?: RequestBodies.YamlPayload
  pathParams: UpdateUserDataSpecPathParams
  queryParams?: UpdateUserDataSpecQueryParams
} & PortalContext['fetcherOptions']

export const fetchUpdateUserDataSpec = (variables: UpdateUserDataSpecVariables) =>
  portalFetch<
    Schemas.RestResponseBase,
    UpdateUserDataSpecError,
    RequestBodies.YamlPayload,
    {},
    UpdateUserDataSpecQueryParams,
    UpdateUserDataSpecPathParams
  >({ url: '/setup-as-code/yaml/user-data-specs/{userDataSpecId}', method: 'put', ...variables })

export const useUpdateUserDataSpec = (
  options?: Omit<
    reactQuery.UseMutationOptions<Schemas.RestResponseBase, UpdateUserDataSpecError, UpdateUserDataSpecVariables>,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<Schemas.RestResponseBase, UpdateUserDataSpecError, UpdateUserDataSpecVariables>(
    (variables: UpdateUserDataSpecVariables) => fetchUpdateUserDataSpec({ ...fetcherOptions, ...variables }),
    options
  )
}

export type GetNotificationGroupPathParams = {
  notificationGroupId: string
}

export type GetNotificationGroupQueryParams = {
  accountId?: string
}

export type GetNotificationGroupError = Fetcher.ErrorWrapper<undefined>

export type GetNotificationGroupVariables = {
  pathParams: GetNotificationGroupPathParams
  queryParams?: GetNotificationGroupQueryParams
} & PortalContext['fetcherOptions']

export const fetchGetNotificationGroup = (variables: GetNotificationGroupVariables) =>
  portalFetch<
    Schemas.RestResponseYamlPayload,
    GetNotificationGroupError,
    undefined,
    {},
    GetNotificationGroupQueryParams,
    GetNotificationGroupPathParams
  >({ url: '/setup-as-code/yaml/notification-groups/{notificationGroupId}', method: 'get', ...variables })

export const useGetNotificationGroup = (
  variables: GetNotificationGroupVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponseYamlPayload,
      GetNotificationGroupError,
      Schemas.RestResponseYamlPayload
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponseYamlPayload,
    GetNotificationGroupError,
    Schemas.RestResponseYamlPayload
  >(
    queryKeyFn({
      path: '/setup-as-code/yaml/notification-groups/{notificationGroupId}',
      operationId: 'getNotificationGroup',
      variables
    }),
    () => fetchGetNotificationGroup({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type GetTemplateLibraryPathParams = {
  templateId: string
}

export type GetTemplateLibraryQueryParams = {
  accountId?: string
  /*
   * @default __GLOBAL_APP_ID__
   */
  appId?: string
}

export type GetTemplateLibraryError = Fetcher.ErrorWrapper<undefined>

export type GetTemplateLibraryVariables = {
  pathParams: GetTemplateLibraryPathParams
  queryParams?: GetTemplateLibraryQueryParams
} & PortalContext['fetcherOptions']

export const fetchGetTemplateLibrary = (variables: GetTemplateLibraryVariables) =>
  portalFetch<
    Schemas.RestResponseYamlPayload,
    GetTemplateLibraryError,
    undefined,
    {},
    GetTemplateLibraryQueryParams,
    GetTemplateLibraryPathParams
  >({ url: '/setup-as-code/yaml/templates/{templateId}', method: 'get', ...variables })

export const useGetTemplateLibrary = (
  variables: GetTemplateLibraryVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponseYamlPayload,
      GetTemplateLibraryError,
      Schemas.RestResponseYamlPayload
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<Schemas.RestResponseYamlPayload, GetTemplateLibraryError, Schemas.RestResponseYamlPayload>(
    queryKeyFn({ path: '/setup-as-code/yaml/templates/{templateId}', operationId: 'getTemplateLibrary', variables }),
    () => fetchGetTemplateLibrary({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type UpdateTemplatePathParams = {
  templateId: string
}

export type UpdateTemplateQueryParams = {
  accountId?: string
  /*
   * @default __GLOBAL_APP_ID__
   */
  appId?: string
}

export type UpdateTemplateError = Fetcher.ErrorWrapper<undefined>

export type UpdateTemplateVariables = {
  body?: RequestBodies.YamlPayload
  pathParams: UpdateTemplatePathParams
  queryParams?: UpdateTemplateQueryParams
} & PortalContext['fetcherOptions']

export const fetchUpdateTemplate = (variables: UpdateTemplateVariables) =>
  portalFetch<
    Schemas.RestResponseTemplate,
    UpdateTemplateError,
    RequestBodies.YamlPayload,
    {},
    UpdateTemplateQueryParams,
    UpdateTemplatePathParams
  >({ url: '/setup-as-code/yaml/templates/{templateId}', method: 'put', ...variables })

export const useUpdateTemplate = (
  options?: Omit<
    reactQuery.UseMutationOptions<Schemas.RestResponseTemplate, UpdateTemplateError, UpdateTemplateVariables>,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<Schemas.RestResponseTemplate, UpdateTemplateError, UpdateTemplateVariables>(
    (variables: UpdateTemplateVariables) => fetchUpdateTemplate({ ...fetcherOptions, ...variables }),
    options
  )
}

export type GetProvisionerPathParams = {
  infraProvisionerId: string
}

export type GetProvisionerQueryParams = {
  appId?: string
}

export type GetProvisionerError = Fetcher.ErrorWrapper<undefined>

export type GetProvisionerVariables = {
  pathParams: GetProvisionerPathParams
  queryParams?: GetProvisionerQueryParams
} & PortalContext['fetcherOptions']

export const fetchGetProvisioner = (variables: GetProvisionerVariables) =>
  portalFetch<
    Schemas.RestResponseYamlPayload,
    GetProvisionerError,
    undefined,
    {},
    GetProvisionerQueryParams,
    GetProvisionerPathParams
  >({ url: '/setup-as-code/yaml/infrastructureprovisioners/{infraProvisionerId}', method: 'get', ...variables })

export const useGetProvisioner = (
  variables: GetProvisionerVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.RestResponseYamlPayload, GetProvisionerError, Schemas.RestResponseYamlPayload>,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<Schemas.RestResponseYamlPayload, GetProvisionerError, Schemas.RestResponseYamlPayload>(
    queryKeyFn({
      path: '/setup-as-code/yaml/infrastructureprovisioners/{infraProvisionerId}',
      operationId: 'getProvisioner',
      variables
    }),
    () => fetchGetProvisioner({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type UpdateProvisionerPathParams = {
  infraProvisionerId: string
}

export type UpdateProvisionerQueryParams = {
  accountId?: string
  appId?: string
}

export type UpdateProvisionerError = Fetcher.ErrorWrapper<undefined>

export type UpdateProvisionerVariables = {
  body?: RequestBodies.YamlPayload
  pathParams: UpdateProvisionerPathParams
  queryParams?: UpdateProvisionerQueryParams
} & PortalContext['fetcherOptions']

export const fetchUpdateProvisioner = (variables: UpdateProvisionerVariables) =>
  portalFetch<
    Schemas.RestResponseInfrastructureProvisioner,
    UpdateProvisionerError,
    RequestBodies.YamlPayload,
    {},
    UpdateProvisionerQueryParams,
    UpdateProvisionerPathParams
  >({ url: '/setup-as-code/yaml/infrastructureprovisioners/{infraProvisionerId}', method: 'put', ...variables })

export const useUpdateProvisioner = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.RestResponseInfrastructureProvisioner,
      UpdateProvisionerError,
      UpdateProvisionerVariables
    >,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<
    Schemas.RestResponseInfrastructureProvisioner,
    UpdateProvisionerError,
    UpdateProvisionerVariables
  >((variables: UpdateProvisionerVariables) => fetchUpdateProvisioner({ ...fetcherOptions, ...variables }), options)
}

export type GetCVConfigurationPathParams = {
  cvConfigId: string
}

export type GetCVConfigurationQueryParams = {
  appId?: string
}

export type GetCVConfigurationError = Fetcher.ErrorWrapper<undefined>

export type GetCVConfigurationVariables = {
  pathParams: GetCVConfigurationPathParams
  queryParams?: GetCVConfigurationQueryParams
} & PortalContext['fetcherOptions']

export const fetchGetCVConfiguration = (variables: GetCVConfigurationVariables) =>
  portalFetch<
    Schemas.RestResponseYamlPayload,
    GetCVConfigurationError,
    undefined,
    {},
    GetCVConfigurationQueryParams,
    GetCVConfigurationPathParams
  >({ url: '/setup-as-code/yaml/cvconfigurations/{cvConfigId}', method: 'get', ...variables })

export const useGetCVConfiguration = (
  variables: GetCVConfigurationVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponseYamlPayload,
      GetCVConfigurationError,
      Schemas.RestResponseYamlPayload
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<Schemas.RestResponseYamlPayload, GetCVConfigurationError, Schemas.RestResponseYamlPayload>(
    queryKeyFn({
      path: '/setup-as-code/yaml/cvconfigurations/{cvConfigId}',
      operationId: 'getCVConfiguration',
      variables
    }),
    () => fetchGetCVConfiguration({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type UpdateCVConfiguration1PathParams = {
  cvConfigId: string
}

export type UpdateCVConfiguration1QueryParams = {
  appId?: string
  accountId?: string
}

export type UpdateCVConfiguration1Error = Fetcher.ErrorWrapper<undefined>

export type UpdateCVConfiguration1Variables = {
  body?: RequestBodies.YamlPayload
  pathParams: UpdateCVConfiguration1PathParams
  queryParams?: UpdateCVConfiguration1QueryParams
} & PortalContext['fetcherOptions']

export const fetchUpdateCVConfiguration1 = (variables: UpdateCVConfiguration1Variables) =>
  portalFetch<
    Schemas.RestResponseBase,
    UpdateCVConfiguration1Error,
    RequestBodies.YamlPayload,
    {},
    UpdateCVConfiguration1QueryParams,
    UpdateCVConfiguration1PathParams
  >({ url: '/setup-as-code/yaml/cvconfigurations/{cvConfigId}', method: 'put', ...variables })

export const useUpdateCVConfiguration1 = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.RestResponseBase,
      UpdateCVConfiguration1Error,
      UpdateCVConfiguration1Variables
    >,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<Schemas.RestResponseBase, UpdateCVConfiguration1Error, UpdateCVConfiguration1Variables>(
    (variables: UpdateCVConfiguration1Variables) => fetchUpdateCVConfiguration1({ ...fetcherOptions, ...variables }),
    options
  )
}

export type GetGovernanceConfigQueryParams = {
  accountId?: string
}

export type GetGovernanceConfigError = Fetcher.ErrorWrapper<undefined>

export type GetGovernanceConfigVariables = {
  queryParams?: GetGovernanceConfigQueryParams
} & PortalContext['fetcherOptions']

export const fetchGetGovernanceConfig = (variables: GetGovernanceConfigVariables) =>
  portalFetch<
    Schemas.RestResponseYamlPayload,
    GetGovernanceConfigError,
    undefined,
    {},
    GetGovernanceConfigQueryParams,
    {}
  >({ url: '/setup-as-code/yaml/compliance-config/{accountId}', method: 'get', ...variables })

export const useGetGovernanceConfig = (
  variables: GetGovernanceConfigVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponseYamlPayload,
      GetGovernanceConfigError,
      Schemas.RestResponseYamlPayload
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponseYamlPayload,
    GetGovernanceConfigError,
    Schemas.RestResponseYamlPayload
  >(
    queryKeyFn({
      path: '/setup-as-code/yaml/compliance-config/{accountId}',
      operationId: 'getGovernanceConfig',
      variables
    }),
    () => fetchGetGovernanceConfig({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type Get48PathParams = {
  entityId: string
}

export type Get48QueryParams = {
  accountId?: string
  entityType?:
    | 'SERVICE'
    | 'PROVISIONER'
    | 'ENVIRONMENT'
    | 'HOST'
    | 'RELEASE'
    | 'ARTIFACT'
    | 'SSH_USER'
    | 'SSH_PASSWORD'
    | 'SSH_APP_ACCOUNT'
    | 'SSH_KEY_PASSPHRASE'
    | 'SSH_APP_ACCOUNT_PASSOWRD'
    | 'SIMPLE_DEPLOYMENT'
    | 'ORCHESTRATED_DEPLOYMENT'
    | 'PIPELINE'
    | 'WORKFLOW'
    | 'DEPLOYMENT'
    | 'INSTANCE'
    | 'APPLICATION'
    | 'COMMAND'
    | 'CONFIG'
    | 'SERVICE_TEMPLATE'
    | 'INFRASTRUCTURE_MAPPING'
    | 'INFRASTRUCTURE_DEFINITION'
    | 'USER'
    | 'ARTIFACT_STREAM'
    | 'APPDYNAMICS_CONFIGID'
    | 'APPDYNAMICS_APPID'
    | 'APPDYNAMICS_TIERID'
    | 'ELK_CONFIGID'
    | 'ELK_INDICES'
    | 'NEWRELIC_CONFIGID'
    | 'NEWRELIC_APPID'
    | 'SS_SSH_CONNECTION_ATTRIBUTE'
    | 'SS_WINRM_CONNECTION_ATTRIBUTE'
    | 'SUMOLOGIC_CONFIGID'
    | 'SPLUNK_CONFIGID'
    | 'NEWRELIC_MARKER_CONFIGID'
    | 'NEWRELIC_MARKER_APPID'
    | 'API_KEY'
    | 'ACCOUNT'
    | 'APPLICATION_MANIFEST'
    | 'USER_GROUP'
    | 'WHITELISTED_IP'
    | 'CF_AWS_CONFIG_ID'
    | 'VERIFICATION_CONFIGURATION'
    | 'HELM_GIT_CONFIG_ID'
    | 'NOTIFICATION_GROUP'
    | 'HELM_CHART_SPECIFICATION'
    | 'PCF_SERVICE_SPECIFICATION'
    | 'LAMBDA_SPECIFICATION'
    | 'USER_DATA_SPECIFICATION'
    | 'ECS_CONTAINER_SPECIFICATION'
    | 'ECS_SERVICE_SPECIFICATION'
    | 'K8S_CONTAINER_SPECIFICATION'
    | 'CONFIG_FILE'
    | 'SERVICE_COMMAND'
    | 'MANIFEST_FILE'
    | 'SERVICE_VARIABLE'
    | 'TRIGGER'
    | 'ROLE'
    | 'TEMPLATE'
    | 'TEMPLATE_FOLDER'
    | 'SETTING_ATTRIBUTE'
    | 'ENCRYPTED_RECORDS'
    | 'CV_CONFIGURATION'
    | 'TAG'
    | 'CUSTOM_DASHBOARD'
    | 'PIPELINE_GOVERNANCE_STANDARD'
    | 'WORKFLOW_EXECUTION'
    | 'SERVERLESS_INSTANCE'
    | 'USER_INVITE'
    | 'LOGIN_SETTINGS'
    | 'SSO_SETTINGS'
    | 'DELEGATE'
    | 'DELEGATE_SCOPE'
    | 'DELEGATE_PROFILE'
    | 'EXPORT_EXECUTIONS_REQUEST'
    | 'GCP_CONFIG'
    | 'GIT_CONFIG'
    | 'JENKINS_SERVER'
    | 'SECRETS_MANAGER'
    | 'HELM_CHART'
    | 'SECRET'
    | 'CONNECTOR'
    | 'CLOUD_PROVIDER'
    | 'GOVERNANCE_FREEZE_CONFIG'
    | 'GOVERNANCE_CONFIG'
    | 'EVENT_RULE'
}

export type Get48Error = Fetcher.ErrorWrapper<undefined>

export type Get48Variables = {
  pathParams: Get48PathParams
  queryParams?: Get48QueryParams
} & PortalContext['fetcherOptions']

export const fetchGet48 = (variables: Get48Variables) =>
  portalFetch<Schemas.RestResponseYamlGitConfig, Get48Error, undefined, {}, Get48QueryParams, Get48PathParams>({
    url: '/setup-as-code/yaml/git-config/{entityId}',
    method: 'get',
    ...variables
  })

export const useGet48 = (
  variables: Get48Variables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.RestResponseYamlGitConfig, Get48Error, Schemas.RestResponseYamlGitConfig>,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<Schemas.RestResponseYamlGitConfig, Get48Error, Schemas.RestResponseYamlGitConfig>(
    queryKeyFn({ path: '/setup-as-code/yaml/git-config/{entityId}', operationId: 'get48', variables }),
    () => fetchGet48({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type UpdateGitConfigQueryParams = {
  accountId?: string
}

export type UpdateGitConfigError = Fetcher.ErrorWrapper<undefined>

export type UpdateGitConfigVariables = {
  body: RequestBodies.YamlGitConfig
  queryParams?: UpdateGitConfigQueryParams
} & PortalContext['fetcherOptions']

export const fetchUpdateGitConfig = (variables: UpdateGitConfigVariables) =>
  portalFetch<
    Schemas.RestResponseYamlGitConfig,
    UpdateGitConfigError,
    RequestBodies.YamlGitConfig,
    {},
    UpdateGitConfigQueryParams,
    {}
  >({ url: '/setup-as-code/yaml/git-config/{entityId}', method: 'put', ...variables })

export const useUpdateGitConfig = (
  options?: Omit<
    reactQuery.UseMutationOptions<Schemas.RestResponseYamlGitConfig, UpdateGitConfigError, UpdateGitConfigVariables>,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<Schemas.RestResponseYamlGitConfig, UpdateGitConfigError, UpdateGitConfigVariables>(
    (variables: UpdateGitConfigVariables) => fetchUpdateGitConfig({ ...fetcherOptions, ...variables }),
    options
  )
}

export type Delete39PathParams = {
  entityId: string
}

export type Delete39QueryParams = {
  accountId?: string
  entityType?:
    | 'SERVICE'
    | 'PROVISIONER'
    | 'ENVIRONMENT'
    | 'HOST'
    | 'RELEASE'
    | 'ARTIFACT'
    | 'SSH_USER'
    | 'SSH_PASSWORD'
    | 'SSH_APP_ACCOUNT'
    | 'SSH_KEY_PASSPHRASE'
    | 'SSH_APP_ACCOUNT_PASSOWRD'
    | 'SIMPLE_DEPLOYMENT'
    | 'ORCHESTRATED_DEPLOYMENT'
    | 'PIPELINE'
    | 'WORKFLOW'
    | 'DEPLOYMENT'
    | 'INSTANCE'
    | 'APPLICATION'
    | 'COMMAND'
    | 'CONFIG'
    | 'SERVICE_TEMPLATE'
    | 'INFRASTRUCTURE_MAPPING'
    | 'INFRASTRUCTURE_DEFINITION'
    | 'USER'
    | 'ARTIFACT_STREAM'
    | 'APPDYNAMICS_CONFIGID'
    | 'APPDYNAMICS_APPID'
    | 'APPDYNAMICS_TIERID'
    | 'ELK_CONFIGID'
    | 'ELK_INDICES'
    | 'NEWRELIC_CONFIGID'
    | 'NEWRELIC_APPID'
    | 'SS_SSH_CONNECTION_ATTRIBUTE'
    | 'SS_WINRM_CONNECTION_ATTRIBUTE'
    | 'SUMOLOGIC_CONFIGID'
    | 'SPLUNK_CONFIGID'
    | 'NEWRELIC_MARKER_CONFIGID'
    | 'NEWRELIC_MARKER_APPID'
    | 'API_KEY'
    | 'ACCOUNT'
    | 'APPLICATION_MANIFEST'
    | 'USER_GROUP'
    | 'WHITELISTED_IP'
    | 'CF_AWS_CONFIG_ID'
    | 'VERIFICATION_CONFIGURATION'
    | 'HELM_GIT_CONFIG_ID'
    | 'NOTIFICATION_GROUP'
    | 'HELM_CHART_SPECIFICATION'
    | 'PCF_SERVICE_SPECIFICATION'
    | 'LAMBDA_SPECIFICATION'
    | 'USER_DATA_SPECIFICATION'
    | 'ECS_CONTAINER_SPECIFICATION'
    | 'ECS_SERVICE_SPECIFICATION'
    | 'K8S_CONTAINER_SPECIFICATION'
    | 'CONFIG_FILE'
    | 'SERVICE_COMMAND'
    | 'MANIFEST_FILE'
    | 'SERVICE_VARIABLE'
    | 'TRIGGER'
    | 'ROLE'
    | 'TEMPLATE'
    | 'TEMPLATE_FOLDER'
    | 'SETTING_ATTRIBUTE'
    | 'ENCRYPTED_RECORDS'
    | 'CV_CONFIGURATION'
    | 'TAG'
    | 'CUSTOM_DASHBOARD'
    | 'PIPELINE_GOVERNANCE_STANDARD'
    | 'WORKFLOW_EXECUTION'
    | 'SERVERLESS_INSTANCE'
    | 'USER_INVITE'
    | 'LOGIN_SETTINGS'
    | 'SSO_SETTINGS'
    | 'DELEGATE'
    | 'DELEGATE_SCOPE'
    | 'DELEGATE_PROFILE'
    | 'EXPORT_EXECUTIONS_REQUEST'
    | 'GCP_CONFIG'
    | 'GIT_CONFIG'
    | 'JENKINS_SERVER'
    | 'SECRETS_MANAGER'
    | 'HELM_CHART'
    | 'SECRET'
    | 'CONNECTOR'
    | 'CLOUD_PROVIDER'
    | 'GOVERNANCE_FREEZE_CONFIG'
    | 'GOVERNANCE_CONFIG'
    | 'EVENT_RULE'
}

export type Delete39Error = Fetcher.ErrorWrapper<undefined>

export type Delete39Variables = {
  pathParams: Delete39PathParams
  queryParams?: Delete39QueryParams
} & PortalContext['fetcherOptions']

export const fetchDelete39 = (variables: Delete39Variables) =>
  portalFetch<Schemas.RestResponseYamlGitConfig, Delete39Error, undefined, {}, Delete39QueryParams, Delete39PathParams>(
    { url: '/setup-as-code/yaml/git-config/{entityId}', method: 'delete', ...variables }
  )

export const useDelete39 = (
  options?: Omit<
    reactQuery.UseMutationOptions<Schemas.RestResponseYamlGitConfig, Delete39Error, Delete39Variables>,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<Schemas.RestResponseYamlGitConfig, Delete39Error, Delete39Variables>(
    (variables: Delete39Variables) => fetchDelete39({ ...fetcherOptions, ...variables }),
    options
  )
}

export type Clone5QueryParams = {
  accountId?: string
  appId?: string
  entityType?: string
  entityId?: string
  newEntityName?: string
}

export type Clone5Error = Fetcher.ErrorWrapper<undefined>

export type Clone5Variables = {
  queryParams?: Clone5QueryParams
} & PortalContext['fetcherOptions']

export const fetchClone5 = (variables: Clone5Variables) =>
  portalFetch<Schemas.RestResponse, Clone5Error, undefined, {}, Clone5QueryParams, {}>({
    url: '/setup-as-code/yaml/clone',
    method: 'post',
    ...variables
  })

export const useClone5 = (
  options?: Omit<reactQuery.UseMutationOptions<Schemas.RestResponse, Clone5Error, Clone5Variables>, 'mutationFn'>
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<Schemas.RestResponse, Clone5Error, Clone5Variables>(
    (variables: Clone5Variables) => fetchClone5({ ...fetcherOptions, ...variables }),
    options
  )
}

export type GetContainerTaskPathParams = {
  containerTaskId: string
}

export type GetContainerTaskQueryParams = {
  appId?: string
  accountId?: string
}

export type GetContainerTaskError = Fetcher.ErrorWrapper<undefined>

export type GetContainerTaskVariables = {
  pathParams: GetContainerTaskPathParams
  queryParams?: GetContainerTaskQueryParams
} & PortalContext['fetcherOptions']

export const fetchGetContainerTask = (variables: GetContainerTaskVariables) =>
  portalFetch<
    Schemas.RestResponseYamlPayload,
    GetContainerTaskError,
    undefined,
    {},
    GetContainerTaskQueryParams,
    GetContainerTaskPathParams
  >({ url: '/setup-as-code/yaml/container-tasks/{containerTaskId}', method: 'get', ...variables })

export const useGetContainerTask = (
  variables: GetContainerTaskVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.RestResponseYamlPayload, GetContainerTaskError, Schemas.RestResponseYamlPayload>,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<Schemas.RestResponseYamlPayload, GetContainerTaskError, Schemas.RestResponseYamlPayload>(
    queryKeyFn({
      path: '/setup-as-code/yaml/container-tasks/{containerTaskId}',
      operationId: 'getContainerTask',
      variables
    }),
    () => fetchGetContainerTask({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type UpdateContainerTask1PathParams = {
  containerTaskId: string
}

export type UpdateContainerTask1QueryParams = {
  appId?: string
  accountId?: string
  /*
   * @default false
   */
  deleteEnabled?: boolean
}

export type UpdateContainerTask1Error = Fetcher.ErrorWrapper<undefined>

export type UpdateContainerTask1Variables = {
  body?: RequestBodies.YamlPayload
  pathParams: UpdateContainerTask1PathParams
  queryParams?: UpdateContainerTask1QueryParams
} & PortalContext['fetcherOptions']

export const fetchUpdateContainerTask1 = (variables: UpdateContainerTask1Variables) =>
  portalFetch<
    Schemas.RestResponseBase,
    UpdateContainerTask1Error,
    RequestBodies.YamlPayload,
    {},
    UpdateContainerTask1QueryParams,
    UpdateContainerTask1PathParams
  >({ url: '/setup-as-code/yaml/container-tasks/{containerTaskId}', method: 'put', ...variables })

export const useUpdateContainerTask1 = (
  options?: Omit<
    reactQuery.UseMutationOptions<Schemas.RestResponseBase, UpdateContainerTask1Error, UpdateContainerTask1Variables>,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<Schemas.RestResponseBase, UpdateContainerTask1Error, UpdateContainerTask1Variables>(
    (variables: UpdateContainerTask1Variables) => fetchUpdateContainerTask1({ ...fetcherOptions, ...variables }),
    options
  )
}

export type GetServiceCommandPathParams = {
  serviceCommandId: string
}

export type GetServiceCommandQueryParams = {
  appId?: string
}

export type GetServiceCommandError = Fetcher.ErrorWrapper<undefined>

export type GetServiceCommandVariables = {
  pathParams: GetServiceCommandPathParams
  queryParams?: GetServiceCommandQueryParams
} & PortalContext['fetcherOptions']

export const fetchGetServiceCommand = (variables: GetServiceCommandVariables) =>
  portalFetch<
    Schemas.RestResponseYamlPayload,
    GetServiceCommandError,
    undefined,
    {},
    GetServiceCommandQueryParams,
    GetServiceCommandPathParams
  >({ url: '/setup-as-code/yaml/service-commands/{serviceCommandId}', method: 'get', ...variables })

export const useGetServiceCommand = (
  variables: GetServiceCommandVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponseYamlPayload,
      GetServiceCommandError,
      Schemas.RestResponseYamlPayload
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<Schemas.RestResponseYamlPayload, GetServiceCommandError, Schemas.RestResponseYamlPayload>(
    queryKeyFn({
      path: '/setup-as-code/yaml/service-commands/{serviceCommandId}',
      operationId: 'getServiceCommand',
      variables
    }),
    () => fetchGetServiceCommand({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type UpdateServiceCommandPathParams = {
  serviceCommandId: string
}

export type UpdateServiceCommandQueryParams = {
  accountId?: string
}

export type UpdateServiceCommandError = Fetcher.ErrorWrapper<undefined>

export type UpdateServiceCommandVariables = {
  body?: RequestBodies.YamlPayload
  pathParams: UpdateServiceCommandPathParams
  queryParams?: UpdateServiceCommandQueryParams
} & PortalContext['fetcherOptions']

export const fetchUpdateServiceCommand = (variables: UpdateServiceCommandVariables) =>
  portalFetch<
    Schemas.RestResponseServiceCommand,
    UpdateServiceCommandError,
    RequestBodies.YamlPayload,
    {},
    UpdateServiceCommandQueryParams,
    UpdateServiceCommandPathParams
  >({ url: '/setup-as-code/yaml/service-commands/{serviceCommandId}', method: 'put', ...variables })

export const useUpdateServiceCommand = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.RestResponseServiceCommand,
      UpdateServiceCommandError,
      UpdateServiceCommandVariables
    >,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<
    Schemas.RestResponseServiceCommand,
    UpdateServiceCommandError,
    UpdateServiceCommandVariables
  >(
    (variables: UpdateServiceCommandVariables) => fetchUpdateServiceCommand({ ...fetcherOptions, ...variables }),
    options
  )
}

export type GetConfigFilePathParams = {
  configId: string
}

export type GetConfigFileQueryParams = {
  accountId?: string
  appId?: string
}

export type GetConfigFileError = Fetcher.ErrorWrapper<undefined>

export type GetConfigFileVariables = {
  pathParams: GetConfigFilePathParams
  queryParams?: GetConfigFileQueryParams
} & PortalContext['fetcherOptions']

export const fetchGetConfigFile = (variables: GetConfigFileVariables) =>
  portalFetch<
    Schemas.RestResponseYamlPayload,
    GetConfigFileError,
    undefined,
    {},
    GetConfigFileQueryParams,
    GetConfigFilePathParams
  >({ url: '/setup-as-code/yaml/configs/{configId}', method: 'get', ...variables })

export const useGetConfigFile = (
  variables: GetConfigFileVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.RestResponseYamlPayload, GetConfigFileError, Schemas.RestResponseYamlPayload>,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<Schemas.RestResponseYamlPayload, GetConfigFileError, Schemas.RestResponseYamlPayload>(
    queryKeyFn({ path: '/setup-as-code/yaml/configs/{configId}', operationId: 'getConfigFile', variables }),
    () => fetchGetConfigFile({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type UpdateConfigFilePathParams = {
  configId: string
}

export type UpdateConfigFileQueryParams = {
  accountId?: string
  appId?: string
  /*
   * @default false
   */
  deleteEnabled?: boolean
}

export type UpdateConfigFileError = Fetcher.ErrorWrapper<undefined>

export type UpdateConfigFileVariables = {
  body?: RequestBodies.YamlPayload
  pathParams: UpdateConfigFilePathParams
  queryParams?: UpdateConfigFileQueryParams
} & PortalContext['fetcherOptions']

export const fetchUpdateConfigFile = (variables: UpdateConfigFileVariables) =>
  portalFetch<
    Schemas.RestResponseConfigFile,
    UpdateConfigFileError,
    RequestBodies.YamlPayload,
    {},
    UpdateConfigFileQueryParams,
    UpdateConfigFilePathParams
  >({ url: '/setup-as-code/yaml/configs/{configId}', method: 'put', ...variables })

export const useUpdateConfigFile = (
  options?: Omit<
    reactQuery.UseMutationOptions<Schemas.RestResponseConfigFile, UpdateConfigFileError, UpdateConfigFileVariables>,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<Schemas.RestResponseConfigFile, UpdateConfigFileError, UpdateConfigFileVariables>(
    (variables: UpdateConfigFileVariables) => fetchUpdateConfigFile({ ...fetcherOptions, ...variables }),
    options
  )
}

export type GetEnvironmentPathParams = {
  envId: string
}

export type GetEnvironmentQueryParams = {
  appId?: string
}

export type GetEnvironmentError = Fetcher.ErrorWrapper<undefined>

export type GetEnvironmentVariables = {
  pathParams: GetEnvironmentPathParams
  queryParams?: GetEnvironmentQueryParams
} & PortalContext['fetcherOptions']

export const fetchGetEnvironment = (variables: GetEnvironmentVariables) =>
  portalFetch<
    Schemas.RestResponseYamlPayload,
    GetEnvironmentError,
    undefined,
    {},
    GetEnvironmentQueryParams,
    GetEnvironmentPathParams
  >({ url: '/setup-as-code/yaml/environments/{envId}', method: 'get', ...variables })

export const useGetEnvironment = (
  variables: GetEnvironmentVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.RestResponseYamlPayload, GetEnvironmentError, Schemas.RestResponseYamlPayload>,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<Schemas.RestResponseYamlPayload, GetEnvironmentError, Schemas.RestResponseYamlPayload>(
    queryKeyFn({ path: '/setup-as-code/yaml/environments/{envId}', operationId: 'getEnvironment', variables }),
    () => fetchGetEnvironment({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type UpdateEnvironmentPathParams = {
  envId: string
}

export type UpdateEnvironmentQueryParams = {
  accountId?: string
  appId?: string
}

export type UpdateEnvironmentError = Fetcher.ErrorWrapper<undefined>

export type UpdateEnvironmentVariables = {
  body?: RequestBodies.YamlPayload
  pathParams: UpdateEnvironmentPathParams
  queryParams?: UpdateEnvironmentQueryParams
} & PortalContext['fetcherOptions']

export const fetchUpdateEnvironment = (variables: UpdateEnvironmentVariables) =>
  portalFetch<
    Schemas.RestResponseEnvironment,
    UpdateEnvironmentError,
    RequestBodies.YamlPayload,
    {},
    UpdateEnvironmentQueryParams,
    UpdateEnvironmentPathParams
  >({ url: '/setup-as-code/yaml/environments/{envId}', method: 'put', ...variables })

export const useUpdateEnvironment = (
  options?: Omit<
    reactQuery.UseMutationOptions<Schemas.RestResponseEnvironment, UpdateEnvironmentError, UpdateEnvironmentVariables>,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<Schemas.RestResponseEnvironment, UpdateEnvironmentError, UpdateEnvironmentVariables>(
    (variables: UpdateEnvironmentVariables) => fetchUpdateEnvironment({ ...fetcherOptions, ...variables }),
    options
  )
}

export type GetServicePathParams = {
  serviceId: string
}

export type GetServiceQueryParams = {
  appId?: string
}

export type GetServiceError = Fetcher.ErrorWrapper<undefined>

export type GetServiceVariables = {
  pathParams: GetServicePathParams
  queryParams?: GetServiceQueryParams
} & PortalContext['fetcherOptions']

export const fetchGetService = (variables: GetServiceVariables) =>
  portalFetch<
    Schemas.RestResponseYamlPayload,
    GetServiceError,
    undefined,
    {},
    GetServiceQueryParams,
    GetServicePathParams
  >({ url: '/setup-as-code/yaml/services/{serviceId}', method: 'get', ...variables })

export const useGetService = (
  variables: GetServiceVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.RestResponseYamlPayload, GetServiceError, Schemas.RestResponseYamlPayload>,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<Schemas.RestResponseYamlPayload, GetServiceError, Schemas.RestResponseYamlPayload>(
    queryKeyFn({ path: '/setup-as-code/yaml/services/{serviceId}', operationId: 'getService', variables }),
    () => fetchGetService({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type UpdateServicePathParams = {
  serviceId: string
}

export type UpdateServiceQueryParams = {
  accountId?: string
  appId?: string
}

export type UpdateServiceError = Fetcher.ErrorWrapper<undefined>

export type UpdateServiceVariables = {
  body?: RequestBodies.YamlPayload
  pathParams: UpdateServicePathParams
  queryParams?: UpdateServiceQueryParams
} & PortalContext['fetcherOptions']

export const fetchUpdateService = (variables: UpdateServiceVariables) =>
  portalFetch<
    Schemas.RestResponseService,
    UpdateServiceError,
    RequestBodies.YamlPayload,
    {},
    UpdateServiceQueryParams,
    UpdateServicePathParams
  >({ url: '/setup-as-code/yaml/services/{serviceId}', method: 'put', ...variables })

export const useUpdateService = (
  options?: Omit<
    reactQuery.UseMutationOptions<Schemas.RestResponseService, UpdateServiceError, UpdateServiceVariables>,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<Schemas.RestResponseService, UpdateServiceError, UpdateServiceVariables>(
    (variables: UpdateServiceVariables) => fetchUpdateService({ ...fetcherOptions, ...variables }),
    options
  )
}

export type GetApplicationManifestForServiceQueryParams = {
  accountId?: string
  appId?: string
  serviceId?: string
}

export type GetApplicationManifestForServiceError = Fetcher.ErrorWrapper<undefined>

export type GetApplicationManifestForServiceVariables = {
  queryParams?: GetApplicationManifestForServiceQueryParams
} & PortalContext['fetcherOptions']

export const fetchGetApplicationManifestForService = (variables: GetApplicationManifestForServiceVariables) =>
  portalFetch<
    Schemas.RestResponseDirectoryNode,
    GetApplicationManifestForServiceError,
    undefined,
    {},
    GetApplicationManifestForServiceQueryParams,
    {}
  >({ url: '/setup-as-code/yaml/manifest', method: 'get', ...variables })

export const useGetApplicationManifestForService = (
  variables: GetApplicationManifestForServiceVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponseDirectoryNode,
      GetApplicationManifestForServiceError,
      Schemas.RestResponseDirectoryNode
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponseDirectoryNode,
    GetApplicationManifestForServiceError,
    Schemas.RestResponseDirectoryNode
  >(
    queryKeyFn({ path: '/setup-as-code/yaml/manifest', operationId: 'getApplicationManifestForService', variables }),
    () => fetchGetApplicationManifestForService({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type PushDirectoryPathParams = {
  entityId: string
}

export type PushDirectoryQueryParams = {
  accountId?: string
  entityType?:
    | 'SERVICE'
    | 'PROVISIONER'
    | 'ENVIRONMENT'
    | 'HOST'
    | 'RELEASE'
    | 'ARTIFACT'
    | 'SSH_USER'
    | 'SSH_PASSWORD'
    | 'SSH_APP_ACCOUNT'
    | 'SSH_KEY_PASSPHRASE'
    | 'SSH_APP_ACCOUNT_PASSOWRD'
    | 'SIMPLE_DEPLOYMENT'
    | 'ORCHESTRATED_DEPLOYMENT'
    | 'PIPELINE'
    | 'WORKFLOW'
    | 'DEPLOYMENT'
    | 'INSTANCE'
    | 'APPLICATION'
    | 'COMMAND'
    | 'CONFIG'
    | 'SERVICE_TEMPLATE'
    | 'INFRASTRUCTURE_MAPPING'
    | 'INFRASTRUCTURE_DEFINITION'
    | 'USER'
    | 'ARTIFACT_STREAM'
    | 'APPDYNAMICS_CONFIGID'
    | 'APPDYNAMICS_APPID'
    | 'APPDYNAMICS_TIERID'
    | 'ELK_CONFIGID'
    | 'ELK_INDICES'
    | 'NEWRELIC_CONFIGID'
    | 'NEWRELIC_APPID'
    | 'SS_SSH_CONNECTION_ATTRIBUTE'
    | 'SS_WINRM_CONNECTION_ATTRIBUTE'
    | 'SUMOLOGIC_CONFIGID'
    | 'SPLUNK_CONFIGID'
    | 'NEWRELIC_MARKER_CONFIGID'
    | 'NEWRELIC_MARKER_APPID'
    | 'API_KEY'
    | 'ACCOUNT'
    | 'APPLICATION_MANIFEST'
    | 'USER_GROUP'
    | 'WHITELISTED_IP'
    | 'CF_AWS_CONFIG_ID'
    | 'VERIFICATION_CONFIGURATION'
    | 'HELM_GIT_CONFIG_ID'
    | 'NOTIFICATION_GROUP'
    | 'HELM_CHART_SPECIFICATION'
    | 'PCF_SERVICE_SPECIFICATION'
    | 'LAMBDA_SPECIFICATION'
    | 'USER_DATA_SPECIFICATION'
    | 'ECS_CONTAINER_SPECIFICATION'
    | 'ECS_SERVICE_SPECIFICATION'
    | 'K8S_CONTAINER_SPECIFICATION'
    | 'CONFIG_FILE'
    | 'SERVICE_COMMAND'
    | 'MANIFEST_FILE'
    | 'SERVICE_VARIABLE'
    | 'TRIGGER'
    | 'ROLE'
    | 'TEMPLATE'
    | 'TEMPLATE_FOLDER'
    | 'SETTING_ATTRIBUTE'
    | 'ENCRYPTED_RECORDS'
    | 'CV_CONFIGURATION'
    | 'TAG'
    | 'CUSTOM_DASHBOARD'
    | 'PIPELINE_GOVERNANCE_STANDARD'
    | 'WORKFLOW_EXECUTION'
    | 'SERVERLESS_INSTANCE'
    | 'USER_INVITE'
    | 'LOGIN_SETTINGS'
    | 'SSO_SETTINGS'
    | 'DELEGATE'
    | 'DELEGATE_SCOPE'
    | 'DELEGATE_PROFILE'
    | 'EXPORT_EXECUTIONS_REQUEST'
    | 'GCP_CONFIG'
    | 'GIT_CONFIG'
    | 'JENKINS_SERVER'
    | 'SECRETS_MANAGER'
    | 'HELM_CHART'
    | 'SECRET'
    | 'CONNECTOR'
    | 'CLOUD_PROVIDER'
    | 'GOVERNANCE_FREEZE_CONFIG'
    | 'GOVERNANCE_CONFIG'
    | 'EVENT_RULE'
}

export type PushDirectoryError = Fetcher.ErrorWrapper<undefined>

export type PushDirectoryVariables = {
  pathParams: PushDirectoryPathParams
  queryParams?: PushDirectoryQueryParams
} & PortalContext['fetcherOptions']

export const fetchPushDirectory = (variables: PushDirectoryVariables) =>
  portalFetch<
    Schemas.RestResponse,
    PushDirectoryError,
    undefined,
    {},
    PushDirectoryQueryParams,
    PushDirectoryPathParams
  >({ url: '/setup-as-code/yaml/full-sync/{entityId}', method: 'post', ...variables })

export const usePushDirectory = (
  options?: Omit<
    reactQuery.UseMutationOptions<Schemas.RestResponse, PushDirectoryError, PushDirectoryVariables>,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<Schemas.RestResponse, PushDirectoryError, PushDirectoryVariables>(
    (variables: PushDirectoryVariables) => fetchPushDirectory({ ...fetcherOptions, ...variables }),
    options
  )
}

export type GetArtifactStreamPathParams = {
  artifactStreamId: string
}

export type GetArtifactStreamQueryParams = {
  appId?: string
}

export type GetArtifactStreamError = Fetcher.ErrorWrapper<undefined>

export type GetArtifactStreamVariables = {
  pathParams: GetArtifactStreamPathParams
  queryParams?: GetArtifactStreamQueryParams
} & PortalContext['fetcherOptions']

export const fetchGetArtifactStream = (variables: GetArtifactStreamVariables) =>
  portalFetch<
    Schemas.RestResponseYamlPayload,
    GetArtifactStreamError,
    undefined,
    {},
    GetArtifactStreamQueryParams,
    GetArtifactStreamPathParams
  >({ url: '/setup-as-code/yaml/artifact-streams/{artifactStreamId}', method: 'get', ...variables })

export const useGetArtifactStream = (
  variables: GetArtifactStreamVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponseYamlPayload,
      GetArtifactStreamError,
      Schemas.RestResponseYamlPayload
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<Schemas.RestResponseYamlPayload, GetArtifactStreamError, Schemas.RestResponseYamlPayload>(
    queryKeyFn({
      path: '/setup-as-code/yaml/artifact-streams/{artifactStreamId}',
      operationId: 'getArtifactStream',
      variables
    }),
    () => fetchGetArtifactStream({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type UpdateArtifactStreamPathParams = {
  artifactStreamId: string
}

export type UpdateArtifactStreamQueryParams = {
  appId?: string
  /*
   * @default false
   */
  deleteEnabled?: boolean
}

export type UpdateArtifactStreamError = Fetcher.ErrorWrapper<undefined>

export type UpdateArtifactStreamVariables = {
  body?: RequestBodies.YamlPayload
  pathParams: UpdateArtifactStreamPathParams
  queryParams?: UpdateArtifactStreamQueryParams
} & PortalContext['fetcherOptions']

export const fetchUpdateArtifactStream = (variables: UpdateArtifactStreamVariables) =>
  portalFetch<
    Schemas.RestResponseBase,
    UpdateArtifactStreamError,
    RequestBodies.YamlPayload,
    {},
    UpdateArtifactStreamQueryParams,
    UpdateArtifactStreamPathParams
  >({ url: '/setup-as-code/yaml/artifact-streams/{artifactStreamId}', method: 'put', ...variables })

export const useUpdateArtifactStream = (
  options?: Omit<
    reactQuery.UseMutationOptions<Schemas.RestResponseBase, UpdateArtifactStreamError, UpdateArtifactStreamVariables>,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<Schemas.RestResponseBase, UpdateArtifactStreamError, UpdateArtifactStreamVariables>(
    (variables: UpdateArtifactStreamVariables) => fetchUpdateArtifactStream({ ...fetcherOptions, ...variables }),
    options
  )
}

export type GetInfraDefintionPathParams = {
  infraDefinitionId: string
}

export type GetInfraDefintionQueryParams = {
  appId?: string
  accountId?: string
}

export type GetInfraDefintionError = Fetcher.ErrorWrapper<undefined>

export type GetInfraDefintionVariables = {
  pathParams: GetInfraDefintionPathParams
  queryParams?: GetInfraDefintionQueryParams
} & PortalContext['fetcherOptions']

export const fetchGetInfraDefintion = (variables: GetInfraDefintionVariables) =>
  portalFetch<
    Schemas.RestResponseYamlPayload,
    GetInfraDefintionError,
    undefined,
    {},
    GetInfraDefintionQueryParams,
    GetInfraDefintionPathParams
  >({ url: '/setup-as-code/yaml/infrastructuredefinitions/{infraDefinitionId}', method: 'get', ...variables })

export const useGetInfraDefintion = (
  variables: GetInfraDefintionVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponseYamlPayload,
      GetInfraDefintionError,
      Schemas.RestResponseYamlPayload
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<Schemas.RestResponseYamlPayload, GetInfraDefintionError, Schemas.RestResponseYamlPayload>(
    queryKeyFn({
      path: '/setup-as-code/yaml/infrastructuredefinitions/{infraDefinitionId}',
      operationId: 'getInfraDefintion',
      variables
    }),
    () => fetchGetInfraDefintion({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type UpdateInfraDefinitionPathParams = {
  infraDefinitionId: string
}

export type UpdateInfraDefinitionQueryParams = {
  appId?: string
  accountId?: string
  /*
   * @default false
   */
  deleteEnabled?: boolean
}

export type UpdateInfraDefinitionError = Fetcher.ErrorWrapper<undefined>

export type UpdateInfraDefinitionVariables = {
  body?: RequestBodies.YamlPayload
  pathParams: UpdateInfraDefinitionPathParams
  queryParams?: UpdateInfraDefinitionQueryParams
} & PortalContext['fetcherOptions']

export const fetchUpdateInfraDefinition = (variables: UpdateInfraDefinitionVariables) =>
  portalFetch<
    Schemas.RestResponseInfrastructureDefinition,
    UpdateInfraDefinitionError,
    RequestBodies.YamlPayload,
    {},
    UpdateInfraDefinitionQueryParams,
    UpdateInfraDefinitionPathParams
  >({ url: '/setup-as-code/yaml/infrastructuredefinitions/{infraDefinitionId}', method: 'put', ...variables })

export const useUpdateInfraDefinition = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.RestResponseInfrastructureDefinition,
      UpdateInfraDefinitionError,
      UpdateInfraDefinitionVariables
    >,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<
    Schemas.RestResponseInfrastructureDefinition,
    UpdateInfraDefinitionError,
    UpdateInfraDefinitionVariables
  >(
    (variables: UpdateInfraDefinitionVariables) => fetchUpdateInfraDefinition({ ...fetcherOptions, ...variables }),
    options
  )
}

export type GetEcsSErviceSpecification1PathParams = {
  ecsServiceSpecificationId: string
}

export type GetEcsSErviceSpecification1QueryParams = {
  appId?: string
  accountId?: string
}

export type GetEcsSErviceSpecification1Error = Fetcher.ErrorWrapper<undefined>

export type GetEcsSErviceSpecification1Variables = {
  pathParams: GetEcsSErviceSpecification1PathParams
  queryParams?: GetEcsSErviceSpecification1QueryParams
} & PortalContext['fetcherOptions']

export const fetchGetEcsSErviceSpecification1 = (variables: GetEcsSErviceSpecification1Variables) =>
  portalFetch<
    Schemas.RestResponseYamlPayload,
    GetEcsSErviceSpecification1Error,
    undefined,
    {},
    GetEcsSErviceSpecification1QueryParams,
    GetEcsSErviceSpecification1PathParams
  >({ url: '/setup-as-code/yaml/ecs-service-spec/{ecsServiceSpecificationId}', method: 'get', ...variables })

export const useGetEcsSErviceSpecification1 = (
  variables: GetEcsSErviceSpecification1Variables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponseYamlPayload,
      GetEcsSErviceSpecification1Error,
      Schemas.RestResponseYamlPayload
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponseYamlPayload,
    GetEcsSErviceSpecification1Error,
    Schemas.RestResponseYamlPayload
  >(
    queryKeyFn({
      path: '/setup-as-code/yaml/ecs-service-spec/{ecsServiceSpecificationId}',
      operationId: 'getEcsSErviceSpecification1',
      variables
    }),
    () => fetchGetEcsSErviceSpecification1({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type UpdateEcsServiceSpecification1PathParams = {
  ecsServiceSpecificationId: string
}

export type UpdateEcsServiceSpecification1QueryParams = {
  appId?: string
  accountId?: string
  /*
   * @default false
   */
  deleteEnabled?: boolean
}

export type UpdateEcsServiceSpecification1Error = Fetcher.ErrorWrapper<undefined>

export type UpdateEcsServiceSpecification1Variables = {
  body?: RequestBodies.YamlPayload
  pathParams: UpdateEcsServiceSpecification1PathParams
  queryParams?: UpdateEcsServiceSpecification1QueryParams
} & PortalContext['fetcherOptions']

export const fetchUpdateEcsServiceSpecification1 = (variables: UpdateEcsServiceSpecification1Variables) =>
  portalFetch<
    Schemas.RestResponseBase,
    UpdateEcsServiceSpecification1Error,
    RequestBodies.YamlPayload,
    {},
    UpdateEcsServiceSpecification1QueryParams,
    UpdateEcsServiceSpecification1PathParams
  >({ url: '/setup-as-code/yaml/ecs-service-spec/{ecsServiceSpecificationId}', method: 'put', ...variables })

export const useUpdateEcsServiceSpecification1 = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.RestResponseBase,
      UpdateEcsServiceSpecification1Error,
      UpdateEcsServiceSpecification1Variables
    >,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<
    Schemas.RestResponseBase,
    UpdateEcsServiceSpecification1Error,
    UpdateEcsServiceSpecification1Variables
  >(
    (variables: UpdateEcsServiceSpecification1Variables) =>
      fetchUpdateEcsServiceSpecification1({ ...fetcherOptions, ...variables }),
    options
  )
}

export type GetPcfservicespecificationIdPathParams = {
  pcfservicespecificationId: string
}

export type GetPcfservicespecificationIdQueryParams = {
  appId?: string
  accountId?: string
}

export type GetPcfservicespecificationIdError = Fetcher.ErrorWrapper<undefined>

export type GetPcfservicespecificationIdVariables = {
  pathParams: GetPcfservicespecificationIdPathParams
  queryParams?: GetPcfservicespecificationIdQueryParams
} & PortalContext['fetcherOptions']

export const fetchGetPcfservicespecificationId = (variables: GetPcfservicespecificationIdVariables) =>
  portalFetch<
    Schemas.RestResponseYamlPayload,
    GetPcfservicespecificationIdError,
    undefined,
    {},
    GetPcfservicespecificationIdQueryParams,
    GetPcfservicespecificationIdPathParams
  >({ url: '/setup-as-code/yaml/pcfservicespecifications/{pcfservicespecificationId}', method: 'get', ...variables })

export const useGetPcfservicespecificationId = (
  variables: GetPcfservicespecificationIdVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponseYamlPayload,
      GetPcfservicespecificationIdError,
      Schemas.RestResponseYamlPayload
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponseYamlPayload,
    GetPcfservicespecificationIdError,
    Schemas.RestResponseYamlPayload
  >(
    queryKeyFn({
      path: '/setup-as-code/yaml/pcfservicespecifications/{pcfservicespecificationId}',
      operationId: 'getPcfservicespecificationId',
      variables
    }),
    () => fetchGetPcfservicespecificationId({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type UpdatePcfServiceSpecification1PathParams = {
  pcfservicespecificationId: string
}

export type UpdatePcfServiceSpecification1QueryParams = {
  appId?: string
  accountId?: string
  /*
   * @default false
   */
  deleteEnabled?: boolean
}

export type UpdatePcfServiceSpecification1Error = Fetcher.ErrorWrapper<undefined>

export type UpdatePcfServiceSpecification1Variables = {
  body?: RequestBodies.YamlPayload
  pathParams: UpdatePcfServiceSpecification1PathParams
  queryParams?: UpdatePcfServiceSpecification1QueryParams
} & PortalContext['fetcherOptions']

export const fetchUpdatePcfServiceSpecification1 = (variables: UpdatePcfServiceSpecification1Variables) =>
  portalFetch<
    Schemas.RestResponseBase,
    UpdatePcfServiceSpecification1Error,
    RequestBodies.YamlPayload,
    {},
    UpdatePcfServiceSpecification1QueryParams,
    UpdatePcfServiceSpecification1PathParams
  >({ url: '/setup-as-code/yaml/pcfservicespecifications/{pcfservicespecificationId}', method: 'put', ...variables })

export const useUpdatePcfServiceSpecification1 = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.RestResponseBase,
      UpdatePcfServiceSpecification1Error,
      UpdatePcfServiceSpecification1Variables
    >,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<
    Schemas.RestResponseBase,
    UpdatePcfServiceSpecification1Error,
    UpdatePcfServiceSpecification1Variables
  >(
    (variables: UpdatePcfServiceSpecification1Variables) =>
      fetchUpdatePcfServiceSpecification1({ ...fetcherOptions, ...variables }),
    options
  )
}

export type GetLamdbaSpecPathParams = {
  lambdaSpecId: string
}

export type GetLamdbaSpecQueryParams = {
  appId?: string
  accountId?: string
}

export type GetLamdbaSpecError = Fetcher.ErrorWrapper<undefined>

export type GetLamdbaSpecVariables = {
  pathParams: GetLamdbaSpecPathParams
  queryParams?: GetLamdbaSpecQueryParams
} & PortalContext['fetcherOptions']

export const fetchGetLamdbaSpec = (variables: GetLamdbaSpecVariables) =>
  portalFetch<
    Schemas.RestResponseYamlPayload,
    GetLamdbaSpecError,
    undefined,
    {},
    GetLamdbaSpecQueryParams,
    GetLamdbaSpecPathParams
  >({ url: '/setup-as-code/yaml/lambda-specs/{lambdaSpecId}', method: 'get', ...variables })

export const useGetLamdbaSpec = (
  variables: GetLamdbaSpecVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.RestResponseYamlPayload, GetLamdbaSpecError, Schemas.RestResponseYamlPayload>,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<Schemas.RestResponseYamlPayload, GetLamdbaSpecError, Schemas.RestResponseYamlPayload>(
    queryKeyFn({ path: '/setup-as-code/yaml/lambda-specs/{lambdaSpecId}', operationId: 'getLamdbaSpec', variables }),
    () => fetchGetLamdbaSpec({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type UpdateLambdaSpecPathParams = {
  lambdaSpecId: string
}

export type UpdateLambdaSpecQueryParams = {
  appId?: string
  accountId?: string
  /*
   * @default false
   */
  deleteEnabled?: boolean
}

export type UpdateLambdaSpecError = Fetcher.ErrorWrapper<undefined>

export type UpdateLambdaSpecVariables = {
  body?: RequestBodies.YamlPayload
  pathParams: UpdateLambdaSpecPathParams
  queryParams?: UpdateLambdaSpecQueryParams
} & PortalContext['fetcherOptions']

export const fetchUpdateLambdaSpec = (variables: UpdateLambdaSpecVariables) =>
  portalFetch<
    Schemas.RestResponseBase,
    UpdateLambdaSpecError,
    RequestBodies.YamlPayload,
    {},
    UpdateLambdaSpecQueryParams,
    UpdateLambdaSpecPathParams
  >({ url: '/setup-as-code/yaml/lambda-specs/{lambdaSpecId}', method: 'put', ...variables })

export const useUpdateLambdaSpec = (
  options?: Omit<
    reactQuery.UseMutationOptions<Schemas.RestResponseBase, UpdateLambdaSpecError, UpdateLambdaSpecVariables>,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<Schemas.RestResponseBase, UpdateLambdaSpecError, UpdateLambdaSpecVariables>(
    (variables: UpdateLambdaSpecVariables) => fetchUpdateLambdaSpec({ ...fetcherOptions, ...variables }),
    options
  )
}

export type UpdateYamlQueryParams = {
  accountId?: string
}

export type UpdateYamlError = Fetcher.ErrorWrapper<undefined>

export type UpdateYamlVariables = {
  body?: RequestBodies.YamlPayload
  queryParams?: UpdateYamlQueryParams
} & PortalContext['fetcherOptions']

export const fetchUpdateYaml = (variables: UpdateYamlVariables) =>
  portalFetch<Schemas.RestResponseBase, UpdateYamlError, RequestBodies.YamlPayload, {}, UpdateYamlQueryParams, {}>({
    url: '/setup-as-code/yaml',
    method: 'put',
    ...variables
  })

export const useUpdateYaml = (
  options?: Omit<
    reactQuery.UseMutationOptions<Schemas.RestResponseBase, UpdateYamlError, UpdateYamlVariables>,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<Schemas.RestResponseBase, UpdateYamlError, UpdateYamlVariables>(
    (variables: UpdateYamlVariables) => fetchUpdateYaml({ ...fetcherOptions, ...variables }),
    options
  )
}

export type SaveGitConfigQueryParams = {
  accountId?: string
}

export type SaveGitConfigError = Fetcher.ErrorWrapper<undefined>

export type SaveGitConfigVariables = {
  body: RequestBodies.YamlGitConfig
  queryParams?: SaveGitConfigQueryParams
} & PortalContext['fetcherOptions']

export const fetchSaveGitConfig = (variables: SaveGitConfigVariables) =>
  portalFetch<
    Schemas.RestResponseYamlGitConfig,
    SaveGitConfigError,
    RequestBodies.YamlGitConfig,
    {},
    SaveGitConfigQueryParams,
    {}
  >({ url: '/setup-as-code/yaml/git-config', method: 'post', ...variables })

export const useSaveGitConfig = (
  options?: Omit<
    reactQuery.UseMutationOptions<Schemas.RestResponseYamlGitConfig, SaveGitConfigError, SaveGitConfigVariables>,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<Schemas.RestResponseYamlGitConfig, SaveGitConfigError, SaveGitConfigVariables>(
    (variables: SaveGitConfigVariables) => fetchSaveGitConfig({ ...fetcherOptions, ...variables }),
    options
  )
}

export type WebhookCatcherPathParams = {
  entityToken: string
}

export type WebhookCatcherQueryParams = {
  accountId?: string
}

export type WebhookCatcherError = Fetcher.ErrorWrapper<undefined>

export type WebhookCatcherVariables = {
  body?: RequestBodies.ValidateBody
  pathParams: WebhookCatcherPathParams
  queryParams?: WebhookCatcherQueryParams
} & PortalContext['fetcherOptions']

export const fetchWebhookCatcher = (variables: WebhookCatcherVariables) =>
  portalFetch<
    Schemas.RestResponse,
    WebhookCatcherError,
    RequestBodies.ValidateBody,
    {},
    WebhookCatcherQueryParams,
    WebhookCatcherPathParams
  >({ url: '/setup-as-code/yaml/webhook/{entityToken}', method: 'post', ...variables })

export const useWebhookCatcher = (
  options?: Omit<
    reactQuery.UseMutationOptions<Schemas.RestResponse, WebhookCatcherError, WebhookCatcherVariables>,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<Schemas.RestResponse, WebhookCatcherError, WebhookCatcherVariables>(
    (variables: WebhookCatcherVariables) => fetchWebhookCatcher({ ...fetcherOptions, ...variables }),
    options
  )
}

export type FullSyncDryRunQueryParams = {
  accountId?: string
  token?: string
  /*
   * @default false
   */
  queryAllAccounts?: boolean
}

export type FullSyncDryRunError = Fetcher.ErrorWrapper<undefined>

export type FullSyncDryRunVariables = {
  queryParams?: FullSyncDryRunQueryParams
} & PortalContext['fetcherOptions']

export const fetchFullSyncDryRun = (variables: FullSyncDryRunVariables) =>
  portalFetch<Schemas.RestResponse, FullSyncDryRunError, undefined, {}, FullSyncDryRunQueryParams, {}>({
    url: '/setup-as-code/yaml/full-sync-dry-run',
    method: 'get',
    ...variables
  })

export const useFullSyncDryRun = (
  variables: FullSyncDryRunVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.RestResponse, FullSyncDryRunError, Schemas.RestResponse>,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<Schemas.RestResponse, FullSyncDryRunError, Schemas.RestResponse>(
    queryKeyFn({ path: '/setup-as-code/yaml/full-sync-dry-run', operationId: 'fullSyncDryRun', variables }),
    () => fetchFullSyncDryRun({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type GetAllYamlErrorsQueryParams = {
  accountId?: string
  token?: string
  /*
   * @default false
   */
  queryAllAccounts?: boolean
}

export type GetAllYamlErrorsError = Fetcher.ErrorWrapper<undefined>

export type GetAllYamlErrorsVariables = {
  queryParams?: GetAllYamlErrorsQueryParams
} & PortalContext['fetcherOptions']

export const fetchGetAllYamlErrors = (variables: GetAllYamlErrorsVariables) =>
  portalFetch<Schemas.RestResponseListString, GetAllYamlErrorsError, undefined, {}, GetAllYamlErrorsQueryParams, {}>({
    url: '/setup-as-code/yaml/get-all-yaml-errors',
    method: 'get',
    ...variables
  })

export const useGetAllYamlErrors = (
  variables: GetAllYamlErrorsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.RestResponseListString, GetAllYamlErrorsError, Schemas.RestResponseListString>,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<Schemas.RestResponseListString, GetAllYamlErrorsError, Schemas.RestResponseListString>(
    queryKeyFn({ path: '/setup-as-code/yaml/get-all-yaml-errors', operationId: 'getAllYamlErrors', variables }),
    () => fetchGetAllYamlErrors({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type FullSyncAccountQueryParams = {
  accountId?: string
}

export type FullSyncAccountError = Fetcher.ErrorWrapper<undefined>

export type FullSyncAccountVariables = {
  queryParams?: FullSyncAccountQueryParams
} & PortalContext['fetcherOptions']

export const fetchFullSyncAccount = (variables: FullSyncAccountVariables) =>
  portalFetch<Schemas.RestResponse, FullSyncAccountError, undefined, {}, FullSyncAccountQueryParams, {}>({
    url: '/setup-as-code/yaml/full-sync-account',
    method: 'post',
    ...variables
  })

export const useFullSyncAccount = (
  options?: Omit<
    reactQuery.UseMutationOptions<Schemas.RestResponse, FullSyncAccountError, FullSyncAccountVariables>,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<Schemas.RestResponse, FullSyncAccountError, FullSyncAccountVariables>(
    (variables: FullSyncAccountVariables) => fetchFullSyncAccount({ ...fetcherOptions, ...variables }),
    options
  )
}

export type FullSyncAccountInternalQueryParams = {
  accountId?: string
}

export type FullSyncAccountInternalError = Fetcher.ErrorWrapper<undefined>

export type FullSyncAccountInternalVariables = {
  queryParams?: FullSyncAccountInternalQueryParams
} & PortalContext['fetcherOptions']

export const fetchFullSyncAccountInternal = (variables: FullSyncAccountInternalVariables) =>
  portalFetch<
    Schemas.RestResponse,
    FullSyncAccountInternalError,
    undefined,
    {},
    FullSyncAccountInternalQueryParams,
    {}
  >({ url: '/setup-as-code/yaml/internal/full-sync-account', method: 'get', ...variables })

export const useFullSyncAccountInternal = (
  variables: FullSyncAccountInternalVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.RestResponse, FullSyncAccountInternalError, Schemas.RestResponse>,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<Schemas.RestResponse, FullSyncAccountInternalError, Schemas.RestResponse>(
    queryKeyFn({
      path: '/setup-as-code/yaml/internal/full-sync-account',
      operationId: 'fullSyncAccountInternal',
      variables
    }),
    () => fetchFullSyncAccountInternal({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type TemplateYamlSyncQueryParams = {
  accountId?: string
}

export type TemplateYamlSyncError = Fetcher.ErrorWrapper<undefined>

export type TemplateYamlSyncVariables = {
  queryParams?: TemplateYamlSyncQueryParams
} & PortalContext['fetcherOptions']

export const fetchTemplateYamlSync = (variables: TemplateYamlSyncVariables) =>
  portalFetch<Schemas.RestResponse, TemplateYamlSyncError, undefined, {}, TemplateYamlSyncQueryParams, {}>({
    url: '/setup-as-code/yaml/internal/template-yaml-sync',
    method: 'post',
    ...variables
  })

export const useTemplateYamlSync = (
  options?: Omit<
    reactQuery.UseMutationOptions<Schemas.RestResponse, TemplateYamlSyncError, TemplateYamlSyncVariables>,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<Schemas.RestResponse, TemplateYamlSyncError, TemplateYamlSyncVariables>(
    (variables: TemplateYamlSyncVariables) => fetchTemplateYamlSync({ ...fetcherOptions, ...variables }),
    options
  )
}

export type UpsertYAMLEntitiesQueryParams = {
  accountId?: string
}

export type UpsertYAMLEntitiesError = Fetcher.ErrorWrapper<undefined>

export type UpsertYAMLEntitiesVariables = {
  body?: RequestBodies.ImportAccountData
  queryParams?: UpsertYAMLEntitiesQueryParams
} & PortalContext['fetcherOptions']

export const fetchUpsertYAMLEntities = (variables: UpsertYAMLEntitiesVariables) =>
  portalFetch<
    Schemas.RestResponseYamlOperationResponse,
    UpsertYAMLEntitiesError,
    RequestBodies.ImportAccountData,
    {},
    UpsertYAMLEntitiesQueryParams,
    {}
  >({ url: '/setup-as-code/yaml/upsert-entities', method: 'post', ...variables })

export const useUpsertYAMLEntities = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.RestResponseYamlOperationResponse,
      UpsertYAMLEntitiesError,
      UpsertYAMLEntitiesVariables
    >,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<
    Schemas.RestResponseYamlOperationResponse,
    UpsertYAMLEntitiesError,
    UpsertYAMLEntitiesVariables
  >((variables: UpsertYAMLEntitiesVariables) => fetchUpsertYAMLEntities({ ...fetcherOptions, ...variables }), options)
}

export type UpsertYAMLEntityQueryParams = {
  accountId?: string
  yamlFilePath?: string
}

export type UpsertYAMLEntityError = Fetcher.ErrorWrapper<undefined>

export type UpsertYAMLEntityVariables = {
  queryParams?: UpsertYAMLEntityQueryParams
} & PortalContext['fetcherOptions']

export const fetchUpsertYAMLEntity = (variables: UpsertYAMLEntityVariables) =>
  portalFetch<
    Schemas.RestResponseFileOperationStatus,
    UpsertYAMLEntityError,
    undefined,
    {},
    UpsertYAMLEntityQueryParams,
    {}
  >({ url: '/setup-as-code/yaml/upsert-entity', method: 'post', ...variables })

export const useUpsertYAMLEntity = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.RestResponseFileOperationStatus,
      UpsertYAMLEntityError,
      UpsertYAMLEntityVariables
    >,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<
    Schemas.RestResponseFileOperationStatus,
    UpsertYAMLEntityError,
    UpsertYAMLEntityVariables
  >((variables: UpsertYAMLEntityVariables) => fetchUpsertYAMLEntity({ ...fetcherOptions, ...variables }), options)
}

export type DeleteYAMLEntitiesQueryParams = {
  accountId?: string
  filePaths?: string[]
}

export type DeleteYAMLEntitiesError = Fetcher.ErrorWrapper<undefined>

export type DeleteYAMLEntitiesVariables = {
  queryParams?: DeleteYAMLEntitiesQueryParams
} & PortalContext['fetcherOptions']

export const fetchDeleteYAMLEntities = (variables: DeleteYAMLEntitiesVariables) =>
  portalFetch<
    Schemas.RestResponseYamlOperationResponse,
    DeleteYAMLEntitiesError,
    undefined,
    {},
    DeleteYAMLEntitiesQueryParams,
    {}
  >({ url: '/setup-as-code/yaml/delete-entities', method: 'delete', ...variables })

export const useDeleteYAMLEntities = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.RestResponseYamlOperationResponse,
      DeleteYAMLEntitiesError,
      DeleteYAMLEntitiesVariables
    >,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<
    Schemas.RestResponseYamlOperationResponse,
    DeleteYAMLEntitiesError,
    DeleteYAMLEntitiesVariables
  >((variables: DeleteYAMLEntitiesVariables) => fetchDeleteYAMLEntities({ ...fetcherOptions, ...variables }), options)
}

export type UpdateGovernanceConfigPathParams = {
  governanceConfigId: string
}

export type UpdateGovernanceConfigQueryParams = {
  accountId?: string
}

export type UpdateGovernanceConfigError = Fetcher.ErrorWrapper<undefined>

export type UpdateGovernanceConfigVariables = {
  body?: RequestBodies.YamlPayload
  pathParams: UpdateGovernanceConfigPathParams
  queryParams?: UpdateGovernanceConfigQueryParams
} & PortalContext['fetcherOptions']

export const fetchUpdateGovernanceConfig = (variables: UpdateGovernanceConfigVariables) =>
  portalFetch<
    Schemas.RestResponseYamlPayload,
    UpdateGovernanceConfigError,
    RequestBodies.YamlPayload,
    {},
    UpdateGovernanceConfigQueryParams,
    UpdateGovernanceConfigPathParams
  >({ url: '/setup-as-code/yaml/compliance-config/{governanceConfigId}', method: 'put', ...variables })

export const useUpdateGovernanceConfig = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.RestResponseYamlPayload,
      UpdateGovernanceConfigError,
      UpdateGovernanceConfigVariables
    >,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<
    Schemas.RestResponseYamlPayload,
    UpdateGovernanceConfigError,
    UpdateGovernanceConfigVariables
  >(
    (variables: UpdateGovernanceConfigVariables) => fetchUpdateGovernanceConfig({ ...fetcherOptions, ...variables }),
    options
  )
}

export type GetTagsQueryParams = {
  accountId?: string
}

export type GetTagsError = Fetcher.ErrorWrapper<undefined>

export type GetTagsVariables = {
  queryParams?: GetTagsQueryParams
} & PortalContext['fetcherOptions']

export const fetchGetTags = (variables: GetTagsVariables) =>
  portalFetch<Schemas.RestResponseYamlPayload, GetTagsError, undefined, {}, GetTagsQueryParams, {}>({
    url: '/setup-as-code/yaml/tags/{uuid}',
    method: 'get',
    ...variables
  })

export const useGetTags = (
  variables: GetTagsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.RestResponseYamlPayload, GetTagsError, Schemas.RestResponseYamlPayload>,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<Schemas.RestResponseYamlPayload, GetTagsError, Schemas.RestResponseYamlPayload>(
    queryKeyFn({ path: '/setup-as-code/yaml/tags/{uuid}', operationId: 'getTags', variables }),
    () => fetchGetTags({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type UpdateTags2PathParams = {
  uuid: string
}

export type UpdateTags2QueryParams = {
  accountId?: string
}

export type UpdateTags2Error = Fetcher.ErrorWrapper<undefined>

export type UpdateTags2Variables = {
  body?: RequestBodies.YamlPayload
  pathParams: UpdateTags2PathParams
  queryParams?: UpdateTags2QueryParams
} & PortalContext['fetcherOptions']

export const fetchUpdateTags2 = (variables: UpdateTags2Variables) =>
  portalFetch<
    Schemas.RestResponseServiceCommand,
    UpdateTags2Error,
    RequestBodies.YamlPayload,
    {},
    UpdateTags2QueryParams,
    UpdateTags2PathParams
  >({ url: '/setup-as-code/yaml/tags/{uuid}', method: 'put', ...variables })

export const useUpdateTags2 = (
  options?: Omit<
    reactQuery.UseMutationOptions<Schemas.RestResponseServiceCommand, UpdateTags2Error, UpdateTags2Variables>,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<Schemas.RestResponseServiceCommand, UpdateTags2Error, UpdateTags2Variables>(
    (variables: UpdateTags2Variables) => fetchUpdateTags2({ ...fetcherOptions, ...variables }),
    options
  )
}

export type GetApplicationQueryParams = {
  accountId?: string
  appId?: string
}

export type GetApplicationError = Fetcher.ErrorWrapper<undefined>

export type GetApplicationVariables = {
  queryParams?: GetApplicationQueryParams
} & PortalContext['fetcherOptions']

export const fetchGetApplication = (variables: GetApplicationVariables) =>
  portalFetch<Schemas.RestResponseDirectoryNode, GetApplicationError, undefined, {}, GetApplicationQueryParams, {}>({
    url: '/setup-as-code/yaml/application',
    method: 'get',
    ...variables
  })

export const useGetApplication = (
  variables: GetApplicationVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponseDirectoryNode,
      GetApplicationError,
      Schemas.RestResponseDirectoryNode
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<Schemas.RestResponseDirectoryNode, GetApplicationError, Schemas.RestResponseDirectoryNode>(
    queryKeyFn({ path: '/setup-as-code/yaml/application', operationId: 'getApplication', variables }),
    () => fetchGetApplication({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type GetWebhookPathParams = {
  entityId: string
}

export type GetWebhookQueryParams = {
  accountId?: string
}

export type GetWebhookError = Fetcher.ErrorWrapper<undefined>

export type GetWebhookVariables = {
  pathParams: GetWebhookPathParams
  queryParams?: GetWebhookQueryParams
} & PortalContext['fetcherOptions']

export const fetchGetWebhook = (variables: GetWebhookVariables) =>
  portalFetch<
    Schemas.RestResponseGitSyncWebhook,
    GetWebhookError,
    undefined,
    {},
    GetWebhookQueryParams,
    GetWebhookPathParams
  >({ url: '/setup-as-code/yaml/webhook/{entityId}', method: 'get', ...variables })

export const useGetWebhook = (
  variables: GetWebhookVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.RestResponseGitSyncWebhook, GetWebhookError, Schemas.RestResponseGitSyncWebhook>,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<Schemas.RestResponseGitSyncWebhook, GetWebhookError, Schemas.RestResponseGitSyncWebhook>(
    queryKeyFn({ path: '/setup-as-code/yaml/webhook/{entityId}', operationId: 'getWebhook', variables }),
    () => fetchGetWebhook({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type ListGitSyncErrorsQueryParams = {
  accountId?: string
}

export type ListGitSyncErrorsError = Fetcher.ErrorWrapper<undefined>

export type ListGitSyncErrorsVariables = {
  queryParams?: ListGitSyncErrorsQueryParams
} & PortalContext['fetcherOptions']

export const fetchListGitSyncErrors = (variables: ListGitSyncErrorsVariables) =>
  portalFetch<
    Schemas.RestResponseListGitSyncError,
    ListGitSyncErrorsError,
    undefined,
    {},
    ListGitSyncErrorsQueryParams,
    {}
  >({ url: '/setup-as-code/yaml/git-sync-errors', method: 'get', ...variables })

export const useListGitSyncErrors = (
  variables: ListGitSyncErrorsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponseListGitSyncError,
      ListGitSyncErrorsError,
      Schemas.RestResponseListGitSyncError
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponseListGitSyncError,
    ListGitSyncErrorsError,
    Schemas.RestResponseListGitSyncError
  >(
    queryKeyFn({ path: '/setup-as-code/yaml/git-sync-errors', operationId: 'listGitSyncErrors', variables }),
    () => fetchListGitSyncErrors({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type DiscardGitSyncErrorQueryParams = {
  accountId?: string
}

export type DiscardGitSyncErrorError = Fetcher.ErrorWrapper<undefined>

export type DiscardGitSyncErrorVariables = {
  body?: RequestBodies.UpdateWhitelistedDomainsBody
  queryParams?: DiscardGitSyncErrorQueryParams
} & PortalContext['fetcherOptions']

export const fetchDiscardGitSyncError = (variables: DiscardGitSyncErrorVariables) =>
  portalFetch<
    Schemas.RestResponse,
    DiscardGitSyncErrorError,
    RequestBodies.UpdateWhitelistedDomainsBody,
    {},
    DiscardGitSyncErrorQueryParams,
    {}
  >({ url: '/setup-as-code/yaml/git-sync-errors-discard-selected', method: 'post', ...variables })

export const useDiscardGitSyncError = (
  options?: Omit<
    reactQuery.UseMutationOptions<Schemas.RestResponse, DiscardGitSyncErrorError, DiscardGitSyncErrorVariables>,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<Schemas.RestResponse, DiscardGitSyncErrorError, DiscardGitSyncErrorVariables>(
    (variables: DiscardGitSyncErrorVariables) => fetchDiscardGitSyncError({ ...fetcherOptions, ...variables }),
    options
  )
}

export type DiscardGitSyncError1QueryParams = {
  accountId?: string
}

export type DiscardGitSyncError1Error = Fetcher.ErrorWrapper<undefined>

export type DiscardGitSyncError1Variables = {
  queryParams?: DiscardGitSyncError1QueryParams
} & PortalContext['fetcherOptions']

export const fetchDiscardGitSyncError1 = (variables: DiscardGitSyncError1Variables) =>
  portalFetch<Schemas.RestResponse, DiscardGitSyncError1Error, undefined, {}, DiscardGitSyncError1QueryParams, {}>({
    url: '/setup-as-code/yaml/git-sync-errors-discard-all',
    method: 'post',
    ...variables
  })

export const useDiscardGitSyncError1 = (
  options?: Omit<
    reactQuery.UseMutationOptions<Schemas.RestResponse, DiscardGitSyncError1Error, DiscardGitSyncError1Variables>,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<Schemas.RestResponse, DiscardGitSyncError1Error, DiscardGitSyncError1Variables>(
    (variables: DiscardGitSyncError1Variables) => fetchDiscardGitSyncError1({ ...fetcherOptions, ...variables }),
    options
  )
}

export type GetAppPathParams = {
  appId: string
}

export type GetAppError = Fetcher.ErrorWrapper<undefined>

export type GetAppVariables = {
  pathParams: GetAppPathParams
} & PortalContext['fetcherOptions']

export const fetchGetApp = (variables: GetAppVariables) =>
  portalFetch<Schemas.RestResponseYamlPayload, GetAppError, undefined, {}, {}, GetAppPathParams>({
    url: '/setup-as-code/yaml/applications/{appId}',
    method: 'get',
    ...variables
  })

export const useGetApp = (
  variables: GetAppVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.RestResponseYamlPayload, GetAppError, Schemas.RestResponseYamlPayload>,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<Schemas.RestResponseYamlPayload, GetAppError, Schemas.RestResponseYamlPayload>(
    queryKeyFn({ path: '/setup-as-code/yaml/applications/{appId}', operationId: 'getApp', variables }),
    () => fetchGetApp({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type UpdateAppPathParams = {
  appId: string
}

export type UpdateAppQueryParams = {
  /*
   * @default false
   */
  deleteEnabled?: boolean
}

export type UpdateAppError = Fetcher.ErrorWrapper<undefined>

export type UpdateAppVariables = {
  body?: RequestBodies.YamlPayload
  pathParams: UpdateAppPathParams
  queryParams?: UpdateAppQueryParams
} & PortalContext['fetcherOptions']

export const fetchUpdateApp = (variables: UpdateAppVariables) =>
  portalFetch<
    Schemas.RestResponseApplication,
    UpdateAppError,
    RequestBodies.YamlPayload,
    {},
    UpdateAppQueryParams,
    UpdateAppPathParams
  >({ url: '/setup-as-code/yaml/applications/{appId}', method: 'put', ...variables })

export const useUpdateApp = (
  options?: Omit<
    reactQuery.UseMutationOptions<Schemas.RestResponseApplication, UpdateAppError, UpdateAppVariables>,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<Schemas.RestResponseApplication, UpdateAppError, UpdateAppVariables>(
    (variables: UpdateAppVariables) => fetchUpdateApp({ ...fetcherOptions, ...variables }),
    options
  )
}

export type GetDirectoryQueryParams = {
  accountId?: string
  appId?: string
}

export type GetDirectoryError = Fetcher.ErrorWrapper<undefined>

export type GetDirectoryVariables = {
  queryParams?: GetDirectoryQueryParams
} & PortalContext['fetcherOptions']

export const fetchGetDirectory = (variables: GetDirectoryVariables) =>
  portalFetch<Schemas.RestResponseDirectoryNode, GetDirectoryError, undefined, {}, GetDirectoryQueryParams, {}>({
    url: '/setup-as-code/yaml/directory',
    method: 'get',
    ...variables
  })

export const useGetDirectory = (
  variables: GetDirectoryVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.RestResponseDirectoryNode, GetDirectoryError, Schemas.RestResponseDirectoryNode>,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<Schemas.RestResponseDirectoryNode, GetDirectoryError, Schemas.RestResponseDirectoryNode>(
    queryKeyFn({ path: '/setup-as-code/yaml/directory', operationId: 'getDirectory', variables }),
    () => fetchGetDirectory({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type ProcessYamlFilesAsZipQueryParams = {
  accountId?: string
  yamlPath?: string
}

export type ProcessYamlFilesAsZipError = Fetcher.ErrorWrapper<undefined>

export type ProcessYamlFilesAsZipVariables = {
  body?: RequestBodies.ImportAccountData
  queryParams?: ProcessYamlFilesAsZipQueryParams
} & PortalContext['fetcherOptions']

export const fetchProcessYamlFilesAsZip = (variables: ProcessYamlFilesAsZipVariables) =>
  portalFetch<
    Schemas.RestResponseString,
    ProcessYamlFilesAsZipError,
    RequestBodies.ImportAccountData,
    {},
    ProcessYamlFilesAsZipQueryParams,
    {}
  >({ url: '/setup-as-code/yaml/yaml-as-zip', method: 'post', ...variables })

export const useProcessYamlFilesAsZip = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.RestResponseString,
      ProcessYamlFilesAsZipError,
      ProcessYamlFilesAsZipVariables
    >,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<Schemas.RestResponseString, ProcessYamlFilesAsZipError, ProcessYamlFilesAsZipVariables>(
    (variables: ProcessYamlFilesAsZipVariables) => fetchProcessYamlFilesAsZip({ ...fetcherOptions, ...variables }),
    options
  )
}

export type GetYamlForFilePathQueryParams = {
  accountId?: string
  yamlFilePath?: string
  yamlSubType?: string
  applicationId?: string
}

export type GetYamlForFilePathError = Fetcher.ErrorWrapper<undefined>

export type GetYamlForFilePathVariables = {
  queryParams?: GetYamlForFilePathQueryParams
} & PortalContext['fetcherOptions']

export const fetchGetYamlForFilePath = (variables: GetYamlForFilePathVariables) =>
  portalFetch<
    Schemas.RestResponseYamlPayload,
    GetYamlForFilePathError,
    undefined,
    {},
    GetYamlForFilePathQueryParams,
    {}
  >({ url: '/setup-as-code/yaml/yaml-content', method: 'get', ...variables })

export const useGetYamlForFilePath = (
  variables: GetYamlForFilePathVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponseYamlPayload,
      GetYamlForFilePathError,
      Schemas.RestResponseYamlPayload
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<Schemas.RestResponseYamlPayload, GetYamlForFilePathError, Schemas.RestResponseYamlPayload>(
    queryKeyFn({ path: '/setup-as-code/yaml/yaml-content', operationId: 'getYamlForFilePath', variables }),
    () => fetchGetYamlForFilePath({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type GetCgEventConfigPathParams = {
  eventConfigId: string
}

export type GetCgEventConfigQueryParams = {
  appId?: string
  accountId?: string
}

export type GetCgEventConfigError = Fetcher.ErrorWrapper<undefined>

export type GetCgEventConfigVariables = {
  pathParams: GetCgEventConfigPathParams
  queryParams?: GetCgEventConfigQueryParams
} & PortalContext['fetcherOptions']

export const fetchGetCgEventConfig = (variables: GetCgEventConfigVariables) =>
  portalFetch<
    Schemas.RestResponseYamlPayload,
    GetCgEventConfigError,
    undefined,
    {},
    GetCgEventConfigQueryParams,
    GetCgEventConfigPathParams
  >({ url: '/setup-as-code/yaml/cgeventconfigs/{eventConfigId}', method: 'get', ...variables })

export const useGetCgEventConfig = (
  variables: GetCgEventConfigVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.RestResponseYamlPayload, GetCgEventConfigError, Schemas.RestResponseYamlPayload>,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<Schemas.RestResponseYamlPayload, GetCgEventConfigError, Schemas.RestResponseYamlPayload>(
    queryKeyFn({
      path: '/setup-as-code/yaml/cgeventconfigs/{eventConfigId}',
      operationId: 'getCgEventConfig',
      variables
    }),
    () => fetchGetCgEventConfig({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type UpdateCgEventConfigPathParams = {
  eventConfigId: string
}

export type UpdateCgEventConfigQueryParams = {
  accountId?: string
  appId?: string
}

export type UpdateCgEventConfigError = Fetcher.ErrorWrapper<undefined>

export type UpdateCgEventConfigVariables = {
  body?: RequestBodies.YamlPayload
  pathParams: UpdateCgEventConfigPathParams
  queryParams?: UpdateCgEventConfigQueryParams
} & PortalContext['fetcherOptions']

export const fetchUpdateCgEventConfig = (variables: UpdateCgEventConfigVariables) =>
  portalFetch<
    Schemas.RestResponseCgEventConfig,
    UpdateCgEventConfigError,
    RequestBodies.YamlPayload,
    {},
    UpdateCgEventConfigQueryParams,
    UpdateCgEventConfigPathParams
  >({ url: '/setup-as-code/yaml/cgeventconfigs/{eventConfigId}', method: 'put', ...variables })

export const useUpdateCgEventConfig = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.RestResponseCgEventConfig,
      UpdateCgEventConfigError,
      UpdateCgEventConfigVariables
    >,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<
    Schemas.RestResponseCgEventConfig,
    UpdateCgEventConfigError,
    UpdateCgEventConfigVariables
  >((variables: UpdateCgEventConfigVariables) => fetchUpdateCgEventConfig({ ...fetcherOptions, ...variables }), options)
}

export type GetApplicationManifestIdPathParams = {
  applicationManifestId: string
}

export type GetApplicationManifestIdQueryParams = {
  appId?: string
  serviceId?: string
}

export type GetApplicationManifestIdError = Fetcher.ErrorWrapper<undefined>

export type GetApplicationManifestIdVariables = {
  pathParams: GetApplicationManifestIdPathParams
  queryParams?: GetApplicationManifestIdQueryParams
} & PortalContext['fetcherOptions']

export const fetchGetApplicationManifestId = (variables: GetApplicationManifestIdVariables) =>
  portalFetch<
    Schemas.RestResponseYamlPayload,
    GetApplicationManifestIdError,
    undefined,
    {},
    GetApplicationManifestIdQueryParams,
    GetApplicationManifestIdPathParams
  >({ url: '/setup-as-code/yaml/application-manifests/{applicationManifestId}', method: 'get', ...variables })

export const useGetApplicationManifestId = (
  variables: GetApplicationManifestIdVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponseYamlPayload,
      GetApplicationManifestIdError,
      Schemas.RestResponseYamlPayload
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponseYamlPayload,
    GetApplicationManifestIdError,
    Schemas.RestResponseYamlPayload
  >(
    queryKeyFn({
      path: '/setup-as-code/yaml/application-manifests/{applicationManifestId}',
      operationId: 'getApplicationManifestId',
      variables
    }),
    () => fetchGetApplicationManifestId({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type UpdateApplicationManifest1PathParams = {
  applicationManifestId: string
}

export type UpdateApplicationManifest1QueryParams = {
  accountId?: string
  appId?: string
  serviceId?: string
}

export type UpdateApplicationManifest1Error = Fetcher.ErrorWrapper<undefined>

export type UpdateApplicationManifest1Variables = {
  body?: RequestBodies.YamlPayload
  pathParams: UpdateApplicationManifest1PathParams
  queryParams?: UpdateApplicationManifest1QueryParams
} & PortalContext['fetcherOptions']

export const fetchUpdateApplicationManifest1 = (variables: UpdateApplicationManifest1Variables) =>
  portalFetch<
    Schemas.RestResponseYamlPayload,
    UpdateApplicationManifest1Error,
    RequestBodies.YamlPayload,
    {},
    UpdateApplicationManifest1QueryParams,
    UpdateApplicationManifest1PathParams
  >({ url: '/setup-as-code/yaml/application-manifests/{applicationManifestId}', method: 'put', ...variables })

export const useUpdateApplicationManifest1 = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.RestResponseYamlPayload,
      UpdateApplicationManifest1Error,
      UpdateApplicationManifest1Variables
    >,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<
    Schemas.RestResponseYamlPayload,
    UpdateApplicationManifest1Error,
    UpdateApplicationManifest1Variables
  >(
    (variables: UpdateApplicationManifest1Variables) =>
      fetchUpdateApplicationManifest1({ ...fetcherOptions, ...variables }),
    options
  )
}

export type GetApplicationManifestFilePathParams = {
  manifestFileId: string
}

export type GetApplicationManifestFileQueryParams = {
  appId?: string
  serviceId?: string
}

export type GetApplicationManifestFileError = Fetcher.ErrorWrapper<undefined>

export type GetApplicationManifestFileVariables = {
  pathParams: GetApplicationManifestFilePathParams
  queryParams?: GetApplicationManifestFileQueryParams
} & PortalContext['fetcherOptions']

export const fetchGetApplicationManifestFile = (variables: GetApplicationManifestFileVariables) =>
  portalFetch<
    Schemas.RestResponseYamlPayload,
    GetApplicationManifestFileError,
    undefined,
    {},
    GetApplicationManifestFileQueryParams,
    GetApplicationManifestFilePathParams
  >({ url: '/setup-as-code/yaml/manifest-files/{manifestFileId}', method: 'get', ...variables })

export const useGetApplicationManifestFile = (
  variables: GetApplicationManifestFileVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponseYamlPayload,
      GetApplicationManifestFileError,
      Schemas.RestResponseYamlPayload
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponseYamlPayload,
    GetApplicationManifestFileError,
    Schemas.RestResponseYamlPayload
  >(
    queryKeyFn({
      path: '/setup-as-code/yaml/manifest-files/{manifestFileId}',
      operationId: 'getApplicationManifestFile',
      variables
    }),
    () => fetchGetApplicationManifestFile({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type UpdateManifestFile2PathParams = {
  manifestFileId: string
}

export type UpdateManifestFile2QueryParams = {
  accountId?: string
  serviceId?: string
  appId?: string
}

export type UpdateManifestFile2Error = Fetcher.ErrorWrapper<undefined>

export type UpdateManifestFile2Variables = {
  body?: RequestBodies.YamlPayload
  pathParams: UpdateManifestFile2PathParams
  queryParams?: UpdateManifestFile2QueryParams
} & PortalContext['fetcherOptions']

export const fetchUpdateManifestFile2 = (variables: UpdateManifestFile2Variables) =>
  portalFetch<
    Schemas.RestResponseManifestFile,
    UpdateManifestFile2Error,
    RequestBodies.YamlPayload,
    {},
    UpdateManifestFile2QueryParams,
    UpdateManifestFile2PathParams
  >({ url: '/setup-as-code/yaml/manifest-files/{manifestFileId}', method: 'put', ...variables })

export const useUpdateManifestFile2 = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.RestResponseManifestFile,
      UpdateManifestFile2Error,
      UpdateManifestFile2Variables
    >,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<
    Schemas.RestResponseManifestFile,
    UpdateManifestFile2Error,
    UpdateManifestFile2Variables
  >((variables: UpdateManifestFile2Variables) => fetchUpdateManifestFile2({ ...fetcherOptions, ...variables }), options)
}

export type GetSettingAttributesListQueryParams = {
  accountId?: string
  type?: string
}

export type GetSettingAttributesListError = Fetcher.ErrorWrapper<undefined>

export type GetSettingAttributesListVariables = {
  queryParams?: GetSettingAttributesListQueryParams
} & PortalContext['fetcherOptions']

export const fetchGetSettingAttributesList = (variables: GetSettingAttributesListVariables) =>
  portalFetch<
    Schemas.RestResponseYamlPayload,
    GetSettingAttributesListError,
    undefined,
    {},
    GetSettingAttributesListQueryParams,
    {}
  >({ url: '/setup-as-code/yaml/settings', method: 'get', ...variables })

export const useGetSettingAttributesList = (
  variables: GetSettingAttributesListVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestResponseYamlPayload,
      GetSettingAttributesListError,
      Schemas.RestResponseYamlPayload
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<
    Schemas.RestResponseYamlPayload,
    GetSettingAttributesListError,
    Schemas.RestResponseYamlPayload
  >(
    queryKeyFn({ path: '/setup-as-code/yaml/settings', operationId: 'getSettingAttributesList', variables }),
    () => fetchGetSettingAttributesList({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type GetDefaultsPathParams = {
  uuid: string
}

export type GetDefaultsQueryParams = {
  accountId?: string
}

export type GetDefaultsError = Fetcher.ErrorWrapper<undefined>

export type GetDefaultsVariables = {
  pathParams: GetDefaultsPathParams
  queryParams?: GetDefaultsQueryParams
} & PortalContext['fetcherOptions']

export const fetchGetDefaults = (variables: GetDefaultsVariables) =>
  portalFetch<
    Schemas.RestResponseYamlPayload,
    GetDefaultsError,
    undefined,
    {},
    GetDefaultsQueryParams,
    GetDefaultsPathParams
  >({ url: '/setup-as-code/yaml/defaults/{uuid}', method: 'get', ...variables })

export const useGetDefaults = (
  variables: GetDefaultsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.RestResponseYamlPayload, GetDefaultsError, Schemas.RestResponseYamlPayload>,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePortalContext(options)
  return reactQuery.useQuery<Schemas.RestResponseYamlPayload, GetDefaultsError, Schemas.RestResponseYamlPayload>(
    queryKeyFn({ path: '/setup-as-code/yaml/defaults/{uuid}', operationId: 'getDefaults', variables }),
    () => fetchGetDefaults({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type UpdateDefaultsPathParams = {
  uuid: string
}

export type UpdateDefaultsQueryParams = {
  accountId?: string
}

export type UpdateDefaultsError = Fetcher.ErrorWrapper<undefined>

export type UpdateDefaultsVariables = {
  body?: RequestBodies.YamlPayload
  pathParams: UpdateDefaultsPathParams
  queryParams?: UpdateDefaultsQueryParams
} & PortalContext['fetcherOptions']

export const fetchUpdateDefaults = (variables: UpdateDefaultsVariables) =>
  portalFetch<
    Schemas.RestResponseServiceCommand,
    UpdateDefaultsError,
    RequestBodies.YamlPayload,
    {},
    UpdateDefaultsQueryParams,
    UpdateDefaultsPathParams
  >({ url: '/setup-as-code/yaml/defaults/{uuid}', method: 'put', ...variables })

export const useUpdateDefaults = (
  options?: Omit<
    reactQuery.UseMutationOptions<Schemas.RestResponseServiceCommand, UpdateDefaultsError, UpdateDefaultsVariables>,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePortalContext()
  return reactQuery.useMutation<Schemas.RestResponseServiceCommand, UpdateDefaultsError, UpdateDefaultsVariables>(
    (variables: UpdateDefaultsVariables) => fetchUpdateDefaults({ ...fetcherOptions, ...variables }),
    options
  )
}

export type QueryOperation =
  | {
      path: '/agent/delegates/v2/dummy'
      operationId: 'getDummy'
      variables: GetDummyVariables
    }
  | {
      path: '/delegate-token/ng'
      operationId: 'getDelegateTokens'
      variables: GetDelegateTokensVariables
    }
  | {
      path: '/setup/delegates/v2/{delegateGroupId}'
      operationId: 'get'
      variables: GetVariables
    }
  | {
      path: '/setup/delegates/v2'
      operationId: 'list'
      variables: ListVariables
    }
  | {
      path: '/setup/delegates/v2/up-the-hierarchy'
      operationId: 'listUpTheHierarchy'
      variables: ListUpTheHierarchyVariables
    }
  | {
      path: '/setup/delegates/ng/v2/{identifier}'
      operationId: 'get1'
      variables: Get1Variables
    }
  | {
      path: '/setup/delegates/ng/v2'
      operationId: 'list1'
      variables: List1Variables
    }
  | {
      path: '/setup/delegates/ng/v2/up-the-hierarchy'
      operationId: 'listUpTheHierarchy1'
      variables: ListUpTheHierarchy1Variables
    }
  | {
      path: '/delegate-token/{tokenName}'
      operationId: 'getTokenValue'
      variables: GetTokenValueVariables
    }
  | {
      path: '/delegate-token'
      operationId: 'getDelegateTokens1'
      variables: GetDelegateTokens1Variables
    }
  | {
      path: '/upgrade-check/delegate'
      operationId: 'getDelegateImageTag'
      variables: GetDelegateImageTagVariables
    }
  | {
      path: '/upgrade-check/upgrader'
      operationId: 'getUpgraderImageTag'
      variables: GetUpgraderImageTagVariables
    }
  | {
      path: '/accessRequest/{accountId}/listAccessRequest'
      operationId: 'listAccessRequest'
      variables: ListAccessRequestVariables
    }
  | {
      path: '/accessRequest/{accountId}/listAccessRequest/harnessUserGroup'
      operationId: 'listActiveAccessRequest'
      variables: ListActiveAccessRequestVariables
    }
  | {
      path: '/accessRequest/{accountId}/listAccessRequest/account'
      operationId: 'listActiveAccessRequestForAccount'
      variables: ListActiveAccessRequestForAccountVariables
    }
  | {
      path: '/accessRequest/{accountId}/listAllAccessRequest/account'
      operationId: 'listAllAccessRequestForAccount'
      variables: ListAllAccessRequestForAccountVariables
    }
  | {
      path: '/account/exportableCollections'
      operationId: 'exportAccountCollectionData'
      variables: ExportAccountCollectionDataVariables
    }
  | {
      path: '/account/exportCollection'
      operationId: 'exportAccountCollectionData1'
      variables: ExportAccountCollectionData1Variables
    }
  | {
      path: '/account/exportBatchCollection'
      operationId: 'exportAccountCollectionBatchData'
      variables: ExportAccountCollectionBatchDataVariables
    }
  | {
      path: '/account/export'
      operationId: 'exportAccountData'
      variables: ExportAccountDataVariables
    }
  | {
      path: '/account/{accountId}'
      operationId: 'getAccount'
      variables: GetAccountVariables
    }
  | {
      path: '/account/{accountId}/details'
      operationId: 'getAccountDetails'
      variables: GetAccountDetailsVariables
    }
  | {
      path: '/account'
      operationId: 'getAccounts'
      variables: GetAccountsVariables
    }
  | {
      path: '/account/{accountId}/whitelisted-domains'
      operationId: 'getWhitelistedDomains'
      variables: GetWhitelistedDomainsVariables
    }
  | {
      path: '/account/{accountId}/isRestrictedAccessEnabled'
      operationId: 'isRestrictedAccessEnabled'
      variables: IsRestrictedAccessEnabledVariables
    }
  | {
      path: '/account/authentication-info'
      operationId: 'getAuthenticationInfo'
      variables: GetAuthenticationInfoVariables
    }
  | {
      path: '/account/{accountId}/status'
      operationId: 'getStatus'
      variables: GetStatusVariables
    }
  | {
      path: '/account/feature-flag-enabled'
      operationId: 'isFeatureEnabled'
      variables: IsFeatureEnabledVariables
    }
  | {
      path: '/account/services-cv-24x7'
      operationId: 'getAllServicesFor24x7'
      variables: GetAllServicesFor24x7Variables
    }
  | {
      path: '/account/services-cv-24x7-breadcrumb'
      operationId: 'getAllServicesFor24x71'
      variables: GetAllServicesFor24x71Variables
    }
  | {
      path: '/account/delegate/active'
      operationId: 'checkSampleDelegate'
      variables: CheckSampleDelegateVariables
    }
  | {
      path: '/account/delegate/progress'
      operationId: 'checkProgressSampleDelegate'
      variables: CheckProgressSampleDelegateVariables
    }
  | {
      path: '/account/{accountId}/latest'
      operationId: 'getLatestAccount'
      variables: GetLatestAccountVariables
    }
  | {
      path: '/account/{accountId}/ng/license'
      operationId: 'getNgAccountLicense'
      variables: GetNgAccountLicenseVariables
    }
  | {
      path: '/activities/{activityId}'
      operationId: 'get2'
      variables: Get2Variables
    }
  | {
      path: '/activities'
      operationId: 'list2'
      variables: List2Variables
    }
  | {
      path: '/activities/{activityId}/logs'
      operationId: 'listLogs'
      variables: ListLogsVariables
    }
  | {
      path: '/activities/{stateExecutionId}/api-call-logs'
      operationId: 'listLogs1'
      variables: ListLogs1Variables
    }
  | {
      path: '/activities/{activityId}/units'
      operationId: 'getActivityCommandUnits'
      variables: GetActivityCommandUnitsVariables
    }
  | {
      path: '/activities/{activityId}/all-logs'
      operationId: 'exportLogs'
      variables: ExportLogsVariables
    }
  | {
      path: '/alert-notification-rules'
      operationId: 'list3'
      variables: List3Variables
    }
  | {
      path: '/alert-notification-rules/status'
      operationId: 'getStatus1'
      variables: GetStatus1Variables
    }
  | {
      path: '/api-keys/{apiKeyId}'
      operationId: 'get3'
      variables: Get3Variables
    }
  | {
      path: '/api-keys'
      operationId: 'list4'
      variables: List4Variables
    }
  | {
      path: '/app-containers/{appContainerId}'
      operationId: 'get4'
      variables: Get4Variables
    }
  | {
      path: '/app-containers'
      operationId: 'list5'
      variables: List5Variables
    }
  | {
      path: '/app-containers/{appContainerId}/download'
      operationId: 'download'
      variables: DownloadVariables
    }
  | {
      path: '/apps/{appId}'
      operationId: 'get5'
      variables: Get5Variables
    }
  | {
      path: '/apps'
      operationId: 'list6'
      variables: List6Variables
    }
  | {
      path: '/appdynamics/applications'
      operationId: 'getAllApplications'
      variables: GetAllApplicationsVariables
    }
  | {
      path: '/appdynamics/tiers'
      operationId: 'getAllTiers'
      variables: GetAllTiersVariables
    }
  | {
      path: '/app-manifests/{appManifestId}'
      operationId: 'getApplicationManifest'
      variables: GetApplicationManifestVariables
    }
  | {
      path: '/app-manifests/{appManifestId}/manifest-file/{manifestFileId}'
      operationId: 'getManifestFile'
      variables: GetManifestFileVariables
    }
  | {
      path: '/app-manifests'
      operationId: 'list7'
      variables: List7Variables
    }
  | {
      path: '/app-manifests/{appManifestId}/manifest-files-from-git'
      operationId: 'getManifestFilesFromGit'
      variables: GetManifestFilesFromGitVariables
    }
  | {
      path: '/app-manifests/{appManifestId}/manifest-files'
      operationId: 'listManifestFiles'
      variables: ListManifestFilesVariables
    }
  | {
      path: '/app-manifests/list-with-polling-enabled'
      operationId: 'listPollingEnabled'
      variables: ListPollingEnabledVariables
    }
  | {
      path: '/artifacts/{artifactId}'
      operationId: 'get6'
      variables: Get6Variables
    }
  | {
      path: '/artifacts'
      operationId: 'list8'
      variables: List8Variables
    }
  | {
      path: '/artifacts/{artifactId}/artifactFile'
      operationId: 'download1'
      variables: Download1Variables
    }
  | {
      path: '/artifacts/v2'
      operationId: 'listArtifactsByServiceId'
      variables: ListArtifactsByServiceIdVariables
    }
  | {
      path: '/artifactstreams/{streamId}'
      operationId: 'get7'
      variables: Get7Variables
    }
  | {
      path: '/artifactstreams'
      operationId: 'list9'
      variables: List9Variables
    }
  | {
      path: '/artifactstreams/buildsource-types'
      operationId: 'getBuildSourceTypes'
      variables: GetBuildSourceTypesVariables
    }
  | {
      path: '/artifactstreams/summary'
      operationId: 'listArtifactStreamSummary'
      variables: ListArtifactStreamSummaryVariables
    }
  | {
      path: '/artifactstreams/{id}/parameters'
      operationId: 'listArtifactStreamParameters'
      variables: ListArtifactStreamParametersVariables
    }
  | {
      path: '/audits'
      operationId: 'list10'
      variables: List10Variables
    }
  | {
      path: '/audits/filter'
      operationId: 'listUsingFilter'
      variables: ListUsingFilterVariables
    }
  | {
      path: '/audits/{auditHeaderId}/yamldetails'
      operationId: 'getAuditHeaderDetails'
      variables: GetAuditHeaderDetailsVariables
    }
  | {
      path: '/awshelper/regions'
      operationId: 'list11'
      variables: List11Variables
    }
  | {
      path: '/awshelper/buckets/{settingId}'
      operationId: 'listBuckets'
      variables: ListBucketsVariables
    }
  | {
      path: '/awshelper/cloudformation/capabilities'
      operationId: 'listCloudformationCapabilities'
      variables: ListCloudformationCapabilitiesVariables
    }
  | {
      path: '/awshelper/cf-states'
      operationId: 'listCloudFormationStatues'
      variables: ListCloudFormationStatuesVariables
    }
  | {
      path: '/awshelper/tags'
      operationId: 'listTags'
      variables: ListTagsVariables
    }
  | {
      path: '/awshelper/aws-regions'
      operationId: 'listAwsRegions'
      variables: ListAwsRegionsVariables
    }
  | {
      path: '/azure/subscriptions/{subscriptionId}/containerRegistries'
      operationId: 'listContainerRegistries'
      variables: ListContainerRegistriesVariables
    }
  | {
      path: '/azure/subscriptions/{subscriptionId}/containerRegistries/{registryName}/repositories'
      operationId: 'listRepositories'
      variables: ListRepositoriesVariables
    }
  | {
      path: '/azure/subscriptions/{subscriptionId}/containerRegistries/{registryName}/repositories/{repositoryName}/tags'
      operationId: 'listRepositoryTags'
      variables: ListRepositoryTagsVariables
    }
  | {
      path: '/azure/subscriptions/{subscriptionId}/kubernetesClusters'
      operationId: 'listKubernetesClusters'
      variables: ListKubernetesClustersVariables
    }
  | {
      path: '/azure/regions'
      operationId: 'listAzureRegions'
      variables: ListAzureRegionsVariables
    }
  | {
      path: '/azure/subscriptions'
      operationId: 'listSubscriptions'
      variables: ListSubscriptionsVariables
    }
  | {
      path: '/azure/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/imageGalleries'
      operationId: 'listImageGalleries'
      variables: ListImageGalleriesVariables
    }
  | {
      path: '/azure/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/imageGalleries/{galleryName}/imageDefinitions'
      operationId: 'listImageDefinitions'
      variables: ListImageDefinitionsVariables
    }
  | {
      path: '/azure/subscriptions/{subscriptionId}/resourceGroups'
      operationId: 'listResourceGroups'
      variables: ListResourceGroupsVariables
    }
  | {
      path: '/azure/subscriptions/{subscriptionId}/containerRegistriesWithDetails'
      operationId: 'listContainerRegistriesWithDetails'
      variables: ListContainerRegistriesWithDetailsVariables
    }
  | {
      path: '/bins/framework'
      operationId: 'framework'
      variables: FrameworkVariables
    }
  | {
      path: '/budgets/{id}'
      operationId: 'get8'
      variables: Get8Variables
    }
  | {
      path: '/budgets/perspectiveBudgets'
      operationId: 'list12'
      variables: List12Variables
    }
  | {
      path: '/budgets'
      operationId: 'list13'
      variables: List13Variables
    }
  | {
      path: '/bugsnag/applications'
      operationId: 'getBugsnagApplications'
      variables: GetBugsnagApplicationsVariables
    }
  | {
      path: '/bugsnag/orgs'
      operationId: 'getBugsnagOrganizations'
      variables: GetBugsnagOrganizationsVariables
    }
  | {
      path: '/build-sources/project'
      operationId: 'getProject'
      variables: GetProjectVariables
    }
  | {
      path: '/build-sources/jobs/{jobName}/paths'
      operationId: 'getArtifactPaths'
      variables: GetArtifactPathsVariables
    }
  | {
      path: '/build-sources/smb-paths'
      operationId: 'getSmbPaths'
      variables: GetSmbPathsVariables
    }
  | {
      path: '/build-sources/jobs/{jobName}/groupIds'
      operationId: 'getGroupIds'
      variables: GetGroupIdsVariables
    }
  | {
      path: '/build-sources/jobs'
      operationId: 'getJobs'
      variables: GetJobsVariables
    }
  | {
      path: '/build-sources/jobs/{jobName}/details'
      operationId: 'getJob'
      variables: GetJobVariables
    }
  | {
      path: '/build-sources/builds'
      operationId: 'getBuilds'
      variables: GetBuildsVariables
    }
  | {
      path: '/build-sources/projects'
      operationId: 'listProjects'
      variables: ListProjectsVariables
    }
  | {
      path: '/build-sources/feeds'
      operationId: 'listFeeds'
      variables: ListFeedsVariables
    }
  | {
      path: '/build-sources/feeds/{feed}/packages'
      operationId: 'listPackages'
      variables: ListPackagesVariables
    }
  | {
      path: '/build-sources/buckets'
      operationId: 'getBuckets'
      variables: GetBucketsVariables
    }
  | {
      path: '/build-sources/plans'
      operationId: 'getBuildPlans'
      variables: GetBuildPlansVariables
    }
  | {
      path: '/build-sources/artifact-paths'
      operationId: 'getSftpPaths'
      variables: GetSftpPathsVariables
    }
  | {
      path: '/build-sources/nexus/repositories/{repositoryName}/packageNames'
      operationId: 'fetchPackageNames'
      variables: FetchPackageNamesVariables
    }
  | {
      path: '/build-sources/gcb-triggers'
      operationId: 'getTriggers'
      variables: GetTriggersVariables
    }
  | {
      path: '/ceCommunications/{accountId}'
      operationId: 'getEntriesEnabledViaEmails'
      variables: GetEntriesEnabledViaEmailsVariables
    }
  | {
      path: '/ceCommunications'
      operationId: 'get9'
      variables: Get9Variables
    }
  | {
      path: '/ceReportSchedule/{accountId}'
      operationId: 'getReportSetting'
      variables: GetReportSettingVariables
    }
  | {
      path: '/ceSlackWebhooks'
      operationId: 'get10'
      variables: Get10Variables
    }
  | {
      path: '/cv-activity-logs'
      operationId: 'getActivityLogs'
      variables: GetActivityLogsVariables
    }
  | {
      path: '/cv-configuration/{serviceConfigurationId}'
      operationId: 'getConfiguration'
      variables: GetConfigurationVariables
    }
  | {
      path: '/cv-configuration'
      operationId: 'listConfigurations1'
      variables: ListConfigurations1Variables
    }
  | {
      path: '/cv-configuration/list-cv-configurations'
      operationId: 'listConfigurations'
      variables: ListConfigurationsVariables
    }
  | {
      path: '/catalogs'
      operationId: 'list14'
      variables: List14Variables
    }
  | {
      path: '/catalogs/app-catalogs'
      operationId: 'listForApp'
      variables: ListForAppVariables
    }
  | {
      path: '/events-config/{eventConfigId}'
      operationId: 'getEventConfig'
      variables: GetEventConfigVariables
    }
  | {
      path: '/events-config'
      operationId: 'list15'
      variables: List15Variables
    }
  | {
      path: '/cloudwatch/get-load-balancers'
      operationId: 'getLoadBalancerNames'
      variables: GetLoadBalancerNamesVariables
    }
  | {
      path: '/cloudwatch/get-lambda-functions'
      operationId: 'getLambdaFunctionsNames'
      variables: GetLambdaFunctionsNamesVariables
    }
  | {
      path: '/cloudwatch/get-ec2-instances'
      operationId: 'getEC2Instances'
      variables: GetEC2InstancesVariables
    }
  | {
      path: '/cloudwatch/get-ecs-cluster-names'
      operationId: 'getECSClusterNames'
      variables: GetECSClusterNamesVariables
    }
  | {
      path: '/cloudwatch/get-metric-names'
      operationId: 'getMetricNames'
      variables: GetMetricNamesVariables
    }
  | {
      path: '/clusters/{id}'
      operationId: 'get11'
      variables: Get11Variables
    }
  | {
      path: '/clusters'
      operationId: 'list16'
      variables: List16Variables
    }
  | {
      path: '/configs/{configId}'
      operationId: 'get12'
      variables: Get12Variables
    }
  | {
      path: '/configs'
      operationId: 'list17'
      variables: List17Variables
    }
  | {
      path: '/configs/{configId}/download'
      operationId: 'downloadConfig'
      variables: DownloadConfigVariables
    }
  | {
      path: '/cvdash/get-records'
      operationId: 'getCVExecutionRecords'
      variables: GetCVExecutionRecordsVariables
    }
  | {
      path: '/cvdash/get-all-cv-executions'
      operationId: 'getAllCVExecutions'
      variables: GetAllCVExecutionsVariables
    }
  | {
      path: '/cvdash/heatmap'
      operationId: 'getDetailedHeatMap'
      variables: GetDetailedHeatMapVariables
    }
  | {
      path: '/cvdash/cv24-7-deployment-list'
      operationId: 'getCVExecutionDeploymentRecords'
      variables: GetCVExecutionDeploymentRecordsVariables
    }
  | {
      path: '/cvdash/service-deployment-list'
      operationId: 'getAllDeploymentsForService'
      variables: GetAllDeploymentsForServiceVariables
    }
  | {
      path: '/cvdash/heatmap-summary'
      operationId: 'getHeatMapSummary'
      variables: GetHeatMapSummaryVariables
    }
  | {
      path: '/cvdash/timeseries'
      operationId: 'getFilteredTimeSeriesOfHeatMapUnit'
      variables: GetFilteredTimeSeriesOfHeatMapUnitVariables
    }
  | {
      path: '/cvdash/timeseries-serviceguard'
      operationId: 'getFilteredTimeSeriesOfHeatMapUnitV2'
      variables: GetFilteredTimeSeriesOfHeatMapUnitV2Variables
    }
  | {
      path: '/cvdash/log-24x7-summary'
      operationId: 'getLogAnalysisSummaryOfHeatmap'
      variables: GetLogAnalysisSummaryOfHeatmapVariables
    }
  | {
      path: '/cvdash/metric-tags'
      operationId: 'getListOfMetricTags'
      variables: GetListOfMetricTagsVariables
    }
  | {
      path: '/cvdash/current-analysis-window'
      operationId: 'getCurrenAnalysistWindow'
      variables: GetCurrenAnalysistWindowVariables
    }
  | {
      path: '/apm/verification-state-details'
      operationId: 'getVerificationStateExecutionData'
      variables: GetVerificationStateExecutionDataVariables
    }
  | {
      path: '/apm/collect-24-7-data'
      operationId: 'collect247CVData'
      variables: Collect247CVDataVariables
    }
  | {
      path: '/apm/collect-data'
      operationId: 'collectWorkflowData'
      variables: CollectWorkflowDataVariables
    }
  | {
      path: '/apm/cv-certified-details-workflow'
      operationId: 'getCVCertifiedLabelsForWorkflow'
      variables: GetCVCertifiedLabelsForWorkflowVariables
    }
  | {
      path: '/apm/cv-certified-details-pipeline'
      operationId: 'getCVCertifiedLabelsForPipeline'
      variables: GetCVCertifiedLabelsForPipelineVariables
    }
  | {
      path: '/dash-stats/percentile'
      operationId: 'percentile'
      variables: PercentileVariables
    }
  | {
      path: '/dash-stats/app-instance-summary-stats'
      operationId: 'getAppInstanceSummaryStats'
      variables: GetAppInstanceSummaryStatsVariables
    }
  | {
      path: '/dash-stats/instance-details'
      operationId: 'getInstanceDetails'
      variables: GetInstanceDetailsVariables
    }
  | {
      path: '/dash-stats/service-instance-stats'
      operationId: 'getServiceInstanceStats'
      variables: GetServiceInstanceStatsVariables
    }
  | {
      path: '/dash-stats/service-instance-summary-stats'
      operationId: 'getServiceInstanceSummaryStats'
      variables: GetServiceInstanceSummaryStatsVariables
    }
  | {
      path: '/dash-stats/service-instance-dash'
      operationId: 'getServiceInstanceDashboard'
      variables: GetServiceInstanceDashboardVariables
    }
  | {
      path: '/dash-stats/service-compare-environment'
      operationId: 'getCompareServicesByEnvironment'
      variables: GetCompareServicesByEnvironmentVariables
    }
  | {
      path: '/dash-stats/app-instance-stats'
      operationId: 'getAppInstanceStats'
      variables: GetAppInstanceStatsVariables
    }
  | {
      path: '/dash-stats/app-instance-count-stats'
      operationId: 'getAppInstanceCountStats'
      variables: GetAppInstanceCountStatsVariables
    }
  | {
      path: '/dash-stats/manual-sync-job'
      operationId: 'getManualSyncJobStatus'
      variables: GetManualSyncJobStatusVariables
    }
  | {
      path: '/dash-stats/timeline'
      operationId: 'getInstanceStatsForGivenTime'
      variables: GetInstanceStatsForGivenTimeVariables
    }
  | {
      path: '/dash-stats/instance-history-ranges'
      operationId: 'getTimeRanges'
      variables: GetTimeRangesVariables
    }
  | {
      path: '/datadog/metric-names'
      operationId: 'getAllMetricNames'
      variables: GetAllMetricNamesVariables
    }
  | {
      path: '/agent/delegates/configuration'
      operationId: 'getDelegateConfiguration'
      variables: GetDelegateConfigurationVariables
    }
  | {
      path: '/agent/delegates/{delegateId}/profile'
      operationId: 'checkForProfile'
      variables: CheckForProfileVariables
    }
  | {
      path: '/agent/delegates/{delegateId}/tasks/{taskId}/fail'
      operationId: 'failIfAllDelegatesFailed'
      variables: FailIfAllDelegatesFailedVariables
    }
  | {
      path: '/agent/delegates/{delegateId}/upgrade'
      operationId: 'checkForUpgrade'
      variables: CheckForUpgradeVariables
    }
  | {
      path: '/agent/delegates/delegateScriptsNg'
      operationId: 'getDelegateScriptsNg'
      variables: GetDelegateScriptsNgVariables
    }
  | {
      path: '/agent/delegates/delegateScripts'
      operationId: 'getDelegateScripts'
      variables: GetDelegateScriptsVariables
    }
  | {
      path: '/agent/delegates/{delegateId}/task-events'
      operationId: 'getDelegateTaskEvents'
      variables: GetDelegateTaskEventsVariables
    }
  | {
      path: '/agent/delegateFiles/fileId'
      operationId: 'getFileId'
      variables: GetFileIdVariables
    }
  | {
      path: '/agent/delegateFiles/downloadConfig'
      operationId: 'downloadConfigFile'
      variables: DownloadConfigFileVariables
    }
  | {
      path: '/agent/delegateFiles/download'
      operationId: 'downloadFile'
      variables: DownloadFileVariables
    }
  | {
      path: '/agent/delegateFiles/metainfo'
      operationId: 'getFileInfo'
      variables: GetFileInfoVariables
    }
  | {
      path: '/delegate-profiles'
      operationId: 'list18'
      variables: List18Variables
    }
  | {
      path: '/delegate-profiles/{delegateProfileId}'
      operationId: 'get13'
      variables: Get13Variables
    }
  | {
      path: '/delegate-profiles/v2/{delegateProfileId}'
      operationId: 'getV2'
      variables: GetV2Variables
    }
  | {
      path: '/delegate-profiles/v2'
      operationId: 'listV21'
      variables: ListV21Variables
    }
  | {
      path: '/delegate-scopes'
      operationId: 'list19'
      variables: List19Variables
    }
  | {
      path: '/delegate-scopes/{delegateScopeId}'
      operationId: 'get14'
      variables: Get14Variables
    }
  | {
      path: '/selection-logs'
      operationId: 'getSelectionLogs'
      variables: GetSelectionLogsVariables
    }
  | {
      path: '/selection-logs/v2'
      operationId: 'getSelectionLogsV2'
      variables: GetSelectionLogsV2Variables
    }
  | {
      path: '/setup/delegates/latest'
      operationId: 'get15'
      variables: Get15Variables
    }
  | {
      path: '/setup/delegates/{delegateId}'
      operationId: 'get16'
      variables: Get16Variables
    }
  | {
      path: '/setup/delegates'
      operationId: 'list20'
      variables: List20Variables
    }
  | {
      path: '/setup/delegates/delegate-selectors'
      operationId: 'delegateSelectors'
      variables: DelegateSelectorsVariables
    }
  | {
      path: '/setup/delegates/kubernetes/account-identifier'
      operationId: 'getAccountIdentifier'
      variables: GetAccountIdentifierVariables
    }
  | {
      path: '/setup/delegates/status2'
      operationId: 'listDelegateStatusWithScalingGroups'
      variables: ListDelegateStatusWithScalingGroupsVariables
    }
  | {
      path: '/setup/delegates/available-versions-for-verification'
      operationId: 'getAvailableVersions'
      variables: GetAvailableVersionsVariables
    }
  | {
      path: '/setup/delegates/connected-ratio-with-primary'
      operationId: 'getConnectedRatioWithPrimary'
      variables: GetConnectedRatioWithPrimaryVariables
    }
  | {
      path: '/setup/delegates/validateDelegateName'
      operationId: 'validateThatDelegateNameIsUnique'
      variables: ValidateThatDelegateNameIsUniqueVariables
    }
  | {
      path: '/setup/delegates/validate-ce-delegate'
      operationId: 'validateCEDelegate'
      variables: ValidateCEDelegateVariables
    }
  | {
      path: '/setup/delegates/{delegateId}/profile-result'
      operationId: 'getProfileResult'
      variables: GetProfileResultVariables
    }
  | {
      path: '/setup/delegates/delegate-sizes'
      operationId: 'delegateSizes'
      variables: DelegateSizesVariables
    }
  | {
      path: '/setup/delegates/delegate-tags'
      operationId: 'delegateTags'
      variables: DelegateTagsVariables
    }
  | {
      path: '/setup/delegates/kubernetes-delegates'
      operationId: 'kubernetesDelegateNames'
      variables: KubernetesDelegateNamesVariables
    }
  | {
      path: '/setup/delegates/delegate-selectors-up-the-hierarchy'
      operationId: 'delegateSelectorsUpTheHierarchy'
      variables: DelegateSelectorsUpTheHierarchyVariables
    }
  | {
      path: '/setup/delegates/downloadUrl'
      operationId: 'downloadUrl'
      variables: DownloadUrlVariables
    }
  | {
      path: '/setup/delegates/download'
      operationId: 'downloadScripts'
      variables: DownloadScriptsVariables
    }
  | {
      path: '/setup/delegates/docker'
      operationId: 'downloadDocker'
      variables: DownloadDockerVariables
    }
  | {
      path: '/setup/delegates/kubernetes'
      operationId: 'downloadKubernetes'
      variables: DownloadKubernetesVariables
    }
  | {
      path: '/setup/delegates/ecs'
      operationId: 'downloadEcs'
      variables: DownloadEcsVariables
    }
  | {
      path: '/setup/delegates/delegate-helm-values-yaml'
      operationId: 'downloadDelegateValuesYaml'
      variables: DownloadDelegateValuesYamlVariables
    }
  | {
      path: '/setup/delegates/status'
      operationId: 'listDelegateStatus'
      variables: ListDelegateStatusVariables
    }
  | {
      path: '/setup/delegates/v3/latest'
      operationId: 'get17'
      variables: Get17Variables
    }
  | {
      path: '/setup/delegates/v3/{delegateId}'
      operationId: 'get18'
      variables: Get18Variables
    }
  | {
      path: '/setup/delegates/v3/ng/delegate-token'
      operationId: 'list21'
      variables: List21Variables
    }
  | {
      path: '/setup/delegates/v3/delegate-selectors'
      operationId: 'delegateSelectors1'
      variables: DelegateSelectors1Variables
    }
  | {
      path: '/setup/delegates/v3/kubernetes/account-identifier'
      operationId: 'getAccountIdentifier1'
      variables: GetAccountIdentifier1Variables
    }
  | {
      path: '/setup/delegates/v3/status2'
      operationId: 'listDelegateStatusWithScalingGroups1'
      variables: ListDelegateStatusWithScalingGroups1Variables
    }
  | {
      path: '/setup/delegates/v3/available-versions-for-verification'
      operationId: 'getAvailableVersions1'
      variables: GetAvailableVersions1Variables
    }
  | {
      path: '/setup/delegates/v3/connected-ratio-with-primary'
      operationId: 'getConnectedRatioWithPrimary1'
      variables: GetConnectedRatioWithPrimary1Variables
    }
  | {
      path: '/setup/delegates/v3/validateDelegateName'
      operationId: 'validateThatDelegateNameIsUnique1'
      variables: ValidateThatDelegateNameIsUnique1Variables
    }
  | {
      path: '/setup/delegates/v3/validate-ce-delegate'
      operationId: 'validateCEDelegate1'
      variables: ValidateCEDelegate1Variables
    }
  | {
      path: '/setup/delegates/v3/{delegateId}/profile-result'
      operationId: 'getProfileResult1'
      variables: GetProfileResult1Variables
    }
  | {
      path: '/setup/delegates/v3/delegate-sizes'
      operationId: 'delegateSizes1'
      variables: DelegateSizes1Variables
    }
  | {
      path: '/setup/delegates/v3/delegate-tags'
      operationId: 'delegateTags1'
      variables: DelegateTags1Variables
    }
  | {
      path: '/setup/delegates/v3/kubernetes-delegates'
      operationId: 'kubernetesDelegateNames1'
      variables: KubernetesDelegateNames1Variables
    }
  | {
      path: '/setup/delegates/v3/delegate-selectors-up-the-hierarchy'
      operationId: 'delegateSelectorsUpTheHierarchy1'
      variables: DelegateSelectorsUpTheHierarchy1Variables
    }
  | {
      path: '/setup/delegates/v3/downloadUrl'
      operationId: 'downloadUrl1'
      variables: DownloadUrl1Variables
    }
  | {
      path: '/setup/delegates/v3/download'
      operationId: 'downloadScripts1'
      variables: DownloadScripts1Variables
    }
  | {
      path: '/setup/delegates/v3/docker'
      operationId: 'downloadDocker1'
      variables: DownloadDocker1Variables
    }
  | {
      path: '/setup/delegates/v3/kubernetes'
      operationId: 'downloadKubernetes1'
      variables: DownloadKubernetes1Variables
    }
  | {
      path: '/setup/delegates/v3/ecs'
      operationId: 'downloadEcs1'
      variables: DownloadEcs1Variables
    }
  | {
      path: '/setup/delegates/v3/delegate-helm-values-yaml'
      operationId: 'downloadDelegateValuesYaml1'
      variables: DownloadDelegateValuesYaml1Variables
    }
  | {
      path: '/setup/delegates/v3/ng/validate-docker-delegate-details'
      operationId: 'validateDockerSetupDetails'
      variables: ValidateDockerSetupDetailsVariables
    }
  | {
      path: '/delegate-task-selector-map'
      operationId: 'list22'
      variables: List22Variables
    }
  | {
      path: '/delegates-verification/heartbeatV2'
      operationId: 'getDelegatesHeartbeatDetailsV2'
      variables: GetDelegatesHeartbeatDetailsV2Variables
    }
  | {
      path: '/delegates-verification/initializedV2'
      operationId: 'getDelegatesInitializationDetailsV2'
      variables: GetDelegatesInitializationDetailsV2Variables
    }
  | {
      path: '/dynatrace/services'
      operationId: 'getDynatraceServices'
      variables: GetDynatraceServicesVariables
    }
  | {
      path: '/elk/get-indices'
      operationId: 'getIndices'
      variables: GetIndicesVariables
    }
  | {
      path: '/elk/get-host-records'
      operationId: 'getHostLogRecord'
      variables: GetHostLogRecordVariables
    }
  | {
      path: '/elk/get-sample-record'
      operationId: 'getSampleLogRecord'
      variables: GetSampleLogRecordVariables
    }
  | {
      path: '/environments/{envId}'
      operationId: 'get19'
      variables: Get19Variables
    }
  | {
      path: '/environments'
      operationId: 'list23'
      variables: List23Variables
    }
  | {
      path: '/environments/{envId}/values/{manifestFileId}'
      operationId: 'getValues'
      variables: GetValuesVariables
    }
  | {
      path: '/environments/{envId}/services'
      operationId: 'getServicesWithOverrides'
      variables: GetServicesWithOverridesVariables
    }
  | {
      path: '/environments/{envId}/service/{serviceId}/values/{manifestFileId}'
      operationId: 'getValuesForService'
      variables: GetValuesForServiceVariables
    }
  | {
      path: '/environments/{envId}/service/{serviceId}/values/app-manifest/{appManifestId}'
      operationId: 'getValuesAppManifestForService'
      variables: GetValuesAppManifestForServiceVariables
    }
  | {
      path: '/environments/{envId}/values-manifest-file'
      operationId: 'getValuesManifestFile'
      variables: GetValuesManifestFileVariables
    }
  | {
      path: '/environments/{envId}/manifest-files'
      operationId: 'getLocalOverrideManifestFiles'
      variables: GetLocalOverrideManifestFilesVariables
    }
  | {
      path: '/environments/{envId}/values/app-manifest/{appManifestId}'
      operationId: 'getValuesAppManifest'
      variables: GetValuesAppManifestVariables
    }
  | {
      path: '/environments/{envId}/values-app-manifest'
      operationId: 'getValuesAppManifest1'
      variables: GetValuesAppManifest1Variables
    }
  | {
      path: '/executions'
      operationId: 'listExecutions'
      variables: ListExecutionsVariables
    }
  | {
      path: '/executions/{workflowExecutionId}'
      operationId: 'getExecutionDetails'
      variables: GetExecutionDetailsVariables
    }
  | {
      path: '/executions/resumeStages'
      operationId: 'getResumeStages'
      variables: GetResumeStagesVariables
    }
  | {
      path: '/executions/resumeHistory'
      operationId: 'getResumeHistory'
      variables: GetResumeHistoryVariables
    }
  | {
      path: '/executions/rollbackConfirmation'
      operationId: 'getRollbackConfirmation'
      variables: GetRollbackConfirmationVariables
    }
  | {
      path: '/executions/{workflowExecutionId}/node/{stateExecutionInstanceId}'
      operationId: 'getExecutionNodeDetails'
      variables: GetExecutionNodeDetailsVariables
    }
  | {
      path: '/executions/{workflowExecutionId}/history/{stateExecutionInstanceId}'
      operationId: 'getExecutionHistory'
      variables: GetExecutionHistoryVariables
    }
  | {
      path: '/executions/{workflowExecutionId}/interruption/{stateExecutionInstanceId}'
      operationId: 'getExecutionInterrupt'
      variables: GetExecutionInterruptVariables
    }
  | {
      path: '/executions/{workflowExecutionId}/inspection/{stateExecutionInstanceId}'
      operationId: 'getExecutionInspection'
      variables: GetExecutionInspectionVariables
    }
  | {
      path: '/executions/{workflowExecutionId}/element/{stateExecutionInstanceId}'
      operationId: 'getExecutionElement'
      variables: GetExecutionElementVariables
    }
  | {
      path: '/executions/{workflowExecutionId}/mark-baseline'
      operationId: 'markAsBaseline'
      variables: MarkAsBaselineVariables
    }
  | {
      path: '/executions/{workflowExecutionId}/get-baseline'
      operationId: 'getBaselineDetails'
      variables: GetBaselineDetailsVariables
    }
  | {
      path: '/executions/artifacts'
      operationId: 'getLastDeployedArtifacts'
      variables: GetLastDeployedArtifactsVariables
    }
  | {
      path: '/executions/{workflowExecutionId}/waitingOnDeployments'
      operationId: 'getWaitingOnDeployments'
      variables: GetWaitingOnDeploymentsVariables
    }
  | {
      path: '/executions/{workflowExecutionId}/approvalAuthorization'
      operationId: 'getApprovalAuthorization'
      variables: GetApprovalAuthorizationVariables
    }
  | {
      path: '/executions/{workflowExecutionId}/constraint-executions'
      operationId: 'getExecutionsForConstraint'
      variables: GetExecutionsForConstraintVariables
    }
  | {
      path: '/executions/info/{workflowExecutionId}'
      operationId: 'getWorkflowExecutionInfo'
      variables: GetWorkflowExecutionInfoVariables
    }
  | {
      path: '/learning-exp/get-exp-analysis-info'
      operationId: 'getLogExpAnalysisInfo'
      variables: GetLogExpAnalysisInfoVariables
    }
  | {
      path: '/learning-exp/get-analysis-summary'
      operationId: 'getLogAnalysisSummary'
      variables: GetLogAnalysisSummaryVariables
    }
  | {
      path: '/learning-exp/msg-pairs-to-vote'
      operationId: 'getMessageComparisonList'
      variables: GetMessageComparisonListVariables
    }
  | {
      path: '/learning-exp-metric/mark-exp-status'
      operationId: 'markExperimentStatus'
      variables: MarkExperimentStatusVariables
    }
  | {
      path: '/learning-exp-metric/get-analysis-summary'
      operationId: 'getExperimentalAnalysisSummary'
      variables: GetExperimentalAnalysisSummaryVariables
    }
  | {
      path: '/learning-exp-metric/get-exp-performance'
      operationId: 'getMetricExpAnalysisAccuracyImprovement'
      variables: GetMetricExpAnalysisAccuracyImprovementVariables
    }
  | {
      path: '/learning-exp-metric/get-exp-analysis-info'
      operationId: 'getMetricExpAnalysisInfo'
      variables: GetMetricExpAnalysisInfoVariables
    }
  | {
      path: '/export-executions/status/{requestId}'
      operationId: 'getStatus2'
      variables: GetStatus2Variables
    }
  | {
      path: '/export-executions/download/{requestId}'
      operationId: 'downloadFile1'
      variables: DownloadFile1Variables
    }
  | {
      path: '/export-executions/limit-checks'
      operationId: 'getLimitChecks'
      variables: GetLimitChecksVariables
    }
  | {
      path: '/expression-builder'
      operationId: 'listExpressions'
      variables: ListExpressionsVariables
    }
  | {
      path: '/expression-builder/values'
      operationId: 'listExpressionsFromValues'
      variables: ListExpressionsFromValuesVariables
    }
  | {
      path: '/external/{version}/executions/{workflowExecutionId}/status'
      operationId: 'getWorkflowExecutionStatus'
      variables: GetWorkflowExecutionStatusVariables
    }
  | {
      path: '/feature-flag/{featureFlagName}'
      operationId: 'getFeatureFlag'
      variables: GetFeatureFlagVariables
    }
  | {
      path: '/feature-flag/globally-enabled-feature-flags'
      operationId: 'getGloballyEnabledFlags'
      variables: GetGloballyEnabledFlagsVariables
    }
  | {
      path: '/features/usage-compliance-report'
      operationId: 'getFeaturesUsageComplianceReport'
      variables: GetFeaturesUsageComplianceReportVariables
    }
  | {
      path: '/features/restrictions'
      operationId: 'getFeatureRestrictions'
      variables: GetFeatureRestrictionsVariables
    }
  | {
      path: '/billing-accounts/{id}'
      operationId: 'get20'
      variables: Get20Variables
    }
  | {
      path: '/billing-accounts'
      operationId: 'list24'
      variables: List24Variables
    }
  | {
      path: '/git-sync/errors/gitToHarness/commits'
      operationId: 'listGitToHarnessErrorsCommits'
      variables: ListGitToHarnessErrorsCommitsVariables
    }
  | {
      path: '/git-sync/errors/gitToHarness/commits/count'
      operationId: 'listGitToHarnessErrorsCommits1'
      variables: ListGitToHarnessErrorsCommits1Variables
    }
  | {
      path: '/git-sync/repos'
      operationId: 'listRepositories1'
      variables: ListRepositories1Variables
    }
  | {
      path: '/git-sync/commits'
      operationId: 'listCommits'
      variables: ListCommitsVariables
    }
  | {
      path: '/git-sync/errors/count'
      operationId: 'gitSyncErrorCount'
      variables: GitSyncErrorCountVariables
    }
  | {
      path: '/git-sync/errors'
      operationId: 'listErrors'
      variables: ListErrorsVariables
    }
  | {
      path: '/git-sync/errors/gitToHarness/listAllErrors'
      operationId: 'listGitToHarnessErrors'
      variables: ListGitToHarnessErrorsVariables
    }
  | {
      path: '/git-sync/errors/gitToHarness/{commitId}'
      operationId: 'listGitToHarnessErrorsForACommit'
      variables: ListGitToHarnessErrorsForACommitVariables
    }
  | {
      path: '/git-sync/errors/harnessToGit'
      operationId: 'listHarnessToGitErrors'
      variables: ListHarnessToGitErrorsVariables
    }
  | {
      path: '/git-sync/errors/connectivityIssue'
      operationId: 'listGitConnectivityIssues'
      variables: ListGitConnectivityIssuesVariables
    }
  | {
      path: '/git-sync/activities'
      operationId: 'listGitFileActivity'
      variables: ListGitFileActivityVariables
    }
  | {
      path: '/git-sync/commits/processing'
      operationId: 'listCommitsBeingProcessed'
      variables: ListCommitsBeingProcessedVariables
    }
  | {
      path: '/harness-api-keys/{clientType}'
      operationId: 'get21'
      variables: Get21Variables
    }
  | {
      path: '/harness-api-keys/validate'
      operationId: 'validate1'
      variables: Validate1Variables
    }
  | {
      path: '/agent/infra-download/delegate-auth/watcher/{version}'
      operationId: 'getWatcherDownloadUrlFromDelegate'
      variables: GetWatcherDownloadUrlFromDelegateVariables
    }
  | {
      path: '/agent/infra-download/delegate-auth/delegate/{version}'
      operationId: 'getDelegateDownloadUrlFromDelegate'
      variables: GetDelegateDownloadUrlFromDelegateVariables
    }
  | {
      path: '/agent/infra-download/default/watcher/{version}'
      operationId: 'getWatcherDownloadUrlFromDefaultAuth'
      variables: GetWatcherDownloadUrlFromDefaultAuthVariables
    }
  | {
      path: '/agent/infra-download/default/delegate/{version}'
      operationId: 'getDelegateDownloadUrlFromDefaultAuth'
      variables: GetDelegateDownloadUrlFromDefaultAuthVariables
    }
  | {
      path: '/agent/infra-download/delegate-auth/delegate/logging-token'
      operationId: 'getDelegateLoggingTokenFromDelegate'
      variables: GetDelegateLoggingTokenFromDelegateVariables
    }
  | {
      path: '/sampleapps/health'
      operationId: 'getHealth'
      variables: GetHealthVariables
    }
  | {
      path: '/tags/links'
      operationId: 'listResourcesWithTag'
      variables: ListResourcesWithTagVariables
    }
  | {
      path: '/tags/for-key'
      operationId: 'get22'
      variables: Get22Variables
    }
  | {
      path: '/tags'
      operationId: 'list25'
      variables: List25Variables
    }
  | {
      path: '/harnessUserGroup/listHarnessUserGroupForAccount'
      operationId: 'listHarnessUserGroup'
      variables: ListHarnessUserGroupVariables
    }
  | {
      path: '/harnessUserGroup/listAllHarnessSupportUsers'
      operationId: 'listAllHarnessSupportUsers'
      variables: ListAllHarnessSupportUsersVariables
    }
  | {
      path: '/harnessUserGroup/checkIfHarnessSupportEnabledForAccount'
      operationId: 'checkIfHarnessSupportEnabledForAccount'
      variables: CheckIfHarnessSupportEnabledForAccountVariables
    }
  | {
      path: '/harnessUserGroup/supportEnabledStatus'
      operationId: 'checkIfHarnessSupportEnabledForAccountInternal'
      variables: CheckIfHarnessSupportEnabledForAccountInternalVariables
    }
  | {
      path: '/harnessUserGroup/supportUsers'
      operationId: 'getSupportUsersInternal'
      variables: GetSupportUsersInternalVariables
    }
  | {
      path: '/health'
      operationId: 'get23'
      variables: Get23Variables
    }
  | {
      path: '/health/configuration'
      operationId: 'getConfiguration1'
      variables: GetConfiguration1Variables
    }
  | {
      path: '/helm-charts'
      operationId: 'list26'
      variables: List26Variables
    }
  | {
      path: '/helm-charts/collectIfCollectionDisabled'
      operationId: 'getHelmCharts'
      variables: GetHelmChartsVariables
    }
  | {
      path: '/hosts/{hostId}'
      operationId: 'get24'
      variables: Get24Variables
    }
  | {
      path: '/hosts'
      operationId: 'list27'
      variables: List27Variables
    }
  | {
      path: '/hosts/export'
      operationId: 'exportHosts'
      variables: ExportHostsVariables
    }
  | {
      path: '/identity/accounts/{accountId}'
      operationId: 'getAccount1'
      variables: GetAccount1Variables
    }
  | {
      path: '/identity/accounts'
      operationId: 'listAccounts'
      variables: ListAccountsVariables
    }
  | {
      path: '/identity/user'
      operationId: 'getUser'
      variables: GetUserVariables
    }
  | {
      path: '/identity/user/logout'
      operationId: 'logout'
      variables: LogoutVariables
    }
  | {
      path: '/identity/user/login'
      operationId: 'loginUser'
      variables: LoginUserVariables
    }
  | {
      path: '/identity/account-settings'
      operationId: 'getAccountSettings'
      variables: GetAccountSettingsVariables
    }
  | {
      path: '/identity/restricted-switch-account-info'
      operationId: 'getSwitchAccountInfo'
      variables: GetSwitchAccountInfoVariables
    }
  | {
      path: '/identity/users'
      operationId: 'listUsers'
      variables: ListUsersVariables
    }
  | {
      path: '/infrastructure-definitions/compute-providers/{computeProviderId}/elasti-groups/{elastigroupId}/json'
      operationId: 'getElastigroupJson'
      variables: GetElastigroupJsonVariables
    }
  | {
      path: '/infrastructure-definitions/{infraDefinitionId}'
      operationId: 'get25'
      variables: Get25Variables
    }
  | {
      path: '/infrastructure-definitions'
      operationId: 'list28'
      variables: List28Variables
    }
  | {
      path: '/infrastructure-definitions/compute-providers/{computeProviderId}/azure-app-services'
      operationId: 'getAppServiceNamesByResourceGroup'
      variables: GetAppServiceNamesByResourceGroupVariables
    }
  | {
      path: '/infrastructure-definitions/detail/{infraDefinitionId}'
      operationId: 'getDetail'
      variables: GetDetailVariables
    }
  | {
      path: '/infrastructure-definitions/{infraDefinitionId}/aws-elastic-balancers-details'
      operationId: 'getAwsLoadBalancerDetails'
      variables: GetAwsLoadBalancerDetailsVariables
    }
  | {
      path: '/infrastructure-definitions/{infraDefinitionId}/aws-network-balancers-details'
      operationId: 'getAwsNetworkLoadBalancerDetails'
      variables: GetAwsNetworkLoadBalancerDetailsVariables
    }
  | {
      path: '/infrastructure-definitions/compute-providers/{computeProviderId}/elasti-groups'
      operationId: 'listElastgroups'
      variables: ListElastgroupsVariables
    }
  | {
      path: '/infrastructure-definitions/{infraDefinitionId}/elastigroup/runningcount'
      operationId: 'getRunningCountForSpotinst'
      variables: GetRunningCountForSpotinstVariables
    }
  | {
      path: '/infrastructure-definitions/{infraDefinitionId}/azure-load-balancers'
      operationId: 'getAzureLoadBalancers'
      variables: GetAzureLoadBalancersVariables
    }
  | {
      path: '/infrastructure-definitions/{infraDefinitionId}/azure-load-balancers/{loadBalancerName}/backend-pools'
      operationId: 'getAzureLoadBalancerBackendPools'
      variables: GetAzureLoadBalancerBackendPoolsVariables
    }
  | {
      path: '/infrastructure-definitions/compute-providers/{computeProviderId}/subscriptions'
      operationId: 'getAzureSubscriptions'
      variables: GetAzureSubscriptionsVariables
    }
  | {
      path: '/infrastructure-definitions/compute-providers/{computeProviderId}/resource-groups'
      operationId: 'getAzureResourceGroupsNames'
      variables: GetAzureResourceGroupsNamesVariables
    }
  | {
      path: '/infrastructure-definitions/compute-providers/{computeProviderId}/subscriptions/{subscriptionId}/locations'
      operationId: 'getSubscriptionLocations'
      variables: GetSubscriptionLocationsVariables
    }
  | {
      path: '/infrastructure-definitions/compute-providers/{computeProviderId}/locations'
      operationId: 'getCloudProviderLocations'
      variables: GetCloudProviderLocationsVariables
    }
  | {
      path: '/infrastructure-definitions/compute-providers/{computeProviderId}/management-groups'
      operationId: 'getManagementGroups'
      variables: GetManagementGroupsVariables
    }
  | {
      path: '/infrastructure-definitions/compute-providers/{computeProviderId}/vm-scale-sets'
      operationId: 'getAzureVirtualMachineScaleSets'
      variables: GetAzureVirtualMachineScaleSetsVariables
    }
  | {
      path: '/infrastructure-definitions/compute-providers/{computeProviderId}/vm-scale-sets/{vmssName}'
      operationId: 'getAzureVirtualMachineScaleSetByName'
      variables: GetAzureVirtualMachineScaleSetByNameVariables
    }
  | {
      path: '/infrastructure-definitions/{infraDefinitionId}/azure-app-services'
      operationId: 'getAppServiceNames'
      variables: GetAppServiceNamesVariables
    }
  | {
      path: '/infrastructure-definitions/compute-providers/{computeProviderId}/azure-app-services/{appName}/slots'
      operationId: 'getAppServiceDeploymentSlotNames'
      variables: GetAppServiceDeploymentSlotNamesVariables
    }
  | {
      path: '/infrastructure-definitions/{infraDefinitionId}/azure-app-services/{appName}/slots'
      operationId: 'getDeploymentSlotNames'
      variables: GetDeploymentSlotNamesVariables
    }
  | {
      path: '/infrastructure-definitions/{infraDefinitionId}/hosts'
      operationId: 'listHosts'
      variables: ListHostsVariables
    }
  | {
      path: '/infrastructure-definitions/{infraDefinitionId}/load-balancers/{loadbalancerName}/listeners'
      operationId: 'getListeners'
      variables: GetListenersVariables
    }
  | {
      path: '/infrastructure-definitions/compute-providers/{computeProviderId}/subnets'
      operationId: 'listSubnets'
      variables: ListSubnetsVariables
    }
  | {
      path: '/infrastructure-definitions/details'
      operationId: 'listDetails'
      variables: ListDetailsVariables
    }
  | {
      path: '/infrastructure-definitions/{infraDefinitionId}/load-balancers'
      operationId: 'getLoadBalancers'
      variables: GetLoadBalancersVariables
    }
  | {
      path: '/infrastructure-definitions/compute-providers/{computeProviderId}/vpcs'
      operationId: 'listVpcs'
      variables: ListVpcsVariables
    }
  | {
      path: '/infrastructure-definitions/{infraDefinitionId}/containers'
      operationId: 'getRunningContainerCount'
      variables: GetRunningContainerCountVariables
    }
  | {
      path: '/infrastructure-definitions/{infraDefinitionId}/pcf/runningcount'
      operationId: 'getRunningCountForPcfApp'
      variables: GetRunningCountForPcfAppVariables
    }
  | {
      path: '/infrastructure-definitions/{infraDefinitionId}/ami/runningcount'
      operationId: 'getRunningCountForAmi'
      variables: GetRunningCountForAmiVariables
    }
  | {
      path: '/infrastructure-definitions/deployment-cloudProviders'
      operationId: 'infrastructureTypes'
      variables: InfrastructureTypesVariables
    }
  | {
      path: '/infrastructure-definitions/{infraDefinitionId}/iam-roles'
      operationId: 'getInstanceRoles'
      variables: GetInstanceRolesVariables
    }
  | {
      path: '/infrastructure-definitions/compute-providers/{computeProviderId}/security-groups'
      operationId: 'listSecurityGroups'
      variables: ListSecurityGroupsVariables
    }
  | {
      path: '/infrastructure-definitions/{infraDefinitionId}/aws-elastic-balancers'
      operationId: 'getAwsLoadBalancers'
      variables: GetAwsLoadBalancersVariables
    }
  | {
      path: '/infrastructure-definitions/{infraDefinitionId}/aws-network-balancers'
      operationId: 'getAwsNetworkLoadBalancers'
      variables: GetAwsNetworkLoadBalancersVariables
    }
  | {
      path: '/infrastructure-definitions/{infraDefinitionId}/load-balancers/{loadbalancerName}/target-groups'
      operationId: 'getTargetGroups'
      variables: GetTargetGroupsVariables
    }
  | {
      path: '/infrastructure-definitions/{infraDefinitionId}/hosted-zones'
      operationId: 'getHostedZones'
      variables: GetHostedZonesVariables
    }
  | {
      path: '/infrastructure-definitions/{infraDefinitionId}/routes'
      operationId: 'getRoutesForPcf'
      variables: GetRoutesForPcfVariables
    }
  | {
      path: '/infrastructure-mappings/compute-providers/{computeProviderId}/roles'
      operationId: 'getRoles'
      variables: GetRolesVariables
    }
  | {
      path: '/infrastructure-mappings/{infraMappingId}'
      operationId: 'get27'
      variables: Get27Variables
    }
  | {
      path: '/infrastructure-mappings'
      operationId: 'list29'
      variables: List29Variables
    }
  | {
      path: '/infrastructure-mappings/compute-providers/{computeProviderId}/regions'
      operationId: 'getRegions'
      variables: GetRegionsVariables
    }
  | {
      path: '/infrastructure-mappings/{infraMappingId}/hosts'
      operationId: 'listHosts1'
      variables: ListHosts1Variables
    }
  | {
      path: '/infrastructure-mappings/{infraMappingId}/load-balancers/{loadbalancerName}/listeners'
      operationId: 'getListeners1'
      variables: GetListeners1Variables
    }
  | {
      path: '/infrastructure-mappings/compute-providers/{computeProviderId}/subnets'
      operationId: 'listSubnets1'
      variables: ListSubnets1Variables
    }
  | {
      path: '/infrastructure-mappings/compute-providers/{computeProviderId}/tags'
      operationId: 'listTags1'
      variables: ListTags1Variables
    }
  | {
      path: '/infrastructure-mappings/compute-providers/{computeProviderId}/load-balancers'
      operationId: 'getLoadBalancers1'
      variables: GetLoadBalancers1Variables
    }
  | {
      path: '/infrastructure-mappings/{infraMappingId}/load-balancers'
      operationId: 'getLoadBalancers2'
      variables: GetLoadBalancers2Variables
    }
  | {
      path: '/infrastructure-mappings/compute-providers/{computeProviderId}/vpcs'
      operationId: 'listVpcs1'
      variables: ListVpcs1Variables
    }
  | {
      path: '/infrastructure-mappings/compute-providers/{computeProviderId}/hosts'
      operationId: 'listComputeProviderHosts'
      variables: ListComputeProviderHostsVariables
    }
  | {
      path: '/infrastructure-mappings/{infraMappingId}/containers'
      operationId: 'getRunningContainerCount1'
      variables: GetRunningContainerCount1Variables
    }
  | {
      path: '/infrastructure-mappings/{infraMappingId}/pcf/runningcount'
      operationId: 'getRunningCountForPcfApp1'
      variables: GetRunningCountForPcfApp1Variables
    }
  | {
      path: '/infrastructure-mappings/{infraMappingId}/ami/runningcount'
      operationId: 'getRunningCountForAmi1'
      variables: GetRunningCountForAmi1Variables
    }
  | {
      path: '/infrastructure-mappings/stencils'
      operationId: 'infrastructureMappingSchema'
      variables: InfrastructureMappingSchemaVariables
    }
  | {
      path: '/infrastructure-mappings/infra-types'
      operationId: 'infrastructureTypes1'
      variables: InfrastructureTypes1Variables
    }
  | {
      path: '/infrastructure-mappings/compute-providers/{computeProviderId}/clusters'
      operationId: 'getClusterNames'
      variables: GetClusterNamesVariables
    }
  | {
      path: '/infrastructure-mappings/compute-providers/{computeProviderId}/instanceTypes'
      operationId: 'getInstanceTypes'
      variables: GetInstanceTypesVariables
    }
  | {
      path: '/infrastructure-mappings/{infraMappingId}/iam-roles'
      operationId: 'getInstanceRoles1'
      variables: GetInstanceRoles1Variables
    }
  | {
      path: '/infrastructure-mappings/compute-providers/{computeProviderId}/instance-roles'
      operationId: 'getInstanceRoles2'
      variables: GetInstanceRoles2Variables
    }
  | {
      path: '/infrastructure-mappings/compute-providers/{computeProviderId}/security-groups'
      operationId: 'listSecurityGroups1'
      variables: ListSecurityGroups1Variables
    }
  | {
      path: '/infrastructure-mappings/compute-providers/{computeProviderId}/azure-tags'
      operationId: 'listAzureTags'
      variables: ListAzureTagsVariables
    }
  | {
      path: '/infrastructure-mappings/compute-providers/{computeProviderId}/resource-groups'
      operationId: 'listAzureResourceGroups'
      variables: ListAzureResourceGroupsVariables
    }
  | {
      path: '/infrastructure-mappings/compute-providers/{computeProviderId}/auto-scaling-groups'
      operationId: 'listAutoScalingGroups'
      variables: ListAutoScalingGroupsVariables
    }
  | {
      path: '/infrastructure-mappings/{infraMappingId}/aws-elastic-balancers'
      operationId: 'getAwsLoadBalancers1'
      variables: GetAwsLoadBalancers1Variables
    }
  | {
      path: '/infrastructure-mappings/{infraMappingId}/aws-network-balancers'
      operationId: 'getAwsNetworkLoadBalancers1'
      variables: GetAwsNetworkLoadBalancers1Variables
    }
  | {
      path: '/infrastructure-mappings/{infraMappingId}/load-balancers/{loadbalancerName}/target-groups'
      operationId: 'getTargetGroups1'
      variables: GetTargetGroups1Variables
    }
  | {
      path: '/infrastructure-mappings/compute-providers/{computeProviderId}/load-balancer/{loadbalancerName}/target-groups'
      operationId: 'getTargetGroups2'
      variables: GetTargetGroups2Variables
    }
  | {
      path: '/infrastructure-mappings/{infraMappingId}/hosted-zones'
      operationId: 'getHostedZones1'
      variables: GetHostedZones1Variables
    }
  | {
      path: '/infrastructure-mappings/compute-providers/{computeProviderId}/classic-load-balancers'
      operationId: 'getClassicLoadBalancers'
      variables: GetClassicLoadBalancersVariables
    }
  | {
      path: '/infrastructure-mappings/elastic-load-balancers'
      operationId: 'getElasticLoadBalancers'
      variables: GetElasticLoadBalancersVariables
    }
  | {
      path: '/infrastructure-mappings/compute-providers/{computeProviderId}/target-groups'
      operationId: 'getAlbTargetGroups'
      variables: GetAlbTargetGroupsVariables
    }
  | {
      path: '/infrastructure-mappings/compute-providers/{computeProviderId}/codedeploy/application-names'
      operationId: 'getCodeDeployApplicationNames'
      variables: GetCodeDeployApplicationNamesVariables
    }
  | {
      path: '/infrastructure-mappings/compute-providers/{computeProviderId}/codedeploy/deployment-groups'
      operationId: 'getCodeDeployDeploymentGroups'
      variables: GetCodeDeployDeploymentGroupsVariables
    }
  | {
      path: '/infrastructure-mappings/compute-providers/{computeProviderId}/codedeploy/deployment-configs'
      operationId: 'getCodeDeployDeploymentConfigs'
      variables: GetCodeDeployDeploymentConfigsVariables
    }
  | {
      path: '/infrastructure-mappings/compute-providers/{computeProviderId}/pcf/organizations'
      operationId: 'getOrganizationsForPcf'
      variables: GetOrganizationsForPcfVariables
    }
  | {
      path: '/infrastructure-mappings/compute-providers/{computeProviderId}/pcf/spaces'
      operationId: 'getSpacesForPcf'
      variables: GetSpacesForPcfVariables
    }
  | {
      path: '/infrastructure-mappings/compute-providers/{computeProviderId}/pcf/routes'
      operationId: 'getRoutesForPcf1'
      variables: GetRoutesForPcf1Variables
    }
  | {
      path: '/infrastructure-provisioners/{infraProvisionerId}'
      operationId: 'get28'
      variables: Get28Variables
    }
  | {
      path: '/infrastructure-provisioners'
      operationId: 'list30'
      variables: List30Variables
    }
  | {
      path: '/infrastructure-provisioners/blueprint-properties'
      operationId: 'blueprintProperties'
      variables: BlueprintPropertiesVariables
    }
  | {
      path: '/infrastructure-provisioners/for-task'
      operationId: 'listForTask'
      variables: ListForTaskVariables
    }
  | {
      path: '/infrastructure-provisioners/details'
      operationId: 'listDetails1'
      variables: ListDetails1Variables
    }
  | {
      path: '/infrastructure-provisioners/terraform-variables'
      operationId: 'getTerraformVariables'
      variables: GetTerraformVariablesVariables
    }
  | {
      path: '/infrastructure-provisioners/terraform-targets'
      operationId: 'getTerraformTargets'
      variables: GetTerraformTargetsVariables
    }
  | {
      path: '/infrastructure-provisioners/tf-download-state'
      operationId: 'downloadTerraformState'
      variables: DownloadTerraformStateVariables
    }
  | {
      path: '/log-classify'
      operationId: 'getLogRecordsToClassify'
      variables: GetLogRecordsToClassifyVariables
    }
  | {
      path: '/log-classify/cv-feedback-to-classify'
      operationId: 'getIgnoreFeedbacksToClassify'
      variables: GetIgnoreFeedbacksToClassifyVariables
    }
  | {
      path: '/log-classify/accounts-with-feedback'
      operationId: 'getAccountsWithFeedback'
      variables: GetAccountsWithFeedbackVariables
    }
  | {
      path: '/log-classify/l2-records-to-label'
      operationId: 'getL2RecordsToClassify'
      variables: GetL2RecordsToClassifyVariables
    }
  | {
      path: '/log-classify/labels-for-cv-feedback'
      operationId: 'getSampleLabelsForIgnoreFeedback'
      variables: GetSampleLabelsForIgnoreFeedbackVariables
    }
  | {
      path: '/log-classify/global-feedbacks-to-classify'
      operationId: 'getGlobalFeedbacksToClassify'
      variables: GetGlobalFeedbacksToClassifyVariables
    }
  | {
      path: '/log-classify/global-labels-for-cv-feedback'
      operationId: 'getGlobalSampleLabelsForCvFeedback'
      variables: GetGlobalSampleLabelsForCvFeedbackVariables
    }
  | {
      path: '/log-classify/services-with-feedback'
      operationId: 'getServicesWithFeedback'
      variables: GetServicesWithFeedbackVariables
    }
  | {
      path: '/log-classify/sample-feedback-l2'
      operationId: 'getSampleFeedbackL2'
      variables: GetSampleFeedbackL2Variables
    }
  | {
      path: '/log-classify/list-labels-to-classify'
      operationId: 'getLabels'
      variables: GetLabelsVariables
    }
  | {
      path: '/logml/get-analysis-summary'
      operationId: 'getLogAnalysisSummary1'
      variables: GetLogAnalysisSummary1Variables
    }
  | {
      path: '/logml/user-feedback'
      operationId: 'getFeedback'
      variables: GetFeedbackVariables
    }
  | {
      path: '/logml/last-execution-nodes'
      operationId: 'getLastExecutionNodes'
      variables: GetLastExecutionNodesVariables
    }
  | {
      path: '/logml/feedbacks'
      operationId: 'getFeedbacks'
      variables: GetFeedbacksVariables
    }
  | {
      path: '/logml/user-feedback-by-workflow'
      operationId: 'getFeedbackForDashboard'
      variables: GetFeedbackForDashboardVariables
    }
  | {
      path: '/logml/24x7-user-feedback'
      operationId: 'get24x7Feedback'
      variables: Get24x7FeedbackVariables
    }
  | {
      path: '/logml/feedbacks-le'
      operationId: 'getFeedbacksLE'
      variables: GetFeedbacksLEVariables
    }
  | {
      path: '/logml/feedback-actions'
      operationId: 'getFeedbacksActionList'
      variables: GetFeedbacksActionListVariables
    }
  | {
      path: '/loginSettings/get-login-settings'
      operationId: 'getLoginSettings'
      variables: GetLoginSettingsVariables
    }
  | {
      path: '/logz/get-host-records'
      operationId: 'getHostLogRecord1'
      variables: GetHostLogRecord1Variables
    }
  | {
      path: '/logz/get-sample-record'
      operationId: 'getSampleLogRecord1'
      variables: GetSampleLogRecord1Variables
    }
  | {
      path: '/metrics'
      operationId: 'get29'
      variables: Get29Variables
    }
  | {
      path: '/newrelic/metric-names'
      operationId: 'getAllMetricNames1'
      variables: GetAllMetricNames1Variables
    }
  | {
      path: '/newrelic/resolve-application-name'
      operationId: 'resolveNewRelicAppName'
      variables: ResolveNewRelicAppNameVariables
    }
  | {
      path: '/newrelic/test'
      operationId: 'test1'
      variables: Test1Variables
    }
  | {
      path: '/newrelic/resolve-application-id'
      operationId: 'resolveNewRelicAppId'
      variables: ResolveNewRelicAppIdVariables
    }
  | {
      path: '/newrelic/applications'
      operationId: 'getAllApplications1'
      variables: GetAllApplications1Variables
    }
  | {
      path: '/newrelic/nodes'
      operationId: 'getApplicationInstances'
      variables: GetApplicationInstancesVariables
    }
  | {
      path: '/newrelic/txns-with-data'
      operationId: 'getTxnsWithData'
      variables: GetTxnsWithDataVariables
    }
  | {
      path: '/notifications/{notificationId}'
      operationId: 'get30'
      variables: Get30Variables
    }
  | {
      path: '/notifications'
      operationId: 'list31'
      variables: List31Variables
    }
  | {
      path: '/notification-setup/notification-groups'
      operationId: 'listNotificationGroups'
      variables: ListNotificationGroupsVariables
    }
  | {
      path: '/notification-setup/notification-groups/{notificationGroupId}'
      operationId: 'readNotificationGroup'
      variables: ReadNotificationGroupVariables
    }
  | {
      path: '/perpetualTaskSchedule'
      operationId: 'getByAccountIdAndPerpetualTaskType'
      variables: GetByAccountIdAndPerpetualTaskTypeVariables
    }
  | {
      path: '/pipelines/{pipelineId}'
      operationId: 'read'
      variables: ReadVariables
    }
  | {
      path: '/pipelines'
      operationId: 'list32'
      variables: List32Variables
    }
  | {
      path: '/pipelines/required-entities'
      operationId: 'requiredEntities'
      variables: RequiredEntitiesVariables
    }
  | {
      path: '/pipelines/stencils'
      operationId: 'stencils'
      variables: StencilsVariables
    }
  | {
      path: '/plugins/{accountId}/installed'
      operationId: 'installedPlugins'
      variables: InstalledPluginsVariables
    }
  | {
      path: '/plugins/{accountId}/installed/settingschema'
      operationId: 'installedPluginSettingSchema'
      variables: InstalledPluginSettingSchemaVariables
    }
  | {
      path: '/preference/auditPreference'
      operationId: 'listAuditPreferences'
      variables: ListAuditPreferencesVariables
    }
  | {
      path: '/preference'
      operationId: 'listPreferences'
      variables: ListPreferencesVariables
    }
  | {
      path: '/preference/{preferenceId}'
      operationId: 'getPreference'
      variables: GetPreferenceVariables
    }
  | {
      path: '/resource-constraints'
      operationId: 'list33'
      variables: List33Variables
    }
  | {
      path: '/resourcelookup/tags'
      operationId: 'listResourcesWithTag1'
      variables: ListResourcesWithTag1Variables
    }
  | {
      path: '/resourcelookup'
      operationId: 'list34'
      variables: List34Variables
    }
  | {
      path: '/resourcelookup/acc_resource_types'
      operationId: 'listAccResourceTypes'
      variables: ListAccResourceTypesVariables
    }
  | {
      path: '/resourcelookup/app_resource_types'
      operationId: 'listAppResourceTypes'
      variables: ListAppResourceTypesVariables
    }
  | {
      path: '/roles/{roleId}'
      operationId: 'get31'
      variables: Get31Variables
    }
  | {
      path: '/roles'
      operationId: 'list35'
      variables: List35Variables
    }
  | {
      path: '/sso/access-management/{accountId}'
      operationId: 'getAccountAccessManagementSettings'
      variables: GetAccountAccessManagementSettingsVariables
    }
  | {
      path: '/sso/ldap/settings'
      operationId: 'getLdapSettings'
      variables: GetLdapSettingsVariables
    }
  | {
      path: '/sso/ldap/{ldapId}/search/group'
      operationId: 'searchLdapGroups'
      variables: SearchLdapGroupsVariables
    }
  | {
      path: '/sso/saml-login-test'
      operationId: 'getSamlLoginTest'
      variables: GetSamlLoginTestVariables
    }
  | {
      path: '/cf-feature'
      operationId: 'get32'
      variables: Get32Variables
    }
  | {
      path: '/scim/account/{accountId}/Groups/{groupId}'
      operationId: 'getGroup'
      variables: GetGroupVariables
    }
  | {
      path: '/scim/account/{accountId}/Groups'
      operationId: 'searchGroup'
      variables: SearchGroupVariables
    }
  | {
      path: '/scim/account/{accountId}/Users'
      operationId: 'searchUser'
      variables: SearchUserVariables
    }
  | {
      path: '/scim/account/{accountId}/Users/{userId}'
      operationId: 'getUser1'
      variables: GetUser1Variables
    }
  | {
      path: '/search'
      operationId: 'getSearchResults'
      variables: GetSearchResultsVariables
    }
  | {
      path: '/server'
      operationId: 'getServerInfo'
      variables: GetServerInfoVariables
    }
  | {
      path: '/serverless-dashboard/app-instance-summary-stats'
      operationId: 'getAppInstanceSummaryStats1'
      variables: GetAppInstanceSummaryStats1Variables
    }
  | {
      path: '/serverless-dashboard/instance-details'
      operationId: 'getInstanceDetails1'
      variables: GetInstanceDetails1Variables
    }
  | {
      path: '/serverless-dashboard/service-instance-stats'
      operationId: 'getServiceInstanceStats1'
      variables: GetServiceInstanceStats1Variables
    }
  | {
      path: '/serverless-dashboard/app-instance-count-stats'
      operationId: 'getAppInstanceCountStats1'
      variables: GetAppInstanceCountStats1Variables
    }
  | {
      path: '/serverless-dashboard/manual-sync-job'
      operationId: 'getManualSyncJobStatus1'
      variables: GetManualSyncJobStatus1Variables
    }
  | {
      path: '/serverless-dashboard/timeline'
      operationId: 'getInstanceStatsForGivenTime1'
      variables: GetInstanceStatsForGivenTime1Variables
    }
  | {
      path: '/serverless-dashboard/instance-history-ranges'
      operationId: 'getTimeRanges1'
      variables: GetTimeRanges1Variables
    }
  | {
      path: '/service-instances'
      operationId: 'list36'
      variables: List36Variables
    }
  | {
      path: '/servicenow/{connectorId}/states'
      operationId: 'getStates'
      variables: GetStatesVariables
    }
  | {
      path: '/servicenow/{connectorId}/approvalstates'
      operationId: 'getApprovalValues'
      variables: GetApprovalValuesVariables
    }
  | {
      path: '/servicenow/{connectorId}/createMeta'
      operationId: 'getCreateMeta'
      variables: GetCreateMetaVariables
    }
  | {
      path: '/servicenow/{connectorId}/additionalFields'
      operationId: 'getAdditionalFields'
      variables: GetAdditionalFieldsVariables
    }
  | {
      path: '/servicenow/ticket-types'
      operationId: 'getTicketTypes'
      variables: GetTicketTypesVariables
    }
  | {
      path: '/services/{serviceId}/commands/{commandName}'
      operationId: 'getCommand'
      variables: GetCommandVariables
    }
  | {
      path: '/services/{serviceId}/pcfspecification'
      operationId: 'getPcfServiceSpecification'
      variables: GetPcfServiceSpecificationVariables
    }
  | {
      path: '/services/{serviceId}/ecsSpecification'
      operationId: 'getEcsServiceSpecification'
      variables: GetEcsServiceSpecificationVariables
    }
  | {
      path: '/services/{serviceId}/k8s-values/{manifestFileId}'
      operationId: 'getManifestFile1'
      variables: GetManifestFile1Variables
    }
  | {
      path: '/services/{serviceId}'
      operationId: 'get33'
      variables: Get33Variables
    }
  | {
      path: '/services'
      operationId: 'list37'
      variables: List37Variables
    }
  | {
      path: '/services/{serviceId}/artifact-streams'
      operationId: 'listArtifactStreams'
      variables: ListArtifactStreamsVariables
    }
  | {
      path: '/services/forDeployment'
      operationId: 'getServices'
      variables: GetServicesVariables
    }
  | {
      path: '/services/{serviceId}/commands/stencils'
      operationId: 'stencils1'
      variables: Stencils1Variables
    }
  | {
      path: '/services/{serviceId}/containers/tasks'
      operationId: 'listContainerTask'
      variables: ListContainerTaskVariables
    }
  | {
      path: '/services/{serviceId}/containers/tasks/stencils'
      operationId: 'listTaskStencils'
      variables: ListTaskStencilsVariables
    }
  | {
      path: '/services/{serviceId}/containers/charts'
      operationId: 'listHelmChartSpecification'
      variables: ListHelmChartSpecificationVariables
    }
  | {
      path: '/services/{serviceId}/lambda-specifications'
      operationId: 'listLambdaSpecification'
      variables: ListLambdaSpecificationVariables
    }
  | {
      path: '/services/{serviceId}/user-data-specifications'
      operationId: 'listUserDataSpecification'
      variables: ListUserDataSpecificationVariables
    }
  | {
      path: '/services/{serviceId}/commands/categories'
      operationId: 'getCommandUnitItems'
      variables: GetCommandUnitItemsVariables
    }
  | {
      path: '/services/{serviceId}/app-manifest'
      operationId: 'getAppManifest'
      variables: GetAppManifestVariables
    }
  | {
      path: '/services/{serviceId}/k8s-values/app-manifest/{appManifestId}'
      operationId: 'getK8sValueAppManifest'
      variables: GetK8sValueAppManifestVariables
    }
  | {
      path: '/services/{serviceId}/app-manifests'
      operationId: 'listAppManifests'
      variables: ListAppManifestsVariables
    }
  | {
      path: '/services/{serviceId}/artifact-stream-bindings'
      operationId: 'listArtifactStreamBindings'
      variables: ListArtifactStreamBindingsVariables
    }
  | {
      path: '/services/{serviceId}/artifact-stream-bindings/{name}'
      operationId: 'getArtifactStreamBinding'
      variables: GetArtifactStreamBindingVariables
    }
  | {
      path: '/services/{serviceId}/chart-versions'
      operationId: 'getHelmChartVersions'
      variables: GetHelmChartVersionsVariables
    }
  | {
      path: '/services/{serviceId}/helm-command-flag'
      operationId: 'getHelmCommandFlags'
      variables: GetHelmCommandFlagsVariables
    }
  | {
      path: '/service-templates/{templateId}'
      operationId: 'get34'
      variables: Get34Variables
    }
  | {
      path: '/service-templates'
      operationId: 'list38'
      variables: List38Variables
    }
  | {
      path: '/service-templates/{templateId}/compute-files'
      operationId: 'computeFiles'
      variables: ComputeFilesVariables
    }
  | {
      path: '/service-variables/{serviceVariableId}'
      operationId: 'get35'
      variables: Get35Variables
    }
  | {
      path: '/service-variables'
      operationId: 'list39'
      variables: List39Variables
    }
  | {
      path: '/settings/build-sources/project'
      operationId: 'getProject1'
      variables: GetProject1Variables
    }
  | {
      path: '/settings/artifact-streams/{streamId}'
      operationId: 'get36'
      variables: Get36Variables
    }
  | {
      path: '/settings/{attrId}'
      operationId: 'get37'
      variables: Get37Variables
    }
  | {
      path: '/settings'
      operationId: 'list40'
      variables: List40Variables
    }
  | {
      path: '/settings/artifact-streams'
      operationId: 'listArtifactStreams1'
      variables: ListArtifactStreams1Variables
    }
  | {
      path: '/settings/build-sources/jobs/{jobName}/paths'
      operationId: 'getArtifactPaths1'
      variables: GetArtifactPaths1Variables
    }
  | {
      path: '/settings/subscriptions/{subscriptionId}/containerRegistries'
      operationId: 'listContainerRegistries1'
      variables: ListContainerRegistries1Variables
    }
  | {
      path: '/settings/subscriptions/{subscriptionId}/containerRegistries/{registryName}/repositories'
      operationId: 'listRepositories2'
      variables: ListRepositories2Variables
    }
  | {
      path: '/settings/azure-regions'
      operationId: 'listAzureRegions1'
      variables: ListAzureRegions1Variables
    }
  | {
      path: '/settings/build-sources/smb-paths'
      operationId: 'getSmbPaths1'
      variables: GetSmbPaths1Variables
    }
  | {
      path: '/settings/build-sources/jobs/{jobName}/groupIds'
      operationId: 'getGroupIds1'
      variables: GetGroupIds1Variables
    }
  | {
      path: '/settings/subscriptions'
      operationId: 'listSubscriptions1'
      variables: ListSubscriptions1Variables
    }
  | {
      path: '/settings/build-sources/jobs'
      operationId: 'getJobs1'
      variables: GetJobs1Variables
    }
  | {
      path: '/settings/build-sources/builds'
      operationId: 'getBuilds1'
      variables: GetBuilds1Variables
    }
  | {
      path: '/settings/tags'
      operationId: 'listTags2'
      variables: ListTags2Variables
    }
  | {
      path: '/settings/build-sources/buckets'
      operationId: 'getBuckets1'
      variables: GetBuckets1Variables
    }
  | {
      path: '/settings/artifact-streams/artifacts'
      operationId: 'listArtifacts'
      variables: ListArtifactsVariables
    }
  | {
      path: '/settings/build-sources/plans'
      operationId: 'getBuildPlans1'
      variables: GetBuildPlans1Variables
    }
  | {
      path: '/settings/build-sources/artifact-paths'
      operationId: 'getSftpPaths1'
      variables: GetSftpPaths1Variables
    }
  | {
      path: '/settings/build-sources/nexus/repositories/{repositoryName}/packageNames'
      operationId: 'fetchPackageNames1'
      variables: FetchPackageNames1Variables
    }
  | {
      path: '/settings/aws-regions'
      operationId: 'listAwsRegions1'
      variables: ListAwsRegions1Variables
    }
  | {
      path: '/signup/check-validity/azure-marketplace'
      operationId: 'validateToken'
      variables: ValidateTokenVariables
    }
  | {
      path: '/ng/smtp-config'
      operationId: 'getSmtpConfig'
      variables: GetSmtpConfigVariables
    }
  | {
      path: '/stackdriver/get-regions'
      operationId: 'getRegions1'
      variables: GetRegions1Variables
    }
  | {
      path: '/stackdriver/get-metric-names'
      operationId: 'getMetricNames1'
      variables: GetMetricNames1Variables
    }
  | {
      path: '/stackdriver/get-load-balancers'
      operationId: 'getLoadBalancers3'
      variables: GetLoadBalancers3Variables
    }
  | {
      path: '/statistics/service-instance-stats'
      operationId: 'instanceStats'
      variables: InstanceStatsVariables
    }
  | {
      path: '/statistics/deployment-stats'
      operationId: 'deploymentStats'
      variables: DeploymentStatsVariables
    }
  | {
      path: '/sumo/get-sample-record'
      operationId: 'getSampleLogRecord3'
      variables: GetSampleLogRecord3Variables
    }
  | {
      path: '/timeseries/metric-analysis'
      operationId: 'getMetricsAnalysis'
      variables: GetMetricsAnalysisVariables
    }
  | {
      path: '/timeseries/threshold'
      operationId: 'getCustomThreshold'
      variables: GetCustomThresholdVariables
    }
  | {
      path: '/timeseries/generate-metrics-appdynamics'
      operationId: 'getMetricsAnalysisAppdynamics'
      variables: GetMetricsAnalysisAppdynamicsVariables
    }
  | {
      path: '/timeseries/get-tooltip'
      operationId: 'getTooltip'
      variables: GetTooltipVariables
    }
  | {
      path: '/timeseries/thresholds-for-cvconfig'
      operationId: 'getCustomThresholdForCVConfig'
      variables: GetCustomThresholdForCVConfigVariables
    }
  | {
      path: '/timeseries/thresholds-for-workflow'
      operationId: 'getCustomThresholdForWorkflow'
      variables: GetCustomThresholdForWorkflowVariables
    }
  | {
      path: '/timeseries/thresholds'
      operationId: 'getCustomThresholdWithRefId'
      variables: GetCustomThresholdWithRefIdVariables
    }
  | {
      path: '/timeseries/txn-metric-for-cvconfig'
      operationId: 'getTxnMetricPairsForAPMCVConfig'
      variables: GetTxnMetricPairsForAPMCVConfigVariables
    }
  | {
      path: '/timeseries/key-transactions'
      operationId: 'getKeyTransactions'
      variables: GetKeyTransactionsVariables
    }
  | {
      path: '/triggers/{triggerId}'
      operationId: 'get38'
      variables: Get38Variables
    }
  | {
      path: '/triggers'
      operationId: 'list41'
      variables: List41Variables
    }
  | {
      path: '/triggers/{triggerId}/webhook_token'
      operationId: 'generateWebhookToken'
      variables: GenerateWebhookTokenVariables
    }
  | {
      path: '/triggers/{triggerId}/webhook_token/git'
      operationId: 'generateGitWebhookToken'
      variables: GenerateGitWebhookTokenVariables
    }
  | {
      path: '/triggers/webhook/parameters'
      operationId: 'listWebhookParameters'
      variables: ListWebhookParametersVariables
    }
  | {
      path: '/triggers/webhook/eventTypes'
      operationId: 'listWebhookEventTypes'
      variables: ListWebhookEventTypesVariables
    }
  | {
      path: '/usageRestrictions/apps'
      operationId: 'listAppsWithEnvUpdatePermissions'
      variables: ListAppsWithEnvUpdatePermissionsVariables
    }
  | {
      path: '/usageRestrictions/appReferences/{appId}'
      operationId: 'getReferenceSummaryForApp'
      variables: GetReferenceSummaryForAppVariables
    }
  | {
      path: '/usageRestrictions/envReferences/{envId}'
      operationId: 'getReferenceSummaryForEnv'
      variables: GetReferenceSummaryForEnvVariables
    }
  | {
      path: '/usageRestrictions/editable/{entityId}'
      operationId: 'isEditable'
      variables: IsEditableVariables
    }
  | {
      path: '/usageRestrictions/defaultRestrictions'
      operationId: 'getDefaultRestrictions'
      variables: GetDefaultRestrictionsVariables
    }
  | {
      path: '/userGroups/{userGroupId}'
      operationId: 'get39'
      variables: Get39Variables
    }
  | {
      path: '/userGroups'
      operationId: 'list42'
      variables: List42Variables
    }
  | {
      path: '/userGroups/approvals'
      operationId: 'listForApprovals'
      variables: ListForApprovalsVariables
    }
  | {
      path: '/users/user'
      operationId: 'get40'
      variables: Get40Variables
    }
  | {
      path: '/users'
      operationId: 'list43'
      variables: List43Variables
    }
  | {
      path: '/users/user-permissions/{accountId}'
      operationId: 'getUserPermissionInfo'
      variables: GetUserPermissionInfoVariables
    }
  | {
      path: '/users/refresh-token'
      operationId: 'refreshToken'
      variables: RefreshTokenVariables
    }
  | {
      path: '/users/account-name/{accountName}'
      operationId: 'suggestAccountName'
      variables: SuggestAccountNameVariables
    }
  | {
      path: '/users/feature-flags/{accountId}'
      operationId: 'getFeatureFlags'
      variables: GetFeatureFlagsVariables
    }
  | {
      path: '/users/user/login'
      operationId: 'loginUser1'
      variables: LoginUser1Variables
    }
  | {
      path: '/users/check-password-violations'
      operationId: 'checkPasswordViolations'
      variables: CheckPasswordViolationsVariables
    }
  | {
      path: '/users/account-roles/{accountId}'
      operationId: 'getAccountRole'
      variables: GetAccountRoleVariables
    }
  | {
      path: '/users/application-roles/{appId}'
      operationId: 'getApplicationRole'
      variables: GetApplicationRoleVariables
    }
  | {
      path: '/users/switch-account'
      operationId: 'switchAccount'
      variables: SwitchAccountVariables
    }
  | {
      path: '/users/onprem-logintype'
      operationId: 'getLoginTypeForOnPremSetup'
      variables: GetLoginTypeForOnPremSetupVariables
    }
  | {
      path: '/users/oauth2Redirect'
      operationId: 'oauth2Redirect'
      variables: Oauth2RedirectVariables
    }
  | {
      path: '/users/oauth2/{provider}'
      operationId: 'oauth2CallbackUrl'
      variables: Oauth2CallbackUrlVariables
    }
  | {
      path: '/users/invitation-id'
      operationId: 'getUserInvitationId'
      variables: GetUserInvitationIdVariables
    }
  | {
      path: '/users/verify-email'
      operationId: 'verifyEmail'
      variables: VerifyEmailVariables
    }
  | {
      path: '/users/resend-verification-email/{email}'
      operationId: 'resendVerificationEmail'
      variables: ResendVerificationEmailVariables
    }
  | {
      path: '/users/invites'
      operationId: 'listInvites'
      variables: ListInvitesVariables
    }
  | {
      path: '/users/invites/{inviteId}'
      operationId: 'getInvite'
      variables: GetInviteVariables
    }
  | {
      path: '/users/invites/{inviteId}/status'
      operationId: 'checkInvite'
      variables: CheckInviteVariables
    }
  | {
      path: '/users/invites/verify'
      operationId: 'acceptInviteAndRedirect'
      variables: AcceptInviteAndRedirectVariables
    }
  | {
      path: '/users/reset-two-factor-auth/{userId}'
      operationId: 'reset2fa'
      variables: Reset2faVariables
    }
  | {
      path: '/users/two-factor-auth-info/{accountId}'
      operationId: 'getTwoFactorAuthAdminEnforceInfo'
      variables: GetTwoFactorAuthAdminEnforceInfoVariables
    }
  | {
      path: '/users/two-factor-auth/{auth-mechanism}'
      operationId: 'getTwoFactorAuthSettings'
      variables: GetTwoFactorAuthSettingsVariables
    }
  | {
      path: '/users/verify/{token}'
      operationId: 'verifyToken'
      variables: VerifyTokenVariables
    }
  | {
      path: '/version'
      operationId: 'get41'
      variables: Get41Variables
    }
  | {
      path: '/versions'
      operationId: 'list44'
      variables: List44Variables
    }
  | {
      path: '/webhooks/{webHookToken}'
      operationId: 'ping'
      variables: PingVariables
    }
  | {
      path: '/whitelist/{whitelistId}'
      operationId: 'get42'
      variables: Get42Variables
    }
  | {
      path: '/whitelist'
      operationId: 'list45'
      variables: List45Variables
    }
  | {
      path: '/whitelist/isEnabled'
      operationId: 'isEnabled'
      variables: IsEnabledVariables
    }
  | {
      path: '/whitelist/ip-address-whitelisted'
      operationId: 'isIpAddressWhitelisted'
      variables: IsIpAddressWhitelistedVariables
    }
  | {
      path: '/workflows/{workflowId}'
      operationId: 'read1'
      variables: Read1Variables
    }
  | {
      path: '/workflows'
      operationId: 'list46'
      variables: List46Variables
    }
  | {
      path: '/workflows/steps/phase/{phaseId}/sections/{sectionId}/{position}'
      operationId: 'getSteps'
      variables: GetStepsVariables
    }
  | {
      path: '/workflows/state-valid'
      operationId: 'isStateValid'
      variables: IsStateValidVariables
    }
  | {
      path: '/workflows/{workflowId}/infra-types'
      operationId: 'workflowHasSSHInfraMapping'
      variables: WorkflowHasSSHInfraMappingVariables
    }
  | {
      path: '/workflows/{workflowId}/deployed-nodes'
      operationId: 'getDeployedNodes'
      variables: GetDeployedNodesVariables
    }
  | {
      path: '/workflows/required-entities'
      operationId: 'requiredEntities1'
      variables: RequiredEntities1Variables
    }
  | {
      path: '/workflows/last-successful-workflow-ids'
      operationId: 'getLastSuccessfulWorkflowExecutionIds'
      variables: GetLastSuccessfulWorkflowExecutionIdsVariables
    }
  | {
      path: '/workflows/workflow-execution-for-state-execution'
      operationId: 'getWorkflowExecutionForStateExecution'
      variables: GetWorkflowExecutionForStateExecutionVariables
    }
  | {
      path: '/workflows/stencils'
      operationId: 'stencils2'
      variables: Stencils2Variables
    }
  | {
      path: '/workflows/hpa-metric-yaml'
      operationId: 'getHPAYamlStringWithCustomMetric'
      variables: GetHPAYamlStringWithCustomMetricVariables
    }
  | {
      path: '/workflows/{workflowId}/traffic-shift-metadata'
      operationId: 'readTrafficShiftMetadata'
      variables: ReadTrafficShiftMetadataVariables
    }
  | {
      path: '/workflows/{workflowId}/nodes/{nodeId}'
      operationId: 'readGraphNode'
      variables: ReadGraphNodeVariables
    }
  | {
      path: '/workflows/state-defaults'
      operationId: 'stateDefaults'
      variables: StateDefaultsVariables
    }
  | {
      path: '/alerts'
      operationId: 'list47'
      variables: List47Variables
    }
  | {
      path: '/alerts/types'
      operationId: 'listCategoriesAndTypes'
      variables: ListCategoriesAndTypesVariables
    }
  | {
      path: '/ccm/perpetual-task/delete'
      operationId: 'deletePerpetualTask'
      variables: DeletePerpetualTaskVariables
    }
  | {
      path: '/ccm/perpetual-task/status'
      operationId: 'statusOfAPerpetualTask'
      variables: StatusOfAPerpetualTaskVariables
    }
  | {
      path: '/command-library/configuration'
      operationId: 'getCommandStores'
      variables: GetCommandStoresVariables
    }
  | {
      path: '/command-library/command-stores/{commandStoreName}/commands'
      operationId: 'listImportedCommandVersions'
      variables: ListImportedCommandVersionsVariables
    }
  | {
      path: '/command-library/command-stores/{commandStoreName}/commands/{commandName}'
      operationId: 'listLatestVersionsOfTemplates'
      variables: ListLatestVersionsOfTemplatesVariables
    }
  | {
      path: '/command-library-service/command-stores/{commandStoreName}/commands/tags'
      operationId: 'getCommandTags'
      variables: GetCommandTagsVariables
    }
  | {
      path: '/command-library-service/command-stores/{commandStoreName}/commands'
      operationId: 'listCommands'
      variables: ListCommandsVariables
    }
  | {
      path: '/command-library-service/command-stores/{commandStoreName}/commands/{commandName}'
      operationId: 'getCommandDetails'
      variables: GetCommandDetailsVariables
    }
  | {
      path: '/command-library-service/command-stores/{commandStoreName}/commands/{commandName}/versions/{version}'
      operationId: 'getVersionDetails'
      variables: GetVersionDetailsVariables
    }
  | {
      path: '/command-library-service/command-stores'
      operationId: 'getCommandStores1'
      variables: GetCommandStores1Variables
    }
  | {
      path: '/customDeploymentType/{accountId}/{templateId}'
      operationId: 'get43'
      variables: Get43Variables
    }
  | {
      path: '/customDeploymentType/{accountId}'
      operationId: 'list48'
      variables: List48Variables
    }
  | {
      path: '/cv-nextgen/service/change-events'
      operationId: 'getChangeEvents'
      variables: GetChangeEventsVariables
    }
  | {
      path: '/cv-nextgen/service/cv-data-collection-task/task-status'
      operationId: 'getTaskStatus'
      variables: GetTaskStatusVariables
    }
  | {
      path: '/custom-dashboard'
      operationId: 'getDashboardSettings'
      variables: GetDashboardSettingsVariables
    }
  | {
      path: '/custom-dashboard/{dashboardId}'
      operationId: 'getDashboardSetting'
      variables: GetDashboardSettingVariables
    }
  | {
      path: '/compliance-config/{accountId}'
      operationId: 'get44'
      variables: Get44Variables
    }
  | {
      path: '/compliance-config/deploymentfreeze/info/{accountId}'
      operationId: 'getDeploymentFreezeInfo'
      variables: GetDeploymentFreezeInfoVariables
    }
  | {
      path: '/compliance/pipeline'
      operationId: 'list49'
      variables: List49Variables
    }
  | {
      path: '/compliance/pipeline/report'
      operationId: 'report'
      variables: ReportVariables
    }
  | {
      path: '/personalization/templates/favorite'
      operationId: 'fetchFavoriteTemplates'
      variables: FetchFavoriteTemplatesVariables
    }
  | {
      path: '/custom-secrets-managers/{configId}'
      operationId: 'getCustomSecretsManagerConfig'
      variables: GetCustomSecretsManagerConfigVariables
    }
  | {
      path: '/gcp-secrets-manager-v2/regions'
      operationId: 'regions'
      variables: RegionsVariables
    }
  | {
      path: '/kms/delete-kms'
      operationId: 'deleteKmsConfig'
      variables: DeleteKmsConfigVariables
    }
  | {
      path: '/secrets/get-config'
      operationId: 'getEncryptionConfig'
      variables: GetEncryptionConfigVariables
    }
  | {
      path: '/secrets/list-secret-usage'
      operationId: 'getSecretUsage'
      variables: GetSecretUsageVariables
    }
  | {
      path: '/secrets/list-secrets-page'
      operationId: 'listSecrets'
      variables: ListSecretsVariables
    }
  | {
      path: '/secrets/list-account-secrets'
      operationId: 'listSecrets1'
      variables: ListSecrets1Variables
    }
  | {
      path: '/secrets/usage'
      operationId: 'getUsageLogs'
      variables: GetUsageLogsVariables
    }
  | {
      path: '/secrets/change-logs'
      operationId: 'getChangeLogs'
      variables: GetChangeLogsVariables
    }
  | {
      path: '/secrets/list-values'
      operationId: 'listEncryptedSettingAttributes'
      variables: ListEncryptedSettingAttributesVariables
    }
  | {
      path: '/secrets/list-configs'
      operationId: 'listEncryptionConfig'
      variables: ListEncryptionConfigVariables
    }
  | {
      path: '/secrets/create-secret-allowed-scopes'
      operationId: 'getAllowedUsageScopesToCreateSecret'
      variables: GetAllowedUsageScopesToCreateSecretVariables
    }
  | {
      path: '/secrets/transition-config'
      operationId: 'transitionSecrets'
      variables: TransitionSecretsVariables
    }
  | {
      path: '/secrets/list-setup-usage'
      operationId: 'getSecretSetupUsage'
      variables: GetSecretSetupUsageVariables
    }
  | {
      path: '/template-galleries/{galleryId}'
      operationId: 'getTemplateGallery'
      variables: GetTemplateGalleryVariables
    }
  | {
      path: '/template-galleries'
      operationId: 'list50'
      variables: List50Variables
    }
  | {
      path: '/template-galleries/folders/{templateFolderId}'
      operationId: 'getTemplateFolder'
      variables: GetTemplateFolderVariables
    }
  | {
      path: '/templates/{templateId}'
      operationId: 'getTemplate'
      variables: GetTemplateVariables
    }
  | {
      path: '/templates/versions'
      operationId: 'list51'
      variables: List51Variables
    }
  | {
      path: '/templates'
      operationId: 'list52'
      variables: List52Variables
    }
  | {
      path: '/templates/tree/search'
      operationId: 'getTemplateTree'
      variables: GetTemplateTreeVariables
    }
  | {
      path: '/templates/{templateId}/commands/categories'
      operationId: 'getCommandCategories'
      variables: GetCommandCategoriesVariables
    }
  | {
      path: '/templates/{templateId}/versions/{version}/yaml'
      operationId: 'getYaml'
      variables: GetYamlVariables
    }
  | {
      path: '/view'
      operationId: 'get45'
      variables: Get45Variables
    }
  | {
      path: '/view-custom-field'
      operationId: 'get46'
      variables: Get46Variables
    }
  | {
      path: '/yaml-history/{accountId}'
      operationId: 'get47'
      variables: Get47Variables
    }
  | {
      path: '/setup-as-code/yaml/settings/{uuid}'
      operationId: 'getSettingAttribute'
      variables: GetSettingAttributeVariables
    }
  | {
      path: '/setup-as-code/yaml/artifactTriggers/{artifactStreamId}'
      operationId: 'getArtifactTrigger'
      variables: GetArtifactTriggerVariables
    }
  | {
      path: '/setup-as-code/yaml/triggers/{triggerId}'
      operationId: 'getTrigger'
      variables: GetTriggerVariables
    }
  | {
      path: '/setup-as-code/yaml/pipelines/{pipelineId}'
      operationId: 'getPipeline'
      variables: GetPipelineVariables
    }
  | {
      path: '/setup-as-code/yaml/workflows/{workflowId}'
      operationId: 'getWorkflow'
      variables: GetWorkflowVariables
    }
  | {
      path: '/setup-as-code/yaml/infrastructuremappings/{infraMappingId}'
      operationId: 'getInfraMapping'
      variables: GetInfraMappingVariables
    }
  | {
      path: '/setup-as-code/yaml/helm-charts/{helmChartSpecificationId}'
      operationId: 'getHelmChartSpecification'
      variables: GetHelmChartSpecificationVariables
    }
  | {
      path: '/setup-as-code/yaml/user-data-specs/{userDataSpecId}'
      operationId: 'getUserDataSpec'
      variables: GetUserDataSpecVariables
    }
  | {
      path: '/setup-as-code/yaml/notification-groups/{notificationGroupId}'
      operationId: 'getNotificationGroup'
      variables: GetNotificationGroupVariables
    }
  | {
      path: '/setup-as-code/yaml/templates/{templateId}'
      operationId: 'getTemplateLibrary'
      variables: GetTemplateLibraryVariables
    }
  | {
      path: '/setup-as-code/yaml/infrastructureprovisioners/{infraProvisionerId}'
      operationId: 'getProvisioner'
      variables: GetProvisionerVariables
    }
  | {
      path: '/setup-as-code/yaml/cvconfigurations/{cvConfigId}'
      operationId: 'getCVConfiguration'
      variables: GetCVConfigurationVariables
    }
  | {
      path: '/setup-as-code/yaml/compliance-config/{accountId}'
      operationId: 'getGovernanceConfig'
      variables: GetGovernanceConfigVariables
    }
  | {
      path: '/setup-as-code/yaml/git-config/{entityId}'
      operationId: 'get48'
      variables: Get48Variables
    }
  | {
      path: '/setup-as-code/yaml/container-tasks/{containerTaskId}'
      operationId: 'getContainerTask'
      variables: GetContainerTaskVariables
    }
  | {
      path: '/setup-as-code/yaml/service-commands/{serviceCommandId}'
      operationId: 'getServiceCommand'
      variables: GetServiceCommandVariables
    }
  | {
      path: '/setup-as-code/yaml/configs/{configId}'
      operationId: 'getConfigFile'
      variables: GetConfigFileVariables
    }
  | {
      path: '/setup-as-code/yaml/environments/{envId}'
      operationId: 'getEnvironment'
      variables: GetEnvironmentVariables
    }
  | {
      path: '/setup-as-code/yaml/services/{serviceId}'
      operationId: 'getService'
      variables: GetServiceVariables
    }
  | {
      path: '/setup-as-code/yaml/manifest'
      operationId: 'getApplicationManifestForService'
      variables: GetApplicationManifestForServiceVariables
    }
  | {
      path: '/setup-as-code/yaml/artifact-streams/{artifactStreamId}'
      operationId: 'getArtifactStream'
      variables: GetArtifactStreamVariables
    }
  | {
      path: '/setup-as-code/yaml/infrastructuredefinitions/{infraDefinitionId}'
      operationId: 'getInfraDefintion'
      variables: GetInfraDefintionVariables
    }
  | {
      path: '/setup-as-code/yaml/ecs-service-spec/{ecsServiceSpecificationId}'
      operationId: 'getEcsSErviceSpecification1'
      variables: GetEcsSErviceSpecification1Variables
    }
  | {
      path: '/setup-as-code/yaml/pcfservicespecifications/{pcfservicespecificationId}'
      operationId: 'getPcfservicespecificationId'
      variables: GetPcfservicespecificationIdVariables
    }
  | {
      path: '/setup-as-code/yaml/lambda-specs/{lambdaSpecId}'
      operationId: 'getLamdbaSpec'
      variables: GetLamdbaSpecVariables
    }
  | {
      path: '/setup-as-code/yaml/full-sync-dry-run'
      operationId: 'fullSyncDryRun'
      variables: FullSyncDryRunVariables
    }
  | {
      path: '/setup-as-code/yaml/get-all-yaml-errors'
      operationId: 'getAllYamlErrors'
      variables: GetAllYamlErrorsVariables
    }
  | {
      path: '/setup-as-code/yaml/internal/full-sync-account'
      operationId: 'fullSyncAccountInternal'
      variables: FullSyncAccountInternalVariables
    }
  | {
      path: '/setup-as-code/yaml/tags/{uuid}'
      operationId: 'getTags'
      variables: GetTagsVariables
    }
  | {
      path: '/setup-as-code/yaml/application'
      operationId: 'getApplication'
      variables: GetApplicationVariables
    }
  | {
      path: '/setup-as-code/yaml/webhook/{entityId}'
      operationId: 'getWebhook'
      variables: GetWebhookVariables
    }
  | {
      path: '/setup-as-code/yaml/git-sync-errors'
      operationId: 'listGitSyncErrors'
      variables: ListGitSyncErrorsVariables
    }
  | {
      path: '/setup-as-code/yaml/applications/{appId}'
      operationId: 'getApp'
      variables: GetAppVariables
    }
  | {
      path: '/setup-as-code/yaml/directory'
      operationId: 'getDirectory'
      variables: GetDirectoryVariables
    }
  | {
      path: '/setup-as-code/yaml/yaml-content'
      operationId: 'getYamlForFilePath'
      variables: GetYamlForFilePathVariables
    }
  | {
      path: '/setup-as-code/yaml/cgeventconfigs/{eventConfigId}'
      operationId: 'getCgEventConfig'
      variables: GetCgEventConfigVariables
    }
  | {
      path: '/setup-as-code/yaml/application-manifests/{applicationManifestId}'
      operationId: 'getApplicationManifestId'
      variables: GetApplicationManifestIdVariables
    }
  | {
      path: '/setup-as-code/yaml/manifest-files/{manifestFileId}'
      operationId: 'getApplicationManifestFile'
      variables: GetApplicationManifestFileVariables
    }
  | {
      path: '/setup-as-code/yaml/settings'
      operationId: 'getSettingAttributesList'
      variables: GetSettingAttributesListVariables
    }
  | {
      path: '/setup-as-code/yaml/defaults/{uuid}'
      operationId: 'getDefaults'
      variables: GetDefaultsVariables
    }
