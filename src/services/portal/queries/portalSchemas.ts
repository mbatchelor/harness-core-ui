/**
 * Generated by @openapi-codegen
 *
 * @version 1.0
 */
export type ResponseMessage = {
  code?:
    | 'DEFAULT_ERROR_CODE'
    | 'INVALID_ARGUMENT'
    | 'INVALID_EMAIL'
    | 'DOMAIN_NOT_ALLOWED_TO_REGISTER'
    | 'COMMNITY_EDITION_NOT_FOUND'
    | 'DEPLOY_MODE_IS_NOT_ON_PREM'
    | 'USER_ALREADY_REGISTERED'
    | 'USER_INVITATION_DOES_NOT_EXIST'
    | 'USER_DOES_NOT_EXIST'
    | 'USER_INVITE_OPERATION_FAILED'
    | 'USER_DISABLED'
    | 'ACCOUNT_DOES_NOT_EXIST'
    | 'INACTIVE_ACCOUNT'
    | 'ACCOUNT_MIGRATED'
    | 'USER_DOMAIN_NOT_ALLOWED'
    | 'MAX_FAILED_ATTEMPT_COUNT_EXCEEDED'
    | 'RESOURCE_NOT_FOUND'
    | 'INVALID_FORMAT'
    | 'ROLE_DOES_NOT_EXIST'
    | 'EMAIL_NOT_VERIFIED'
    | 'EMAIL_VERIFICATION_TOKEN_NOT_FOUND'
    | 'INVALID_TOKEN'
    | 'REVOKED_TOKEN'
    | 'INVALID_CAPTCHA_TOKEN'
    | 'NOT_ACCOUNT_MGR_NOR_HAS_ALL_APP_ACCESS'
    | 'EXPIRED_TOKEN'
    | 'TOKEN_ALREADY_REFRESHED_ONCE'
    | 'ACCESS_DENIED'
    | 'NG_ACCESS_DENIED'
    | 'INVALID_CREDENTIAL'
    | 'INVALID_CREDENTIALS_THIRD_PARTY'
    | 'INVALID_KEY'
    | 'INVALID_CONNECTOR_TYPE'
    | 'INVALID_KEYPATH'
    | 'INVALID_VARIABLE'
    | 'UNKNOWN_HOST'
    | 'UNREACHABLE_HOST'
    | 'INVALID_PORT'
    | 'SSH_SESSION_TIMEOUT'
    | 'SOCKET_CONNECTION_ERROR'
    | 'CONNECTION_ERROR'
    | 'SOCKET_CONNECTION_TIMEOUT'
    | 'CONNECTION_TIMEOUT'
    | 'SSH_CONNECTION_ERROR'
    | 'USER_GROUP_ERROR'
    | 'INVALID_EXECUTION_ID'
    | 'ERROR_IN_GETTING_CHANNEL_STREAMS'
    | 'UNEXPECTED'
    | 'UNKNOWN_ERROR'
    | 'UNKNOWN_EXECUTOR_TYPE_ERROR'
    | 'DUPLICATE_STATE_NAMES'
    | 'TRANSITION_NOT_LINKED'
    | 'TRANSITION_TO_INCORRECT_STATE'
    | 'TRANSITION_TYPE_NULL'
    | 'STATES_WITH_DUP_TRANSITIONS'
    | 'BARRIERS_NOT_RUNNING_CONCURRENTLY'
    | 'NON_FORK_STATES'
    | 'NON_REPEAT_STATES'
    | 'INITIAL_STATE_NOT_DEFINED'
    | 'FILE_INTEGRITY_CHECK_FAILED'
    | 'INVALID_URL'
    | 'FILE_DOWNLOAD_FAILED'
    | 'PLATFORM_SOFTWARE_DELETE_ERROR'
    | 'INVALID_CSV_FILE'
    | 'INVALID_REQUEST'
    | 'SCHEMA_VALIDATION_FAILED'
    | 'FILTER_CREATION_ERROR'
    | 'INVALID_YAML_ERROR'
    | 'PLAN_CREATION_ERROR'
    | 'INVALID_INFRA_STATE'
    | 'PIPELINE_ALREADY_TRIGGERED'
    | 'NON_EXISTING_PIPELINE'
    | 'DUPLICATE_COMMAND_NAMES'
    | 'INVALID_PIPELINE'
    | 'COMMAND_DOES_NOT_EXIST'
    | 'DUPLICATE_ARTIFACTSTREAM_NAMES'
    | 'DUPLICATE_HOST_NAMES'
    | 'STATE_NOT_FOR_TYPE'
    | 'STATE_MACHINE_ISSUE'
    | 'STATE_DISCONTINUE_FAILED'
    | 'STATE_PAUSE_FAILED'
    | 'PAUSE_ALL_ALREADY'
    | 'RESUME_ALL_ALREADY'
    | 'ROLLBACK_ALREADY'
    | 'ABORT_ALL_ALREADY'
    | 'EXPIRE_ALL_ALREADY'
    | 'RETRY_FAILED'
    | 'UNKNOWN_ARTIFACT_TYPE'
    | 'UNKNOWN_STAGE_ELEMENT_WRAPPER_TYPE'
    | 'INIT_TIMEOUT'
    | 'LICENSE_EXPIRED'
    | 'NOT_LICENSED'
    | 'REQUEST_TIMEOUT'
    | 'WORKFLOW_ALREADY_TRIGGERED'
    | 'JENKINS_ERROR'
    | 'INVALID_ARTIFACT_SOURCE'
    | 'INVALID_ARTIFACT_SERVER'
    | 'INVALID_CLOUD_PROVIDER'
    | 'UPDATE_NOT_ALLOWED'
    | 'DELETE_NOT_ALLOWED'
    | 'APPDYNAMICS_CONFIGURATION_ERROR'
    | 'APM_CONFIGURATION_ERROR'
    | 'SPLUNK_CONFIGURATION_ERROR'
    | 'ELK_CONFIGURATION_ERROR'
    | 'LOGZ_CONFIGURATION_ERROR'
    | 'SUMO_CONFIGURATION_ERROR'
    | 'INSTANA_CONFIGURATION_ERROR'
    | 'APPDYNAMICS_ERROR'
    | 'STACKDRIVER_ERROR'
    | 'STACKDRIVER_CONFIGURATION_ERROR'
    | 'NEWRELIC_CONFIGURATION_ERROR'
    | 'NEWRELIC_ERROR'
    | 'DYNA_TRACE_CONFIGURATION_ERROR'
    | 'DYNA_TRACE_ERROR'
    | 'CLOUDWATCH_ERROR'
    | 'CLOUDWATCH_CONFIGURATION_ERROR'
    | 'PROMETHEUS_CONFIGURATION_ERROR'
    | 'DATA_DOG_CONFIGURATION_ERROR'
    | 'SERVICE_GUARD_CONFIGURATION_ERROR'
    | 'ENCRYPTION_NOT_CONFIGURED'
    | 'UNAVAILABLE_DELEGATES'
    | 'WORKFLOW_EXECUTION_IN_PROGRESS'
    | 'PIPELINE_EXECUTION_IN_PROGRESS'
    | 'AWS_ACCESS_DENIED'
    | 'AWS_CLUSTER_NOT_FOUND'
    | 'AWS_SERVICE_NOT_FOUND'
    | 'IMAGE_NOT_FOUND'
    | 'ILLEGAL_ARGUMENT'
    | 'IMAGE_TAG_NOT_FOUND'
    | 'DELEGATE_NOT_AVAILABLE'
    | 'INVALID_YAML_PAYLOAD'
    | 'AUTHENTICATION_ERROR'
    | 'AUTHORIZATION_ERROR'
    | 'UNRECOGNIZED_YAML_FIELDS'
    | 'COULD_NOT_MAP_BEFORE_YAML'
    | 'MISSING_BEFORE_YAML'
    | 'MISSING_YAML'
    | 'NON_EMPTY_DELETIONS'
    | 'GENERAL_YAML_ERROR'
    | 'GENERAL_YAML_INFO'
    | 'YAML_GIT_SYNC_ERROR'
    | 'GIT_CONNECTION_ERROR'
    | 'GIT_ERROR'
    | 'ARTIFACT_SERVER_ERROR'
    | 'ENCRYPT_DECRYPT_ERROR'
    | 'SECRET_MANAGEMENT_ERROR'
    | 'SECRET_NOT_FOUND'
    | 'KMS_OPERATION_ERROR'
    | 'GCP_KMS_OPERATION_ERROR'
    | 'VAULT_OPERATION_ERROR'
    | 'AWS_SECRETS_MANAGER_OPERATION_ERROR'
    | 'AZURE_KEY_VAULT_OPERATION_ERROR'
    | 'CYBERARK_OPERATION_ERROR'
    | 'UNSUPPORTED_OPERATION_EXCEPTION'
    | 'FEATURE_UNAVAILABLE'
    | 'GENERAL_ERROR'
    | 'BASELINE_CONFIGURATION_ERROR'
    | 'SAML_IDP_CONFIGURATION_NOT_AVAILABLE'
    | 'INVALID_AUTHENTICATION_MECHANISM'
    | 'INVALID_SAML_CONFIGURATION'
    | 'INVALID_OAUTH_CONFIGURATION'
    | 'INVALID_LDAP_CONFIGURATION'
    | 'USER_GROUP_SYNC_FAILURE'
    | 'USER_GROUP_ALREADY_EXIST'
    | 'INVALID_TWO_FACTOR_AUTHENTICATION_CONFIGURATION'
    | 'EXPLANATION'
    | 'HINT'
    | 'NOT_WHITELISTED_IP'
    | 'INVALID_TOTP_TOKEN'
    | 'EMAIL_FAILED'
    | 'SSL_HANDSHAKE_FAILED'
    | 'NO_APPS_ASSIGNED'
    | 'INVALID_INFRA_CONFIGURATION'
    | 'TEMPLATES_LINKED'
    | 'USER_HAS_NO_PERMISSIONS'
    | 'USER_NOT_AUTHORIZED'
    | 'USER_ALREADY_PRESENT'
    | 'INVALID_USAGE_RESTRICTION'
    | 'USAGE_RESTRICTION_ERROR'
    | 'STATE_EXECUTION_INSTANCE_NOT_FOUND'
    | 'DELEGATE_TASK_RETRY'
    | 'KUBERNETES_API_TASK_EXCEPTION'
    | 'KUBERNETES_TASK_EXCEPTION'
    | 'KUBERNETES_YAML_ERROR'
    | 'SAVE_FILE_INTO_GCP_STORAGE_FAILED'
    | 'READ_FILE_FROM_GCP_STORAGE_FAILED'
    | 'FILE_NOT_FOUND_ERROR'
    | 'USAGE_LIMITS_EXCEEDED'
    | 'EVENT_PUBLISH_FAILED'
    | 'JIRA_ERROR'
    | 'EXPRESSION_EVALUATION_FAILED'
    | 'KUBERNETES_VALUES_ERROR'
    | 'KUBERNETES_CLUSTER_ERROR'
    | 'INCORRECT_SIGN_IN_MECHANISM'
    | 'OAUTH_LOGIN_FAILED'
    | 'INVALID_TERRAFORM_TARGETS_REQUEST'
    | 'TERRAFORM_EXECUTION_ERROR'
    | 'FILE_READ_FAILED'
    | 'FILE_SIZE_EXCEEDS_LIMIT'
    | 'CLUSTER_NOT_FOUND'
    | 'MARKETPLACE_TOKEN_NOT_FOUND'
    | 'INVALID_MARKETPLACE_TOKEN'
    | 'INVALID_TICKETING_SERVER'
    | 'SERVICENOW_ERROR'
    | 'PASSWORD_EXPIRED'
    | 'USER_LOCKED'
    | 'PASSWORD_STRENGTH_CHECK_FAILED'
    | 'ACCOUNT_DISABLED'
    | 'INVALID_ACCOUNT_PERMISSION'
    | 'PAGERDUTY_ERROR'
    | 'HEALTH_ERROR'
    | 'SAML_TEST_SUCCESS_MECHANISM_NOT_ENABLED'
    | 'DOMAIN_WHITELIST_FILTER_CHECK_FAILED'
    | 'INVALID_DASHBOARD_UPDATE_REQUEST'
    | 'DUPLICATE_FIELD'
    | 'INVALID_AZURE_VAULT_CONFIGURATION'
    | 'USER_NOT_AUTHORIZED_DUE_TO_USAGE_RESTRICTIONS'
    | 'INVALID_ROLLBACK'
    | 'DATA_COLLECTION_ERROR'
    | 'SUMO_DATA_COLLECTION_ERROR'
    | 'DEPLOYMENT_GOVERNANCE_ERROR'
    | 'BATCH_PROCESSING_ERROR'
    | 'GRAPHQL_ERROR'
    | 'FILE_CREATE_ERROR'
    | 'ILLEGAL_STATE'
    | 'GIT_DIFF_COMMIT_NOT_IN_ORDER'
    | 'FAILED_TO_ACQUIRE_PERSISTENT_LOCK'
    | 'FAILED_TO_ACQUIRE_NON_PERSISTENT_LOCK'
    | 'POD_NOT_FOUND_ERROR'
    | 'COMMAND_EXECUTION_ERROR'
    | 'REGISTRY_EXCEPTION'
    | 'ENGINE_INTERRUPT_PROCESSING_EXCEPTION'
    | 'ENGINE_IO_EXCEPTION'
    | 'ENGINE_OUTCOME_EXCEPTION'
    | 'ENGINE_SWEEPING_OUTPUT_EXCEPTION'
    | 'CACHE_NOT_FOUND_EXCEPTION'
    | 'ENGINE_ENTITY_UPDATE_EXCEPTION'
    | 'SHELL_EXECUTION_EXCEPTION'
    | 'TEMPLATE_NOT_FOUND'
    | 'AZURE_SERVICE_EXCEPTION'
    | 'AZURE_CLIENT_EXCEPTION'
    | 'GIT_UNSEEN_REMOTE_HEAD_COMMIT'
    | 'TIMEOUT_ENGINE_EXCEPTION'
    | 'NO_AVAILABLE_DELEGATES'
    | 'NO_INSTALLED_DELEGATES'
    | 'DUPLICATE_DELEGATE_EXCEPTION'
    | 'GCP_MARKETPLACE_EXCEPTION'
    | 'MISSING_DEFAULT_GOOGLE_CREDENTIALS'
    | 'INCORRECT_DEFAULT_GOOGLE_CREDENTIALS'
    | 'OPTIMISTIC_LOCKING_EXCEPTION'
    | 'NG_PIPELINE_EXECUTION_EXCEPTION'
    | 'NG_PIPELINE_CREATE_EXCEPTION'
    | 'RESOURCE_NOT_FOUND_EXCEPTION'
    | 'PMS_INITIALIZE_SDK_EXCEPTION'
    | 'UNEXPECTED_SNIPPET_EXCEPTION'
    | 'UNEXPECTED_SCHEMA_EXCEPTION'
    | 'CONNECTOR_VALIDATION_EXCEPTION'
    | 'TIMESCALE_NOT_AVAILABLE'
    | 'MIGRATION_EXCEPTION'
    | 'REQUEST_PROCESSING_INTERRUPTED'
    | 'SECRET_MANAGER_ID_NOT_FOUND'
    | 'GCP_SECRET_MANAGER_OPERATION_ERROR'
    | 'GCP_SECRET_OPERATION_ERROR'
    | 'GIT_OPERATION_ERROR'
    | 'TASK_FAILURE_ERROR'
    | 'INSTANCE_STATS_PROCESS_ERROR'
    | 'INSTANCE_STATS_MIGRATION_ERROR'
    | 'DEPLOYMENT_MIGRATION_ERROR'
    | 'CG_LICENSE_USAGE_ERROR'
    | 'INSTANCE_STATS_AGGREGATION_ERROR'
    | 'UNRESOLVED_EXPRESSIONS_ERROR'
    | 'KRYO_HANDLER_NOT_FOUND_ERROR'
    | 'DELEGATE_ERROR_HANDLER_EXCEPTION'
    | 'UNEXPECTED_TYPE_ERROR'
    | 'EXCEPTION_HANDLER_NOT_FOUND'
    | 'CONNECTOR_NOT_FOUND_EXCEPTION'
    | 'GCP_SERVER_ERROR'
    | 'HTTP_RESPONSE_EXCEPTION'
    | 'SCM_NOT_FOUND_ERROR'
    | 'SCM_CONFLICT_ERROR'
    | 'SCM_UNPROCESSABLE_ENTITY'
    | 'PROCESS_EXECUTION_EXCEPTION'
    | 'SCM_UNAUTHORIZED'
    | 'DATA'
    | 'CONTEXT'
    | 'PR_CREATION_ERROR'
    | 'URL_NOT_REACHABLE'
    | 'URL_NOT_PROVIDED'
    | 'ENGINE_EXPRESSION_EVALUATION_ERROR'
    | 'ENGINE_FUNCTOR_ERROR'
    | 'JIRA_CLIENT_ERROR'
    | 'SCM_NOT_MODIFIED'
    | 'APPROVAL_STEP_NG_ERROR'
    | 'BUCKET_SERVER_ERROR'
    | 'GIT_SYNC_ERROR'
    | 'TEMPLATE_EXCEPTION'
    | 'ENTITY_REFERENCE_EXCEPTION'
    | 'INVALID_INPUT_SET'
    | 'INVALID_OVERLAY_INPUT_SET'
    | 'RESOURCE_ALREADY_EXISTS'
    | 'INVALID_JSON_PAYLOAD'
    | 'POLICY_EVALUATION_FAILURE'
  level?: 'INFO' | 'ERROR'
  message?: string
  exception?: Throwable
  failureTypes?: (
    | 'EXPIRED'
    | 'DELEGATE_PROVISIONING'
    | 'CONNECTIVITY'
    | 'AUTHENTICATION'
    | 'VERIFICATION_FAILURE'
    | 'APPLICATION_ERROR'
    | 'AUTHORIZATION_ERROR'
    | 'TIMEOUT_ERROR'
    | 'POLICY_EVALUATION_FAILURE'
  )[]
}

export type RestResponse = {
  metaData?: {
    [key: string]: Record<string, any>
  }
  resource?: Record<string, any>
  responseMessages?: ResponseMessage[]
}

export type RestResponseString = {
  metaData?: {
    [key: string]: Record<string, any>
  }
  resource?: string
  responseMessages?: ResponseMessage[]
}

export type StackTraceElement = {
  methodName?: string
  fileName?: string
  /*
   * @format int32
   */
  lineNumber?: number
  className?: string
  nativeMethod?: boolean
}

export type Throwable = {
  cause?: Throwable
  stackTrace?: StackTraceElement[]
  message?: string
  localizedMessage?: string
  suppressed?: Throwable[]
}

export type DelegateTokenDetails = {
  uuid?: string
  accountId?: string
  name?: string
  createdBy?: EmbeddedUser
  createdByNgUser?: Principal
  /*
   * @format int64
   */
  createdAt?: number
  status?: 'ACTIVE' | 'REVOKED'
  value?: string
  ownerIdentifier?: string
}

export type EmbeddedUser = {
  uuid?: string
  name?: string
  email?: string
}

export type Principal = {
  type: 'USER' | 'SERVICE' | 'API_KEY' | 'SERVICE_ACCOUNT'
  name?: string
  username?: string
  jwtclaims?: {
    [key: string]: string
  }
}

export type RestResponseListDelegateTokenDetails = {
  metaData?: {
    [key: string]: Record<string, any>
  }
  resource?: DelegateTokenDetails[]
  responseMessages?: ResponseMessage[]
}

export type RestResponseDelegateTokenDetails = {
  metaData?: {
    [key: string]: Record<string, any>
  }
  resource?: DelegateTokenDetails
  responseMessages?: ResponseMessage[]
}

export type DelegateConnectionDetails = {
  uuid?: string
  version?: string
  /*
   * @format int64
   */
  lastHeartbeat?: number
}

export type DelegateGroupDetails = {
  groupId?: string
  delegateGroupIdentifier?: string
  delegateType?: string
  groupName?: string
  delegateDescription?: string
  delegateConfigurationId?: string
  groupImplicitSelectors?: {
    [key: string]:
      | 'PROFILE_NAME'
      | 'DELEGATE_NAME'
      | 'HOST_NAME'
      | 'GROUP_NAME'
      | 'GROUP_SELECTORS'
      | 'PROFILE_SELECTORS'
  }
  /*
   * @uniqueItems true
   */
  groupCustomSelectors?: string[]
  delegateInsightsDetails?: DelegateInsightsDetails
  /*
   * @format int64
   */
  lastHeartBeat?: number
  connectivityStatus?: string
  activelyConnected?: boolean
  delegateInstanceDetails?: DelegateInner[]
}

export type DelegateInner = {
  uuid?: string
  ip?: string
  hostName?: string
  delegateName?: string
  delegateGroupName?: string
  description?: string
  status?: 'ENABLED' | 'WAITING_FOR_APPROVAL' | 'DISABLED' | 'DELETED'
  /*
   * @format int64
   */
  lastHeartbeat?: number
  activelyConnected?: boolean
  delegateProfileId?: string
  delegateType?: string
  polllingModeEnabled?: boolean
  proxy?: boolean
  ceEnabled?: boolean
  includeScopes?: DelegateScope[]
  excludeScopes?: DelegateScope[]
  tags?: string[]
  implicitSelectors?: {
    [key: string]:
      | 'PROFILE_NAME'
      | 'DELEGATE_NAME'
      | 'HOST_NAME'
      | 'GROUP_NAME'
      | 'GROUP_SELECTORS'
      | 'PROFILE_SELECTORS'
  }
  /*
   * @format int64
   */
  profileExecutedAt?: number
  profileError?: boolean
  sampleDelegate?: boolean
  connections?: DelegateConnectionDetails[]
}

export type DelegateInsightsBarDetails = {
  /*
   * @format int64
   */
  timeStamp?: number
  counts?: PairDelegateInsightsTypeLong[]
}

export type DelegateInsightsDetails = {
  insights?: DelegateInsightsBarDetails[]
}

export type Pair = {
  value?: Record<string, any>
  key?: Record<string, any>
  left?: Record<string, any>
  right?: Record<string, any>
}

export type PairDelegateInsightsTypeLong = {
  /*
   * @format int64
   */
  value?: number
  key?: 'SUCCESSFUL' | 'FAILED' | 'IN_PROGRESS' | 'PERPETUAL_TASK_ASSIGNED'
  left?: 'SUCCESSFUL' | 'FAILED' | 'IN_PROGRESS' | 'PERPETUAL_TASK_ASSIGNED'
  /*
   * @format int64
   */
  right?: number
}

export type RestResponseDelegateGroupDetails = {
  metaData?: {
    [key: string]: Record<string, any>
  }
  resource?: DelegateGroupDetails
  responseMessages?: ResponseMessage[]
}

export type DelegateGroupListing = {
  delegateGroupDetails?: DelegateGroupDetails[]
}

export type RestResponseDelegateGroupListing = {
  metaData?: {
    [key: string]: Record<string, any>
  }
  resource?: DelegateGroupListing
  responseMessages?: ResponseMessage[]
}

export type DelegateFilterProperties = {
  status?: 'ENABLED' | 'WAITING_FOR_APPROVAL' | 'DISABLED' | 'DELETED'
  description?: string
  hostName?: string
  delegateName?: string
  delegateType?: string
  delegateGroupIdentifier?: string
  tags?: {
    [key: string]: string
  }
  filterType?:
    | 'Connector'
    | 'DelegateProfile'
    | 'Delegate'
    | 'PipelineSetup'
    | 'PipelineExecution'
    | 'Deployment'
    | 'Audit'
    | 'Template'
}

export type DelegateResponseData = Record<string, any>

export type DelegateTaskResponse = {
  accountId?: string
  response?: DelegateResponseData
  responseCode?: 'OK' | 'FAILED' | 'RETRY_ON_OTHER_DELEGATE'
}

export type RestResponseVoid = {
  metaData?: {
    [key: string]: Record<string, any>
  }
  resource?: Void
  responseMessages?: ResponseMessage[]
}

export type Void = Record<string, any>

export type RestResponseUpgradeCheckResult = {
  metaData?: {
    [key: string]: Record<string, any>
  }
  resource?: UpgradeCheckResult
  responseMessages?: ResponseMessage[]
}

export type UpgradeCheckResult = {
  imageTag?: string
  shouldUpgrade?: boolean
}

export type AccessRequestDTO = {
  accessRequestId?: string
  accountId?: string
  harnessUserGroupId?: string
  harnessUserGroupName?: string
  /*
   * @uniqueItems true
   */
  emailIds?: string[]
  /*
   * @format int64
   */
  accessStartAt?: number
  /*
   * @format int64
   */
  accessEndAt?: number
  /*
   * @format int32
   */
  hours?: number
  accessType?: 'GROUP_ACCESS' | 'MEMBER_ACCESS'
  accessActive?: boolean
}

export type RestResponseAccessRequestDTO = {
  metaData?: {
    [key: string]: Record<string, any>
  }
  resource?: AccessRequestDTO
  responseMessages?: ResponseMessage[]
}

export type RestResponseBoolean = {
  metaData?: {
    [key: string]: Record<string, any>
  }
  resource?: boolean
  responseMessages?: ResponseMessage[]
}

export type RestResponseListAccessRequestDTO = {
  metaData?: {
    [key: string]: Record<string, any>
  }
  resource?: AccessRequestDTO[]
  responseMessages?: ResponseMessage[]
}

export type RestResponseSetString = {
  metaData?: {
    [key: string]: Record<string, any>
  }
  /*
   * @uniqueItems true
   */
  resource?: string[]
  responseMessages?: ResponseMessage[]
}

export type ImportStatus = {
  collectionName?: string
  /*
   * @format int32
   */
  imported?: number
  /*
   * @format int32
   */
  idClashes?: number
}

export type ImportStatusReport = {
  mode?: 'DRY_RUN' | 'UPSERT' | 'INSERT'
  statuses?: ImportStatus[]
}

export type RestResponseImportStatusReport = {
  metaData?: {
    [key: string]: Record<string, any>
  }
  resource?: ImportStatusReport
  responseMessages?: ResponseMessage[]
}

export type Account = {
  uuid: string
  appId: string
  createdBy?: EmbeddedUser
  /*
   * @format int64
   */
  createdAt?: number
  lastUpdatedBy?: EmbeddedUser
  /*
   * @format int64
   */
  lastUpdatedAt: number
  companyName: string
  nextGenEnabled?: boolean
  accountName: string
  /*
   * @uniqueItems true
   */
  whitelistedDomains?: string[]
  licenseId?: string
  /*
   * @format int64
   */
  dataRetentionDurationMs?: number
  licenseInfo?: LicenseInfo
  ceLicenseInfo?: CeLicenseInfo
  /*
   * @uniqueItems true
   */
  accountEvents?: AccountEvent[]
  subdomainUrl?: string
  twoFactorAdminEnforced?: boolean
  forImport?: boolean
  migratedToClusterUrl?: string
  defaultExperience?: 'NG' | 'CG'
  createdFromNG?: boolean
  localEncryptionEnabled?: boolean
  delegateConfiguration?: DelegateConfiguration
  /*
   * @uniqueItems true
   */
  techStacks?: TechStack[]
  oauthEnabled?: boolean
  ringName?: string
  accountPreferences?: AccountPreferences
  cloudCostEnabled?: boolean
  ceAutoCollectK8sEvents?: boolean
  trialSignupOptions?: TrialSignupOptions
  /*
   * @format int64
   */
  serviceGuardLimit?: number
  serviceAccountConfig?: ServiceAccountConfig
  defaults?: {
    [key: string]: string
  }
  authenticationMechanism?: 'USER_PASSWORD' | 'SAML' | 'LDAP' | 'OAUTH'
  povAccount?: boolean
  harnessSupportAccessAllowed?: boolean
}

export type AccountEvent = {
  accountEventType?:
    | 'APP_CREATED'
    | 'SERVICE_CREATED'
    | 'ENV_CREATED'
    | 'WORKFLOW_CREATED'
    | 'WORKFLOW_DEPLOYED'
    | 'PIPELINE_DEPLOYED'
    | 'DELEGATE_INSTALLED'
    | 'CLOUD_PROVIDER_CREATED'
    | 'ARTIFACT_REPO_CREATED'
    | 'PIPELINE_CREATED'
    | 'ARTIFACT_STREAM_ADDED'
    | 'INFRA_MAPPING_ADDED'
    | 'INFRA_DEFINITION_ADDED'
    | 'CUSTOM'
  customMsg?: string
  category?: string
  properties?: {
    [key: string]: string
  }
}

export type AccountPreferences = {
  /*
   * @format int32
   */
  delegateSecretsCacheTTLInHours?: number
}

export type CeLicenseInfo = {
  licenseType?: 'FULL_TRIAL' | 'LIMITED_TRIAL' | 'PAID'
  /*
   * @format int64
   */
  expiryTime?: number
}

export type DelegateConfiguration = {
  delegateVersions?: string[]
  action?: 'SELF_DESTRUCT'
  accountVersion?: boolean
}

export type LicenseInfo = {
  accountType?: string
  accountStatus?: string
  /*
   * @format int64
   */
  expiryTime?: number
  /*
   * @format int32
   */
  licenseUnits?: number
}

export type RestResponseAccount = {
  metaData?: {
    [key: string]: Record<string, any>
  }
  resource?: Account
  responseMessages?: ResponseMessage[]
}

export type ServiceAccountConfig = {
  /*
   * @format int64
   */
  apiKeyLimit?: number
  /*
   * @format int64
   */
  tokenLimit?: number
}

export type TechStack = {
  category?: string
  technology?: string
}

export type TrialSignupOptions = {
  productsSelected?: ('CD' | 'CE' | 'CI')[]
  assistedOption?: boolean
}

export type AccountDetails = {
  accountId?: string
  accountName?: string
  companyName?: string
  cluster?: string
  createdFromNG?: boolean
  defaultExperience?: 'NG' | 'CG'
  licenseInfo?: LicenseInfo
  ceLicenseInfo?: CeLicenseInfo
  /*
   * @format int32
   */
  activeServiceCount?: number
  activeServicesUsageInfo?: CgActiveServicesUsageInfo
  licenseModel?: 'SERVICES' | 'SERVICE_INSTANCES'
}

export type CgActiveServicesUsageInfo = {
  activeServiceUsage?: CgServiceUsage[]
  /*
   * @format int64
   */
  servicesConsumed?: number
  /*
   * @format int64
   */
  serviceLicenseConsumed?: number
}

export type CgServiceUsage = {
  name?: string
  serviceId?: string
  /*
   * @format int64
   */
  licensesUsed?: number
  /*
   * @format int64
   */
  instanceCount?: number
}

export type RestResponseAccountDetails = {
  metaData?: {
    [key: string]: Record<string, any>
  }
  resource?: AccountDetails
  responseMessages?: ResponseMessage[]
}

export type RestResponsePageResponseAccount = {
  metaData?: {
    [key: string]: Record<string, any>
  }
  resource?: Account[]
  responseMessages?: ResponseMessage[]
}

export type SubdomainUrl = {
  url?: string
}

export type AuthenticationInfo = {
  authenticationMechanism?: 'USER_PASSWORD' | 'SAML' | 'LDAP' | 'OAUTH'
  oauthEnabled?: boolean
  oauthProviders?: ('AZURE' | 'BITBUCKET' | 'GITHUB' | 'GITLAB' | 'GOOGLE' | 'LINKEDIN')[]
  samlRedirectUrl?: string
  accountId?: string
}

export type RestResponseAuthenticationInfo = {
  metaData?: {
    [key: string]: Record<string, any>
  }
  resource?: AuthenticationInfo
  responseMessages?: ResponseMessage[]
}

export type AccountSalesContactsInfo = {
  salesContacts?: string[]
}

export type LicenseUpdateInfo = {
  licenseInfo: LicenseInfo
  requiredInfoToComply?: {
    [key: string]: {
      [key: string]: Record<string, any>
    }
  }
}

export type Activity = {
  uuid: string
  appId: string
  createdBy?: EmbeddedUser
  /*
   * @format int64
   */
  createdAt?: number
  lastUpdatedBy?: EmbeddedUser
  /*
   * @format int64
   */
  lastUpdatedAt: number
  type?: 'Command' | 'Verification' | 'Other'
  applicationName?: string
  environmentId?: string
  environmentName?: string
  environmentType: 'PROD' | 'NON_PROD' | 'ALL'
  commandName?: string
  commandUnits: CommandUnit[]
  commandNameVersionMap?: {
    [key: string]: number
  }
  commandType?: string
  serviceId?: string
  serviceName?: string
  serviceTemplateId?: string
  serviceTemplateName?: string
  hostName?: string
  publicDns?: string
  serviceInstanceId?: string
  infrastructureDefinitionId?: string
  workflowExecutionId?: string
  workflowId?: string
  workflowExecutionName?: string
  workflowType: 'PIPELINE' | 'ORCHESTRATION'
  stateExecutionInstanceId?: string
  stateExecutionInstanceName?: string
  /*
   * @format int64
   */
  version?: number
  commandUnitType?:
    | 'COMMAND'
    | 'JENKINS'
    | 'GCB'
    | 'HELM'
    | 'KUBERNETES_STEADY_STATE_CHECK'
    | 'ECS_STEADY_STATE_CHECK'
    | 'PCF_SETUP'
    | 'SPOTINST_SETUP'
    | 'SPOTINST_DEPLOY'
    | 'SPOTINST_UPDATE_LISTENER'
    | 'PCF_RESIZE'
    | 'PCF_MAP_ROUTE'
    | 'PCF_BG_SWAP_ROUTE'
    | 'PCF_PLUGIN'
    | 'KUBERNETES_SWAP_SERVICE_SELECTORS'
    | 'KUBERNETES'
    | 'AWS_AMI_SWITCH_ROUTES'
    | 'AWS_ECS_UPDATE_LISTENER_BG'
    | 'AWS_ECS_UPDATE_ROUTE_53_DNS_WEIGHT'
    | 'AWS_ECS_SERVICE_SETUP'
    | 'AWS_ECS_RUN_TASK_DEPLOY'
    | 'AWS_ECS_SERVICE_SETUP_ROUTE53'
    | 'AWS_ECS_SERVICE_SETUP_ELB'
    | 'AWS_ECS_SERVICE_SETUP_DAEMON'
    | 'AWS_ECS_SERVICE_ROLLBACK_DAEMON'
    | 'AWS_ECS_SERVICE_DEPLOY'
    | 'AZURE_VMSS_SETUP'
    | 'AZURE_VMSS_DEPLOY'
    | 'AZURE_VMSS_SWAP'
    | 'AZURE_APP_SERVICE_SLOT_SETUP'
    | 'AZURE_APP_SERVICE_SLOT_TRAFFIC_SHIFT'
    | 'AZURE_APP_SERVICE_SLOT_SWAP'
    | 'CUSTOM_DEPLOYMENT_FETCH_INSTANCES'
    | 'AZURE_ARM_DEPLOYMENT'
    | 'AZURE_BLUEPRINT_DEPLOYMENT'
    | 'TERRAGRUNT_PROVISION'
    | 'RANCHER'
  logPurged?: boolean
  artifactStreamId?: string
  artifactStreamName?: string
  artifactId?: string
  artifactName?: string
  status?:
    | 'ABORTED'
    | 'DISCONTINUING'
    | 'ERROR'
    | 'FAILED'
    | 'NEW'
    | 'PAUSED'
    | 'PAUSING'
    | 'QUEUED'
    | 'RESUMED'
    | 'RUNNING'
    | 'SCHEDULED'
    | 'STARTING'
    | 'SUCCESS'
    | 'WAITING'
    | 'SKIPPED'
    | 'ABORTING'
    | 'REJECTED'
    | 'EXPIRED'
    | 'PREPARING'
  triggeredBy?: TriggeredBy
  accountId?: string
  /*
   * @format date-time
   */
  validUntil?: string
  pipeline?: boolean
}

export type AppContainer = {
  uuid: string
  appId: string
  createdBy?: EmbeddedUser
  /*
   * @format int64
   */
  createdAt?: number
  lastUpdatedBy?: EmbeddedUser
  /*
   * @format int64
   */
  lastUpdatedAt: number
  name?: string
  fileUuid?: string
  fileName?: string
  mimeType?: string
  /*
   * @format int64
   */
  size?: number
  checksumType?: 'MD5' | 'SHA1' | 'SHA256'
  checksum?: string
  accountId?: string
  standard?: boolean
  description?: string
  standardUpload?: boolean
  family?: 'TOMCAT' | 'JBOSS'
  stackRootDirectory?: string
  fileType?: 'ZIP' | 'TAR_GZ' | 'TAR_BZ' | 'TAR' | 'UNKNOWN'
  systemCreated?: boolean
  version?: string
  hardened?: boolean
}

export type ArtifactStream = {
  artifactStreamId?: string
  artifactStreamType?: string
  sourceName?: string
  settingId?: string
  artifactServerName?: string
  name?: string
  autoPopulate?: boolean
  serviceId?: string
  service?: Service
  autoDownload?: boolean
  autoApproveForProduction?: boolean
  metadataOnly?: boolean
  /*
   * @format int32
   */
  failedCronAttempts?: number
  /*
   * @format int64
   */
  nextIteration?: number
  /*
   * @format int64
   */
  nextCleanupIteration?: number
  templateUuid?: string
  templateVersion?: string
  templateVariables?: Variable[]
  accountId?: string
  /*
   * @uniqueItems true
   */
  keywords?: string[]
  /*
   * @format int64
   */
  artifactCount?: number
  artifacts?: ArtifactSummary[]
  sample?: boolean
  perpetualTaskId?: string
  collectionStatus?: string
  artifactStreamParameterized?: boolean
  collectionEnabled?: boolean
  /*
   * @format int64
   */
  lastIteration?: number
  /*
   * @format int64
   */
  lastSuccessfulIteration?: number
  /*
   * @format int64
   */
  maxAttempts?: number
  uuid: string
  appId: string
  createdBy?: EmbeddedUser
  /*
   * @format int64
   */
  createdAt?: number
  lastUpdatedBy?: EmbeddedUser
  /*
   * @format int64
   */
  lastUpdatedAt: number
}

export type ArtifactStreamBinding = {
  name?: string
  artifactStreams?: ArtifactStreamSummary[]
}

export type ArtifactStreamSummary = {
  artifactStreamId?: string
  settingId?: string
  displayName?: string
  name?: string
  lastCollectedArtifact?: string
  defaultArtifact?: ArtifactSummary
}

export type ArtifactSummary = {
  uuid?: string
  uiDisplayName?: string
  buildNo?: string
}

export type AzureAppDeploymentData = {
  instanceId?: string
  instanceType?: string
  instanceName?: string
  resourceGroup?: string
  subscriptionId?: string
  appName?: string
  deploySlot?: string
  deploySlotId?: string
  appServicePlanId?: string
  hostName?: string
  instanceIp?: string
  instanceState?: string
}

export type AzureVMInstanceData = {
  instanceId?: string
  publicDnsName?: string
  privateDnsName?: string
  privateIpAddress?: string
}

export type CVConfiguration = {
  uuid: string
  appId: string
  createdBy?: EmbeddedUser
  /*
   * @format int64
   */
  createdAt?: number
  lastUpdatedBy?: EmbeddedUser
  /*
   * @format int64
   */
  lastUpdatedAt: number
  name: string
  accountId: string
  connectorId: string
  envId: string
  serviceId: string
  stateType:
    | 'SUB_WORKFLOW'
    | 'REPEAT'
    | 'FORK'
    | 'WAIT'
    | 'PAUSE'
    | 'BARRIER'
    | 'RESOURCE_CONSTRAINT'
    | 'SHELL_SCRIPT'
    | 'HTTP'
    | 'TEMPLATIZED_SECRET_MANAGER'
    | 'EMAIL'
    | 'APP_DYNAMICS'
    | 'NEW_RELIC'
    | 'NEW_RELIC_DEPLOYMENT_MARKER'
    | 'DYNA_TRACE'
    | 'PROMETHEUS'
    | 'SPLUNKV2'
    | 'ELK'
    | 'LOGZ'
    | 'SUMO'
    | 'DATA_DOG'
    | 'DATA_DOG_LOG'
    | 'CVNG'
    | 'CLOUD_WATCH'
    | 'AWS_LAMBDA_VERIFICATION'
    | 'APM_VERIFICATION'
    | 'LOG_VERIFICATION'
    | 'BUG_SNAG'
    | 'STACK_DRIVER'
    | 'STACK_DRIVER_LOG'
    | 'INSTANA'
    | 'SCALYR'
    | 'ENV_STATE'
    | 'ENV_LOOP_STATE'
    | 'ENV_RESUME_STATE'
    | 'ENV_LOOP_RESUME_STATE'
    | 'COMMAND'
    | 'APPROVAL'
    | 'APPROVAL_RESUME'
    | 'ELASTIC_LOAD_BALANCER'
    | 'JENKINS'
    | 'GCB'
    | 'BAMBOO'
    | 'ARTIFACT_COLLECTION'
    | 'ARTIFACT_CHECK'
    | 'AZURE_NODE_SELECT'
    | 'AZURE_VMSS_SETUP'
    | 'AZURE_VMSS_DEPLOY'
    | 'AZURE_VMSS_ROLLBACK'
    | 'AZURE_VMSS_SWITCH_ROUTES'
    | 'AZURE_VMSS_SWITCH_ROUTES_ROLLBACK'
    | 'AZURE_WEBAPP_SLOT_SETUP'
    | 'AZURE_WEBAPP_SLOT_SWAP'
    | 'AZURE_WEBAPP_SLOT_SHIFT_TRAFFIC'
    | 'AZURE_WEBAPP_SLOT_ROLLBACK'
    | 'AWS_NODE_SELECT'
    | 'DC_NODE_SELECT'
    | 'ROLLING_NODE_SELECT'
    | 'PHASE'
    | 'PHASE_STEP'
    | 'STAGING_ORIGINAL_EXECUTION'
    | 'AWS_CODEDEPLOY_STATE'
    | 'AWS_CODEDEPLOY_ROLLBACK'
    | 'AWS_LAMBDA_STATE'
    | 'AWS_LAMBDA_ROLLBACK'
    | 'AWS_AMI_SERVICE_SETUP'
    | 'ASG_AMI_SERVICE_ALB_SHIFT_SETUP'
    | 'AWS_AMI_SERVICE_DEPLOY'
    | 'ASG_AMI_SERVICE_ALB_SHIFT_DEPLOY'
    | 'AWS_AMI_SWITCH_ROUTES'
    | 'ASG_AMI_ALB_SHIFT_SWITCH_ROUTES'
    | 'AWS_AMI_ROLLBACK_SWITCH_ROUTES'
    | 'ASG_AMI_ROLLBACK_ALB_SHIFT_SWITCH_ROUTES'
    | 'AWS_AMI_SERVICE_ROLLBACK'
    | 'ECS_SERVICE_SETUP'
    | 'SPOTINST_SETUP'
    | 'SPOTINST_ALB_SHIFT_SETUP'
    | 'SPOTINST_DEPLOY'
    | 'SPOTINST_ALB_SHIFT_DEPLOY'
    | 'SPOTINST_LISTENER_UPDATE'
    | 'SPOTINST_LISTENER_ALB_SHIFT'
    | 'SPOTINST_ROLLBACK'
    | 'SPOTINST_LISTENER_UPDATE_ROLLBACK'
    | 'SPOTINST_LISTENER_ALB_SHIFT_ROLLBACK'
    | 'ECS_SERVICE_SETUP_ROLLBACK'
    | 'ECS_DAEMON_SERVICE_SETUP'
    | 'ECS_BG_SERVICE_SETUP'
    | 'ECS_BG_SERVICE_SETUP_ROUTE53'
    | 'ECS_SERVICE_DEPLOY'
    | 'ECS_SERVICE_ROLLBACK'
    | 'ECS_LISTENER_UPDATE'
    | 'ECS_LISTENER_UPDATE_ROLLBACK'
    | 'ECS_ROUTE53_DNS_WEIGHT_UPDATE'
    | 'ECS_ROUTE53_DNS_WEIGHT_UPDATE_ROLLBACK'
    | 'KUBERNETES_SETUP'
    | 'KUBERNETES_SETUP_ROLLBACK'
    | 'KUBERNETES_DEPLOY'
    | 'KUBERNETES_DEPLOY_ROLLBACK'
    | 'KUBERNETES_STEADY_STATE_CHECK'
    | 'ECS_STEADY_STATE_CHECK'
    | 'ECS_RUN_TASK'
    | 'GCP_CLUSTER_SETUP'
    | 'HELM_DEPLOY'
    | 'HELM_ROLLBACK'
    | 'PCF_SETUP'
    | 'PCF_RESIZE'
    | 'PCF_ROLLBACK'
    | 'PCF_MAP_ROUTE'
    | 'PCF_UNMAP_ROUTE'
    | 'PCF_BG_MAP_ROUTE'
    | 'PCF_PLUGIN'
    | 'TERRAFORM_PROVISION'
    | 'TERRAFORM_APPLY'
    | 'TERRAGRUNT_PROVISION'
    | 'TERRAGRUNT_DESTROY'
    | 'TERRAGRUNT_ROLLBACK'
    | 'ARM_CREATE_RESOURCE'
    | 'ARM_ROLLBACK'
    | 'SHELL_SCRIPT_PROVISION'
    | 'TERRAFORM_DESTROY'
    | 'CLOUD_FORMATION_CREATE_STACK'
    | 'CLOUD_FORMATION_DELETE_STACK'
    | 'KUBERNETES_SWAP_SERVICE_SELECTORS'
    | 'CLOUD_FORMATION_ROLLBACK_STACK'
    | 'TERRAFORM_ROLLBACK'
    | 'K8S_DEPLOYMENT_ROLLING'
    | 'K8S_SCALE'
    | 'K8S_DEPLOYMENT_ROLLING_ROLLBACK'
    | 'K8S_BLUE_GREEN_DEPLOY'
    | 'K8S_CANARY_DEPLOY'
    | 'K8S_DELETE'
    | 'RANCHER_RESOLVE'
    | 'RANCHER_K8S_DEPLOYMENT_ROLLING'
    | 'RANCHER_K8S_CANARY_DEPLOY'
    | 'RANCHER_K8S_BLUE_GREEN_DEPLOY'
    | 'RANCHER_KUBERNETES_SWAP_SERVICE_SELECTORS'
    | 'RANCHER_K8S_DELETE'
    | 'RANCHER_K8S_DEPLOYMENT_ROLLING_ROLLBACK'
    | 'JIRA_CREATE_UPDATE'
    | 'SERVICENOW_CREATE_UPDATE'
    | 'K8S_TRAFFIC_SPLIT'
    | 'K8S_APPLY'
    | 'CUSTOM_DEPLOYMENT_FETCH_INSTANCES'
  analysisTolerance: 'LOW' | 'MEDIUM' | 'HIGH'
  customThresholdRefId?: string
  enabled24x7?: boolean
  comparisonStrategy?: 'COMPARE_WITH_PREVIOUS' | 'COMPARE_WITH_CURRENT' | 'PREDICTIVE'
  contextId?: string
  alertEnabled?: boolean
  /*
   * @format double
   */
  alertThreshold?: number
  /*
   * @format int32
   */
  numOfOccurrencesForAlert?: number
  /*
   * @format int64
   */
  snoozeStartTime?: number
  /*
   * @format int64
   */
  snoozeEndTime?: number
  connectorName?: string
  serviceName?: string
  envName?: string
  appName?: string
  workflowConfig?: boolean
}

export type CVEnabledService = {
  service?: Service
  cvConfig?: CVConfiguration[]
  appName?: string
  appId?: string
}

export type CapacityReservationSpecificationResponse = {
  capacityReservationPreference?: string
  capacityReservationTarget?: CapacityReservationTargetResponse
}

export type CapacityReservationTargetResponse = {
  capacityReservationId?: string
  capacityReservationResourceGroupArn?: string
}

export type Command = {
  uuid: string
  appId: string
  createdBy?: EmbeddedUser
  /*
   * @format int64
   */
  createdAt?: number
  lastUpdatedBy?: EmbeddedUser
  /*
   * @format int64
   */
  lastUpdatedAt: number
  name?: string
  commandUnitType?:
    | 'EXEC'
    | 'SCP'
    | 'COPY_CONFIGS'
    | 'COMMAND'
    | 'SETUP_ENV'
    | 'DOCKER_START'
    | 'DOCKER_STOP'
    | 'PROCESS_CHECK_RUNNING'
    | 'PROCESS_CHECK_STOPPED'
    | 'PORT_CHECK_CLEARED'
    | 'PORT_CHECK_LISTENING'
    | 'CODE_DEPLOY'
    | 'AWS_LAMBDA'
    | 'AWS_AMI'
    | 'ECS_SETUP'
    | 'ECS_SETUP_DAEMON_SCHEDULING_TYPE'
    | 'KUBERNETES_SETUP'
    | 'RESIZE'
    | 'RESIZE_KUBERNETES'
    | 'DOWNLOAD_ARTIFACT'
    | 'K8S_DUMMY'
    | 'RANCHER_DUMMY'
    | 'SPOTINST_DUMMY'
    | 'HELM_DUMMY'
    | 'PCF_DUMMY'
    | 'AZURE_VMSS_DUMMY'
    | 'AZURE_WEBAPP'
    | 'FETCH_INSTANCES_DUMMY'
    | 'AZURE_ARM'
    | 'TERRAGRUNT_PROVISION'
  commandExecutionStatus?: 'SUCCESS' | 'FAILURE' | 'RUNNING' | 'QUEUED' | 'SKIPPED'
  artifactNeeded?: boolean
  deploymentType?: string
  originEntityId?: string
  containerFamily?: 'TOMCAT' | 'JBOSS'
  artifactType?:
    | 'JAR'
    | 'WAR'
    | 'TAR'
    | 'ZIP'
    | 'NUGET'
    | 'DOCKER'
    | 'RPM'
    | 'AWS_LAMBDA'
    | 'AWS_CODEDEPLOY'
    | 'PCF'
    | 'AMI'
    | 'AZURE_MACHINE_IMAGE'
    | 'AZURE_WEBAPP'
    | 'IIS'
    | 'OTHER'
    | 'IIS_APP'
    | 'IIS_VirtualDirectory'
  referenceId?: string
  referenceUuid?: string
  templateReference?: TemplateReference
  graph?: Graph
  /*
   * @format int64
   */
  version?: number
  commandUnits?: CommandUnit[]
  commandType?: 'START' | 'STOP' | 'INSTALL' | 'ENABLE' | 'DISABLE' | 'VERIFY' | 'OTHER' | 'RESIZE' | 'SETUP'
  templateVariables?: Variable[]
  templateMetadata?: TemplateMetadata
  accountId?: string
  variables?: Variable[]
}

export type CommandUnit = {
  commandExecutionStatus?: 'SUCCESS' | 'FAILURE' | 'RUNNING' | 'QUEUED' | 'SKIPPED'
  commandUnitType?:
    | 'EXEC'
    | 'SCP'
    | 'COPY_CONFIGS'
    | 'COMMAND'
    | 'SETUP_ENV'
    | 'DOCKER_START'
    | 'DOCKER_STOP'
    | 'PROCESS_CHECK_RUNNING'
    | 'PROCESS_CHECK_STOPPED'
    | 'PORT_CHECK_CLEARED'
    | 'PORT_CHECK_LISTENING'
    | 'CODE_DEPLOY'
    | 'AWS_LAMBDA'
    | 'AWS_AMI'
    | 'ECS_SETUP'
    | 'ECS_SETUP_DAEMON_SCHEDULING_TYPE'
    | 'KUBERNETES_SETUP'
    | 'RESIZE'
    | 'RESIZE_KUBERNETES'
    | 'DOWNLOAD_ARTIFACT'
    | 'K8S_DUMMY'
    | 'RANCHER_DUMMY'
    | 'SPOTINST_DUMMY'
    | 'HELM_DUMMY'
    | 'PCF_DUMMY'
    | 'AZURE_VMSS_DUMMY'
    | 'AZURE_WEBAPP'
    | 'FETCH_INSTANCES_DUMMY'
    | 'AZURE_ARM'
    | 'TERRAGRUNT_PROVISION'
  artifactNeeded?: boolean
  deploymentType?: string
  variables?: Variable[]
  name?: string
}

export type ConfigFile = {
  templateId?: string
  envId?: string
  entityType:
    | 'SERVICE'
    | 'PROVISIONER'
    | 'ENVIRONMENT'
    | 'HOST'
    | 'RELEASE'
    | 'ARTIFACT'
    | 'SSH_USER'
    | 'SSH_PASSWORD'
    | 'SSH_APP_ACCOUNT'
    | 'SSH_KEY_PASSPHRASE'
    | 'SSH_APP_ACCOUNT_PASSOWRD'
    | 'SIMPLE_DEPLOYMENT'
    | 'ORCHESTRATED_DEPLOYMENT'
    | 'PIPELINE'
    | 'WORKFLOW'
    | 'DEPLOYMENT'
    | 'INSTANCE'
    | 'APPLICATION'
    | 'COMMAND'
    | 'CONFIG'
    | 'SERVICE_TEMPLATE'
    | 'INFRASTRUCTURE_MAPPING'
    | 'INFRASTRUCTURE_DEFINITION'
    | 'USER'
    | 'ARTIFACT_STREAM'
    | 'APPDYNAMICS_CONFIGID'
    | 'APPDYNAMICS_APPID'
    | 'APPDYNAMICS_TIERID'
    | 'ELK_CONFIGID'
    | 'ELK_INDICES'
    | 'NEWRELIC_CONFIGID'
    | 'NEWRELIC_APPID'
    | 'SS_SSH_CONNECTION_ATTRIBUTE'
    | 'SS_WINRM_CONNECTION_ATTRIBUTE'
    | 'SUMOLOGIC_CONFIGID'
    | 'SPLUNK_CONFIGID'
    | 'NEWRELIC_MARKER_CONFIGID'
    | 'NEWRELIC_MARKER_APPID'
    | 'API_KEY'
    | 'ACCOUNT'
    | 'APPLICATION_MANIFEST'
    | 'USER_GROUP'
    | 'WHITELISTED_IP'
    | 'CF_AWS_CONFIG_ID'
    | 'VERIFICATION_CONFIGURATION'
    | 'HELM_GIT_CONFIG_ID'
    | 'NOTIFICATION_GROUP'
    | 'HELM_CHART_SPECIFICATION'
    | 'PCF_SERVICE_SPECIFICATION'
    | 'LAMBDA_SPECIFICATION'
    | 'USER_DATA_SPECIFICATION'
    | 'ECS_CONTAINER_SPECIFICATION'
    | 'ECS_SERVICE_SPECIFICATION'
    | 'K8S_CONTAINER_SPECIFICATION'
    | 'CONFIG_FILE'
    | 'SERVICE_COMMAND'
    | 'MANIFEST_FILE'
    | 'SERVICE_VARIABLE'
    | 'TRIGGER'
    | 'ROLE'
    | 'TEMPLATE'
    | 'TEMPLATE_FOLDER'
    | 'SETTING_ATTRIBUTE'
    | 'ENCRYPTED_RECORDS'
    | 'CV_CONFIGURATION'
    | 'TAG'
    | 'CUSTOM_DASHBOARD'
    | 'PIPELINE_GOVERNANCE_STANDARD'
    | 'WORKFLOW_EXECUTION'
    | 'SERVERLESS_INSTANCE'
    | 'USER_INVITE'
    | 'LOGIN_SETTINGS'
    | 'SSO_SETTINGS'
    | 'DELEGATE'
    | 'DELEGATE_SCOPE'
    | 'DELEGATE_PROFILE'
    | 'EXPORT_EXECUTIONS_REQUEST'
    | 'GCP_CONFIG'
    | 'GIT_CONFIG'
    | 'JENKINS_SERVER'
    | 'SECRETS_MANAGER'
    | 'HELM_CHART'
    | 'SECRET'
    | 'CONNECTOR'
    | 'CLOUD_PROVIDER'
    | 'GOVERNANCE_FREEZE_CONFIG'
    | 'GOVERNANCE_CONFIG'
    | 'EVENT_RULE'
  entityId?: string
  description?: string
  parentConfigFileId?: string
  relativeFilePath?: string
  targetToAllEnv?: boolean
  /*
   * @format int32
   */
  defaultVersion?: number
  envIdVersionMap?: {
    [key: string]: EntityVersion
  }
  envIdVersionMapString?: string
  setAsDefault?: boolean
  notes?: string
  overridePath?: string
  configOverrideType?: 'ALL' | 'INSTANCES' | 'CUSTOM'
  configOverrideExpression?: string
  instances?: string[]
  overriddenConfigFile?: ConfigFile
  encrypted?: boolean
  encryptedFileId?: string
  secretFileName?: string
  serviceId?: string
  encryptionType?:
    | 'LOCAL'
    | 'KMS'
    | 'GCP_KMS'
    | 'AWS_SECRETS_MANAGER'
    | 'AZURE_VAULT'
    | 'CYBERARK'
    | 'VAULT'
    | 'GCP_SECRETS_MANAGER'
    | 'CUSTOM'
    | 'VAULT_SSH'
  encryptedBy?: string
  uuid: string
  appId: string
  createdBy?: EmbeddedUser
  /*
   * @format int64
   */
  createdAt?: number
  lastUpdatedBy?: EmbeddedUser
  /*
   * @format int64
   */
  lastUpdatedAt: number
  name?: string
  fileUuid?: string
  fileName?: string
  mimeType?: string
  /*
   * @format int64
   */
  size?: number
  checksumType?: 'MD5' | 'SHA1' | 'SHA256'
  checksum?: string
  accountId?: string
  settingType?:
    | 'HOST_CONNECTION_ATTRIBUTES'
    | 'BASTION_HOST_CONNECTION_ATTRIBUTES'
    | 'SMTP'
    | 'SFTP'
    | 'JENKINS'
    | 'BAMBOO'
    | 'STRING'
    | 'SPLUNK'
    | 'ELK'
    | 'LOGZ'
    | 'SUMO'
    | 'DATA_DOG'
    | 'APM_VERIFICATION'
    | 'BUG_SNAG'
    | 'LOG_VERIFICATION'
    | 'APP_DYNAMICS'
    | 'NEW_RELIC'
    | 'DYNA_TRACE'
    | 'INSTANA'
    | 'DATA_DOG_LOG'
    | 'CLOUD_WATCH'
    | 'SCALYR'
    | 'ELB'
    | 'SLACK'
    | 'AWS'
    | 'GCS'
    | 'GCP'
    | 'AZURE'
    | 'PCF'
    | 'RANCHER'
    | 'DIRECT'
    | 'KUBERNETES_CLUSTER'
    | 'DOCKER'
    | 'ECR'
    | 'GCR'
    | 'ACR'
    | 'PHYSICAL_DATA_CENTER'
    | 'KUBERNETES'
    | 'NEXUS'
    | 'ARTIFACTORY'
    | 'SMB'
    | 'AMAZON_S3'
    | 'GIT'
    | 'SSH_SESSION_CONFIG'
    | 'SERVICE_VARIABLE'
    | 'CONFIG_FILE'
    | 'KMS'
    | 'GCP_KMS'
    | 'JIRA'
    | 'SERVICENOW'
    | 'SECRET_TEXT'
    | 'YAML_GIT_SYNC'
    | 'VAULT'
    | 'VAULT_SSH'
    | 'AWS_SECRETS_MANAGER'
    | 'CYBERARK'
    | 'WINRM_CONNECTION_ATTRIBUTES'
    | 'WINRM_SESSION_CONFIG'
    | 'PROMETHEUS'
    | 'INFRASTRUCTURE_MAPPING'
    | 'HTTP_HELM_REPO'
    | 'AMAZON_S3_HELM_REPO'
    | 'GCS_HELM_REPO'
    | 'SPOT_INST'
    | 'AZURE_ARTIFACTS_PAT'
    | 'CUSTOM'
    | 'CE_AWS'
    | 'CE_GCP'
    | 'CE_AZURE'
    | 'AZURE_VAULT'
    | 'KUBERNETES_CLUSTER_NG'
    | 'GIT_NG'
    | 'SSO_SAML'
    | 'GCP_SECRETS_MANAGER'
    | 'TRIGGER'
}

export type ContextElement = {
  name?: string
  uuid?: string
  elementType?:
    | 'SERVICE'
    | 'INFRAMAPPING'
    | 'SERVICE_TEMPLATE'
    | 'TAG'
    | 'SHELL'
    | 'HOST'
    | 'INSTANCE'
    | 'STANDARD'
    | 'PARAM'
    | 'PARTITION'
    | 'OTHER'
    | 'FORK'
    | 'CONTAINER_SERVICE'
    | 'CLUSTER'
    | 'AWS_LAMBDA_FUNCTION'
    | 'AMI_SERVICE_SETUP'
    | 'AMI_SERVICE_DEPLOY'
    | 'ECS_SERVICE_SETUP'
    | 'AMI_SWITCH_ROUTES'
    | 'PCF_SERVICE_SETUP'
    | 'PCF_SERVICE_DEPLOY'
    | 'PCF_ROUTE_SWAP_ROLLBACK'
    | 'PCF_INSTANCE'
    | 'SPOTINST_SERVICE_SETUP'
    | 'SPOTINST_SERVICE_DEPLOY'
    | 'ARTIFACT'
    | 'ARTIFACT_VARIABLE'
    | 'HELM_DEPLOY'
    | 'CLOUD_FORMATION_PROVISION'
    | 'CLOUD_FORMATION_ROLLBACK'
    | 'CLOUD_FORMATION_DEPROVISION'
    | 'TERRAFORM_PROVISION'
    | 'SHELL_SCRIPT_PROVISION'
    | 'K8S'
    | 'TERRAFORM_INHERIT_PLAN'
    | 'TERRAGRUNT_INHERIT_PLAN'
    | 'AZURE_VMSS_SETUP'
    | 'AZURE_WEBAPP_SETUP'
    | 'HELM_CHART'
    | 'MANIFEST_VARIABLE'
    | 'RANCHER_K8S_CLUSTER_CRITERIA'
}

export type CopiedTemplateMetadata = TemplateMetadata & {
  parentTemplateId?: string
  /*
   * @format int64
   */
  parentTemplateVersion?: number
  parentCommandVersion?: string
  parentCommandName?: string
  parentCommandStoreName?: string
}

export type CpuOptions = {
  /*
   * @format int32
   */
  coreCount?: number
  /*
   * @format int32
   */
  threadsPerCore?: number
}

export type DelegateTaskDetails = {
  delegateTaskId?: string
  taskDescription?: string
  selectedDelegateId?: string
  selectedDelegateName?: string
  selectedDelegateHostName?: string
  setupAbstractions?: {
    [key: string]: string
  }
  taskType?: string
}

export type EbsInstanceBlockDevice = {
  /*
   * @format date-time
   */
  attachTime?: string
  deleteOnTermination?: boolean
  status?: string
  volumeId?: string
}

export type EcsContainerDetails = {
  taskId?: string
  taskArn?: string
  dockerId?: string
  completeDockerId?: string
  containerId?: string
  containerInstanceId?: string
  containerInstanceArn?: string
  ecsServiceName?: string
}

export type ElasticGpuAssociation = {
  elasticGpuId?: string
  elasticGpuAssociationId?: string
  elasticGpuAssociationState?: string
  elasticGpuAssociationTime?: string
}

export type ElasticInferenceAcceleratorAssociation = {
  elasticInferenceAcceleratorArn?: string
  elasticInferenceAcceleratorAssociationId?: string
  elasticInferenceAcceleratorAssociationState?: string
  /*
   * @format date-time
   */
  elasticInferenceAcceleratorAssociationTime?: string
}

export type ElementExecutionSummary = {
  contextElement?: ContextElement
  instanceStatusSummaries?: InstanceStatusSummary[]
  /*
   * @format int64
   */
  startTs?: number
  /*
   * @format int64
   */
  endTs?: number
  status?:
    | 'ABORTED'
    | 'DISCONTINUING'
    | 'ERROR'
    | 'FAILED'
    | 'NEW'
    | 'PAUSED'
    | 'PAUSING'
    | 'QUEUED'
    | 'RESUMED'
    | 'RUNNING'
    | 'SCHEDULED'
    | 'STARTING'
    | 'SUCCESS'
    | 'WAITING'
    | 'SKIPPED'
    | 'ABORTING'
    | 'REJECTED'
    | 'EXPIRED'
    | 'PREPARING'
  infraMappingSummaries?: InfraMappingSummary[]
  infraDefinitionSummaries?: InfraDefinitionSummary[]
  /*
   * @format int32
   */
  instancesCount?: number
  /*
   * @format int32
   */
  totalTime?: number
  /*
   * @format int32
   */
  avgTime?: number
}

export type EnclaveOptions = {
  enabled?: boolean
}

export type EntityVersion = {
  uuid: string
  appId: string
  createdBy?: EmbeddedUser
  /*
   * @format int64
   */
  createdAt?: number
  lastUpdatedBy?: EmbeddedUser
  /*
   * @format int64
   */
  lastUpdatedAt: number
  entityType?:
    | 'SERVICE'
    | 'PROVISIONER'
    | 'ENVIRONMENT'
    | 'HOST'
    | 'RELEASE'
    | 'ARTIFACT'
    | 'SSH_USER'
    | 'SSH_PASSWORD'
    | 'SSH_APP_ACCOUNT'
    | 'SSH_KEY_PASSPHRASE'
    | 'SSH_APP_ACCOUNT_PASSOWRD'
    | 'SIMPLE_DEPLOYMENT'
    | 'ORCHESTRATED_DEPLOYMENT'
    | 'PIPELINE'
    | 'WORKFLOW'
    | 'DEPLOYMENT'
    | 'INSTANCE'
    | 'APPLICATION'
    | 'COMMAND'
    | 'CONFIG'
    | 'SERVICE_TEMPLATE'
    | 'INFRASTRUCTURE_MAPPING'
    | 'INFRASTRUCTURE_DEFINITION'
    | 'USER'
    | 'ARTIFACT_STREAM'
    | 'APPDYNAMICS_CONFIGID'
    | 'APPDYNAMICS_APPID'
    | 'APPDYNAMICS_TIERID'
    | 'ELK_CONFIGID'
    | 'ELK_INDICES'
    | 'NEWRELIC_CONFIGID'
    | 'NEWRELIC_APPID'
    | 'SS_SSH_CONNECTION_ATTRIBUTE'
    | 'SS_WINRM_CONNECTION_ATTRIBUTE'
    | 'SUMOLOGIC_CONFIGID'
    | 'SPLUNK_CONFIGID'
    | 'NEWRELIC_MARKER_CONFIGID'
    | 'NEWRELIC_MARKER_APPID'
    | 'API_KEY'
    | 'ACCOUNT'
    | 'APPLICATION_MANIFEST'
    | 'USER_GROUP'
    | 'WHITELISTED_IP'
    | 'CF_AWS_CONFIG_ID'
    | 'VERIFICATION_CONFIGURATION'
    | 'HELM_GIT_CONFIG_ID'
    | 'NOTIFICATION_GROUP'
    | 'HELM_CHART_SPECIFICATION'
    | 'PCF_SERVICE_SPECIFICATION'
    | 'LAMBDA_SPECIFICATION'
    | 'USER_DATA_SPECIFICATION'
    | 'ECS_CONTAINER_SPECIFICATION'
    | 'ECS_SERVICE_SPECIFICATION'
    | 'K8S_CONTAINER_SPECIFICATION'
    | 'CONFIG_FILE'
    | 'SERVICE_COMMAND'
    | 'MANIFEST_FILE'
    | 'SERVICE_VARIABLE'
    | 'TRIGGER'
    | 'ROLE'
    | 'TEMPLATE'
    | 'TEMPLATE_FOLDER'
    | 'SETTING_ATTRIBUTE'
    | 'ENCRYPTED_RECORDS'
    | 'CV_CONFIGURATION'
    | 'TAG'
    | 'CUSTOM_DASHBOARD'
    | 'PIPELINE_GOVERNANCE_STANDARD'
    | 'WORKFLOW_EXECUTION'
    | 'SERVERLESS_INSTANCE'
    | 'USER_INVITE'
    | 'LOGIN_SETTINGS'
    | 'SSO_SETTINGS'
    | 'DELEGATE'
    | 'DELEGATE_SCOPE'
    | 'DELEGATE_PROFILE'
    | 'EXPORT_EXECUTIONS_REQUEST'
    | 'GCP_CONFIG'
    | 'GIT_CONFIG'
    | 'JENKINS_SERVER'
    | 'SECRETS_MANAGER'
    | 'HELM_CHART'
    | 'SECRET'
    | 'CONNECTOR'
    | 'CLOUD_PROVIDER'
    | 'GOVERNANCE_FREEZE_CONFIG'
    | 'GOVERNANCE_CONFIG'
    | 'EVENT_RULE'
  entityName?: string
  changeType?: 'CREATED' | 'UPDATED'
  entityUuid?: string
  entityParentUuid?: string
  entityData?: string
  /*
   * @format int32
   */
  version?: number
  accountId?: string
}

export type Graph = {
  graphName?: string
  nodes?: GraphNode[]
  links?: GraphLink[]
  subworkflows?: {
    [key: string]: Graph
  }
}

export type GraphGroup = {
  id?: string
  name?: string
  type?: string
  rollback?: boolean
  status?: string
  executionSummary?: Record<string, any>
  executionDetails?: Record<string, any>
  detailsReference?: string
  origin?: boolean
  /*
   * @format int32
   */
  executionHistoryCount?: number
  /*
   * @format int32
   */
  interruptHistoryCount?: number
  hasInspection?: boolean
  valid?: boolean
  validationMessage?: string
  inValidFieldMessages?: {
    [key: string]: string
  }
  elementStatusSummary?: ElementExecutionSummary[]
  instanceStatusSummary?: InstanceStatusSummary[]
  templateExpressions?: TemplateExpression[]
  variableOverrides?: NameValuePair[]
  templateVariables?: Variable[]
  templateUuid?: string
  templateVersion?: string
  importedTemplateDetails?: ImportedTemplateDetails
  templateMetadata?: TemplateMetadata
  properties?: {
    [key: string]: Record<string, any>
  }
  next?: GraphNode
  group?: GraphGroup
  delegateTaskId?: string
  selectionLogsTrackingForTaskEnabled?: boolean
  delegateTasksDetails?: DelegateTaskDetails[]
  selectionLogsTrackingForTasksEnabled?: boolean
  elements?: GraphNode[]
  executionStrategy?: 'SERIAL' | 'PARALLEL'
}

export type GraphLink = {
  id?: string
  from?: string
  to?: string
  type?: string
}

export type GraphNode = {
  id?: string
  name?: string
  type?: string
  rollback?: boolean
  status?: string
  executionSummary?: Record<string, any>
  executionDetails?: Record<string, any>
  detailsReference?: string
  origin?: boolean
  /*
   * @format int32
   */
  executionHistoryCount?: number
  /*
   * @format int32
   */
  interruptHistoryCount?: number
  hasInspection?: boolean
  valid?: boolean
  validationMessage?: string
  inValidFieldMessages?: {
    [key: string]: string
  }
  elementStatusSummary?: ElementExecutionSummary[]
  instanceStatusSummary?: InstanceStatusSummary[]
  templateExpressions?: TemplateExpression[]
  variableOverrides?: NameValuePair[]
  templateVariables?: Variable[]
  templateUuid?: string
  templateVersion?: string
  importedTemplateDetails?: ImportedTemplateDetails
  templateMetadata?: TemplateMetadata
  properties?: {
    [key: string]: Record<string, any>
  }
  next?: GraphNode
  group?: GraphGroup
  delegateTaskId?: string
  selectionLogsTrackingForTaskEnabled?: boolean
  delegateTasksDetails?: DelegateTaskDetails[]
  selectionLogsTrackingForTasksEnabled?: boolean
}

export type GroupIdentifier = {
  groupName?: string
  groupId?: string
}

export type HarnessImportedTemplateDetails = ImportedTemplateDetails & {
  commandVersion?: string
  commandName?: string
  commandStoreName?: string
  repoUrl?: string
  /*
   * @uniqueItems true
   */
  tags?: string[]
}

export type HarnessTagLink = {
  uuid?: string
  accountId?: string
  appId?: string
  key?: string
  value?: string
  entityType:
    | 'SERVICE'
    | 'PROVISIONER'
    | 'ENVIRONMENT'
    | 'HOST'
    | 'RELEASE'
    | 'ARTIFACT'
    | 'SSH_USER'
    | 'SSH_PASSWORD'
    | 'SSH_APP_ACCOUNT'
    | 'SSH_KEY_PASSPHRASE'
    | 'SSH_APP_ACCOUNT_PASSOWRD'
    | 'SIMPLE_DEPLOYMENT'
    | 'ORCHESTRATED_DEPLOYMENT'
    | 'PIPELINE'
    | 'WORKFLOW'
    | 'DEPLOYMENT'
    | 'INSTANCE'
    | 'APPLICATION'
    | 'COMMAND'
    | 'CONFIG'
    | 'SERVICE_TEMPLATE'
    | 'INFRASTRUCTURE_MAPPING'
    | 'INFRASTRUCTURE_DEFINITION'
    | 'USER'
    | 'ARTIFACT_STREAM'
    | 'APPDYNAMICS_CONFIGID'
    | 'APPDYNAMICS_APPID'
    | 'APPDYNAMICS_TIERID'
    | 'ELK_CONFIGID'
    | 'ELK_INDICES'
    | 'NEWRELIC_CONFIGID'
    | 'NEWRELIC_APPID'
    | 'SS_SSH_CONNECTION_ATTRIBUTE'
    | 'SS_WINRM_CONNECTION_ATTRIBUTE'
    | 'SUMOLOGIC_CONFIGID'
    | 'SPLUNK_CONFIGID'
    | 'NEWRELIC_MARKER_CONFIGID'
    | 'NEWRELIC_MARKER_APPID'
    | 'API_KEY'
    | 'ACCOUNT'
    | 'APPLICATION_MANIFEST'
    | 'USER_GROUP'
    | 'WHITELISTED_IP'
    | 'CF_AWS_CONFIG_ID'
    | 'VERIFICATION_CONFIGURATION'
    | 'HELM_GIT_CONFIG_ID'
    | 'NOTIFICATION_GROUP'
    | 'HELM_CHART_SPECIFICATION'
    | 'PCF_SERVICE_SPECIFICATION'
    | 'LAMBDA_SPECIFICATION'
    | 'USER_DATA_SPECIFICATION'
    | 'ECS_CONTAINER_SPECIFICATION'
    | 'ECS_SERVICE_SPECIFICATION'
    | 'K8S_CONTAINER_SPECIFICATION'
    | 'CONFIG_FILE'
    | 'SERVICE_COMMAND'
    | 'MANIFEST_FILE'
    | 'SERVICE_VARIABLE'
    | 'TRIGGER'
    | 'ROLE'
    | 'TEMPLATE'
    | 'TEMPLATE_FOLDER'
    | 'SETTING_ATTRIBUTE'
    | 'ENCRYPTED_RECORDS'
    | 'CV_CONFIGURATION'
    | 'TAG'
    | 'CUSTOM_DASHBOARD'
    | 'PIPELINE_GOVERNANCE_STANDARD'
    | 'WORKFLOW_EXECUTION'
    | 'SERVERLESS_INSTANCE'
    | 'USER_INVITE'
    | 'LOGIN_SETTINGS'
    | 'SSO_SETTINGS'
    | 'DELEGATE'
    | 'DELEGATE_SCOPE'
    | 'DELEGATE_PROFILE'
    | 'EXPORT_EXECUTIONS_REQUEST'
    | 'GCP_CONFIG'
    | 'GIT_CONFIG'
    | 'JENKINS_SERVER'
    | 'SECRETS_MANAGER'
    | 'HELM_CHART'
    | 'SECRET'
    | 'CONNECTOR'
    | 'CLOUD_PROVIDER'
    | 'GOVERNANCE_FREEZE_CONFIG'
    | 'GOVERNANCE_CONFIG'
    | 'EVENT_RULE'
  entityId?: string
  tagType?: 'USER' | 'HARNESS'
  appName?: string
  entityName?: string
  createdBy?: EmbeddedUser
  /*
   * @format int64
   */
  createdAt?: number
  lastUpdatedBy?: EmbeddedUser
  /*
   * @format int64
   */
  lastUpdatedAt: number
}

export type HibernationOptions = {
  configured?: boolean
}

export type HostElement = {
  uuid?: string
  hostName?: string
  ip?: string
  instanceId?: string
  publicDns?: string
  properties?: {
    [key: string]: Record<string, any>
  }
  ec2Instance?: Instance
  pcfElement?: PcfInstanceElement
  azureVMInstance?: AzureVMInstanceData
  webAppInstance?: AzureAppDeploymentData
  name?: string
  elementType?:
    | 'SERVICE'
    | 'INFRAMAPPING'
    | 'SERVICE_TEMPLATE'
    | 'TAG'
    | 'SHELL'
    | 'HOST'
    | 'INSTANCE'
    | 'STANDARD'
    | 'PARAM'
    | 'PARTITION'
    | 'OTHER'
    | 'FORK'
    | 'CONTAINER_SERVICE'
    | 'CLUSTER'
    | 'AWS_LAMBDA_FUNCTION'
    | 'AMI_SERVICE_SETUP'
    | 'AMI_SERVICE_DEPLOY'
    | 'ECS_SERVICE_SETUP'
    | 'AMI_SWITCH_ROUTES'
    | 'PCF_SERVICE_SETUP'
    | 'PCF_SERVICE_DEPLOY'
    | 'PCF_ROUTE_SWAP_ROLLBACK'
    | 'PCF_INSTANCE'
    | 'SPOTINST_SERVICE_SETUP'
    | 'SPOTINST_SERVICE_DEPLOY'
    | 'ARTIFACT'
    | 'ARTIFACT_VARIABLE'
    | 'HELM_DEPLOY'
    | 'CLOUD_FORMATION_PROVISION'
    | 'CLOUD_FORMATION_ROLLBACK'
    | 'CLOUD_FORMATION_DEPROVISION'
    | 'TERRAFORM_PROVISION'
    | 'SHELL_SCRIPT_PROVISION'
    | 'K8S'
    | 'TERRAFORM_INHERIT_PLAN'
    | 'TERRAGRUNT_INHERIT_PLAN'
    | 'AZURE_VMSS_SETUP'
    | 'AZURE_WEBAPP_SETUP'
    | 'HELM_CHART'
    | 'MANIFEST_VARIABLE'
    | 'RANCHER_K8S_CLUSTER_CRITERIA'
}

export type IamInstanceProfile = {
  arn?: string
  id?: string
}

export type ImportedTemplateDetails = Record<string, any>

export type ImportedTemplateMetadata = TemplateMetadata & {
  /*
   * @format int64
   */
  defaultVersion?: number
}

export type InfraDefinitionSummary = {
  infraDefinitionId?: string
  cloudProviderType?:
    | 'PHYSICAL_DATA_CENTER'
    | 'AWS'
    | 'AZURE'
    | 'GCP'
    | 'KUBERNETES_CLUSTER'
    | 'PCF'
    | 'CUSTOM'
    | 'RANCHER'
  deploymentType?:
    | 'SSH'
    | 'AWS_CODEDEPLOY'
    | 'ECS'
    | 'SPOTINST'
    | 'KUBERNETES'
    | 'HELM'
    | 'AWS_LAMBDA'
    | 'AMI'
    | 'WINRM'
    | 'PCF'
    | 'AZURE_VMSS'
    | 'AZURE_WEBAPP'
    | 'CUSTOM'
  cloudProviderName?: string
  displayName?: string
}

export type InfraMappingSummary = {
  infraMappingId?: string
  computeProviderType?: string
  infraMappingType?: string
  deploymentType?: string
  computeProviderName?: string
  displayName?: string
}

export type Instance = {
  /*
   * @format int32
   */
  amiLaunchIndex?: number
  imageId?: string
  instanceId?: string
  instanceType?: string
  kernelId?: string
  keyName?: string
  /*
   * @format date-time
   */
  launchTime?: string
  monitoring?: Monitoring
  placement?: Placement
  platform?: string
  privateDnsName?: string
  privateIpAddress?: string
  productCodes?: ProductCode[]
  publicDnsName?: string
  publicIpAddress?: string
  ramdiskId?: string
  state?: InstanceState
  stateTransitionReason?: string
  subnetId?: string
  vpcId?: string
  architecture?: string
  blockDeviceMappings?: InstanceBlockDeviceMapping[]
  clientToken?: string
  ebsOptimized?: boolean
  enaSupport?: boolean
  hypervisor?: string
  iamInstanceProfile?: IamInstanceProfile
  instanceLifecycle?: string
  elasticGpuAssociations?: ElasticGpuAssociation[]
  elasticInferenceAcceleratorAssociations?: ElasticInferenceAcceleratorAssociation[]
  networkInterfaces?: InstanceNetworkInterface[]
  outpostArn?: string
  rootDeviceName?: string
  rootDeviceType?: string
  securityGroups?: GroupIdentifier[]
  sourceDestCheck?: boolean
  spotInstanceRequestId?: string
  sriovNetSupport?: string
  stateReason?: StateReason
  tags?: Tag[]
  virtualizationType?: string
  cpuOptions?: CpuOptions
  capacityReservationId?: string
  capacityReservationSpecification?: CapacityReservationSpecificationResponse
  hibernationOptions?: HibernationOptions
  licenses?: LicenseConfiguration[]
  metadataOptions?: InstanceMetadataOptionsResponse
  enclaveOptions?: EnclaveOptions
  bootMode?: string
}

export type InstanceBlockDeviceMapping = {
  deviceName?: string
  ebs?: EbsInstanceBlockDevice
}

export type InstanceElement = {
  uuid?: string
  displayName?: string
  hostName?: string
  dockerId?: string
  host?: HostElement
  serviceTemplateElement?: ServiceTemplateElement
  podName?: string
  namespace?: string
  workloadName?: string
  ecsContainerDetails?: EcsContainerDetails
  newInstance?: boolean
  name?: string
  elementType?:
    | 'SERVICE'
    | 'INFRAMAPPING'
    | 'SERVICE_TEMPLATE'
    | 'TAG'
    | 'SHELL'
    | 'HOST'
    | 'INSTANCE'
    | 'STANDARD'
    | 'PARAM'
    | 'PARTITION'
    | 'OTHER'
    | 'FORK'
    | 'CONTAINER_SERVICE'
    | 'CLUSTER'
    | 'AWS_LAMBDA_FUNCTION'
    | 'AMI_SERVICE_SETUP'
    | 'AMI_SERVICE_DEPLOY'
    | 'ECS_SERVICE_SETUP'
    | 'AMI_SWITCH_ROUTES'
    | 'PCF_SERVICE_SETUP'
    | 'PCF_SERVICE_DEPLOY'
    | 'PCF_ROUTE_SWAP_ROLLBACK'
    | 'PCF_INSTANCE'
    | 'SPOTINST_SERVICE_SETUP'
    | 'SPOTINST_SERVICE_DEPLOY'
    | 'ARTIFACT'
    | 'ARTIFACT_VARIABLE'
    | 'HELM_DEPLOY'
    | 'CLOUD_FORMATION_PROVISION'
    | 'CLOUD_FORMATION_ROLLBACK'
    | 'CLOUD_FORMATION_DEPROVISION'
    | 'TERRAFORM_PROVISION'
    | 'SHELL_SCRIPT_PROVISION'
    | 'K8S'
    | 'TERRAFORM_INHERIT_PLAN'
    | 'TERRAGRUNT_INHERIT_PLAN'
    | 'AZURE_VMSS_SETUP'
    | 'AZURE_WEBAPP_SETUP'
    | 'HELM_CHART'
    | 'MANIFEST_VARIABLE'
    | 'RANCHER_K8S_CLUSTER_CRITERIA'
}

export type InstanceIpv4Prefix = {
  ipv4Prefix?: string
}

export type InstanceIpv6Address = {
  ipv6Address?: string
}

export type InstanceIpv6Prefix = {
  ipv6Prefix?: string
}

export type InstanceMetadataOptionsResponse = {
  state?: string
  httpTokens?: string
  /*
   * @format int32
   */
  httpPutResponseHopLimit?: number
  httpEndpoint?: string
}

export type InstanceNetworkInterface = {
  association?: InstanceNetworkInterfaceAssociation
  attachment?: InstanceNetworkInterfaceAttachment
  description?: string
  groups?: GroupIdentifier[]
  ipv6Addresses?: InstanceIpv6Address[]
  macAddress?: string
  networkInterfaceId?: string
  ownerId?: string
  privateDnsName?: string
  privateIpAddress?: string
  privateIpAddresses?: InstancePrivateIpAddress[]
  sourceDestCheck?: boolean
  status?: string
  subnetId?: string
  vpcId?: string
  interfaceType?: string
  ipv4Prefixes?: InstanceIpv4Prefix[]
  ipv6Prefixes?: InstanceIpv6Prefix[]
}

export type InstanceNetworkInterfaceAssociation = {
  carrierIp?: string
  ipOwnerId?: string
  publicDnsName?: string
  publicIp?: string
}

export type InstanceNetworkInterfaceAttachment = {
  /*
   * @format date-time
   */
  attachTime?: string
  attachmentId?: string
  deleteOnTermination?: boolean
  /*
   * @format int32
   */
  deviceIndex?: number
  status?: string
  /*
   * @format int32
   */
  networkCardIndex?: number
}

export type InstancePrivateIpAddress = {
  association?: InstanceNetworkInterfaceAssociation
  primary?: boolean
  privateDnsName?: string
  privateIpAddress?: string
}

export type InstanceState = {
  /*
   * @format int32
   */
  code?: number
  name?: string
}

export type InstanceStatusSummary = {
  instanceElement?: InstanceElement
  status?:
    | 'ABORTED'
    | 'DISCONTINUING'
    | 'ERROR'
    | 'FAILED'
    | 'NEW'
    | 'PAUSED'
    | 'PAUSING'
    | 'QUEUED'
    | 'RESUMED'
    | 'RUNNING'
    | 'SCHEDULED'
    | 'STARTING'
    | 'SUCCESS'
    | 'WAITING'
    | 'SKIPPED'
    | 'ABORTING'
    | 'REJECTED'
    | 'EXPIRED'
    | 'PREPARING'
}

export type LicenseConfiguration = {
  licenseConfigurationArn?: string
}

export type Monitoring = {
  state?: string
}

export type NameValuePair = {
  name?: string
  value: string
  valueType?: string
}

export type PcfInstanceElement = {
  uuid?: string
  applicationId?: string
  instanceIndex?: string
  displayName?: string
  upsize?: boolean
  newInstance?: boolean
  name?: string
  elementType?:
    | 'SERVICE'
    | 'INFRAMAPPING'
    | 'SERVICE_TEMPLATE'
    | 'TAG'
    | 'SHELL'
    | 'HOST'
    | 'INSTANCE'
    | 'STANDARD'
    | 'PARAM'
    | 'PARTITION'
    | 'OTHER'
    | 'FORK'
    | 'CONTAINER_SERVICE'
    | 'CLUSTER'
    | 'AWS_LAMBDA_FUNCTION'
    | 'AMI_SERVICE_SETUP'
    | 'AMI_SERVICE_DEPLOY'
    | 'ECS_SERVICE_SETUP'
    | 'AMI_SWITCH_ROUTES'
    | 'PCF_SERVICE_SETUP'
    | 'PCF_SERVICE_DEPLOY'
    | 'PCF_ROUTE_SWAP_ROLLBACK'
    | 'PCF_INSTANCE'
    | 'SPOTINST_SERVICE_SETUP'
    | 'SPOTINST_SERVICE_DEPLOY'
    | 'ARTIFACT'
    | 'ARTIFACT_VARIABLE'
    | 'HELM_DEPLOY'
    | 'CLOUD_FORMATION_PROVISION'
    | 'CLOUD_FORMATION_ROLLBACK'
    | 'CLOUD_FORMATION_DEPROVISION'
    | 'TERRAFORM_PROVISION'
    | 'SHELL_SCRIPT_PROVISION'
    | 'K8S'
    | 'TERRAFORM_INHERIT_PLAN'
    | 'TERRAGRUNT_INHERIT_PLAN'
    | 'AZURE_VMSS_SETUP'
    | 'AZURE_WEBAPP_SETUP'
    | 'HELM_CHART'
    | 'MANIFEST_VARIABLE'
    | 'RANCHER_K8S_CLUSTER_CRITERIA'
}

export type Placement = {
  availabilityZone?: string
  affinity?: string
  groupName?: string
  /*
   * @format int32
   */
  partitionNumber?: number
  hostId?: string
  tenancy?: string
  spreadDomain?: string
  hostResourceGroupArn?: string
}

export type ProductCode = {
  productCodeId?: string
  productCodeType?: string
}

export type RestResponsePageResponseCVEnabledService = {
  metaData?: {
    [key: string]: Record<string, any>
  }
  resource?: CVEnabledService[]
  responseMessages?: ResponseMessage[]
}

export type Service = {
  uuid: string
  appId: string
  createdBy?: EmbeddedUser
  /*
   * @format int64
   */
  createdAt?: number
  lastUpdatedBy?: EmbeddedUser
  /*
   * @format int64
   */
  lastUpdatedAt: number
  name?: string
  description?: string
  artifactType?:
    | 'JAR'
    | 'WAR'
    | 'TAR'
    | 'ZIP'
    | 'NUGET'
    | 'DOCKER'
    | 'RPM'
    | 'AWS_LAMBDA'
    | 'AWS_CODEDEPLOY'
    | 'PCF'
    | 'AMI'
    | 'AZURE_MACHINE_IMAGE'
    | 'AZURE_WEBAPP'
    | 'IIS'
    | 'OTHER'
    | 'IIS_APP'
    | 'IIS_VirtualDirectory'
  deploymentType?:
    | 'SSH'
    | 'AWS_CODEDEPLOY'
    | 'ECS'
    | 'SPOTINST'
    | 'KUBERNETES'
    | 'HELM'
    | 'AWS_LAMBDA'
    | 'AMI'
    | 'WINRM'
    | 'PCF'
    | 'AZURE_VMSS'
    | 'AZURE_WEBAPP'
    | 'CUSTOM'
  serviceId?: string
  configMapYaml?: string
  helmValueYaml?: string
  /*
   * @format int64
   */
  version?: number
  appContainer?: AppContainer
  configFiles?: ConfigFile[]
  serviceVariables?: ServiceVariable[]
  artifactStreams?: ArtifactStream[]
  serviceCommands?: ServiceCommand[]
  lastDeploymentActivity?: Activity
  lastProdDeploymentActivity?: Activity
  setup?: Setup
  /*
   * @uniqueItems true
   */
  keywords?: string[]
  helmVersion?: 'V2' | 'V3'
  cfCliVersion?: 'V6' | 'V7'
  accountId?: string
  artifactStreamIds?: string[]
  artifactStreamBindings?: ArtifactStreamBinding[]
  sample?: boolean
  tagLinks?: HarnessTagLink[]
  deploymentTypeTemplateId?: string
  customDeploymentName?: string
  artifactFromManifest?: boolean
  pcfV2?: boolean
  k8sV2?: boolean
}

export type ServiceCommand = {
  uuid: string
  appId: string
  createdBy?: EmbeddedUser
  /*
   * @format int64
   */
  createdAt?: number
  lastUpdatedBy?: EmbeddedUser
  /*
   * @format int64
   */
  lastUpdatedAt: number
  name?: string
  serviceId?: string
  envIdVersionMap?: {
    [key: string]: EntityVersion
  }
  /*
   * @format int32
   */
  defaultVersion?: number
  targetToAllEnv?: boolean
  accountId?: string
  command?: Command
  templateUuid?: string
  templateVersion?: string
  importedTemplateDetails?: ImportedTemplateDetails
  templateMetadata?: TemplateMetadata
}

export type ServiceElement = {
  uuid?: string
  name?: string
  description?: string
  elementType?:
    | 'SERVICE'
    | 'INFRAMAPPING'
    | 'SERVICE_TEMPLATE'
    | 'TAG'
    | 'SHELL'
    | 'HOST'
    | 'INSTANCE'
    | 'STANDARD'
    | 'PARAM'
    | 'PARTITION'
    | 'OTHER'
    | 'FORK'
    | 'CONTAINER_SERVICE'
    | 'CLUSTER'
    | 'AWS_LAMBDA_FUNCTION'
    | 'AMI_SERVICE_SETUP'
    | 'AMI_SERVICE_DEPLOY'
    | 'ECS_SERVICE_SETUP'
    | 'AMI_SWITCH_ROUTES'
    | 'PCF_SERVICE_SETUP'
    | 'PCF_SERVICE_DEPLOY'
    | 'PCF_ROUTE_SWAP_ROLLBACK'
    | 'PCF_INSTANCE'
    | 'SPOTINST_SERVICE_SETUP'
    | 'SPOTINST_SERVICE_DEPLOY'
    | 'ARTIFACT'
    | 'ARTIFACT_VARIABLE'
    | 'HELM_DEPLOY'
    | 'CLOUD_FORMATION_PROVISION'
    | 'CLOUD_FORMATION_ROLLBACK'
    | 'CLOUD_FORMATION_DEPROVISION'
    | 'TERRAFORM_PROVISION'
    | 'SHELL_SCRIPT_PROVISION'
    | 'K8S'
    | 'TERRAFORM_INHERIT_PLAN'
    | 'TERRAGRUNT_INHERIT_PLAN'
    | 'AZURE_VMSS_SETUP'
    | 'AZURE_WEBAPP_SETUP'
    | 'HELM_CHART'
    | 'MANIFEST_VARIABLE'
    | 'RANCHER_K8S_CLUSTER_CRITERIA'
}

export type ServiceTemplateElement = {
  uuid?: string
  name?: string
  serviceElement?: ServiceElement
  elementType?:
    | 'SERVICE'
    | 'INFRAMAPPING'
    | 'SERVICE_TEMPLATE'
    | 'TAG'
    | 'SHELL'
    | 'HOST'
    | 'INSTANCE'
    | 'STANDARD'
    | 'PARAM'
    | 'PARTITION'
    | 'OTHER'
    | 'FORK'
    | 'CONTAINER_SERVICE'
    | 'CLUSTER'
    | 'AWS_LAMBDA_FUNCTION'
    | 'AMI_SERVICE_SETUP'
    | 'AMI_SERVICE_DEPLOY'
    | 'ECS_SERVICE_SETUP'
    | 'AMI_SWITCH_ROUTES'
    | 'PCF_SERVICE_SETUP'
    | 'PCF_SERVICE_DEPLOY'
    | 'PCF_ROUTE_SWAP_ROLLBACK'
    | 'PCF_INSTANCE'
    | 'SPOTINST_SERVICE_SETUP'
    | 'SPOTINST_SERVICE_DEPLOY'
    | 'ARTIFACT'
    | 'ARTIFACT_VARIABLE'
    | 'HELM_DEPLOY'
    | 'CLOUD_FORMATION_PROVISION'
    | 'CLOUD_FORMATION_ROLLBACK'
    | 'CLOUD_FORMATION_DEPROVISION'
    | 'TERRAFORM_PROVISION'
    | 'SHELL_SCRIPT_PROVISION'
    | 'K8S'
    | 'TERRAFORM_INHERIT_PLAN'
    | 'TERRAGRUNT_INHERIT_PLAN'
    | 'AZURE_VMSS_SETUP'
    | 'AZURE_WEBAPP_SETUP'
    | 'HELM_CHART'
    | 'MANIFEST_VARIABLE'
    | 'RANCHER_K8S_CLUSTER_CRITERIA'
}

export type ServiceVariable = {
  templateId?: string
  envId?: string
  entityType:
    | 'SERVICE'
    | 'PROVISIONER'
    | 'ENVIRONMENT'
    | 'HOST'
    | 'RELEASE'
    | 'ARTIFACT'
    | 'SSH_USER'
    | 'SSH_PASSWORD'
    | 'SSH_APP_ACCOUNT'
    | 'SSH_KEY_PASSPHRASE'
    | 'SSH_APP_ACCOUNT_PASSOWRD'
    | 'SIMPLE_DEPLOYMENT'
    | 'ORCHESTRATED_DEPLOYMENT'
    | 'PIPELINE'
    | 'WORKFLOW'
    | 'DEPLOYMENT'
    | 'INSTANCE'
    | 'APPLICATION'
    | 'COMMAND'
    | 'CONFIG'
    | 'SERVICE_TEMPLATE'
    | 'INFRASTRUCTURE_MAPPING'
    | 'INFRASTRUCTURE_DEFINITION'
    | 'USER'
    | 'ARTIFACT_STREAM'
    | 'APPDYNAMICS_CONFIGID'
    | 'APPDYNAMICS_APPID'
    | 'APPDYNAMICS_TIERID'
    | 'ELK_CONFIGID'
    | 'ELK_INDICES'
    | 'NEWRELIC_CONFIGID'
    | 'NEWRELIC_APPID'
    | 'SS_SSH_CONNECTION_ATTRIBUTE'
    | 'SS_WINRM_CONNECTION_ATTRIBUTE'
    | 'SUMOLOGIC_CONFIGID'
    | 'SPLUNK_CONFIGID'
    | 'NEWRELIC_MARKER_CONFIGID'
    | 'NEWRELIC_MARKER_APPID'
    | 'API_KEY'
    | 'ACCOUNT'
    | 'APPLICATION_MANIFEST'
    | 'USER_GROUP'
    | 'WHITELISTED_IP'
    | 'CF_AWS_CONFIG_ID'
    | 'VERIFICATION_CONFIGURATION'
    | 'HELM_GIT_CONFIG_ID'
    | 'NOTIFICATION_GROUP'
    | 'HELM_CHART_SPECIFICATION'
    | 'PCF_SERVICE_SPECIFICATION'
    | 'LAMBDA_SPECIFICATION'
    | 'USER_DATA_SPECIFICATION'
    | 'ECS_CONTAINER_SPECIFICATION'
    | 'ECS_SERVICE_SPECIFICATION'
    | 'K8S_CONTAINER_SPECIFICATION'
    | 'CONFIG_FILE'
    | 'SERVICE_COMMAND'
    | 'MANIFEST_FILE'
    | 'SERVICE_VARIABLE'
    | 'TRIGGER'
    | 'ROLE'
    | 'TEMPLATE'
    | 'TEMPLATE_FOLDER'
    | 'SETTING_ATTRIBUTE'
    | 'ENCRYPTED_RECORDS'
    | 'CV_CONFIGURATION'
    | 'TAG'
    | 'CUSTOM_DASHBOARD'
    | 'PIPELINE_GOVERNANCE_STANDARD'
    | 'WORKFLOW_EXECUTION'
    | 'SERVERLESS_INSTANCE'
    | 'USER_INVITE'
    | 'LOGIN_SETTINGS'
    | 'SSO_SETTINGS'
    | 'DELEGATE'
    | 'DELEGATE_SCOPE'
    | 'DELEGATE_PROFILE'
    | 'EXPORT_EXECUTIONS_REQUEST'
    | 'GCP_CONFIG'
    | 'GIT_CONFIG'
    | 'JENKINS_SERVER'
    | 'SECRETS_MANAGER'
    | 'HELM_CHART'
    | 'SECRET'
    | 'CONNECTOR'
    | 'CLOUD_PROVIDER'
    | 'GOVERNANCE_FREEZE_CONFIG'
    | 'GOVERNANCE_CONFIG'
    | 'EVENT_RULE'
  entityId?: string
  parentServiceVariableId?: string
  overriddenServiceVariable?: ServiceVariable
  overrideType?: 'ALL' | 'INSTANCES' | 'CUSTOM'
  instances?: string[]
  expression?: string
  accountId?: string
  name?: string
  value?: string[]
  type?: 'TEXT' | 'LB' | 'ENCRYPTED_TEXT' | 'ARTIFACT'
  allowedList?: string[]
  encryptedValue?: string
  secretTextName?: string
  serviceId?: string
  encryptionType?:
    | 'LOCAL'
    | 'KMS'
    | 'GCP_KMS'
    | 'AWS_SECRETS_MANAGER'
    | 'AZURE_VAULT'
    | 'CYBERARK'
    | 'VAULT'
    | 'GCP_SECRETS_MANAGER'
    | 'CUSTOM'
    | 'VAULT_SSH'
  encryptedBy?: string
  artifactStreamSummaries?: ArtifactStreamSummary[]
  uuid: string
  appId: string
  createdBy?: EmbeddedUser
  /*
   * @format int64
   */
  createdAt?: number
  lastUpdatedBy?: EmbeddedUser
  /*
   * @format int64
   */
  lastUpdatedAt: number
  settingType?:
    | 'HOST_CONNECTION_ATTRIBUTES'
    | 'BASTION_HOST_CONNECTION_ATTRIBUTES'
    | 'SMTP'
    | 'SFTP'
    | 'JENKINS'
    | 'BAMBOO'
    | 'STRING'
    | 'SPLUNK'
    | 'ELK'
    | 'LOGZ'
    | 'SUMO'
    | 'DATA_DOG'
    | 'APM_VERIFICATION'
    | 'BUG_SNAG'
    | 'LOG_VERIFICATION'
    | 'APP_DYNAMICS'
    | 'NEW_RELIC'
    | 'DYNA_TRACE'
    | 'INSTANA'
    | 'DATA_DOG_LOG'
    | 'CLOUD_WATCH'
    | 'SCALYR'
    | 'ELB'
    | 'SLACK'
    | 'AWS'
    | 'GCS'
    | 'GCP'
    | 'AZURE'
    | 'PCF'
    | 'RANCHER'
    | 'DIRECT'
    | 'KUBERNETES_CLUSTER'
    | 'DOCKER'
    | 'ECR'
    | 'GCR'
    | 'ACR'
    | 'PHYSICAL_DATA_CENTER'
    | 'KUBERNETES'
    | 'NEXUS'
    | 'ARTIFACTORY'
    | 'SMB'
    | 'AMAZON_S3'
    | 'GIT'
    | 'SSH_SESSION_CONFIG'
    | 'SERVICE_VARIABLE'
    | 'CONFIG_FILE'
    | 'KMS'
    | 'GCP_KMS'
    | 'JIRA'
    | 'SERVICENOW'
    | 'SECRET_TEXT'
    | 'YAML_GIT_SYNC'
    | 'VAULT'
    | 'VAULT_SSH'
    | 'AWS_SECRETS_MANAGER'
    | 'CYBERARK'
    | 'WINRM_CONNECTION_ATTRIBUTES'
    | 'WINRM_SESSION_CONFIG'
    | 'PROMETHEUS'
    | 'INFRASTRUCTURE_MAPPING'
    | 'HTTP_HELM_REPO'
    | 'AMAZON_S3_HELM_REPO'
    | 'GCS_HELM_REPO'
    | 'SPOT_INST'
    | 'AZURE_ARTIFACTS_PAT'
    | 'CUSTOM'
    | 'CE_AWS'
    | 'CE_GCP'
    | 'CE_AZURE'
    | 'AZURE_VAULT'
    | 'KUBERNETES_CLUSTER_NG'
    | 'GIT_NG'
    | 'SSO_SAML'
    | 'GCP_SECRETS_MANAGER'
    | 'TRIGGER'
}

export type Setup = {
  setupStatus?: 'COMPLETE' | 'INCOMPLETE'
  actions?: SetupAction[]
}

export type SetupAction = {
  displayText?: string
  code?: string
  url?: string
  errorType?: 'INFO' | 'ERROR'
}

export type StateReason = {
  code?: string
  message?: string
}

export type Tag = {
  key?: string
  value?: string
}

export type TemplateExpression = {
  fieldName?: string
  expression?: string
  expressionAllowed?: boolean
  description?: string
  mandatory?: boolean
  metadata?: {
    [key: string]: Record<string, any>
  }
}

export type TemplateMetadata = Record<string, any>

export type TemplateReference = {
  templateUuid?: string
  /*
   * @format int64
   */
  templateVersion?: number
}

export type TriggeredBy = {
  name?: string
  email?: string
}

export type Variable = {
  name?: string
  description?: string
  mandatory?: boolean
  runtimeInput?: boolean
  value?: string
  fixed?: boolean
  allowedValues?: string
  allowedList?: string[]
  allowMultipleValues?: boolean
  artifactStreamSummaries?: ArtifactStreamSummary[]
  metadata?: {
    [key: string]: Record<string, any>
  }
  type?: 'TEXT' | 'NUMBER' | 'EMAIL' | 'ENTITY' | 'ARTIFACT' | 'MANIFEST'
}

export type RestResponseListService = {
  metaData?: {
    [key: string]: Record<string, any>
  }
  resource?: Service[]
  responseMessages?: ResponseMessage[]
}

export type ProvisionStep = {
  step?: string
  done?: boolean
}

export type RestResponseListProvisionStep = {
  metaData?: {
    [key: string]: Record<string, any>
  }
  resource?: ProvisionStep[]
  responseMessages?: ResponseMessage[]
}

export type ServiceGuardLimitDTO = {
  /*
   * @format int64
   */
  serviceGuardLimit?: number
}

export type CDModuleLicenseDTO = ModuleLicenseDTO & {
  cdLicenseType?: 'SERVICES' | 'SERVICE_INSTANCES'
  /*
   * @format int32
   */
  workloads?: number
  /*
   * @format int32
   */
  serviceInstances?: number
}

export type CEModuleLicenseDTO = ModuleLicenseDTO & {
  /*
   * @format int64
   */
  spendLimit?: number
}

export type CFModuleLicenseDTO = ModuleLicenseDTO & {
  /*
   * @format int32
   */
  numberOfUsers?: number
  /*
   * @format int64
   */
  numberOfClientMAUs?: number
}

export type CIModuleLicenseDTO = ModuleLicenseDTO & {
  /*
   * @format int32
   */
  numberOfCommitters?: number
}

export type CVModuleLicenseDTO = ModuleLicenseDTO & {}

export type ModuleLicenseDTO = {
  id?: string
  accountIdentifier?: string
  moduleType?: 'CD' | 'CI' | 'CV' | 'CF' | 'CE' | 'CORE' | 'PMS' | 'TEMPLATESERVICE'
  edition?: 'COMMUNITY' | 'FREE' | 'TEAM' | 'ENTERPRISE'
  licenseType?: 'TRIAL' | 'PAID'
  status?: 'ACTIVE' | 'DELETED' | 'EXPIRED'
  /*
   * @format int64
   */
  startTime?: number
  /*
   * @format int64
   */
  expiryTime?: number
  /*
   * @format int64
   */
  createdAt?: number
  /*
   * @format int64
   */
  lastModifiedAt?: number
}

export type RestResponseModuleLicenseDTO = {
  metaData?: {
    [key: string]: Record<string, any>
  }
  resource?: ModuleLicenseDTO
  responseMessages?: ResponseMessage[]
}

export type AccountLicenseDTO = {
  accountId?: string
  moduleLicenses?: {
    [key: string]: ModuleLicenseDTO
  }
  allModuleLicenses?: {
    [key: string]: ModuleLicenseDTO[]
  }
  /*
   * @format int64
   */
  createdAt?: number
  /*
   * @format int64
   */
  lastUpdatedAt?: number
}

export type RestResponseAccountLicenseDTO = {
  metaData?: {
    [key: string]: Record<string, any>
  }
  resource?: AccountLicenseDTO
  responseMessages?: ResponseMessage[]
}

export type RestResponseActivity = {
  metaData?: {
    [key: string]: Record<string, any>
  }
  resource?: Activity
  responseMessages?: ResponseMessage[]
}

export type RestResponsePageResponseActivity = {
  metaData?: {
    [key: string]: Record<string, any>
  }
  resource?: Activity[]
  responseMessages?: ResponseMessage[]
}

export type Log = {
  uuid: string
  appId: string
  createdBy?: EmbeddedUser
  /*
   * @format int64
   */
  createdAt?: number
  lastUpdatedBy?: EmbeddedUser
  /*
   * @format int64
   */
  lastUpdatedAt: number
  activityId?: string
  hostName?: string
  commandUnitName?: string
  logLine?: string
  /*
   * @format int32
   */
  linesCount?: number
  logLevel: 'DEBUG' | 'INFO' | 'WARN' | 'ERROR' | 'FATAL'
  commandExecutionStatus: 'SUCCESS' | 'FAILURE' | 'RUNNING' | 'QUEUED' | 'SKIPPED'
  accountId?: string
}

export type RestResponsePageResponseLog = {
  metaData?: {
    [key: string]: Record<string, any>
  }
  resource?: Log[]
  responseMessages?: ResponseMessage[]
}

export type RestResponsePageResponseThirdPartyApiCallLog = {
  metaData?: {
    [key: string]: Record<string, any>
  }
  resource?: ThirdPartyApiCallLog[]
  responseMessages?: ResponseMessage[]
}

export type ThirdPartyApiCallField = {
  name?: string
  value?: string
  type?: 'JSON' | 'XML' | 'NUMBER' | 'URL' | 'TEXT' | 'TIMESTAMP'
}

export type ThirdPartyApiCallLog = {
  stateExecutionId?: string
  accountId?: string
  delegateId?: string
  delegateTaskId?: string
  title?: string
  request?: ThirdPartyApiCallField[]
  response?: ThirdPartyApiCallField[]
  /*
   * @format int64
   */
  requestTimeStamp?: number
  /*
   * @format int64
   */
  responseTimeStamp?: number
  /*
   * @format int64
   */
  createdAt?: number
  uuid?: string
  /*
   * @format date-time
   */
  validUntil?: string
  status?:
    | 'ABORTED'
    | 'DISCONTINUING'
    | 'ERROR'
    | 'FAILED'
    | 'NEW'
    | 'PAUSED'
    | 'PAUSING'
    | 'QUEUED'
    | 'RESUMED'
    | 'RUNNING'
    | 'SCHEDULED'
    | 'STARTING'
    | 'SUCCESS'
    | 'WAITING'
    | 'SKIPPED'
    | 'ABORTING'
    | 'REJECTED'
    | 'EXPIRED'
    | 'PREPARING'
}

export type CommandUnitDetails = {
  name?: string
  commandExecutionStatus?: 'SUCCESS' | 'FAILURE' | 'RUNNING' | 'QUEUED' | 'SKIPPED'
  commandUnitType?:
    | 'COMMAND'
    | 'JENKINS'
    | 'GCB'
    | 'HELM'
    | 'KUBERNETES_STEADY_STATE_CHECK'
    | 'ECS_STEADY_STATE_CHECK'
    | 'PCF_SETUP'
    | 'SPOTINST_SETUP'
    | 'SPOTINST_DEPLOY'
    | 'SPOTINST_UPDATE_LISTENER'
    | 'PCF_RESIZE'
    | 'PCF_MAP_ROUTE'
    | 'PCF_BG_SWAP_ROUTE'
    | 'PCF_PLUGIN'
    | 'KUBERNETES_SWAP_SERVICE_SELECTORS'
    | 'KUBERNETES'
    | 'AWS_AMI_SWITCH_ROUTES'
    | 'AWS_ECS_UPDATE_LISTENER_BG'
    | 'AWS_ECS_UPDATE_ROUTE_53_DNS_WEIGHT'
    | 'AWS_ECS_SERVICE_SETUP'
    | 'AWS_ECS_RUN_TASK_DEPLOY'
    | 'AWS_ECS_SERVICE_SETUP_ROUTE53'
    | 'AWS_ECS_SERVICE_SETUP_ELB'
    | 'AWS_ECS_SERVICE_SETUP_DAEMON'
    | 'AWS_ECS_SERVICE_ROLLBACK_DAEMON'
    | 'AWS_ECS_SERVICE_DEPLOY'
    | 'AZURE_VMSS_SETUP'
    | 'AZURE_VMSS_DEPLOY'
    | 'AZURE_VMSS_SWAP'
    | 'AZURE_APP_SERVICE_SLOT_SETUP'
    | 'AZURE_APP_SERVICE_SLOT_TRAFFIC_SHIFT'
    | 'AZURE_APP_SERVICE_SLOT_SWAP'
    | 'CUSTOM_DEPLOYMENT_FETCH_INSTANCES'
    | 'AZURE_ARM_DEPLOYMENT'
    | 'AZURE_BLUEPRINT_DEPLOYMENT'
    | 'TERRAGRUNT_PROVISION'
    | 'RANCHER'
  variables?: Variable[]
}

export type RestResponseListCommandUnitDetails = {
  metaData?: {
    [key: string]: Record<string, any>
  }
  resource?: CommandUnitDetails[]
  responseMessages?: ResponseMessage[]
}

export type AlertFilter = {
  alertType?:
    | 'ApprovalNeeded'
    | 'ManualInterventionNeeded'
    | 'NoActiveDelegates'
    | 'NoInstalledDelegates'
    | 'DelegatesDown'
    | 'DelegatesScalingGroupDownAlert'
    | 'DelegateProfileError'
    | 'NoEligibleDelegates'
    | 'PerpetualTaskAlert'
    | 'InvalidKMS'
    | 'GitSyncError'
    | 'GitConnectionError'
    | 'INVALID_SMTP_CONFIGURATION'
    | 'EMAIL_NOT_SENT_ALERT'
    | 'USERGROUP_SYNC_FAILED'
    | 'USAGE_LIMIT_EXCEEDED'
    | 'INSTANCE_USAGE_APPROACHING_LIMIT'
    | 'RESOURCE_USAGE_APPROACHING_LIMIT'
    | 'DEPLOYMENT_RATE_APPROACHING_LIMIT'
    | 'SETTING_ATTRIBUTE_VALIDATION_FAILED'
    | 'ARTIFACT_COLLECTION_FAILED'
    | 'CONTINUOUS_VERIFICATION_ALERT'
    | 'CONTINUOUS_VERIFICATION_DATA_COLLECTION_ALERT'
    | 'MANIFEST_COLLECTION_FAILED'
    | 'DEPLOYMENT_FREEZE_EVENT'
  conditions?: Conditions
}

export type AlertNotificationRule = {
  accountId?: string
  alertCategory?: 'All' | 'Setup' | 'Approval' | 'ManualIntervention' | 'ContinuousVerification'
  alertFilter?: AlertFilter
  /*
   * @uniqueItems true
   */
  userGroupsToNotify?: string[]
  uuid: string
  appId: string
  createdBy?: EmbeddedUser
  /*
   * @format int64
   */
  createdAt?: number
  lastUpdatedBy?: EmbeddedUser
  /*
   * @format int64
   */
  lastUpdatedAt: number
  ['default']?: boolean
}

export type CVAlertFilters = {
  appIds?: string[]
  envIds?: string[]
  cvConfigIds?: string[]
  /*
   * @format double
   */
  alertMinThreshold?: number
}

export type Conditions = {
  operator?: 'MATCHING' | 'NOT_MATCHING'
  manualInterventionFilters?: ManualInterventionAlertFilters
  cvAlertFilters?: CVAlertFilters
}

export type ManualInterventionAlertFilters = {
  appIds?: string[]
  envIds?: string[]
}

export type RestResponseListAlertNotificationRule = {
  metaData?: {
    [key: string]: Record<string, any>
  }
  resource?: AlertNotificationRule[]
  responseMessages?: ResponseMessage[]
}

export type NotificationRulesStatus = {
  accountId?: string
  enabled?: boolean
}

export type RestResponseNotificationRulesStatus = {
  metaData?: {
    [key: string]: Record<string, any>
  }
  resource?: NotificationRulesStatus
  responseMessages?: ResponseMessage[]
}

export type RestResponseAlertNotificationRule = {
  metaData?: {
    [key: string]: Record<string, any>
  }
  resource?: AlertNotificationRule
  responseMessages?: ResponseMessage[]
}

export type AccountPermissions = {
  /*
   * @uniqueItems true
   */
  permissions?: (
    | 'ACCOUNT'
    | 'LOGGED_IN'
    | 'DELEGATE'
    | 'NONE'
    | 'APP'
    | 'ALL_APP_ENTITIES'
    | 'ENV'
    | 'SERVICE'
    | 'WORKFLOW'
    | 'PIPELINE'
    | 'DEPLOYMENT'
    | 'APPLICATION_CREATE_DELETE'
    | 'USER_PERMISSION_MANAGEMENT'
    | 'ACCOUNT_MANAGEMENT'
    | 'PROVISIONER'
    | 'TEMPLATE_MANAGEMENT'
    | 'APP_TEMPLATE'
    | 'USER_PERMISSION_READ'
    | 'AUDIT_VIEWER'
    | 'TAG_MANAGEMENT'
    | 'CE_ADMIN'
    | 'CE_VIEWER'
    | 'MANAGE_CLOUD_PROVIDERS'
    | 'MANAGE_CONNECTORS'
    | 'MANAGE_APPLICATIONS'
    | 'MANAGE_APPLICATION_STACKS'
    | 'MANAGE_DELEGATES'
    | 'MANAGE_ALERT_NOTIFICATION_RULES'
    | 'MANAGE_DELEGATE_PROFILES'
    | 'MANAGE_CONFIG_AS_CODE'
    | 'MANAGE_SECRETS'
    | 'MANAGE_SECRET_MANAGERS'
    | 'MANAGE_SSH_AND_WINRM'
    | 'MANAGE_AUTHENTICATION_SETTINGS'
    | 'MANAGE_USER_AND_USER_GROUPS_AND_API_KEYS'
    | 'VIEW_USER_AND_USER_GROUPS_AND_API_KEYS'
    | 'MANAGE_IP_WHITELIST'
    | 'MANAGE_IP_WHITELISTING'
    | 'MANAGE_DEPLOYMENT_FREEZES'
    | 'ALLOW_DEPLOYMENTS_DURING_FREEZE'
    | 'MANAGE_PIPELINE_GOVERNANCE_STANDARDS'
    | 'MANAGE_API_KEYS'
    | 'MANAGE_TAGS'
    | 'MANAGE_ACCOUNT_DEFAULTS'
    | 'MANAGE_CUSTOM_DASHBOARDS'
    | 'CREATE_CUSTOM_DASHBOARDS'
    | 'MANAGE_RESTRICTED_ACCESS'
  )[]
}

export type ApiKeyEntry = {
  uuid?: string
  accountId?: string
  name?: string
  userGroupIds?: string[]
  userGroups?: UserGroup[]
  /*
   * @format int64
   */
  createdAt?: number
  encryptedKey?: string[]
  decryptedKey?: string
  hashOfKey?: string
  sha256Hash?: string
}

export type AppFilter = Filter & {
  filterType?: string
}

export type AppPermission = {
  permissionType?:
    | 'ACCOUNT'
    | 'LOGGED_IN'
    | 'DELEGATE'
    | 'NONE'
    | 'APP'
    | 'ALL_APP_ENTITIES'
    | 'ENV'
    | 'SERVICE'
    | 'WORKFLOW'
    | 'PIPELINE'
    | 'DEPLOYMENT'
    | 'APPLICATION_CREATE_DELETE'
    | 'USER_PERMISSION_MANAGEMENT'
    | 'ACCOUNT_MANAGEMENT'
    | 'PROVISIONER'
    | 'TEMPLATE_MANAGEMENT'
    | 'APP_TEMPLATE'
    | 'USER_PERMISSION_READ'
    | 'AUDIT_VIEWER'
    | 'TAG_MANAGEMENT'
    | 'CE_ADMIN'
    | 'CE_VIEWER'
    | 'MANAGE_CLOUD_PROVIDERS'
    | 'MANAGE_CONNECTORS'
    | 'MANAGE_APPLICATIONS'
    | 'MANAGE_APPLICATION_STACKS'
    | 'MANAGE_DELEGATES'
    | 'MANAGE_ALERT_NOTIFICATION_RULES'
    | 'MANAGE_DELEGATE_PROFILES'
    | 'MANAGE_CONFIG_AS_CODE'
    | 'MANAGE_SECRETS'
    | 'MANAGE_SECRET_MANAGERS'
    | 'MANAGE_SSH_AND_WINRM'
    | 'MANAGE_AUTHENTICATION_SETTINGS'
    | 'MANAGE_USER_AND_USER_GROUPS_AND_API_KEYS'
    | 'VIEW_USER_AND_USER_GROUPS_AND_API_KEYS'
    | 'MANAGE_IP_WHITELIST'
    | 'MANAGE_IP_WHITELISTING'
    | 'MANAGE_DEPLOYMENT_FREEZES'
    | 'ALLOW_DEPLOYMENTS_DURING_FREEZE'
    | 'MANAGE_PIPELINE_GOVERNANCE_STANDARDS'
    | 'MANAGE_API_KEYS'
    | 'MANAGE_TAGS'
    | 'MANAGE_ACCOUNT_DEFAULTS'
    | 'MANAGE_CUSTOM_DASHBOARDS'
    | 'CREATE_CUSTOM_DASHBOARDS'
    | 'MANAGE_RESTRICTED_ACCESS'
  appFilter?: AppFilter
  entityFilter?: Filter
  /*
   * @uniqueItems true
   */
  actions?: (
    | 'ALL'
    | 'CREATE'
    | 'READ'
    | 'UPDATE'
    | 'DELETE'
    | 'EXECUTE'
    | 'EXECUTE_WORKFLOW'
    | 'EXECUTE_PIPELINE'
    | 'EXECUTE_WORKFLOW_ROLLBACK'
    | 'DEFAULT'
  )[]
}

export type EnvFilter = {
  /*
   * @uniqueItems true
   */
  ids?: string[]
  /*
   * @uniqueItems true
   */
  filterTypes?: string[]
}

export type Filter = {
  /*
   * @uniqueItems true
   */
  ids?: string[]
}

export type GenericEntityFilter = {
  /*
   * @uniqueItems true
   */
  ids?: string[]
  filterType?: string
}

export type NotificationSettings = {
  useIndividualEmails?: boolean
  sendMailToNewMembers?: boolean
  emailAddresses: string[]
  slackConfig: SlackNotificationSetting
  pagerDutyIntegrationKey?: string
  microsoftTeamsWebhookUrl?: string
}

export type RateLimitProtection = {
  incorrectAttemptTimestamps?: number[]
  /*
   * @format int64
   */
  lastNotificationSentToUserAt?: number
  /*
   * @format int64
   */
  lastNotificationSentToSecOpsAt?: number
  /*
   * @format int32
   */
  totalIncorrectAttempts?: number
}

export type RestResponseApiKeyEntry = {
  metaData?: {
    [key: string]: Record<string, any>
  }
  resource?: ApiKeyEntry
  responseMessages?: ResponseMessage[]
}

export type SlackNotificationSetting = {
  name?: string
  outgoingWebhookUrl: string
}

export type User = {
  uuid: string
  appId: string
  createdBy?: EmbeddedUser
  /*
   * @format int64
   */
  createdAt?: number
  lastUpdatedBy?: EmbeddedUser
  /*
   * @format int64
   */
  lastUpdatedAt: number
  name?: string
  externalUserId?: string
  givenName?: string
  familyName?: string
  email?: string
  companyName?: string
  accountName?: string
  userGroups?: UserGroup[]
  accounts?: Account[]
  pendingAccounts?: Account[]
  supportAccounts?: Account[]
  /*
   * @format int64
   */
  lastLogin?: number
  firstLogin?: boolean
  password?: string[]
  token?: string
  twoFactorJwtToken?: string
  emailVerified?: boolean
  passwordExpired?: boolean
  userLocked?: boolean
  /*
   * @format int64
   */
  statsFetchedOn?: number
  lastAccountId?: string
  defaultAccountId?: string
  lastAppId?: string
  disabled?: boolean
  imported?: boolean
  userLockoutInfo?: UserLockoutInfo
  rateLimitProtection?: RateLimitProtection
  twoFactorAuthenticationEnabled?: boolean
  twoFactorAuthenticationMechanism?: 'TOTP'
  oauthProvider?: string
  /*
   * @uniqueItems true
   */
  reportedSegmentTracks?: string[]
  utmInfo?: UtmInfo
  accountIds?: string[]
}

export type UserGroup = {
  uuid: string
  appId: string
  createdBy?: EmbeddedUser
  /*
   * @format int64
   */
  createdAt?: number
  lastUpdatedBy?: EmbeddedUser
  /*
   * @format int64
   */
  lastUpdatedAt: number
  name?: string
  description?: string
  linkedSsoType?: 'SAML' | 'LDAP' | 'OAUTH'
  linkedSsoId?: string
  linkedSsoDisplayName?: string
  ssoGroupId?: string
  ssoGroupName?: string
  importedByScim?: boolean
  accountId?: string
  memberIds?: string[]
  members?: User[]
  /*
   * @uniqueItems true
   */
  appPermissions?: AppPermission[]
  accountPermissions?: AccountPermissions
  notificationSettings?: NotificationSettings
  /*
   * @uniqueItems true
   */
  parents?: UserGroupEntityReference[]
  ['default']?: boolean
  ssoLinked?: boolean
}

export type UserGroupEntityReference = {
  id?: string
  appId?: string
  accountId?: string
  entityType?: string
}

export type UserLockoutInfo = {
  /*
   * @format int32
   */
  numberOfFailedLoginAttempts?: number
  /*
   * @format int64
   */
  userLockedAt?: number
}

export type UtmInfo = {
  utmSource?: string
  utmContent?: string
  utmMedium?: string
  utmTerm?: string
  utmCampaign?: string
}

export type WorkflowFilter = Filter & {
  /*
   * @uniqueItems true
   */
  filterTypes?: string[]
}

export type RestResponsePageResponseApiKeyEntry = {
  metaData?: {
    [key: string]: Record<string, any>
  }
  resource?: ApiKeyEntry[]
  responseMessages?: ResponseMessage[]
}

export type RestResponseMapStringObject = {
  metaData?: {
    [key: string]: Record<string, any>
  }
  resource?: {
    [key: string]: Record<string, any>
  }
  responseMessages?: ResponseMessage[]
}

export type RestResponseAppContainer = {
  metaData?: {
    [key: string]: Record<string, any>
  }
  resource?: AppContainer
  responseMessages?: ResponseMessage[]
}

export type RestResponsePageResponseAppContainer = {
  metaData?: {
    [key: string]: Record<string, any>
  }
  resource?: AppContainer[]
  responseMessages?: ResponseMessage[]
}

export type ApiKeyInfo = {
  appKeyId?: string
  apiKeyName?: string
}

export type Application = {
  uuid: string
  appId: string
  createdBy?: EmbeddedUser
  /*
   * @format int64
   */
  createdAt?: number
  lastUpdatedBy?: EmbeddedUser
  /*
   * @format int64
   */
  lastUpdatedAt: number
  name?: string
  description?: string
  accountId?: string
  services?: Service[]
  environments?: Environment[]
  setup?: Setup
  recentExecutions?: WorkflowExecution[]
  notifications?: Notification[]
  /*
   * @format int64
   */
  nextDeploymentOn?: number
  /*
   * @uniqueItems true
   */
  keywords?: string[]
  yamlGitConfig?: YamlGitConfig
  defaults?: {
    [key: string]: string
  }
  sample?: boolean
  isManualTriggerAuthorized?: boolean
  areWebHookSecretsMandated?: boolean
  tagLinks?: HarnessTagLink[]
}

export type ApplicationManifest = {
  accountId?: string
  serviceId?: string
  envId?: string
  name?: string
  kind?:
    | 'VALUES'
    | 'KUSTOMIZE_PATCHES'
    | 'K8S_MANIFEST'
    | 'PCF_OVERRIDE'
    | 'AZURE_APP_SERVICE_MANIFEST'
    | 'AZURE_APP_SETTINGS_OVERRIDE'
    | 'AZURE_CONN_STRINGS_OVERRIDE'
    | 'HELM_CHART_OVERRIDE'
    | 'OC_PARAMS'
  storeType?:
    | 'Local'
    | 'Remote'
    | 'HelmSourceRepo'
    | 'HelmChartRepo'
    | 'KustomizeSourceRepo'
    | 'OC_TEMPLATES'
    | 'CUSTOM'
    | 'CUSTOM_OPENSHIFT_TEMPLATE'
    | 'VALUES_YAML_FROM_HELM_REPO'
  gitFileConfig?: GitFileConfig
  helmChartConfig?: HelmChartConfig
  kustomizeConfig?: KustomizeConfig
  customSourceConfig?: CustomSourceConfig
  helmCommandFlag?: HelmCommandFlagConfig
  helmValuesYamlFilePaths?: string
  pollForChanges?: boolean
  serviceName?: string
  collectionStatus?: 'UNSTABLE' | 'COLLECTING' | 'STABLE'
  perpetualTaskId?: string
  /*
   * @format int32
   */
  failedAttempts?: number
  skipVersioningForAllK8sObjects?: boolean
  validationMessage?: string
  enableCollection?: boolean
  uuid: string
  appId: string
  createdBy?: EmbeddedUser
  /*
   * @format int64
   */
  createdAt?: number
  lastUpdatedBy?: EmbeddedUser
  /*
   * @format int64
   */
  lastUpdatedAt: number
}

export type ApplicationManifestSummary = {
  appManifestId?: string
  appManifestName?: string
  settingId?: string
  lastCollectedManifest?: ManifestSummary
  defaultManifest?: ManifestSummary
}

export type Artifact = {
  uuid: string
  appId: string
  createdBy?: EmbeddedUser
  /*
   * @format int64
   */
  createdAt?: number
  lastUpdatedBy?: EmbeddedUser
  /*
   * @format int64
   */
  lastUpdatedAt: number
  artifactStreamId?: string
  artifactSourceName?: string
  artifactStreamName?: string
  metadata?: {
    [key: string]: string
  }
  labels?: {
    [key: string]: string
  }
  displayName?: string
  revision?: string
  serviceIds?: string[]
  services?: Service[]
  artifactFiles?: ArtifactFile[]
  artifactFileMetadata?: ArtifactFileMetadata[]
  status?: 'NEW' | 'RUNNING' | 'QUEUED' | 'WAITING' | 'READY' | 'APPROVED' | 'REJECTED' | 'ABORTED' | 'FAILED' | 'ERROR'
  description?: string
  errorMessage?: string
  contentStatus?: 'METADATA_ONLY' | 'NOT_DOWNLOADED' | 'DOWNLOADING' | 'DOWNLOADED' | 'DELETED' | 'FAILED'
  source?: {
    [key: string]: string
  }
  settingId?: string
  accountId?: string
  artifactStreamType?: string
  uiDisplayName?: string
  buildIdentity?: string
  artifactPath?: string
  key?: string
  fileName?: string
  duplicate?: boolean
  url?: string
  buildNo?: string
  bucketName?: string
  buildFullDisplayName?: string
  /*
   * @format int64
   */
  artifactFileSize?: number
}

export type ArtifactFile = {
  uuid: string
  appId: string
  createdBy?: EmbeddedUser
  /*
   * @format int64
   */
  createdAt?: number
  lastUpdatedBy?: EmbeddedUser
  /*
   * @format int64
   */
  lastUpdatedAt: number
  name?: string
  fileUuid?: string
  fileName?: string
  mimeType?: string
  /*
   * @format int64
   */
  size?: number
  checksumType?: 'MD5' | 'SHA1' | 'SHA256'
  checksum?: string
  accountId?: string
}

export type ArtifactFileMetadata = {
  fileName?: string
  url?: string
}

export type ArtifactStreamMetadata = {
  artifactStreamId?: string
  runtimeValues?: {
    [key: string]: Record<string, any>
  }
}

export type ArtifactVariable = {
  entityType?:
    | 'SERVICE'
    | 'PROVISIONER'
    | 'ENVIRONMENT'
    | 'HOST'
    | 'RELEASE'
    | 'ARTIFACT'
    | 'SSH_USER'
    | 'SSH_PASSWORD'
    | 'SSH_APP_ACCOUNT'
    | 'SSH_KEY_PASSPHRASE'
    | 'SSH_APP_ACCOUNT_PASSOWRD'
    | 'SIMPLE_DEPLOYMENT'
    | 'ORCHESTRATED_DEPLOYMENT'
    | 'PIPELINE'
    | 'WORKFLOW'
    | 'DEPLOYMENT'
    | 'INSTANCE'
    | 'APPLICATION'
    | 'COMMAND'
    | 'CONFIG'
    | 'SERVICE_TEMPLATE'
    | 'INFRASTRUCTURE_MAPPING'
    | 'INFRASTRUCTURE_DEFINITION'
    | 'USER'
    | 'ARTIFACT_STREAM'
    | 'APPDYNAMICS_CONFIGID'
    | 'APPDYNAMICS_APPID'
    | 'APPDYNAMICS_TIERID'
    | 'ELK_CONFIGID'
    | 'ELK_INDICES'
    | 'NEWRELIC_CONFIGID'
    | 'NEWRELIC_APPID'
    | 'SS_SSH_CONNECTION_ATTRIBUTE'
    | 'SS_WINRM_CONNECTION_ATTRIBUTE'
    | 'SUMOLOGIC_CONFIGID'
    | 'SPLUNK_CONFIGID'
    | 'NEWRELIC_MARKER_CONFIGID'
    | 'NEWRELIC_MARKER_APPID'
    | 'API_KEY'
    | 'ACCOUNT'
    | 'APPLICATION_MANIFEST'
    | 'USER_GROUP'
    | 'WHITELISTED_IP'
    | 'CF_AWS_CONFIG_ID'
    | 'VERIFICATION_CONFIGURATION'
    | 'HELM_GIT_CONFIG_ID'
    | 'NOTIFICATION_GROUP'
    | 'HELM_CHART_SPECIFICATION'
    | 'PCF_SERVICE_SPECIFICATION'
    | 'LAMBDA_SPECIFICATION'
    | 'USER_DATA_SPECIFICATION'
    | 'ECS_CONTAINER_SPECIFICATION'
    | 'ECS_SERVICE_SPECIFICATION'
    | 'K8S_CONTAINER_SPECIFICATION'
    | 'CONFIG_FILE'
    | 'SERVICE_COMMAND'
    | 'MANIFEST_FILE'
    | 'SERVICE_VARIABLE'
    | 'TRIGGER'
    | 'ROLE'
    | 'TEMPLATE'
    | 'TEMPLATE_FOLDER'
    | 'SETTING_ATTRIBUTE'
    | 'ENCRYPTED_RECORDS'
    | 'CV_CONFIGURATION'
    | 'TAG'
    | 'CUSTOM_DASHBOARD'
    | 'PIPELINE_GOVERNANCE_STANDARD'
    | 'WORKFLOW_EXECUTION'
    | 'SERVERLESS_INSTANCE'
    | 'USER_INVITE'
    | 'LOGIN_SETTINGS'
    | 'SSO_SETTINGS'
    | 'DELEGATE'
    | 'DELEGATE_SCOPE'
    | 'DELEGATE_PROFILE'
    | 'EXPORT_EXECUTIONS_REQUEST'
    | 'GCP_CONFIG'
    | 'GIT_CONFIG'
    | 'JENKINS_SERVER'
    | 'SECRETS_MANAGER'
    | 'HELM_CHART'
    | 'SECRET'
    | 'CONNECTOR'
    | 'CLOUD_PROVIDER'
    | 'GOVERNANCE_FREEZE_CONFIG'
    | 'GOVERNANCE_CONFIG'
    | 'EVENT_RULE'
  entityId?: string
  overriddenArtifactVariables?: ArtifactVariable[]
  artifactStreamSummaries?: ArtifactStreamSummary[]
  displayInfo?: {
    [key: string]: string[]
  }
  workflowIds?: string[]
  uiDisplayName?: string
  artifactStreamMetadata?: ArtifactStreamMetadata
  lastDeployedArtifactInfo?: LastDeployedArtifactInformation
  name?: string
  description?: string
  mandatory?: boolean
  runtimeInput?: boolean
  value?: string
  fixed?: boolean
  allowedValues?: string
  allowedList?: string[]
  allowMultipleValues?: boolean
  metadata?: {
    [key: string]: Record<string, any>
  }
  type?: 'TEXT' | 'NUMBER' | 'EMAIL' | 'ENTITY' | 'ARTIFACT' | 'MANIFEST'
}

export type AwsAmiInfrastructure = InfraMappingInfrastructureProvider & {
  region?: string
  autoScalingGroupName?: string
  classicLoadBalancers?: string[]
  targetGroupArns?: string[]
  hostNameConvention?: string
  stageClassicLoadBalancers?: string[]
  stageTargetGroupArns?: string[]
  amiDeploymentType?: 'AWS_ASG' | 'SPOTINST'
  spotinstElastiGroupJson?: string
  spotinstCloudProvider?: string
  asgIdentifiesWorkload?: boolean
  useTrafficShift?: boolean
  expressions?: {
    [key: string]: string
  }
}

export type AwsEcsInfrastructure = InfraMappingInfrastructureProvider & {
  region?: string
  vpcId?: string
  subnetIds?: string[]
  securityGroupIds?: string[]
  assignPublicIp?: boolean
  executionRole?: string
  launchType?: string
  clusterName?: string
  expressions?: {
    [key: string]: string
  }
}

export type AwsInstanceFilter = {
  vpcIds?: string[]
  tags?: Tag[]
}

export type AwsInstanceInfrastructure = InfraMappingInfrastructureProvider & {
  region?: string
  hostConnectionAttrs?: string
  loadBalancerId?: string
  loadBalancerName?: string
  usePublicDns?: boolean
  hostConnectionType?: string
  awsInstanceFilter?: AwsInstanceFilter
  autoScalingGroupName?: string
  setDesiredCapacity?: boolean
  /*
   * @format int32
   */
  desiredCapacity?: number
  hostNameConvention?: string
  provisionInstances?: boolean
  expressions?: {
    [key: string]: string
  }
}

export type AwsLambdaExecutionSummary = {
  functionMeta?: FunctionMeta
  success?: boolean
}

export type AwsLambdaInfrastructure = InfraMappingInfrastructureProvider & {
  region?: string
  vpcId?: string
  subnetIds?: string[]
  securityGroupIds?: string[]
  role?: string
  expressions?: {
    [key: string]: string
  }
}

export type AzureInstanceInfrastructure = InfraMappingInfrastructureProvider & {
  subscriptionId?: string
  resourceGroup?: string
  tags?: AzureTag[]
  hostConnectionAttrs?: string
  winRmConnectionAttributes?: string
  usePublicDns?: boolean
}

export type AzureKubernetesService = InfraMappingInfrastructureProvider & {
  clusterName?: string
  namespace?: string
  releaseName?: string
  subscriptionId?: string
  resourceGroup?: string
}

export type AzureTag = {
  key?: string
  value?: string
}

export type AzureVMSSInfra = InfraMappingInfrastructureProvider & {
  baseVMSSName?: string
  userName?: string
  resourceGroupName?: string
  subscriptionId?: string
  passwordSecretTextName?: string
  hostConnectionAttrs?: string
  vmssAuthType?: 'PASSWORD' | 'SSH_PUBLIC_KEY'
  vmssDeploymentType?: 'NATIVE_VMSS' | 'SPOTINST'
}

export type AzureWebAppInfra = InfraMappingInfrastructureProvider & {
  subscriptionId?: string
  resourceGroup?: string
  expressions?: {
    [key: string]: string
  }
}

export type BasicOrchestrationWorkflow = OrchestrationWorkflow & {
  graph?: Graph
  preDeploymentSteps?: PhaseStep
  rollbackProvisioners?: PhaseStep
  rollbackProvisionersReverse?: PhaseStep
  rollbackWorkflowPhaseIdMap?: {
    [key: string]: WorkflowPhase
  }
  workflowPhases?: WorkflowPhase[]
  postDeploymentSteps?: PhaseStep
  failureStrategies?: FailureStrategy[]
  systemVariables?: Variable[]
  derivedVariables?: Variable[]
}

export type BlueGreenOrchestrationWorkflow = OrchestrationWorkflow & {
  graph?: Graph
  preDeploymentSteps?: PhaseStep
  rollbackProvisioners?: PhaseStep
  rollbackProvisionersReverse?: PhaseStep
  rollbackWorkflowPhaseIdMap?: {
    [key: string]: WorkflowPhase
  }
  workflowPhases?: WorkflowPhase[]
  postDeploymentSteps?: PhaseStep
  failureStrategies?: FailureStrategy[]
  systemVariables?: Variable[]
  derivedVariables?: Variable[]
}

export type BuildExecutionSummary = {
  artifactStreamId?: string
  artifactSource?: string
  revision?: string
  buildUrl?: string
  buildName?: string
  metadata?: string
  version?: string
  appManifestId?: string
  appManifestSource?: string
  sourceType?: string
}

export type BuildWorkflow = OrchestrationWorkflow & {
  graph?: Graph
  preDeploymentSteps?: PhaseStep
  rollbackProvisioners?: PhaseStep
  rollbackProvisionersReverse?: PhaseStep
  rollbackWorkflowPhaseIdMap?: {
    [key: string]: WorkflowPhase
  }
  workflowPhases?: WorkflowPhase[]
  postDeploymentSteps?: PhaseStep
  failureStrategies?: FailureStrategy[]
  systemVariables?: Variable[]
  derivedVariables?: Variable[]
}

export type CanaryOrchestrationWorkflow = OrchestrationWorkflow & {
  graph?: Graph
  preDeploymentSteps?: PhaseStep
  rollbackProvisioners?: PhaseStep
  rollbackProvisionersReverse?: PhaseStep
  rollbackWorkflowPhaseIdMap?: {
    [key: string]: WorkflowPhase
  }
  workflowPhases?: WorkflowPhase[]
  postDeploymentSteps?: PhaseStep
  failureStrategies?: FailureStrategy[]
  systemVariables?: Variable[]
  derivedVariables?: Variable[]
}

export type ClusterSelectionCriteriaEntry = {
  labelName?: string
  labelValues?: string
}

export type CodeDeployInfrastructure = InfraMappingInfrastructureProvider & {
  region?: string
  applicationName?: string
  deploymentGroup?: string
  deploymentConfig?: string
  hostNameConvention?: string
}

export type ConcurrencyStrategy = {
  unitType: 'INFRA' | 'CUSTOM' | 'NONE'
  holdingScope: 'PIPELINE' | 'WORKFLOW' | 'PHASE' | 'PHASE_SECTION' | 'NEXT_STEP'
  strategy: 'ASAP' | 'FIFO'
  resourceUnit: string
  notificationGroups?: string[]
  notifyTriggeredByUser?: boolean
}

export type ContainerInfo = {
  hostName?: string
  ip?: string
  containerId?: string
  ec2Instance?: Instance
  status?: 'SUCCESS' | 'FAILURE'
  podName?: string
  workloadName?: string
  newContainer?: boolean
  ecsContainerDetails?: EcsContainerDetails
  containerTasksReachable?: boolean
  releaseName?: string
  namespace?: string
}

export type CountsByStatuses = {
  /*
   * @format int32
   */
  success?: number
  /*
   * @format int32
   */
  failed?: number
  /*
   * @format int32
   */
  inprogress?: number
  /*
   * @format int32
   */
  queued?: number
}

export type CustomInfrastructure = InfraMappingInfrastructureProvider & {
  infraVariables?: NameValuePair[]
  deploymentTypeTemplateVersion?: string
  customDeploymentName?: string
}

export type CustomOrchestrationWorkflow = OrchestrationWorkflow & {
  graph?: Graph
}

export type CustomSourceConfig = {
  script?: string
  path?: string
  delegateSelectors?: string[]
}

export type DelegateMetaInfo = {
  id?: string
  hostName?: string
}

export type DirectKubernetesInfrastructure = InfraMappingInfrastructureProvider & {
  clusterName?: string
  namespace?: string
  releaseName?: string
  expressions?: {
    [key: string]: string
  }
}

export type EcsBlueGreenOrchestrationWorkflow = OrchestrationWorkflow & {
  graph?: Graph
  preDeploymentSteps?: PhaseStep
  rollbackProvisioners?: PhaseStep
  rollbackProvisionersReverse?: PhaseStep
  rollbackWorkflowPhaseIdMap?: {
    [key: string]: WorkflowPhase
  }
  workflowPhases?: WorkflowPhase[]
  postDeploymentSteps?: PhaseStep
  failureStrategies?: FailureStrategy[]
  systemVariables?: Variable[]
  derivedVariables?: Variable[]
  ecsBGType?: string
}

export type EnvSummary = {
  name?: string
  uuid?: string
  environmentType?: 'PROD' | 'NON_PROD' | 'ALL'
}

export type Environment = {
  uuid: string
  appId: string
  createdBy?: EmbeddedUser
  /*
   * @format int64
   */
  createdAt?: number
  lastUpdatedBy?: EmbeddedUser
  /*
   * @format int64
   */
  lastUpdatedAt: number
  name?: string
  description?: string
  configMapYaml?: string
  helmValueYaml?: string
  configMapYamlByServiceTemplateId?: {
    [key: string]: string
  }
  helmValueYamlByServiceTemplateId?: {
    [key: string]: string
  }
  environmentType: 'PROD' | 'NON_PROD' | 'ALL'
  serviceTemplates?: ServiceTemplate[]
  configFiles?: ConfigFile[]
  setup?: Setup
  infrastructureDefinitions?: InfrastructureDefinition[]
  /*
   * @format int32
   */
  infraDefinitionsCount?: number
  /*
   * @uniqueItems true
   */
  keywords?: string[]
  accountId?: string
  sample?: boolean
  tagLinks?: HarnessTagLink[]
}

export type ExecutionArgs = {
  workflowType?: 'PIPELINE' | 'ORCHESTRATION'
  serviceId?: string
  commandName?: string
  executionStrategy?: 'SERIAL' | 'PARALLEL'
  artifacts?: Artifact[]
  artifactIdNames?: {
    [key: string]: string
  }
  orchestrationId?: string
  serviceInstances?: ServiceInstance[]
  serviceInstanceIdNames?: {
    [key: string]: string
  }
  executionCredential?: ExecutionCredential
  errorStrategy?: 'CONTINUE' | 'FAIL' | 'PAUSE' | 'RETRY'
  triggeredFromPipeline?: boolean
  pipelineId?: string
  pipelinePhaseElementId?: string
  /*
   * @format int32
   */
  pipelinePhaseParallelIndex?: number
  stageName?: string
  workflowVariables?: {
    [key: string]: string
  }
  notes?: string
  triggeredBy?: EmbeddedUser
  createdByType?: 'USER' | 'API_KEY' | 'TRIGGER'
  triggeringApiKeyId?: string
  excludeHostsWithSameArtifact?: boolean
  notifyTriggeredUserOnly?: boolean
  artifactVariables?: ArtifactVariable[]
  targetToSpecificHosts?: boolean
  hosts?: string[]
  continueWithDefaultValues?: boolean
  helmCharts?: HelmChart[]
  manifestVariables?: ManifestVariable[]
  helmChartIdNames?: {
    [key: string]: string
  }
  continueRunningPipelinesDuringMigration?: boolean
}

export type ExecutionCredential = {
  executionType?: 'SSH'
}

export type ExecutionDataValue = {
  displayName?: string
  value?: Record<string, any>
}

export type FailureCriteria = {
  /*
   * @format int32
   * @minimum 0
   * @maximum 100
   */
  failureThresholdPercentage?: number
}

export type FailureStrategy = {
  /*
   * @maxItems 2147483647
   * @minItems 1
   */
  failureTypes: (
    | 'EXPIRED'
    | 'DELEGATE_PROVISIONING'
    | 'CONNECTIVITY'
    | 'AUTHENTICATION'
    | 'VERIFICATION_FAILURE'
    | 'APPLICATION_ERROR'
    | 'AUTHORIZATION_ERROR'
    | 'TIMEOUT_ERROR'
    | 'POLICY_EVALUATION_FAILURE'
  )[]
  executionScope?: 'WORKFLOW' | 'WORKFLOW_PHASE'
  repairActionCode?:
    | 'MANUAL_INTERVENTION'
    | 'ROLLBACK_WORKFLOW'
    | 'ROLLBACK_PROVISIONER_AFTER_PHASES'
    | 'ROLLBACK_PHASE'
    | 'IGNORE'
    | 'RETRY'
    | 'END_EXECUTION'
    | 'CONTINUE_WITH_DEFAULTS'
    | 'ABORT_WORKFLOW_EXECUTION'
  /*
   * @format int32
   */
  retryCount?: number
  retryIntervals?: number[]
  repairActionCodeAfterRetry?:
    | 'MANUAL_INTERVENTION'
    | 'ROLLBACK_WORKFLOW'
    | 'ROLLBACK_PROVISIONER_AFTER_PHASES'
    | 'ROLLBACK_PHASE'
    | 'IGNORE'
    | 'RETRY'
    | 'END_EXECUTION'
    | 'CONTINUE_WITH_DEFAULTS'
    | 'ABORT_WORKFLOW_EXECUTION'
  failureCriteria?: FailureCriteria
  specificSteps?: string[]
  /*
   * @format int64
   */
  manualInterventionTimeout?: number
  actionAfterTimeout?:
    | 'ABORT'
    | 'ABORT_ALL'
    | 'PAUSE'
    | 'PAUSE_FOR_INPUTS'
    | 'PAUSE_ALL'
    | 'RESUME'
    | 'RESUME_ALL'
    | 'RETRY'
    | 'IGNORE'
    | 'WAITING_FOR_MANUAL_INTERVENTION'
    | 'MARK_FAILED'
    | 'MARK_SUCCESS'
    | 'ROLLBACK'
    | 'ROLLBACK_PROVISIONER_AFTER_PHASES'
    | 'NEXT_STEP'
    | 'END_EXECUTION'
    | 'ROLLBACK_DONE'
    | 'MARK_EXPIRED'
    | 'CONTINUE_WITH_DEFAULTS'
    | 'CONTINUE_PIPELINE_STAGE'
}

export type FunctionMeta = {
  functionName?: string
  functionArn?: string
  version?: string
}

export type GitFileConfig = {
  connectorId?: string
  commitId?: string
  branch?: string
  filePath?: string
  repoName?: string
  filePathList?: string[]
  serviceSpecFilePath?: string
  taskSpecFilePath?: string
  useBranch?: boolean
  useInlineServiceDefinition?: boolean
  connectorName?: string
}

export type GoogleKubernetesEngine = InfraMappingInfrastructureProvider & {
  clusterName?: string
  namespace?: string
  releaseName?: string
  expressions?: {
    [key: string]: string
  }
}

export type HelmChart = {
  uuid?: string
  version?: string
  applicationManifestId?: string
  appManifestName?: string
  name?: string
  displayName?: string
  accountId?: string
  appId?: string
  serviceId?: string
  /*
   * @format int64
   */
  createdAt?: number
  /*
   * @format int64
   */
  lastUpdatedAt?: number
  appVersion?: string
  description?: string
  metadata?: {
    [key: string]: string
  }
}

export type HelmChartConfig = {
  connectorId?: string
  chartName?: string
  chartVersion?: string
  chartUrl?: string
  connectorName?: string
  basePath?: string
}

export type HelmChartInfo = {
  name?: string
  version?: string
  repoUrl?: string
}

export type HelmCommandFlagConfig = {
  valueMap: {
    [key: string]: string
  }
}

export type HelmExecutionSummary = {
  helmChartInfo?: HelmChartInfo
  releaseName?: string
  containerInfoList?: ContainerInfo[]
}

export type Host = {
  uuid: string
  appId: string
  createdBy?: EmbeddedUser
  /*
   * @format int64
   */
  createdAt?: number
  lastUpdatedBy?: EmbeddedUser
  /*
   * @format int64
   */
  lastUpdatedAt: number
  envId?: string
  serviceTemplateId?: string
  infraMappingId?: string
  infraDefinitionId?: string
  computeProviderId?: string
  hostName?: string
  publicDns?: string
  hostConnAttr?: string
  bastionConnAttr?: string
  winrmConnAttr?: string
  properties?: {
    [key: string]: Record<string, any>
  }
  ec2Instance?: Instance
}

export type InfraMappingInfrastructureProvider = {
  cloudProviderId?: string
}

export type InfrastructureDefinition = {
  uuid?: string
  createdBy?: EmbeddedUser
  /*
   * @format int64
   */
  createdAt?: number
  name?: string
  lastUpdatedBy?: EmbeddedUser
  /*
   * @format int64
   */
  lastUpdatedAt: number
  appId: string
  provisionerId?: string
  cloudProviderType:
    | 'PHYSICAL_DATA_CENTER'
    | 'AWS'
    | 'AZURE'
    | 'GCP'
    | 'KUBERNETES_CLUSTER'
    | 'PCF'
    | 'CUSTOM'
    | 'RANCHER'
  deploymentType:
    | 'SSH'
    | 'AWS_CODEDEPLOY'
    | 'ECS'
    | 'SPOTINST'
    | 'KUBERNETES'
    | 'HELM'
    | 'AWS_LAMBDA'
    | 'AMI'
    | 'WINRM'
    | 'PCF'
    | 'AZURE_VMSS'
    | 'AZURE_WEBAPP'
    | 'CUSTOM'
  infrastructure: InfraMappingInfrastructureProvider
  scopedToServices?: string[]
  envId: string
  sample?: boolean
  accountId?: string
  deploymentTypeTemplateId?: string
  customDeploymentName?: string
}

export type InfrastructureMapping = {
  accountId?: string
  infraMappingType?: string
  computeProviderType?: string
  computeProviderSettingId?: string
  envId?: string
  deploymentType?: string
  uuid: string
  appId: string
  createdBy?: EmbeddedUser
  /*
   * @format int64
   */
  createdAt?: number
  lastUpdatedBy?: EmbeddedUser
  /*
   * @format int64
   */
  lastUpdatedAt: number
  serviceTemplateId?: string
  serviceId?: string
  computeProviderName?: string
  name?: string
  displayName?: string
  autoPopulate?: boolean
  provisionerId?: string
  blueprints?: {
    [key: string]: Record<string, any>
  }
  infrastructureDefinitionId?: string
  sample?: boolean
  customDeploymentTemplateId?: string
  settingType?:
    | 'HOST_CONNECTION_ATTRIBUTES'
    | 'BASTION_HOST_CONNECTION_ATTRIBUTES'
    | 'SMTP'
    | 'SFTP'
    | 'JENKINS'
    | 'BAMBOO'
    | 'STRING'
    | 'SPLUNK'
    | 'ELK'
    | 'LOGZ'
    | 'SUMO'
    | 'DATA_DOG'
    | 'APM_VERIFICATION'
    | 'BUG_SNAG'
    | 'LOG_VERIFICATION'
    | 'APP_DYNAMICS'
    | 'NEW_RELIC'
    | 'DYNA_TRACE'
    | 'INSTANA'
    | 'DATA_DOG_LOG'
    | 'CLOUD_WATCH'
    | 'SCALYR'
    | 'ELB'
    | 'SLACK'
    | 'AWS'
    | 'GCS'
    | 'GCP'
    | 'AZURE'
    | 'PCF'
    | 'RANCHER'
    | 'DIRECT'
    | 'KUBERNETES_CLUSTER'
    | 'DOCKER'
    | 'ECR'
    | 'GCR'
    | 'ACR'
    | 'PHYSICAL_DATA_CENTER'
    | 'KUBERNETES'
    | 'NEXUS'
    | 'ARTIFACTORY'
    | 'SMB'
    | 'AMAZON_S3'
    | 'GIT'
    | 'SSH_SESSION_CONFIG'
    | 'SERVICE_VARIABLE'
    | 'CONFIG_FILE'
    | 'KMS'
    | 'GCP_KMS'
    | 'JIRA'
    | 'SERVICENOW'
    | 'SECRET_TEXT'
    | 'YAML_GIT_SYNC'
    | 'VAULT'
    | 'VAULT_SSH'
    | 'AWS_SECRETS_MANAGER'
    | 'CYBERARK'
    | 'WINRM_CONNECTION_ATTRIBUTES'
    | 'WINRM_SESSION_CONFIG'
    | 'PROMETHEUS'
    | 'INFRASTRUCTURE_MAPPING'
    | 'HTTP_HELM_REPO'
    | 'AMAZON_S3_HELM_REPO'
    | 'GCS_HELM_REPO'
    | 'SPOT_INST'
    | 'AZURE_ARTIFACTS_PAT'
    | 'CUSTOM'
    | 'CE_AWS'
    | 'CE_GCP'
    | 'CE_AZURE'
    | 'AZURE_VAULT'
    | 'KUBERNETES_CLUSTER_NG'
    | 'GIT_NG'
    | 'SSO_SAML'
    | 'GCP_SECRETS_MANAGER'
    | 'TRIGGER'
  hostConnectionAttrs?: string
}

export type InstanceExecutionHistory = {
  /*
   * @format int32
   */
  intanceCount?: number
  stateName?: string
  errorCode?:
    | 'DEFAULT_ERROR_CODE'
    | 'INVALID_ARGUMENT'
    | 'INVALID_EMAIL'
    | 'DOMAIN_NOT_ALLOWED_TO_REGISTER'
    | 'COMMNITY_EDITION_NOT_FOUND'
    | 'DEPLOY_MODE_IS_NOT_ON_PREM'
    | 'USER_ALREADY_REGISTERED'
    | 'USER_INVITATION_DOES_NOT_EXIST'
    | 'USER_DOES_NOT_EXIST'
    | 'USER_INVITE_OPERATION_FAILED'
    | 'USER_DISABLED'
    | 'ACCOUNT_DOES_NOT_EXIST'
    | 'INACTIVE_ACCOUNT'
    | 'ACCOUNT_MIGRATED'
    | 'USER_DOMAIN_NOT_ALLOWED'
    | 'MAX_FAILED_ATTEMPT_COUNT_EXCEEDED'
    | 'RESOURCE_NOT_FOUND'
    | 'INVALID_FORMAT'
    | 'ROLE_DOES_NOT_EXIST'
    | 'EMAIL_NOT_VERIFIED'
    | 'EMAIL_VERIFICATION_TOKEN_NOT_FOUND'
    | 'INVALID_TOKEN'
    | 'REVOKED_TOKEN'
    | 'INVALID_CAPTCHA_TOKEN'
    | 'NOT_ACCOUNT_MGR_NOR_HAS_ALL_APP_ACCESS'
    | 'EXPIRED_TOKEN'
    | 'TOKEN_ALREADY_REFRESHED_ONCE'
    | 'ACCESS_DENIED'
    | 'NG_ACCESS_DENIED'
    | 'INVALID_CREDENTIAL'
    | 'INVALID_CREDENTIALS_THIRD_PARTY'
    | 'INVALID_KEY'
    | 'INVALID_CONNECTOR_TYPE'
    | 'INVALID_KEYPATH'
    | 'INVALID_VARIABLE'
    | 'UNKNOWN_HOST'
    | 'UNREACHABLE_HOST'
    | 'INVALID_PORT'
    | 'SSH_SESSION_TIMEOUT'
    | 'SOCKET_CONNECTION_ERROR'
    | 'CONNECTION_ERROR'
    | 'SOCKET_CONNECTION_TIMEOUT'
    | 'CONNECTION_TIMEOUT'
    | 'SSH_CONNECTION_ERROR'
    | 'USER_GROUP_ERROR'
    | 'INVALID_EXECUTION_ID'
    | 'ERROR_IN_GETTING_CHANNEL_STREAMS'
    | 'UNEXPECTED'
    | 'UNKNOWN_ERROR'
    | 'UNKNOWN_EXECUTOR_TYPE_ERROR'
    | 'DUPLICATE_STATE_NAMES'
    | 'TRANSITION_NOT_LINKED'
    | 'TRANSITION_TO_INCORRECT_STATE'
    | 'TRANSITION_TYPE_NULL'
    | 'STATES_WITH_DUP_TRANSITIONS'
    | 'BARRIERS_NOT_RUNNING_CONCURRENTLY'
    | 'NON_FORK_STATES'
    | 'NON_REPEAT_STATES'
    | 'INITIAL_STATE_NOT_DEFINED'
    | 'FILE_INTEGRITY_CHECK_FAILED'
    | 'INVALID_URL'
    | 'FILE_DOWNLOAD_FAILED'
    | 'PLATFORM_SOFTWARE_DELETE_ERROR'
    | 'INVALID_CSV_FILE'
    | 'INVALID_REQUEST'
    | 'SCHEMA_VALIDATION_FAILED'
    | 'FILTER_CREATION_ERROR'
    | 'INVALID_YAML_ERROR'
    | 'PLAN_CREATION_ERROR'
    | 'INVALID_INFRA_STATE'
    | 'PIPELINE_ALREADY_TRIGGERED'
    | 'NON_EXISTING_PIPELINE'
    | 'DUPLICATE_COMMAND_NAMES'
    | 'INVALID_PIPELINE'
    | 'COMMAND_DOES_NOT_EXIST'
    | 'DUPLICATE_ARTIFACTSTREAM_NAMES'
    | 'DUPLICATE_HOST_NAMES'
    | 'STATE_NOT_FOR_TYPE'
    | 'STATE_MACHINE_ISSUE'
    | 'STATE_DISCONTINUE_FAILED'
    | 'STATE_PAUSE_FAILED'
    | 'PAUSE_ALL_ALREADY'
    | 'RESUME_ALL_ALREADY'
    | 'ROLLBACK_ALREADY'
    | 'ABORT_ALL_ALREADY'
    | 'EXPIRE_ALL_ALREADY'
    | 'RETRY_FAILED'
    | 'UNKNOWN_ARTIFACT_TYPE'
    | 'UNKNOWN_STAGE_ELEMENT_WRAPPER_TYPE'
    | 'INIT_TIMEOUT'
    | 'LICENSE_EXPIRED'
    | 'NOT_LICENSED'
    | 'REQUEST_TIMEOUT'
    | 'WORKFLOW_ALREADY_TRIGGERED'
    | 'JENKINS_ERROR'
    | 'INVALID_ARTIFACT_SOURCE'
    | 'INVALID_ARTIFACT_SERVER'
    | 'INVALID_CLOUD_PROVIDER'
    | 'UPDATE_NOT_ALLOWED'
    | 'DELETE_NOT_ALLOWED'
    | 'APPDYNAMICS_CONFIGURATION_ERROR'
    | 'APM_CONFIGURATION_ERROR'
    | 'SPLUNK_CONFIGURATION_ERROR'
    | 'ELK_CONFIGURATION_ERROR'
    | 'LOGZ_CONFIGURATION_ERROR'
    | 'SUMO_CONFIGURATION_ERROR'
    | 'INSTANA_CONFIGURATION_ERROR'
    | 'APPDYNAMICS_ERROR'
    | 'STACKDRIVER_ERROR'
    | 'STACKDRIVER_CONFIGURATION_ERROR'
    | 'NEWRELIC_CONFIGURATION_ERROR'
    | 'NEWRELIC_ERROR'
    | 'DYNA_TRACE_CONFIGURATION_ERROR'
    | 'DYNA_TRACE_ERROR'
    | 'CLOUDWATCH_ERROR'
    | 'CLOUDWATCH_CONFIGURATION_ERROR'
    | 'PROMETHEUS_CONFIGURATION_ERROR'
    | 'DATA_DOG_CONFIGURATION_ERROR'
    | 'SERVICE_GUARD_CONFIGURATION_ERROR'
    | 'ENCRYPTION_NOT_CONFIGURED'
    | 'UNAVAILABLE_DELEGATES'
    | 'WORKFLOW_EXECUTION_IN_PROGRESS'
    | 'PIPELINE_EXECUTION_IN_PROGRESS'
    | 'AWS_ACCESS_DENIED'
    | 'AWS_CLUSTER_NOT_FOUND'
    | 'AWS_SERVICE_NOT_FOUND'
    | 'IMAGE_NOT_FOUND'
    | 'ILLEGAL_ARGUMENT'
    | 'IMAGE_TAG_NOT_FOUND'
    | 'DELEGATE_NOT_AVAILABLE'
    | 'INVALID_YAML_PAYLOAD'
    | 'AUTHENTICATION_ERROR'
    | 'AUTHORIZATION_ERROR'
    | 'UNRECOGNIZED_YAML_FIELDS'
    | 'COULD_NOT_MAP_BEFORE_YAML'
    | 'MISSING_BEFORE_YAML'
    | 'MISSING_YAML'
    | 'NON_EMPTY_DELETIONS'
    | 'GENERAL_YAML_ERROR'
    | 'GENERAL_YAML_INFO'
    | 'YAML_GIT_SYNC_ERROR'
    | 'GIT_CONNECTION_ERROR'
    | 'GIT_ERROR'
    | 'ARTIFACT_SERVER_ERROR'
    | 'ENCRYPT_DECRYPT_ERROR'
    | 'SECRET_MANAGEMENT_ERROR'
    | 'SECRET_NOT_FOUND'
    | 'KMS_OPERATION_ERROR'
    | 'GCP_KMS_OPERATION_ERROR'
    | 'VAULT_OPERATION_ERROR'
    | 'AWS_SECRETS_MANAGER_OPERATION_ERROR'
    | 'AZURE_KEY_VAULT_OPERATION_ERROR'
    | 'CYBERARK_OPERATION_ERROR'
    | 'UNSUPPORTED_OPERATION_EXCEPTION'
    | 'FEATURE_UNAVAILABLE'
    | 'GENERAL_ERROR'
    | 'BASELINE_CONFIGURATION_ERROR'
    | 'SAML_IDP_CONFIGURATION_NOT_AVAILABLE'
    | 'INVALID_AUTHENTICATION_MECHANISM'
    | 'INVALID_SAML_CONFIGURATION'
    | 'INVALID_OAUTH_CONFIGURATION'
    | 'INVALID_LDAP_CONFIGURATION'
    | 'USER_GROUP_SYNC_FAILURE'
    | 'USER_GROUP_ALREADY_EXIST'
    | 'INVALID_TWO_FACTOR_AUTHENTICATION_CONFIGURATION'
    | 'EXPLANATION'
    | 'HINT'
    | 'NOT_WHITELISTED_IP'
    | 'INVALID_TOTP_TOKEN'
    | 'EMAIL_FAILED'
    | 'SSL_HANDSHAKE_FAILED'
    | 'NO_APPS_ASSIGNED'
    | 'INVALID_INFRA_CONFIGURATION'
    | 'TEMPLATES_LINKED'
    | 'USER_HAS_NO_PERMISSIONS'
    | 'USER_NOT_AUTHORIZED'
    | 'USER_ALREADY_PRESENT'
    | 'INVALID_USAGE_RESTRICTION'
    | 'USAGE_RESTRICTION_ERROR'
    | 'STATE_EXECUTION_INSTANCE_NOT_FOUND'
    | 'DELEGATE_TASK_RETRY'
    | 'KUBERNETES_API_TASK_EXCEPTION'
    | 'KUBERNETES_TASK_EXCEPTION'
    | 'KUBERNETES_YAML_ERROR'
    | 'SAVE_FILE_INTO_GCP_STORAGE_FAILED'
    | 'READ_FILE_FROM_GCP_STORAGE_FAILED'
    | 'FILE_NOT_FOUND_ERROR'
    | 'USAGE_LIMITS_EXCEEDED'
    | 'EVENT_PUBLISH_FAILED'
    | 'JIRA_ERROR'
    | 'EXPRESSION_EVALUATION_FAILED'
    | 'KUBERNETES_VALUES_ERROR'
    | 'KUBERNETES_CLUSTER_ERROR'
    | 'INCORRECT_SIGN_IN_MECHANISM'
    | 'OAUTH_LOGIN_FAILED'
    | 'INVALID_TERRAFORM_TARGETS_REQUEST'
    | 'TERRAFORM_EXECUTION_ERROR'
    | 'FILE_READ_FAILED'
    | 'FILE_SIZE_EXCEEDS_LIMIT'
    | 'CLUSTER_NOT_FOUND'
    | 'MARKETPLACE_TOKEN_NOT_FOUND'
    | 'INVALID_MARKETPLACE_TOKEN'
    | 'INVALID_TICKETING_SERVER'
    | 'SERVICENOW_ERROR'
    | 'PASSWORD_EXPIRED'
    | 'USER_LOCKED'
    | 'PASSWORD_STRENGTH_CHECK_FAILED'
    | 'ACCOUNT_DISABLED'
    | 'INVALID_ACCOUNT_PERMISSION'
    | 'PAGERDUTY_ERROR'
    | 'HEALTH_ERROR'
    | 'SAML_TEST_SUCCESS_MECHANISM_NOT_ENABLED'
    | 'DOMAIN_WHITELIST_FILTER_CHECK_FAILED'
    | 'INVALID_DASHBOARD_UPDATE_REQUEST'
    | 'DUPLICATE_FIELD'
    | 'INVALID_AZURE_VAULT_CONFIGURATION'
    | 'USER_NOT_AUTHORIZED_DUE_TO_USAGE_RESTRICTIONS'
    | 'INVALID_ROLLBACK'
    | 'DATA_COLLECTION_ERROR'
    | 'SUMO_DATA_COLLECTION_ERROR'
    | 'DEPLOYMENT_GOVERNANCE_ERROR'
    | 'BATCH_PROCESSING_ERROR'
    | 'GRAPHQL_ERROR'
    | 'FILE_CREATE_ERROR'
    | 'ILLEGAL_STATE'
    | 'GIT_DIFF_COMMIT_NOT_IN_ORDER'
    | 'FAILED_TO_ACQUIRE_PERSISTENT_LOCK'
    | 'FAILED_TO_ACQUIRE_NON_PERSISTENT_LOCK'
    | 'POD_NOT_FOUND_ERROR'
    | 'COMMAND_EXECUTION_ERROR'
    | 'REGISTRY_EXCEPTION'
    | 'ENGINE_INTERRUPT_PROCESSING_EXCEPTION'
    | 'ENGINE_IO_EXCEPTION'
    | 'ENGINE_OUTCOME_EXCEPTION'
    | 'ENGINE_SWEEPING_OUTPUT_EXCEPTION'
    | 'CACHE_NOT_FOUND_EXCEPTION'
    | 'ENGINE_ENTITY_UPDATE_EXCEPTION'
    | 'SHELL_EXECUTION_EXCEPTION'
    | 'TEMPLATE_NOT_FOUND'
    | 'AZURE_SERVICE_EXCEPTION'
    | 'AZURE_CLIENT_EXCEPTION'
    | 'GIT_UNSEEN_REMOTE_HEAD_COMMIT'
    | 'TIMEOUT_ENGINE_EXCEPTION'
    | 'NO_AVAILABLE_DELEGATES'
    | 'NO_INSTALLED_DELEGATES'
    | 'DUPLICATE_DELEGATE_EXCEPTION'
    | 'GCP_MARKETPLACE_EXCEPTION'
    | 'MISSING_DEFAULT_GOOGLE_CREDENTIALS'
    | 'INCORRECT_DEFAULT_GOOGLE_CREDENTIALS'
    | 'OPTIMISTIC_LOCKING_EXCEPTION'
    | 'NG_PIPELINE_EXECUTION_EXCEPTION'
    | 'NG_PIPELINE_CREATE_EXCEPTION'
    | 'RESOURCE_NOT_FOUND_EXCEPTION'
    | 'PMS_INITIALIZE_SDK_EXCEPTION'
    | 'UNEXPECTED_SNIPPET_EXCEPTION'
    | 'UNEXPECTED_SCHEMA_EXCEPTION'
    | 'CONNECTOR_VALIDATION_EXCEPTION'
    | 'TIMESCALE_NOT_AVAILABLE'
    | 'MIGRATION_EXCEPTION'
    | 'REQUEST_PROCESSING_INTERRUPTED'
    | 'SECRET_MANAGER_ID_NOT_FOUND'
    | 'GCP_SECRET_MANAGER_OPERATION_ERROR'
    | 'GCP_SECRET_OPERATION_ERROR'
    | 'GIT_OPERATION_ERROR'
    | 'TASK_FAILURE_ERROR'
    | 'INSTANCE_STATS_PROCESS_ERROR'
    | 'INSTANCE_STATS_MIGRATION_ERROR'
    | 'DEPLOYMENT_MIGRATION_ERROR'
    | 'CG_LICENSE_USAGE_ERROR'
    | 'INSTANCE_STATS_AGGREGATION_ERROR'
    | 'UNRESOLVED_EXPRESSIONS_ERROR'
    | 'KRYO_HANDLER_NOT_FOUND_ERROR'
    | 'DELEGATE_ERROR_HANDLER_EXCEPTION'
    | 'UNEXPECTED_TYPE_ERROR'
    | 'EXCEPTION_HANDLER_NOT_FOUND'
    | 'CONNECTOR_NOT_FOUND_EXCEPTION'
    | 'GCP_SERVER_ERROR'
    | 'HTTP_RESPONSE_EXCEPTION'
    | 'SCM_NOT_FOUND_ERROR'
    | 'SCM_CONFLICT_ERROR'
    | 'SCM_UNPROCESSABLE_ENTITY'
    | 'PROCESS_EXECUTION_EXCEPTION'
    | 'SCM_UNAUTHORIZED'
    | 'DATA'
    | 'CONTEXT'
    | 'PR_CREATION_ERROR'
    | 'URL_NOT_REACHABLE'
    | 'URL_NOT_PROVIDED'
    | 'ENGINE_EXPRESSION_EVALUATION_ERROR'
    | 'ENGINE_FUNCTOR_ERROR'
    | 'JIRA_CLIENT_ERROR'
    | 'SCM_NOT_MODIFIED'
    | 'APPROVAL_STEP_NG_ERROR'
    | 'BUCKET_SERVER_ERROR'
    | 'GIT_SYNC_ERROR'
    | 'TEMPLATE_EXCEPTION'
    | 'ENTITY_REFERENCE_EXCEPTION'
    | 'INVALID_INPUT_SET'
    | 'INVALID_OVERLAY_INPUT_SET'
    | 'RESOURCE_ALREADY_EXISTS'
    | 'INVALID_JSON_PAYLOAD'
    | 'POLICY_EVALUATION_FAILURE'
  executionInterruptType?:
    | 'ABORT'
    | 'ABORT_ALL'
    | 'PAUSE'
    | 'PAUSE_FOR_INPUTS'
    | 'PAUSE_ALL'
    | 'RESUME'
    | 'RESUME_ALL'
    | 'RETRY'
    | 'IGNORE'
    | 'WAITING_FOR_MANUAL_INTERVENTION'
    | 'MARK_FAILED'
    | 'MARK_SUCCESS'
    | 'ROLLBACK'
    | 'ROLLBACK_PROVISIONER_AFTER_PHASES'
    | 'NEXT_STEP'
    | 'END_EXECUTION'
    | 'ROLLBACK_DONE'
    | 'MARK_EXPIRED'
    | 'CONTINUE_WITH_DEFAULTS'
    | 'CONTINUE_PIPELINE_STAGE'
  status?:
    | 'ABORTED'
    | 'DISCONTINUING'
    | 'ERROR'
    | 'FAILED'
    | 'NEW'
    | 'PAUSED'
    | 'PAUSING'
    | 'QUEUED'
    | 'RESUMED'
    | 'RUNNING'
    | 'SCHEDULED'
    | 'STARTING'
    | 'SUCCESS'
    | 'WAITING'
    | 'SKIPPED'
    | 'ABORTING'
    | 'REJECTED'
    | 'EXPIRED'
    | 'PREPARING'
  message?: string
}

export type KustomizeConfig = {
  pluginRootDir?: string
  kustomizeDirPath?: string
}

export type LastDeployedArtifactInformation = {
  artifact?: Artifact
  /*
   * @format int64
   */
  executionStartTime?: number
  envId?: string
  executionId?: string
  executionEntityId?: string
  executionEntityType?: 'PIPELINE' | 'ORCHESTRATION'
  executionEntityName?: string
}

export type LastDeployedHelmChartInformation = {
  helmchart?: HelmChart
  /*
   * @format int64
   */
  executionStartTime?: number
  envId?: string
  executionId?: string
  executionEntityId?: string
  executionEntityType?: 'PIPELINE' | 'ORCHESTRATION'
  executionEntityName?: string
}

export type ManifestFile = {
  fileName?: string
  fileContent?: string
  applicationManifestId?: string
  accountId?: string
  uuid: string
  appId: string
  createdBy?: EmbeddedUser
  /*
   * @format int64
   */
  createdAt?: number
  lastUpdatedBy?: EmbeddedUser
  /*
   * @format int64
   */
  lastUpdatedAt: number
}

export type ManifestSummary = {
  uuid?: string
  versionNo?: string
  name?: string
  source?: string
  appManifestName?: string
  appManifestId?: string
}

export type ManifestVariable = {
  workflowIds?: string[]
  serviceId?: string
  serviceName?: string
  appManifestId?: string
  inputType?: 'ID' | 'VERSION'
  applicationManifestSummary?: ApplicationManifestSummary[]
  lastDeployedHelmChartInfo?: LastDeployedHelmChartInformation
  name?: string
  description?: string
  mandatory?: boolean
  runtimeInput?: boolean
  value?: string
  fixed?: boolean
  allowedValues?: string
  allowedList?: string[]
  allowMultipleValues?: boolean
  artifactStreamSummaries?: ArtifactStreamSummary[]
  metadata?: {
    [key: string]: Record<string, any>
  }
  type?: 'TEXT' | 'NUMBER' | 'EMAIL' | 'ENTITY' | 'ARTIFACT' | 'MANIFEST'
}

export type MultiServiceOrchestrationWorkflow = OrchestrationWorkflow & {
  graph?: Graph
  preDeploymentSteps?: PhaseStep
  rollbackProvisioners?: PhaseStep
  rollbackProvisionersReverse?: PhaseStep
  rollbackWorkflowPhaseIdMap?: {
    [key: string]: WorkflowPhase
  }
  workflowPhases?: WorkflowPhase[]
  postDeploymentSteps?: PhaseStep
  failureStrategies?: FailureStrategy[]
  systemVariables?: Variable[]
  derivedVariables?: Variable[]
}

export type Notification = {
  environmentId?: string
  entityId?: string
  entityType?:
    | 'SERVICE'
    | 'PROVISIONER'
    | 'ENVIRONMENT'
    | 'HOST'
    | 'RELEASE'
    | 'ARTIFACT'
    | 'SSH_USER'
    | 'SSH_PASSWORD'
    | 'SSH_APP_ACCOUNT'
    | 'SSH_KEY_PASSPHRASE'
    | 'SSH_APP_ACCOUNT_PASSOWRD'
    | 'SIMPLE_DEPLOYMENT'
    | 'ORCHESTRATED_DEPLOYMENT'
    | 'PIPELINE'
    | 'WORKFLOW'
    | 'DEPLOYMENT'
    | 'INSTANCE'
    | 'APPLICATION'
    | 'COMMAND'
    | 'CONFIG'
    | 'SERVICE_TEMPLATE'
    | 'INFRASTRUCTURE_MAPPING'
    | 'INFRASTRUCTURE_DEFINITION'
    | 'USER'
    | 'ARTIFACT_STREAM'
    | 'APPDYNAMICS_CONFIGID'
    | 'APPDYNAMICS_APPID'
    | 'APPDYNAMICS_TIERID'
    | 'ELK_CONFIGID'
    | 'ELK_INDICES'
    | 'NEWRELIC_CONFIGID'
    | 'NEWRELIC_APPID'
    | 'SS_SSH_CONNECTION_ATTRIBUTE'
    | 'SS_WINRM_CONNECTION_ATTRIBUTE'
    | 'SUMOLOGIC_CONFIGID'
    | 'SPLUNK_CONFIGID'
    | 'NEWRELIC_MARKER_CONFIGID'
    | 'NEWRELIC_MARKER_APPID'
    | 'API_KEY'
    | 'ACCOUNT'
    | 'APPLICATION_MANIFEST'
    | 'USER_GROUP'
    | 'WHITELISTED_IP'
    | 'CF_AWS_CONFIG_ID'
    | 'VERIFICATION_CONFIGURATION'
    | 'HELM_GIT_CONFIG_ID'
    | 'NOTIFICATION_GROUP'
    | 'HELM_CHART_SPECIFICATION'
    | 'PCF_SERVICE_SPECIFICATION'
    | 'LAMBDA_SPECIFICATION'
    | 'USER_DATA_SPECIFICATION'
    | 'ECS_CONTAINER_SPECIFICATION'
    | 'ECS_SERVICE_SPECIFICATION'
    | 'K8S_CONTAINER_SPECIFICATION'
    | 'CONFIG_FILE'
    | 'SERVICE_COMMAND'
    | 'MANIFEST_FILE'
    | 'SERVICE_VARIABLE'
    | 'TRIGGER'
    | 'ROLE'
    | 'TEMPLATE'
    | 'TEMPLATE_FOLDER'
    | 'SETTING_ATTRIBUTE'
    | 'ENCRYPTED_RECORDS'
    | 'CV_CONFIGURATION'
    | 'TAG'
    | 'CUSTOM_DASHBOARD'
    | 'PIPELINE_GOVERNANCE_STANDARD'
    | 'WORKFLOW_EXECUTION'
    | 'SERVERLESS_INSTANCE'
    | 'USER_INVITE'
    | 'LOGIN_SETTINGS'
    | 'SSO_SETTINGS'
    | 'DELEGATE'
    | 'DELEGATE_SCOPE'
    | 'DELEGATE_PROFILE'
    | 'EXPORT_EXECUTIONS_REQUEST'
    | 'GCP_CONFIG'
    | 'GIT_CONFIG'
    | 'JENKINS_SERVER'
    | 'SECRETS_MANAGER'
    | 'HELM_CHART'
    | 'SECRET'
    | 'CONNECTOR'
    | 'CLOUD_PROVIDER'
    | 'GOVERNANCE_FREEZE_CONFIG'
    | 'GOVERNANCE_CONFIG'
    | 'EVENT_RULE'
  accountId?: string
  eventType?:
    | 'USER_INVITED_FROM_EXISTING_ACCOUNT'
    | 'COMPLETE_USER_REGISTRATION'
    | 'FIRST_DELEGATE_REGISTERED'
    | 'FIRST_WORKFLOW_CREATED'
    | 'FIRST_DEPLOYMENT_EXECUTED'
    | 'FIRST_VERIFIED_DEPLOYMENT'
    | 'FIRST_ROLLED_BACK_DEPLOYMENT'
    | 'SETUP_CV_24X7'
    | 'SETUP_2FA'
    | 'SETUP_SSO'
    | 'SETUP_IP_WHITELISTING'
    | 'SETUP_RBAC'
    | 'TRIAL_TO_PAID'
    | 'TRIAL_TO_COMMUNITY'
    | 'COMMUNITY_TO_PAID'
    | 'COMMUNITY_TO_ESSENTIALS'
    | 'ESSENTIALS_TO_PAID'
    | 'PAID_TO_ESSENTIALS'
    | 'TRIAL_TO_ESSENTIALS'
    | 'CV_META_DATA'
    | 'OPEN_ALERT'
    | 'CLOSE_ALERT'
    | 'NEW_TRIAL_SIGNUP'
    | 'LICENSE_UPDATE'
    | 'DEPLOYMENT_VERIFIED'
    | 'JOIN_ACCOUNT_REQUEST'
    | 'SERVICE_GUARD_SETUP'
    | 'DEPLOYMENT_EVENT'
    | 'INSTANCE_EVENT'
    | 'CUSTOM'
    | 'TECH_STACK'
    | 'ACCOUNT_ENTITY_CHANGE'
    | 'BLACKOUT_WINDOW_UPDATED'
    | 'SECRET_MANAGER_TYPE'
    | 'USER_INVITE_ACCEPTED_FOR_TRIAL_ACCOUNT'
  notificationType: 'APPROVAL' | 'CHANGE' | 'FAILURE' | 'INFORMATION'
  complete: boolean
  actionable: boolean
  notificationTemplateId?: string
  notificationTemplateVariables?: {
    [key: string]: string
  }
  uuid: string
  appId: string
  createdBy?: EmbeddedUser
  /*
   * @format int64
   */
  createdAt?: number
  lastUpdatedBy?: EmbeddedUser
  /*
   * @format int64
   */
  lastUpdatedAt: number
}

export type NotificationGroup = {
  uuid: string
  appId: string
  createdBy?: EmbeddedUser
  /*
   * @format int64
   */
  createdAt?: number
  lastUpdatedBy?: EmbeddedUser
  /*
   * @format int64
   */
  lastUpdatedAt: number
  accountId?: string
  name: string
  editable?: boolean
  roles?: Role[]
  defaultNotificationGroupForAccount?: boolean
  addressesByChannelType: {
    [key: string]: string[]
  }
}

export type NotificationRule = {
  uuid?: string
  conditions?: (
    | 'ABORTED'
    | 'DISCONTINUING'
    | 'ERROR'
    | 'FAILED'
    | 'NEW'
    | 'PAUSED'
    | 'PAUSING'
    | 'QUEUED'
    | 'RESUMED'
    | 'RUNNING'
    | 'SCHEDULED'
    | 'STARTING'
    | 'SUCCESS'
    | 'WAITING'
    | 'SKIPPED'
    | 'ABORTING'
    | 'REJECTED'
    | 'EXPIRED'
    | 'PREPARING'
  )[]
  executionScope?: 'WORKFLOW' | 'WORKFLOW_PHASE'
  notificationGroupAsExpression?: boolean
  userGroupAsExpression?: boolean
  /*
   * @maxItems 2147483647
   * @minItems 1
   */
  notificationGroups: NotificationGroup[]
  userGroupIds: string[]
  userGroupExpression: string
  batchNotifications?: boolean
  active?: boolean
}

export type OrchestrationWorkflow = {
  concurrencyStrategy?: ConcurrencyStrategy
  orchestrationWorkflowType?: 'BUILD' | 'BASIC' | 'CANARY' | 'MULTI_SERVICE' | 'BLUE_GREEN' | 'ROLLING' | 'CUSTOM'
  valid?: boolean
  validationMessage?: string
  linkedTemplateUuids?: string[]
  serviceIds?: string[]
  /*
   * @uniqueItems true
   */
  requiredEntityTypes?: (
    | 'SERVICE'
    | 'PROVISIONER'
    | 'ENVIRONMENT'
    | 'HOST'
    | 'RELEASE'
    | 'ARTIFACT'
    | 'SSH_USER'
    | 'SSH_PASSWORD'
    | 'SSH_APP_ACCOUNT'
    | 'SSH_KEY_PASSPHRASE'
    | 'SSH_APP_ACCOUNT_PASSOWRD'
    | 'SIMPLE_DEPLOYMENT'
    | 'ORCHESTRATED_DEPLOYMENT'
    | 'PIPELINE'
    | 'WORKFLOW'
    | 'DEPLOYMENT'
    | 'INSTANCE'
    | 'APPLICATION'
    | 'COMMAND'
    | 'CONFIG'
    | 'SERVICE_TEMPLATE'
    | 'INFRASTRUCTURE_MAPPING'
    | 'INFRASTRUCTURE_DEFINITION'
    | 'USER'
    | 'ARTIFACT_STREAM'
    | 'APPDYNAMICS_CONFIGID'
    | 'APPDYNAMICS_APPID'
    | 'APPDYNAMICS_TIERID'
    | 'ELK_CONFIGID'
    | 'ELK_INDICES'
    | 'NEWRELIC_CONFIGID'
    | 'NEWRELIC_APPID'
    | 'SS_SSH_CONNECTION_ATTRIBUTE'
    | 'SS_WINRM_CONNECTION_ATTRIBUTE'
    | 'SUMOLOGIC_CONFIGID'
    | 'SPLUNK_CONFIGID'
    | 'NEWRELIC_MARKER_CONFIGID'
    | 'NEWRELIC_MARKER_APPID'
    | 'API_KEY'
    | 'ACCOUNT'
    | 'APPLICATION_MANIFEST'
    | 'USER_GROUP'
    | 'WHITELISTED_IP'
    | 'CF_AWS_CONFIG_ID'
    | 'VERIFICATION_CONFIGURATION'
    | 'HELM_GIT_CONFIG_ID'
    | 'NOTIFICATION_GROUP'
    | 'HELM_CHART_SPECIFICATION'
    | 'PCF_SERVICE_SPECIFICATION'
    | 'LAMBDA_SPECIFICATION'
    | 'USER_DATA_SPECIFICATION'
    | 'ECS_CONTAINER_SPECIFICATION'
    | 'ECS_SERVICE_SPECIFICATION'
    | 'K8S_CONTAINER_SPECIFICATION'
    | 'CONFIG_FILE'
    | 'SERVICE_COMMAND'
    | 'MANIFEST_FILE'
    | 'SERVICE_VARIABLE'
    | 'TRIGGER'
    | 'ROLE'
    | 'TEMPLATE'
    | 'TEMPLATE_FOLDER'
    | 'SETTING_ATTRIBUTE'
    | 'ENCRYPTED_RECORDS'
    | 'CV_CONFIGURATION'
    | 'TAG'
    | 'CUSTOM_DASHBOARD'
    | 'PIPELINE_GOVERNANCE_STANDARD'
    | 'WORKFLOW_EXECUTION'
    | 'SERVERLESS_INSTANCE'
    | 'USER_INVITE'
    | 'LOGIN_SETTINGS'
    | 'SSO_SETTINGS'
    | 'DELEGATE'
    | 'DELEGATE_SCOPE'
    | 'DELEGATE_PROFILE'
    | 'EXPORT_EXECUTIONS_REQUEST'
    | 'GCP_CONFIG'
    | 'GIT_CONFIG'
    | 'JENKINS_SERVER'
    | 'SECRETS_MANAGER'
    | 'HELM_CHART'
    | 'SECRET'
    | 'CONNECTOR'
    | 'CLOUD_PROVIDER'
    | 'GOVERNANCE_FREEZE_CONFIG'
    | 'GOVERNANCE_CONFIG'
    | 'EVENT_RULE'
  )[]
  userVariables?: Variable[]
  infraMappingIds?: string[]
  infraDefinitionIds?: string[]
  notificationRules?: NotificationRule[]
}

export type ParallelInfo = {
  /*
   * @format int32
   */
  groupIndex?: number
}

export type PcfInfraStructure = InfraMappingInfrastructureProvider & {
  organization?: string
  space?: string
  tempRouteMap?: string[]
  routeMaps?: string[]
}

export type Permission = {
  resourceType?:
    | 'APPLICATION'
    | 'SERVICE'
    | 'CONFIGURATION'
    | 'CONFIGURATION_OVERRIDE'
    | 'WORKFLOW'
    | 'ENVIRONMENT'
    | 'ROLE'
    | 'DEPLOYMENT'
    | 'ARTIFACT'
    | 'CLOUD'
    | 'USER'
    | 'CD'
    | 'PIPELINE'
    | 'SETTING'
    | 'LIMIT'
    | 'APP_STACK'
    | 'NOTIFICATION_GROUP'
    | 'DELEGATE'
    | 'DELEGATE_SCOPE'
    | 'WHITE_LIST'
    | 'SSO'
    | 'API_KEY'
    | 'PROVISIONER'
    | 'PREFERENCE'
    | 'TEMPLATE'
    | 'CUSTOM_DASHBOARD'
    | 'BUDGET'
    | 'GCP_RESOURCE'
    | 'CLUSTERRECORD'
    | 'K8S_LABEL'
    | 'K8S_EVENT_YAML_DIFF'
    | 'K8S_RECOMMENDATION'
    | 'CE_ANOMALIES'
    | 'CE_CLUSTER'
    | 'CE_CONNECTOR'
    | 'CE_BATCH'
    | 'LINKED_ACCOUNT'
  action?:
    | 'ALL'
    | 'CREATE'
    | 'READ'
    | 'UPDATE'
    | 'DELETE'
    | 'EXECUTE'
    | 'EXECUTE_WORKFLOW'
    | 'EXECUTE_PIPELINE'
    | 'EXECUTE_WORKFLOW_ROLLBACK'
    | 'DEFAULT'
  envId?: string
  appId?: string
  accountId?: string
  environmentType?: 'PROD' | 'NON_PROD' | 'ALL'
  permissionScope?:
    | 'ACCOUNT'
    | 'LOGGED_IN'
    | 'DELEGATE'
    | 'NONE'
    | 'APP'
    | 'ALL_APP_ENTITIES'
    | 'ENV'
    | 'SERVICE'
    | 'WORKFLOW'
    | 'PIPELINE'
    | 'DEPLOYMENT'
    | 'APPLICATION_CREATE_DELETE'
    | 'USER_PERMISSION_MANAGEMENT'
    | 'ACCOUNT_MANAGEMENT'
    | 'PROVISIONER'
    | 'TEMPLATE_MANAGEMENT'
    | 'APP_TEMPLATE'
    | 'USER_PERMISSION_READ'
    | 'AUDIT_VIEWER'
    | 'TAG_MANAGEMENT'
    | 'CE_ADMIN'
    | 'CE_VIEWER'
    | 'MANAGE_CLOUD_PROVIDERS'
    | 'MANAGE_CONNECTORS'
    | 'MANAGE_APPLICATIONS'
    | 'MANAGE_APPLICATION_STACKS'
    | 'MANAGE_DELEGATES'
    | 'MANAGE_ALERT_NOTIFICATION_RULES'
    | 'MANAGE_DELEGATE_PROFILES'
    | 'MANAGE_CONFIG_AS_CODE'
    | 'MANAGE_SECRETS'
    | 'MANAGE_SECRET_MANAGERS'
    | 'MANAGE_SSH_AND_WINRM'
    | 'MANAGE_AUTHENTICATION_SETTINGS'
    | 'MANAGE_USER_AND_USER_GROUPS_AND_API_KEYS'
    | 'VIEW_USER_AND_USER_GROUPS_AND_API_KEYS'
    | 'MANAGE_IP_WHITELIST'
    | 'MANAGE_IP_WHITELISTING'
    | 'MANAGE_DEPLOYMENT_FREEZES'
    | 'ALLOW_DEPLOYMENTS_DURING_FREEZE'
    | 'MANAGE_PIPELINE_GOVERNANCE_STANDARDS'
    | 'MANAGE_API_KEYS'
    | 'MANAGE_TAGS'
    | 'MANAGE_ACCOUNT_DEFAULTS'
    | 'MANAGE_CUSTOM_DASHBOARDS'
    | 'CREATE_CUSTOM_DASHBOARDS'
    | 'MANAGE_RESTRICTED_ACCESS'
}

export type PhaseStep = {
  uuid?: string
  name?: string
  phaseStepType?:
    | 'SELECT_NODE'
    | 'INFRASTRUCTURE_NODE'
    | 'PROVISION_NODE'
    | 'DISABLE_SERVICE'
    | 'DEPLOY_SERVICE'
    | 'ENABLE_SERVICE'
    | 'VERIFY_SERVICE'
    | 'WRAP_UP'
    | 'PRE_DEPLOYMENT'
    | 'ROLLBACK_PROVISIONERS'
    | 'POST_DEPLOYMENT'
    | 'STOP_SERVICE'
    | 'DE_PROVISION_NODE'
    | 'CLUSTER_SETUP'
    | 'CONTAINER_SETUP'
    | 'CONTAINER_DEPLOY'
    | 'PCF_SETUP'
    | 'PCF_RESIZE'
    | 'PCF_ROUTE_UPDATE'
    | 'PCF_SWICH_ROUTES'
    | 'START_SERVICE'
    | 'DEPLOY_AWSCODEDEPLOY'
    | 'PREPARE_STEPS'
    | 'DEPLOY_AWS_LAMBDA'
    | 'COLLECT_ARTIFACT'
    | 'AMI_AUTOSCALING_GROUP_SETUP'
    | 'AMI_DEPLOY_AUTOSCALING_GROUP'
    | 'AMI_SWITCH_AUTOSCALING_GROUP_ROUTES'
    | 'ECS_UPDATE_LISTENER_BG'
    | 'ECS_UPDATE_ROUTE_53_DNS_WEIGHT'
    | 'HELM_DEPLOY'
    | 'ROUTE_UPDATE'
    | 'K8S_PHASE_STEP'
    | 'PROVISION_INFRASTRUCTURE'
    | 'ROLLBACK_PROVISION_INFRASTRUCTURE'
    | 'SPOTINST_SETUP'
    | 'SPOTINST_DEPLOY'
    | 'SPOTINST_ROLLBACK'
    | 'SPOTINST_LISTENER_UPDATE_ROLLBACK'
    | 'SPOTINST_LISTENER_UPDATE'
    | 'STAGE_EXECUTION'
    | 'AZURE_VMSS_SETUP'
    | 'AZURE_VMSS_DEPLOY'
    | 'AZURE_VMSS_ROLLBACK'
    | 'AZURE_VMSS_SWITCH_ROUTES'
    | 'AZURE_VMSS_SWITCH_ROLLBACK'
    | 'CUSTOM_DEPLOYMENT_PHASE_STEP'
    | 'AZURE_WEBAPP_SLOT_SETUP'
    | 'AZURE_WEBAPP_SLOT_SWAP'
    | 'AZURE_WEBAPP_SLOT_TRAFFIC_SHIFT'
    | 'AZURE_WEBAPP_SLOT_ROLLBACK'
  steps?: GraphNode[]
  stepsInParallel?: boolean
  failureStrategies?: FailureStrategy[]
  stepSkipStrategies?: StepSkipStrategy[]
  rollback?: boolean
  phaseStepNameForRollback?: string
  statusForRollback?:
    | 'ABORTED'
    | 'DISCONTINUING'
    | 'ERROR'
    | 'FAILED'
    | 'NEW'
    | 'PAUSED'
    | 'PAUSING'
    | 'QUEUED'
    | 'RESUMED'
    | 'RUNNING'
    | 'SCHEDULED'
    | 'STARTING'
    | 'SUCCESS'
    | 'WAITING'
    | 'SKIPPED'
    | 'ABORTING'
    | 'REJECTED'
    | 'EXPIRED'
    | 'PREPARING'
  artifactNeeded?: boolean
  valid?: boolean
  validationMessage?: string
  /*
   * @format int32
   */
  waitInterval?: number
}

export type PhysicalInfra = InfraMappingInfrastructureProvider & {
  hostNames?: string[]
  hosts?: Host[]
  loadBalancerId?: string
  loadBalancerName?: string
  hostConnectionAttrs?: string
  expressions?: {
    [key: string]: string
  }
}

export type PhysicalInfraWinrm = InfraMappingInfrastructureProvider & {
  hostNames?: string[]
  hosts?: Host[]
  loadBalancerId?: string
  loadBalancerName?: string
  winRmConnectionAttributes?: string
}

export type Pipeline = {
  name: string
  description?: string
  pipelineStages?: PipelineStage[]
  stateEtaMap?: {
    [key: string]: number
  }
  services?: Service[]
  workflowExecutions?: WorkflowExecution[]
  valid?: boolean
  validationMessage?: string
  templatized?: boolean
  hasSshInfraMapping?: boolean
  failureStrategies?: FailureStrategy[]
  pipelineVariables?: Variable[]
  envIds?: string[]
  workflowIds?: string[]
  envParameterized?: boolean
  deploymentTypes?: (
    | 'SSH'
    | 'AWS_CODEDEPLOY'
    | 'ECS'
    | 'SPOTINST'
    | 'KUBERNETES'
    | 'HELM'
    | 'AWS_LAMBDA'
    | 'AMI'
    | 'WINRM'
    | 'PCF'
    | 'AZURE_VMSS'
    | 'AZURE_WEBAPP'
    | 'CUSTOM'
  )[]
  envSummaries?: EnvSummary[]
  hasBuildWorkflow?: boolean
  infraMappingIds?: string[]
  infraDefinitionIds?: string[]
  /*
   * @uniqueItems true
   */
  keywords?: string[]
  accountId?: string
  sample?: boolean
  tagLinks?: HarnessTagLink[]
  uuid: string
  appId: string
  createdBy?: EmbeddedUser
  /*
   * @format int64
   */
  createdAt?: number
  lastUpdatedBy?: EmbeddedUser
  /*
   * @format int64
   */
  lastUpdatedAt: number
}

export type PipelineExecution = {
  uuid: string
  appId: string
  createdBy?: EmbeddedUser
  /*
   * @format int64
   */
  createdAt?: number
  pipelineId?: string
  workflowExecutionId?: string
  stateMachineId?: string
  pipeline?: Pipeline
  pipelineStageExecutions?: PipelineStageExecution[]
  appName?: string
  workflowType?: 'PIPELINE' | 'ORCHESTRATION'
  status?:
    | 'ABORTED'
    | 'DISCONTINUING'
    | 'ERROR'
    | 'FAILED'
    | 'NEW'
    | 'PAUSED'
    | 'PAUSING'
    | 'QUEUED'
    | 'RESUMED'
    | 'RUNNING'
    | 'SCHEDULED'
    | 'STARTING'
    | 'SUCCESS'
    | 'WAITING'
    | 'SKIPPED'
    | 'ABORTING'
    | 'REJECTED'
    | 'EXPIRED'
    | 'PREPARING'
  name?: string
  /*
   * @format int64
   */
  startTs?: number
  /*
   * @format int64
   */
  endTs?: number
  /*
   * @format int64
   */
  estimatedTime?: number
}

export type PipelineStage = {
  name?: string
  parallel?: boolean
  pipelineStageElements?: PipelineStageElement[]
  valid?: boolean
  validationMessage?: string
  looped?: boolean
  loopedVarName?: string
}

export type PipelineStageElement = {
  uuid?: string
  name?: string
  type?: string
  /*
   * @format int32
   */
  parallelIndex?: number
  properties?: {
    [key: string]: Record<string, any>
  }
  workflowVariables?: {
    [key: string]: string
  }
  runtimeInputsConfig?: RuntimeInputsConfig
  disable?: boolean
  disableAssertion?: string
  valid?: boolean
  validationMessage?: string
}

export type PipelineStageExecution = {
  pipelineStageElementId?: string
  stateUuid?: string
  stateName?: string
  stateType?: string
  status?:
    | 'ABORTED'
    | 'DISCONTINUING'
    | 'ERROR'
    | 'FAILED'
    | 'NEW'
    | 'PAUSED'
    | 'PAUSING'
    | 'QUEUED'
    | 'RESUMED'
    | 'RUNNING'
    | 'SCHEDULED'
    | 'STARTING'
    | 'SUCCESS'
    | 'WAITING'
    | 'SKIPPED'
    | 'ABORTING'
    | 'REJECTED'
    | 'EXPIRED'
    | 'PREPARING'
  /*
   * @format int64
   */
  startTs?: number
  /*
   * @format int64
   */
  expiryTs?: number
  /*
   * @format int64
   */
  endTs?: number
  /*
   * @format int64
   */
  estimatedTime?: number
  workflowExecutions?: WorkflowExecution[]
  stateExecutionData?: StateExecutionData
  message?: string
  looped?: boolean
  waitingForInputs?: boolean
  parallelInfo?: ParallelInfo
  triggeredBy?: EmbeddedUser
  disableAssertionInspection?: StateInspection
  skipCondition?: string
  needsInputButNotReceivedYet?: boolean
}

export type PipelineSummary = {
  pipelineId?: string
  pipelineName?: string
}

export type RancherKubernetesInfrastructure = InfraMappingInfrastructureProvider & {
  namespace?: string
  releaseName?: string
  clusterSelectionCriteria?: ClusterSelectionCriteriaEntry[]
}

export type RestResponseApplication = {
  metaData?: {
    [key: string]: Record<string, any>
  }
  resource?: Application
  responseMessages?: ResponseMessage[]
}

export type Role = {
  uuid: string
  appId: string
  createdBy?: EmbeddedUser
  /*
   * @format int64
   */
  createdAt?: number
  lastUpdatedBy?: EmbeddedUser
  /*
   * @format int64
   */
  lastUpdatedAt: number
  name?: string
  description?: string
  accountId?: string
  appName?: string
  permissions?: Permission[]
  roleType?: 'ACCOUNT_ADMIN' | 'APPLICATION_ADMIN' | 'PROD_SUPPORT' | 'NON_PROD_SUPPORT' | 'CUSTOM'
  allApps?: boolean
}

export type RollbackWorkflowExecutionInfo = {
  rollbackType?: 'MANUAL' | 'AUTO'
  rollbackStateExecutionId?: string
  /*
   * @format int64
   */
  rollbackStartTs?: number
  /*
   * @format int64
   */
  rollbackDuration?: number
}

export type RollingOrchestrationWorkflow = OrchestrationWorkflow & {
  graph?: Graph
  preDeploymentSteps?: PhaseStep
  rollbackProvisioners?: PhaseStep
  rollbackProvisionersReverse?: PhaseStep
  rollbackWorkflowPhaseIdMap?: {
    [key: string]: WorkflowPhase
  }
  workflowPhases?: WorkflowPhase[]
  postDeploymentSteps?: PhaseStep
  failureStrategies?: FailureStrategy[]
  systemVariables?: Variable[]
  derivedVariables?: Variable[]
}

export type RuntimeInputsConfig = {
  runtimeInputVariables?: string[]
  /*
   * @format int64
   */
  timeout?: number
  userGroupIds?: string[]
  timeoutAction?:
    | 'MANUAL_INTERVENTION'
    | 'ROLLBACK_WORKFLOW'
    | 'ROLLBACK_PROVISIONER_AFTER_PHASES'
    | 'ROLLBACK_PHASE'
    | 'IGNORE'
    | 'RETRY'
    | 'END_EXECUTION'
    | 'CONTINUE_WITH_DEFAULTS'
    | 'ABORT_WORKFLOW_EXECUTION'
}

export type ServiceInstance = {
  uuid: string
  appId: string
  createdBy?: EmbeddedUser
  /*
   * @format int64
   */
  createdAt?: number
  lastUpdatedBy?: EmbeddedUser
  /*
   * @format int64
   */
  lastUpdatedAt: number
  envId?: string
  serviceTemplateId?: string
  serviceTemplateName?: string
  serviceId?: string
  serviceName?: string
  hostId?: string
  hostName?: string
  publicDns?: string
  infraMappingId?: string
  infraMappingType?: string
  artifactStreamId?: string
  artifactStreamName?: string
  artifactId?: string
  artifactName?: string
  /*
   * @format int64
   */
  artifactDeployedOn?: number
  artifactDeploymentStatus?:
    | 'ABORTED'
    | 'DISCONTINUING'
    | 'ERROR'
    | 'FAILED'
    | 'NEW'
    | 'PAUSED'
    | 'PAUSING'
    | 'QUEUED'
    | 'RESUMED'
    | 'RUNNING'
    | 'SCHEDULED'
    | 'STARTING'
    | 'SUCCESS'
    | 'WAITING'
    | 'SKIPPED'
    | 'ABORTING'
    | 'REJECTED'
    | 'EXPIRED'
    | 'PREPARING'
  artifactDeploymentActivityId?: string
  lastActivityId?: string
  lastActivityStatus?:
    | 'ABORTED'
    | 'DISCONTINUING'
    | 'ERROR'
    | 'FAILED'
    | 'NEW'
    | 'PAUSED'
    | 'PAUSING'
    | 'QUEUED'
    | 'RESUMED'
    | 'RUNNING'
    | 'SCHEDULED'
    | 'STARTING'
    | 'SUCCESS'
    | 'WAITING'
    | 'SKIPPED'
    | 'ABORTING'
    | 'REJECTED'
    | 'EXPIRED'
    | 'PREPARING'
  /*
   * @format int64
   */
  lastActivityCreatedAt?: number
  commandName?: string
  commandType?: string
  /*
   * @format int64
   */
  lastDeployedOn?: number
  accountId?: string
  displayName?: string
}

export type ServiceTemplate = {
  uuid: string
  appId: string
  createdBy?: EmbeddedUser
  /*
   * @format int64
   */
  createdAt?: number
  lastUpdatedBy?: EmbeddedUser
  /*
   * @format int64
   */
  lastUpdatedAt: number
  accountId?: string
  envId?: string
  name?: string
  description?: string
  serviceId?: string
  serviceConfigFiles?: ConfigFile[]
  serviceVariables?: ServiceVariable[]
  serviceArtifactType?:
    | 'JAR'
    | 'WAR'
    | 'TAR'
    | 'ZIP'
    | 'NUGET'
    | 'DOCKER'
    | 'RPM'
    | 'AWS_LAMBDA'
    | 'AWS_CODEDEPLOY'
    | 'PCF'
    | 'AMI'
    | 'AZURE_MACHINE_IMAGE'
    | 'AZURE_WEBAPP'
    | 'IIS'
    | 'OTHER'
    | 'IIS_APP'
    | 'IIS_VirtualDirectory'
  configFilesOverrides?: ConfigFile[]
  serviceVariablesOverrides?: ServiceVariable[]
  configMapYamlOverride?: string
  helmValueYamlOverride?: string
  infrastructureMappings?: InfrastructureMapping[]
  valuesOverrideAppManifest?: ApplicationManifest
  helmChartOverride?: ApplicationManifest
  valuesOverrideManifestFile?: ManifestFile
  kustomizePatchesOverrideAppManifest?: ApplicationManifest
  kustomizePatchesOverrideManifestFile?: ManifestFile
  ocParamsOverrideAppManifest?: ApplicationManifest
  ocParamsOverrideFile?: ManifestFile
  appSettingOverrideManifest?: ApplicationManifest
  connStringsOverrideManifest?: ApplicationManifest
  appSettingsOverrideManifestFile?: ManifestFile
  connStringsOverrideManifestFile?: ManifestFile
  defaultServiceTemplate?: boolean
}

export type State = {
  id?: string
  parentId?: string
  name?: string
  requiredContextElementType?:
    | 'SERVICE'
    | 'INFRAMAPPING'
    | 'SERVICE_TEMPLATE'
    | 'TAG'
    | 'SHELL'
    | 'HOST'
    | 'INSTANCE'
    | 'STANDARD'
    | 'PARAM'
    | 'PARTITION'
    | 'OTHER'
    | 'FORK'
    | 'CONTAINER_SERVICE'
    | 'CLUSTER'
    | 'AWS_LAMBDA_FUNCTION'
    | 'AMI_SERVICE_SETUP'
    | 'AMI_SERVICE_DEPLOY'
    | 'ECS_SERVICE_SETUP'
    | 'AMI_SWITCH_ROUTES'
    | 'PCF_SERVICE_SETUP'
    | 'PCF_SERVICE_DEPLOY'
    | 'PCF_ROUTE_SWAP_ROLLBACK'
    | 'PCF_INSTANCE'
    | 'SPOTINST_SERVICE_SETUP'
    | 'SPOTINST_SERVICE_DEPLOY'
    | 'ARTIFACT'
    | 'ARTIFACT_VARIABLE'
    | 'HELM_DEPLOY'
    | 'CLOUD_FORMATION_PROVISION'
    | 'CLOUD_FORMATION_ROLLBACK'
    | 'CLOUD_FORMATION_DEPROVISION'
    | 'TERRAFORM_PROVISION'
    | 'SHELL_SCRIPT_PROVISION'
    | 'K8S'
    | 'TERRAFORM_INHERIT_PLAN'
    | 'TERRAGRUNT_INHERIT_PLAN'
    | 'AZURE_VMSS_SETUP'
    | 'AZURE_WEBAPP_SETUP'
    | 'HELM_CHART'
    | 'MANIFEST_VARIABLE'
    | 'RANCHER_K8S_CLUSTER_CRITERIA'
  stateType?: string
  rollback?: boolean
  /*
   * @format int32
   */
  waitInterval?: number
  /*
   * @format int32
   */
  timeoutMillis?: number
  ignoreFailure?: boolean
  templateExpressions?: TemplateExpression[]
  executeWithPreviousSteps?: boolean
  templateUuid?: string
  templateVersion?: string
  templateVariables?: Variable[]
  patternsForRequiredContextElementType?: string[]
  requiredExecutionArgumentTypes?: (
    | 'SERVICE'
    | 'PROVISIONER'
    | 'ENVIRONMENT'
    | 'HOST'
    | 'RELEASE'
    | 'ARTIFACT'
    | 'SSH_USER'
    | 'SSH_PASSWORD'
    | 'SSH_APP_ACCOUNT'
    | 'SSH_KEY_PASSPHRASE'
    | 'SSH_APP_ACCOUNT_PASSOWRD'
    | 'SIMPLE_DEPLOYMENT'
    | 'ORCHESTRATED_DEPLOYMENT'
    | 'PIPELINE'
    | 'WORKFLOW'
    | 'DEPLOYMENT'
    | 'INSTANCE'
    | 'APPLICATION'
    | 'COMMAND'
    | 'CONFIG'
    | 'SERVICE_TEMPLATE'
    | 'INFRASTRUCTURE_MAPPING'
    | 'INFRASTRUCTURE_DEFINITION'
    | 'USER'
    | 'ARTIFACT_STREAM'
    | 'APPDYNAMICS_CONFIGID'
    | 'APPDYNAMICS_APPID'
    | 'APPDYNAMICS_TIERID'
    | 'ELK_CONFIGID'
    | 'ELK_INDICES'
    | 'NEWRELIC_CONFIGID'
    | 'NEWRELIC_APPID'
    | 'SS_SSH_CONNECTION_ATTRIBUTE'
    | 'SS_WINRM_CONNECTION_ATTRIBUTE'
    | 'SUMOLOGIC_CONFIGID'
    | 'SPLUNK_CONFIGID'
    | 'NEWRELIC_MARKER_CONFIGID'
    | 'NEWRELIC_MARKER_APPID'
    | 'API_KEY'
    | 'ACCOUNT'
    | 'APPLICATION_MANIFEST'
    | 'USER_GROUP'
    | 'WHITELISTED_IP'
    | 'CF_AWS_CONFIG_ID'
    | 'VERIFICATION_CONFIGURATION'
    | 'HELM_GIT_CONFIG_ID'
    | 'NOTIFICATION_GROUP'
    | 'HELM_CHART_SPECIFICATION'
    | 'PCF_SERVICE_SPECIFICATION'
    | 'LAMBDA_SPECIFICATION'
    | 'USER_DATA_SPECIFICATION'
    | 'ECS_CONTAINER_SPECIFICATION'
    | 'ECS_SERVICE_SPECIFICATION'
    | 'K8S_CONTAINER_SPECIFICATION'
    | 'CONFIG_FILE'
    | 'SERVICE_COMMAND'
    | 'MANIFEST_FILE'
    | 'SERVICE_VARIABLE'
    | 'TRIGGER'
    | 'ROLE'
    | 'TEMPLATE'
    | 'TEMPLATE_FOLDER'
    | 'SETTING_ATTRIBUTE'
    | 'ENCRYPTED_RECORDS'
    | 'CV_CONFIGURATION'
    | 'TAG'
    | 'CUSTOM_DASHBOARD'
    | 'PIPELINE_GOVERNANCE_STANDARD'
    | 'WORKFLOW_EXECUTION'
    | 'SERVERLESS_INSTANCE'
    | 'USER_INVITE'
    | 'LOGIN_SETTINGS'
    | 'SSO_SETTINGS'
    | 'DELEGATE'
    | 'DELEGATE_SCOPE'
    | 'DELEGATE_PROFILE'
    | 'EXPORT_EXECUTIONS_REQUEST'
    | 'GCP_CONFIG'
    | 'GIT_CONFIG'
    | 'JENKINS_SERVER'
    | 'SECRETS_MANAGER'
    | 'HELM_CHART'
    | 'SECRET'
    | 'CONNECTOR'
    | 'CLOUD_PROVIDER'
    | 'GOVERNANCE_FREEZE_CONFIG'
    | 'GOVERNANCE_CONFIG'
    | 'EVENT_RULE'
  )[]
  selectionLogsTrackingForTasksEnabled?: boolean
}

export type StateExecutionData = {
  stateName?: string
  stateType?: string
  /*
   * @format int64
   */
  startTs?: number
  /*
   * @format int64
   */
  endTs?: number
  status?:
    | 'ABORTED'
    | 'DISCONTINUING'
    | 'ERROR'
    | 'FAILED'
    | 'NEW'
    | 'PAUSED'
    | 'PAUSING'
    | 'QUEUED'
    | 'RESUMED'
    | 'RUNNING'
    | 'SCHEDULED'
    | 'STARTING'
    | 'SUCCESS'
    | 'WAITING'
    | 'SKIPPED'
    | 'ABORTING'
    | 'REJECTED'
    | 'EXPIRED'
    | 'PREPARING'
  errorMsg?: string
  /*
   * @format int32
   */
  waitInterval?: number
  element?: ContextElement
  stateParams?: {
    [key: string]: Record<string, any>
  }
  delegateMetaInfo?: DelegateMetaInfo
  templateVariable?: {
    [key: string]: Record<string, any>
  }
  executionSummary?: {
    [key: string]: ExecutionDataValue
  }
  executionDetails?: {
    [key: string]: ExecutionDataValue
  }
}

export type StateInspection = {
  stateExecutionInstanceId?: string
  data?: {
    [key: string]: StateInspectionData
  }
  /*
   * @format date-time
   */
  validUntil?: string
}

export type StateInspectionData = Record<string, any>

export type StateMachine = {
  uuid?: string
  appId: string
  /*
   * @format int64
   */
  createdAt?: number
  accountId?: string
  originId?: string
  /*
   * @format int32
   */
  originVersion?: number
  name?: string
  orchestrationWorkflow?: OrchestrationWorkflow
  valid?: boolean
  states?: State[]
  transitions?: Transition[]
  childStateMachines?: {
    [key: string]: StateMachine
  }
  initialStateName?: string
  cachedStatesMap?: {
    [key: string]: State
  }
  cachedTransitionFlowMap?: {
    [key: string]: {
      [key: string]: State[]
    }
  }
  initialState?: State
  statesMap?: {
    [key: string]: State
  }
  transitionFlowMap?: {
    [key: string]: {
      [key: string]: State[]
    }
  }
}

export type StatusInstanceBreakdown = {
  status?:
    | 'ABORTED'
    | 'DISCONTINUING'
    | 'ERROR'
    | 'FAILED'
    | 'NEW'
    | 'PAUSED'
    | 'PAUSING'
    | 'QUEUED'
    | 'RESUMED'
    | 'RUNNING'
    | 'SCHEDULED'
    | 'STARTING'
    | 'SUCCESS'
    | 'WAITING'
    | 'SKIPPED'
    | 'ABORTING'
    | 'REJECTED'
    | 'EXPIRED'
    | 'PREPARING'
  /*
   * @format int32
   */
  instanceCount?: number
  instanceExecutionHistories?: InstanceExecutionHistory[]
}

export type StepSkipStrategy = {
  scope: 'ALL_STEPS' | 'SPECIFIC_STEPS'
  stepIds?: string[]
  assertionExpression: string
  phaseStep?: PhaseStep
}

export type Transition = {
  fromState?: State
  toState?: State
  transitionType?: 'SUCCESS' | 'FAILURE' | 'ABORT' | 'REPEAT' | 'FORK' | 'CONDITIONAL'
}

export type WorkflowExecution = {
  uuid: string
  appId: string
  createdBy?: EmbeddedUser
  createdByType?: 'USER' | 'API_KEY' | 'TRIGGER'
  /*
   * @format int64
   */
  createdAt?: number
  accountId?: string
  workflowId?: string
  stateMachineId?: string
  stateMachine?: StateMachine
  envId?: string
  envIds?: string[]
  workflowIds?: string[]
  cloudProviderIds?: string[]
  serviceIds?: string[]
  infraMappingIds?: string[]
  infraDefinitionIds?: string[]
  appName?: string
  envName?: string
  envType?: 'PROD' | 'NON_PROD' | 'ALL'
  workflowType?: 'PIPELINE' | 'ORCHESTRATION'
  status?:
    | 'ABORTED'
    | 'DISCONTINUING'
    | 'ERROR'
    | 'FAILED'
    | 'NEW'
    | 'PAUSED'
    | 'PAUSING'
    | 'QUEUED'
    | 'RESUMED'
    | 'RUNNING'
    | 'SCHEDULED'
    | 'STARTING'
    | 'SUCCESS'
    | 'WAITING'
    | 'SKIPPED'
    | 'ABORTING'
    | 'REJECTED'
    | 'EXPIRED'
    | 'PREPARING'
  graph?: Graph
  executionNode?: GraphNode
  pipelineExecution?: PipelineExecution
  pipelineExecutionId?: string
  stageName?: string
  errorStrategy?: 'CONTINUE' | 'FAIL' | 'PAUSE' | 'RETRY'
  name?: string
  releaseNo?: string
  /*
   * @format int32
   */
  total?: number
  breakdown?: CountsByStatuses
  executionArgs?: ExecutionArgs
  serviceExecutionSummaries?: ElementExecutionSummary[]
  statusInstanceBreakdownMap?: {
    [key: string]: StatusInstanceBreakdown
  }
  /*
   * @format int64
   */
  startTs?: number
  /*
   * @format int64
   */
  rollbackStartTs?: number
  /*
   * @format int64
   */
  endTs?: number
  /*
   * @format int64
   */
  duration?: number
  /*
   * @format int64
   */
  rollbackDuration?: number
  triggeredBy?: EmbeddedUser
  pipelineSummary?: PipelineSummary
  environments?: EnvSummary[]
  deployedEnvironments?: EnvSummary[]
  deployedServices?: string[]
  deployedCloudProviders?: string[]
  buildExecutionSummaries?: BuildExecutionSummary[]
  orchestrationType?: 'BUILD' | 'BASIC' | 'CANARY' | 'MULTI_SERVICE' | 'BLUE_GREEN' | 'ROLLING' | 'CUSTOM'
  deploymentTriggerId?: string
  triggeringApiKeyInfo?: ApiKeyInfo
  artifacts?: Artifact[]
  rollbackArtifacts?: Artifact[]
  helmCharts?: HelmChart[]
  /*
   * @uniqueItems true
   */
  keywords?: string[]
  onDemandRollback?: boolean
  useSweepingOutputs?: boolean
  originalExecution?: WorkflowExecutionInfo
  helmExecutionSummary?: HelmExecutionSummary
  awsLambdaExecutionSummaries?: AwsLambdaExecutionSummary[]
  concurrencyStrategy?: ConcurrencyStrategy
  pipelineResumeId?: string
  latestPipelineResume?: boolean
  cdPageCandidate?: boolean
  /*
   * @format int64
   */
  nextIteration?: number
  tags?: NameValuePair[]
  message?: string
  failureDetails?: string
  canOverrideFreeze?: boolean
  /*
   * @format date-time
   */
  validUntil?: string
  baseline?: boolean
  rollbackProvisionerAfterPhases?: boolean
}

export type WorkflowExecutionInfo = {
  name?: string
  executionId?: string
  /*
   * @format int64
   */
  startTs?: number
  rollbackWorkflowExecutionInfo?: RollbackWorkflowExecutionInfo
  accountId?: string
  appId?: string
  workflowId?: string
}

export type WorkflowPhase = {
  uuid?: string
  name?: string
  serviceId?: string
  daemonSet?: boolean
  statefulSet?: boolean
  infraMappingId?: string
  infraMappingName?: string
  infraDefinitionId?: string
  infraDefinitionName?: string
  deploymentType?:
    | 'SSH'
    | 'AWS_CODEDEPLOY'
    | 'ECS'
    | 'SPOTINST'
    | 'KUBERNETES'
    | 'HELM'
    | 'AWS_LAMBDA'
    | 'AMI'
    | 'WINRM'
    | 'PCF'
    | 'AZURE_VMSS'
    | 'AZURE_WEBAPP'
    | 'CUSTOM'
  srvTemplatised?: boolean
  infraTemplatised?: boolean
  computeProviderId?: string
  provisionNodes?: boolean
  rollback?: boolean
  phaseNameForRollback?: string
  valid?: boolean
  validationMessage?: string
  templateExpressions?: TemplateExpression[]
  variableOverrides?: NameValuePair[]
  phaseSteps?: PhaseStep[]
}

export type YamlGitConfig = {
  uuid?: string
  /*
   * @format int64
   */
  createdAt?: number
  createdBy?: EmbeddedUser
  /*
   * @format int64
   */
  lastUpdatedAt?: number
  lastUpdatedBy?: EmbeddedUser
  appId?: string
  url?: string
  branchName?: string
  repositoryName?: string
  username?: string
  password?: string[]
  sshSettingId?: string
  keyAuth?: boolean
  gitConnectorId?: string
  encryptedPassword?: string
  syncMode?: 'GIT_TO_HARNESS' | 'HARNESS_TO_GIT' | 'BOTH' | 'NONE'
  enabled?: boolean
  webhookToken?: string
  accountId?: string
  entityId?: string
  entityType:
    | 'SERVICE'
    | 'PROVISIONER'
    | 'ENVIRONMENT'
    | 'HOST'
    | 'RELEASE'
    | 'ARTIFACT'
    | 'SSH_USER'
    | 'SSH_PASSWORD'
    | 'SSH_APP_ACCOUNT'
    | 'SSH_KEY_PASSPHRASE'
    | 'SSH_APP_ACCOUNT_PASSOWRD'
    | 'SIMPLE_DEPLOYMENT'
    | 'ORCHESTRATED_DEPLOYMENT'
    | 'PIPELINE'
    | 'WORKFLOW'
    | 'DEPLOYMENT'
    | 'INSTANCE'
    | 'APPLICATION'
    | 'COMMAND'
    | 'CONFIG'
    | 'SERVICE_TEMPLATE'
    | 'INFRASTRUCTURE_MAPPING'
    | 'INFRASTRUCTURE_DEFINITION'
    | 'USER'
    | 'ARTIFACT_STREAM'
    | 'APPDYNAMICS_CONFIGID'
    | 'APPDYNAMICS_APPID'
    | 'APPDYNAMICS_TIERID'
    | 'ELK_CONFIGID'
    | 'ELK_INDICES'
    | 'NEWRELIC_CONFIGID'
    | 'NEWRELIC_APPID'
    | 'SS_SSH_CONNECTION_ATTRIBUTE'
    | 'SS_WINRM_CONNECTION_ATTRIBUTE'
    | 'SUMOLOGIC_CONFIGID'
    | 'SPLUNK_CONFIGID'
    | 'NEWRELIC_MARKER_CONFIGID'
    | 'NEWRELIC_MARKER_APPID'
    | 'API_KEY'
    | 'ACCOUNT'
    | 'APPLICATION_MANIFEST'
    | 'USER_GROUP'
    | 'WHITELISTED_IP'
    | 'CF_AWS_CONFIG_ID'
    | 'VERIFICATION_CONFIGURATION'
    | 'HELM_GIT_CONFIG_ID'
    | 'NOTIFICATION_GROUP'
    | 'HELM_CHART_SPECIFICATION'
    | 'PCF_SERVICE_SPECIFICATION'
    | 'LAMBDA_SPECIFICATION'
    | 'USER_DATA_SPECIFICATION'
    | 'ECS_CONTAINER_SPECIFICATION'
    | 'ECS_SERVICE_SPECIFICATION'
    | 'K8S_CONTAINER_SPECIFICATION'
    | 'CONFIG_FILE'
    | 'SERVICE_COMMAND'
    | 'MANIFEST_FILE'
    | 'SERVICE_VARIABLE'
    | 'TRIGGER'
    | 'ROLE'
    | 'TEMPLATE'
    | 'TEMPLATE_FOLDER'
    | 'SETTING_ATTRIBUTE'
    | 'ENCRYPTED_RECORDS'
    | 'CV_CONFIGURATION'
    | 'TAG'
    | 'CUSTOM_DASHBOARD'
    | 'PIPELINE_GOVERNANCE_STANDARD'
    | 'WORKFLOW_EXECUTION'
    | 'SERVERLESS_INSTANCE'
    | 'USER_INVITE'
    | 'LOGIN_SETTINGS'
    | 'SSO_SETTINGS'
    | 'DELEGATE'
    | 'DELEGATE_SCOPE'
    | 'DELEGATE_PROFILE'
    | 'EXPORT_EXECUTIONS_REQUEST'
    | 'GCP_CONFIG'
    | 'GIT_CONFIG'
    | 'JENKINS_SERVER'
    | 'SECRETS_MANAGER'
    | 'HELM_CHART'
    | 'SECRET'
    | 'CONNECTOR'
    | 'CLOUD_PROVIDER'
    | 'GOVERNANCE_FREEZE_CONFIG'
    | 'GOVERNANCE_CONFIG'
    | 'EVENT_RULE'
  entityName?: string
  settingType?:
    | 'HOST_CONNECTION_ATTRIBUTES'
    | 'BASTION_HOST_CONNECTION_ATTRIBUTES'
    | 'SMTP'
    | 'SFTP'
    | 'JENKINS'
    | 'BAMBOO'
    | 'STRING'
    | 'SPLUNK'
    | 'ELK'
    | 'LOGZ'
    | 'SUMO'
    | 'DATA_DOG'
    | 'APM_VERIFICATION'
    | 'BUG_SNAG'
    | 'LOG_VERIFICATION'
    | 'APP_DYNAMICS'
    | 'NEW_RELIC'
    | 'DYNA_TRACE'
    | 'INSTANA'
    | 'DATA_DOG_LOG'
    | 'CLOUD_WATCH'
    | 'SCALYR'
    | 'ELB'
    | 'SLACK'
    | 'AWS'
    | 'GCS'
    | 'GCP'
    | 'AZURE'
    | 'PCF'
    | 'RANCHER'
    | 'DIRECT'
    | 'KUBERNETES_CLUSTER'
    | 'DOCKER'
    | 'ECR'
    | 'GCR'
    | 'ACR'
    | 'PHYSICAL_DATA_CENTER'
    | 'KUBERNETES'
    | 'NEXUS'
    | 'ARTIFACTORY'
    | 'SMB'
    | 'AMAZON_S3'
    | 'GIT'
    | 'SSH_SESSION_CONFIG'
    | 'SERVICE_VARIABLE'
    | 'CONFIG_FILE'
    | 'KMS'
    | 'GCP_KMS'
    | 'JIRA'
    | 'SERVICENOW'
    | 'SECRET_TEXT'
    | 'YAML_GIT_SYNC'
    | 'VAULT'
    | 'VAULT_SSH'
    | 'AWS_SECRETS_MANAGER'
    | 'CYBERARK'
    | 'WINRM_CONNECTION_ATTRIBUTES'
    | 'WINRM_SESSION_CONFIG'
    | 'PROMETHEUS'
    | 'INFRASTRUCTURE_MAPPING'
    | 'HTTP_HELM_REPO'
    | 'AMAZON_S3_HELM_REPO'
    | 'GCS_HELM_REPO'
    | 'SPOT_INST'
    | 'AZURE_ARTIFACTS_PAT'
    | 'CUSTOM'
    | 'CE_AWS'
    | 'CE_GCP'
    | 'CE_AZURE'
    | 'AZURE_VAULT'
    | 'KUBERNETES_CLUSTER_NG'
    | 'GIT_NG'
    | 'SSO_SAML'
    | 'GCP_SECRETS_MANAGER'
    | 'TRIGGER'
}

export type RestResponsePageResponseApplication = {
  metaData?: {
    [key: string]: Record<string, any>
  }
  resource?: Application[]
  responseMessages?: ResponseMessage[]
}

export type NewRelicApplication = {
  name?: string
  /*
   * @format int64
   */
  id?: number
}

export type RestResponseListNewRelicApplication = {
  metaData?: {
    [key: string]: Record<string, any>
  }
  resource?: NewRelicApplication[]
  responseMessages?: ResponseMessage[]
}

export type RestResponseVerificationNodeDataSetupResponse = {
  metaData?: {
    [key: string]: Record<string, any>
  }
  resource?: VerificationNodeDataSetupResponse
  responseMessages?: ResponseMessage[]
}

export type VerificationLoadResponse = {
  loadResponse?: Record<string, any>
  /*
   * @format int64
   */
  totalHits?: number
  /*
   * @format int64
   */
  totalHitsThreshold?: number
  loadPresent?: boolean
}

export type VerificationNodeDataSetupResponse = {
  providerReachable?: boolean
  loadResponse?: VerificationLoadResponse
  dataForNode?: Record<string, any>
  configurationCorrect?: boolean
}

export type Aws = {
  ec2Instance?: Instance
  ip?: string
  instanceId?: string
  publicDns?: string
  taskId?: string
  taskArn?: string
  dockerId?: string
  completeDockerId?: string
  containerId?: string
  containerInstanceId?: string
  containerInstanceArn?: string
  ecsServiceName?: string
}

export type AzureVmss = {
  ip?: string
  instanceId?: string
  publicDns?: string
}

export type AzureWebapp = {
  ip?: string
  instanceId?: string
  instanceType?: string
  instanceName?: string
  instanceHostName?: string
  appName?: string
  deploySlot?: string
  deploySlotId?: string
  appServicePlanId?: string
}

export type AppdynamicsSetupTestNodeData = {
  appId: string
  settingId: string
  instanceName?: string
  isServiceLevel?: boolean
  instanceElement?: Instance
  hostExpression?: string
  workflowId?: string
  guid?: string
  stateType?:
    | 'SUB_WORKFLOW'
    | 'REPEAT'
    | 'FORK'
    | 'WAIT'
    | 'PAUSE'
    | 'BARRIER'
    | 'RESOURCE_CONSTRAINT'
    | 'SHELL_SCRIPT'
    | 'HTTP'
    | 'TEMPLATIZED_SECRET_MANAGER'
    | 'EMAIL'
    | 'APP_DYNAMICS'
    | 'NEW_RELIC'
    | 'NEW_RELIC_DEPLOYMENT_MARKER'
    | 'DYNA_TRACE'
    | 'PROMETHEUS'
    | 'SPLUNKV2'
    | 'ELK'
    | 'LOGZ'
    | 'SUMO'
    | 'DATA_DOG'
    | 'DATA_DOG_LOG'
    | 'CVNG'
    | 'CLOUD_WATCH'
    | 'AWS_LAMBDA_VERIFICATION'
    | 'APM_VERIFICATION'
    | 'LOG_VERIFICATION'
    | 'BUG_SNAG'
    | 'STACK_DRIVER'
    | 'STACK_DRIVER_LOG'
    | 'INSTANA'
    | 'SCALYR'
    | 'ENV_STATE'
    | 'ENV_LOOP_STATE'
    | 'ENV_RESUME_STATE'
    | 'ENV_LOOP_RESUME_STATE'
    | 'COMMAND'
    | 'APPROVAL'
    | 'APPROVAL_RESUME'
    | 'ELASTIC_LOAD_BALANCER'
    | 'JENKINS'
    | 'GCB'
    | 'BAMBOO'
    | 'ARTIFACT_COLLECTION'
    | 'ARTIFACT_CHECK'
    | 'AZURE_NODE_SELECT'
    | 'AZURE_VMSS_SETUP'
    | 'AZURE_VMSS_DEPLOY'
    | 'AZURE_VMSS_ROLLBACK'
    | 'AZURE_VMSS_SWITCH_ROUTES'
    | 'AZURE_VMSS_SWITCH_ROUTES_ROLLBACK'
    | 'AZURE_WEBAPP_SLOT_SETUP'
    | 'AZURE_WEBAPP_SLOT_SWAP'
    | 'AZURE_WEBAPP_SLOT_SHIFT_TRAFFIC'
    | 'AZURE_WEBAPP_SLOT_ROLLBACK'
    | 'AWS_NODE_SELECT'
    | 'DC_NODE_SELECT'
    | 'ROLLING_NODE_SELECT'
    | 'PHASE'
    | 'PHASE_STEP'
    | 'STAGING_ORIGINAL_EXECUTION'
    | 'AWS_CODEDEPLOY_STATE'
    | 'AWS_CODEDEPLOY_ROLLBACK'
    | 'AWS_LAMBDA_STATE'
    | 'AWS_LAMBDA_ROLLBACK'
    | 'AWS_AMI_SERVICE_SETUP'
    | 'ASG_AMI_SERVICE_ALB_SHIFT_SETUP'
    | 'AWS_AMI_SERVICE_DEPLOY'
    | 'ASG_AMI_SERVICE_ALB_SHIFT_DEPLOY'
    | 'AWS_AMI_SWITCH_ROUTES'
    | 'ASG_AMI_ALB_SHIFT_SWITCH_ROUTES'
    | 'AWS_AMI_ROLLBACK_SWITCH_ROUTES'
    | 'ASG_AMI_ROLLBACK_ALB_SHIFT_SWITCH_ROUTES'
    | 'AWS_AMI_SERVICE_ROLLBACK'
    | 'ECS_SERVICE_SETUP'
    | 'SPOTINST_SETUP'
    | 'SPOTINST_ALB_SHIFT_SETUP'
    | 'SPOTINST_DEPLOY'
    | 'SPOTINST_ALB_SHIFT_DEPLOY'
    | 'SPOTINST_LISTENER_UPDATE'
    | 'SPOTINST_LISTENER_ALB_SHIFT'
    | 'SPOTINST_ROLLBACK'
    | 'SPOTINST_LISTENER_UPDATE_ROLLBACK'
    | 'SPOTINST_LISTENER_ALB_SHIFT_ROLLBACK'
    | 'ECS_SERVICE_SETUP_ROLLBACK'
    | 'ECS_DAEMON_SERVICE_SETUP'
    | 'ECS_BG_SERVICE_SETUP'
    | 'ECS_BG_SERVICE_SETUP_ROUTE53'
    | 'ECS_SERVICE_DEPLOY'
    | 'ECS_SERVICE_ROLLBACK'
    | 'ECS_LISTENER_UPDATE'
    | 'ECS_LISTENER_UPDATE_ROLLBACK'
    | 'ECS_ROUTE53_DNS_WEIGHT_UPDATE'
    | 'ECS_ROUTE53_DNS_WEIGHT_UPDATE_ROLLBACK'
    | 'KUBERNETES_SETUP'
    | 'KUBERNETES_SETUP_ROLLBACK'
    | 'KUBERNETES_DEPLOY'
    | 'KUBERNETES_DEPLOY_ROLLBACK'
    | 'KUBERNETES_STEADY_STATE_CHECK'
    | 'ECS_STEADY_STATE_CHECK'
    | 'ECS_RUN_TASK'
    | 'GCP_CLUSTER_SETUP'
    | 'HELM_DEPLOY'
    | 'HELM_ROLLBACK'
    | 'PCF_SETUP'
    | 'PCF_RESIZE'
    | 'PCF_ROLLBACK'
    | 'PCF_MAP_ROUTE'
    | 'PCF_UNMAP_ROUTE'
    | 'PCF_BG_MAP_ROUTE'
    | 'PCF_PLUGIN'
    | 'TERRAFORM_PROVISION'
    | 'TERRAFORM_APPLY'
    | 'TERRAGRUNT_PROVISION'
    | 'TERRAGRUNT_DESTROY'
    | 'TERRAGRUNT_ROLLBACK'
    | 'ARM_CREATE_RESOURCE'
    | 'ARM_ROLLBACK'
    | 'SHELL_SCRIPT_PROVISION'
    | 'TERRAFORM_DESTROY'
    | 'CLOUD_FORMATION_CREATE_STACK'
    | 'CLOUD_FORMATION_DELETE_STACK'
    | 'KUBERNETES_SWAP_SERVICE_SELECTORS'
    | 'CLOUD_FORMATION_ROLLBACK_STACK'
    | 'TERRAFORM_ROLLBACK'
    | 'K8S_DEPLOYMENT_ROLLING'
    | 'K8S_SCALE'
    | 'K8S_DEPLOYMENT_ROLLING_ROLLBACK'
    | 'K8S_BLUE_GREEN_DEPLOY'
    | 'K8S_CANARY_DEPLOY'
    | 'K8S_DELETE'
    | 'RANCHER_RESOLVE'
    | 'RANCHER_K8S_DEPLOYMENT_ROLLING'
    | 'RANCHER_K8S_CANARY_DEPLOY'
    | 'RANCHER_K8S_BLUE_GREEN_DEPLOY'
    | 'RANCHER_KUBERNETES_SWAP_SERVICE_SELECTORS'
    | 'RANCHER_K8S_DELETE'
    | 'RANCHER_K8S_DEPLOYMENT_ROLLING_ROLLBACK'
    | 'JIRA_CREATE_UPDATE'
    | 'SERVICENOW_CREATE_UPDATE'
    | 'K8S_TRAFFIC_SPLIT'
    | 'K8S_APPLY'
    | 'CUSTOM_DEPLOYMENT_FETCH_INSTANCES'
  /*
   * @format int64
   */
  toTime?: number
  /*
   * @format int64
   */
  fromTime?: number
  /*
   * @format int64
   */
  applicationId?: number
  /*
   * @format int64
   */
  tierId?: number
  serviceLevel?: boolean
}

export type InstanceDetails = {
  hostName?: string
  workloadName?: string
  newInstance?: boolean
  properties?: {
    [key: string]: Record<string, any>
  }
  serviceTemplateName?: string
  serviceTemplateId?: string
  serviceName?: string
  serviceId?: string
  pcf?: Pcf
  aws?: Aws
  physicalHost?: PhysicalHost
  k8s?: K8s
  azureVmss?: AzureVmss
  azureWebapp?: AzureWebapp
  instanceType?: 'PCF' | 'AWS' | 'K8s' | 'PHYSICAL_HOST' | 'AZURE_VMSS' | 'AZURE_WEBAPP'
}

export type K8s = {
  ip?: string
  podName?: string
  dockerId?: string
}

export type Pcf = {
  applicationId?: string
  applicationName?: string
  instanceIndex?: string
}

export type PhysicalHost = {
  publicDns?: string
  instanceId?: string
}

export type AppdynamicsTier = {
  /*
   * @format int64
   */
  id?: number
  name?: string
  description?: string
  type?: string
  agentType?: string
  /*
   * @uniqueItems true
   */
  externalTiers?: AppdynamicsTier[]
  dependencyPath?: string
}

export type RestResponseSetAppdynamicsTier = {
  metaData?: {
    [key: string]: Record<string, any>
  }
  /*
   * @uniqueItems true
   */
  resource?: AppdynamicsTier[]
  responseMessages?: ResponseMessage[]
}

export type RestResponseApplicationManifest = {
  metaData?: {
    [key: string]: Record<string, any>
  }
  resource?: ApplicationManifest
  responseMessages?: ResponseMessage[]
}

export type RestResponseManifestFile = {
  metaData?: {
    [key: string]: Record<string, any>
  }
  resource?: ManifestFile
  responseMessages?: ResponseMessage[]
}

export type RestResponsePageResponseApplicationManifest = {
  metaData?: {
    [key: string]: Record<string, any>
  }
  resource?: ApplicationManifest[]
  responseMessages?: ResponseMessage[]
}

export type DirectoryNode = {
  accountId?: string
  type?: 'FOLDER' | 'YAML' | 'FILE'
  name?: string
  className?: string
  shortClassName?: string
  restName?: string
  directoryPath?: DirectoryPath
}

export type DirectoryPath = {
  path?: string
}

export type RestResponseDirectoryNode = {
  metaData?: {
    [key: string]: Record<string, any>
  }
  resource?: DirectoryNode
  responseMessages?: ResponseMessage[]
}

export type RestResponseListManifestFile = {
  metaData?: {
    [key: string]: Record<string, any>
  }
  resource?: ManifestFile[]
  responseMessages?: ResponseMessage[]
}

export type RestResponseArtifact = {
  metaData?: {
    [key: string]: Record<string, any>
  }
  resource?: Artifact
  responseMessages?: ResponseMessage[]
}

export type RestResponsePageResponseArtifact = {
  metaData?: {
    [key: string]: Record<string, any>
  }
  resource?: Artifact[]
  responseMessages?: ResponseMessage[]
}

export type RestResponseArtifactStream = {
  metaData?: {
    [key: string]: Record<string, any>
  }
  resource?: ArtifactStream
  responseMessages?: ResponseMessage[]
}

export type RestResponsePageResponseArtifactStream = {
  metaData?: {
    [key: string]: Record<string, any>
  }
  resource?: ArtifactStream[]
  responseMessages?: ResponseMessage[]
}

export type RestResponseMapStringString = {
  metaData?: {
    [key: string]: Record<string, any>
  }
  resource?: {
    [key: string]: string
  }
  responseMessages?: ResponseMessage[]
}

export type RestResponseListArtifactStreamSummary = {
  metaData?: {
    [key: string]: Record<string, any>
  }
  resource?: ArtifactStreamSummary[]
  responseMessages?: ResponseMessage[]
}

export type RestResponseListString = {
  metaData?: {
    [key: string]: Record<string, any>
  }
  resource?: string[]
  responseMessages?: ResponseMessage[]
}

export type ApiKeyAuditDetails = {
  apiKeyId?: string
  apiKeyName?: string
}

export type AuditHeader = {
  uuid: string
  appId: string
  createdBy?: EmbeddedUser
  /*
   * @format int64
   */
  createdAt?: number
  lastUpdatedBy?: EmbeddedUser
  /*
   * @format int64
   */
  lastUpdatedAt: number
  remoteUser?: User
  application?: Application
  component?: Service
  environment?: Environment
  url?: string
  resourcePath?: string
  queryParams?: string
  requestMethod?: 'OPTIONS' | 'HEAD' | 'GET' | 'PATCH' | 'POST' | 'PUT' | 'DELETE'
  headerString?: string
  responseType?: 'SUCCESS' | 'FAILED' | 'COMPLETED_WITH_ERRORS'
  /*
   * @format int32
   */
  responseStatusCode?: number
  errorCode?: string
  remoteHostName?: string
  /*
   * @format int32
   */
  remoteHostPort?: number
  remoteIpAddress?: string
  localHostName?: string
  localIpAddress?: string
  requestPayloadUuid?: string
  responsePayloadUuid?: string
  /*
   * @format int64
   */
  requestTime?: number
  /*
   * @format int64
   */
  responseTime?: number
  failureStatusMsg?: string
  details?: {
    [key: string]: Record<string, any>
  }
  accountId?: string
  gitAuditDetails?: GitAuditDetails
  entityAuditRecords?: EntityAuditRecord[]
  apiKeyAuditDetails?: ApiKeyAuditDetails
}

export type EntityAuditRecord = {
  entityId?: string
  entityType?: string
  entityName?: string
  operationType?: string
  entityOldYamlRecordId?: string
  entityNewYamlRecordId?: string
  yamlPath?: string
  yamlError?: string
  failure?: boolean
  appId?: string
  appName?: string
  affectedResourceId?: string
  affectedResourceName?: string
  affectedResourceType?: string
  affectedResourceOperation?: string
  /*
   * @format int64
   */
  createdAt?: number
}

export type GitAuditDetails = {
  author?: string
  gitCommitId?: string
  repoUrl?: string
}

export type RestResponsePageResponseAuditHeader = {
  metaData?: {
    [key: string]: Record<string, any>
  }
  resource?: AuditHeader[]
  responseMessages?: ResponseMessage[]
}

export type AuditHeaderYamlResponse = {
  auditHeaderId?: string
  entityId?: string
  oldYaml?: string
  oldYamlPath?: string
  newYaml?: string
  newYamlPath?: string
}

export type RestResponseAuditHeaderYamlResponse = {
  metaData?: {
    [key: string]: Record<string, any>
  }
  resource?: AuditHeaderYamlResponse
  responseMessages?: ResponseMessage[]
}

export type RestResponseListNameValuePair = {
  metaData?: {
    [key: string]: Record<string, any>
  }
  resource?: NameValuePair[]
  responseMessages?: ResponseMessage[]
}

export type AzureKubernetesCluster = Cluster & {
  resourceGroup?: string
  subscriptionId?: string
}

export type RestResponseListAzureKubernetesCluster = {
  metaData?: {
    [key: string]: Record<string, any>
  }
  resource?: AzureKubernetesCluster[]
  responseMessages?: ResponseMessage[]
}

export type AzureImageGallery = {
  name?: string
  subscriptionId?: string
  resourceGroupName?: string
  regionName?: string
}

export type RestResponseListAzureImageGallery = {
  metaData?: {
    [key: string]: Record<string, any>
  }
  resource?: AzureImageGallery[]
  responseMessages?: ResponseMessage[]
}

export type AzureImageDefinition = {
  name?: string
  subscriptionId?: string
  resourceGroupName?: string
  location?: string
  osType?: string
  galleryName?: string
}

export type RestResponseListAzureImageDefinition = {
  metaData?: {
    [key: string]: Record<string, any>
  }
  resource?: AzureImageDefinition[]
  responseMessages?: ResponseMessage[]
}

export type AzureResourceGroup = {
  name?: string
  subscriptionId?: string
}

export type RestResponseListAzureResourceGroup = {
  metaData?: {
    [key: string]: Record<string, any>
  }
  resource?: AzureResourceGroup[]
  responseMessages?: ResponseMessage[]
}

export type AzureContainerRegistry = {
  name?: string
  resourceGroup?: string
  subscriptionId?: string
  type?: string
  resourceId?: string
  loginServer?: string
}

export type RestResponseListAzureContainerRegistry = {
  metaData?: {
    [key: string]: Record<string, any>
  }
  resource?: AzureContainerRegistry[]
  responseMessages?: ResponseMessage[]
}

export type AlertThreshold = {
  /*
   * @format double
   */
  percentage?: number
  basedOn?: 'ACTUAL_COST' | 'FORECASTED_COST'
  emailAddresses?: string[]
  userGroupIds?: string[]
  slackWebhooks?: string[]
  /*
   * @format int32
   */
  alertsSent?: number
  /*
   * @format int64
   */
  crossedAt?: number
}

export type ApplicationBudgetScope = BudgetScope & {
  applicationIds?: string[]
  environmentType?: 'PROD' | 'NON_PROD' | 'ALL'
}

export type Budget = {
  uuid?: string
  accountId?: string
  name?: string
  scope?: BudgetScope
  type?: 'SPECIFIED_AMOUNT' | 'PREVIOUS_MONTH_SPEND' | 'PREVIOUS_PERIOD_SPEND'
  /*
   * @format double
   */
  budgetAmount?: number
  period?: 'DAILY' | 'WEEKLY' | 'MONTHLY' | 'QUARTERLY' | 'YEARLY'
  /*
   * @format double
   */
  growthRate?: number
  /*
   * @format double
   */
  actualCost?: number
  /*
   * @format double
   */
  forecastCost?: number
  /*
   * @format double
   */
  lastMonthCost?: number
  alertThresholds?: AlertThreshold[]
  emailAddresses?: string[]
  userGroupIds?: string[]
  notifyOnSlack?: boolean
  /*
   * @format int64
   */
  startTime?: number
  /*
   * @format int64
   */
  endTime?: number
  /*
   * @format int64
   */
  createdAt?: number
  /*
   * @format int64
   */
  lastUpdatedAt?: number
  ngBudget?: boolean
}

export type BudgetScope = {
  entityNames?: string[]
  budgetScopeType?: string
  entityIds?: string[]
}

export type ClusterBudgetScope = BudgetScope & {
  clusterIds?: string[]
}

export type PerspectiveBudgetScope = BudgetScope & {
  viewId?: string
  viewName?: string
}

export type RestResponseBudget = {
  metaData?: {
    [key: string]: Record<string, any>
  }
  resource?: Budget
  responseMessages?: ResponseMessage[]
}

export type RestResponseListBudget = {
  metaData?: {
    [key: string]: Record<string, any>
  }
  resource?: Budget[]
  responseMessages?: ResponseMessage[]
}

export type BugsnagApplication = {
  name?: string
  id?: string
}

export type RestResponseSetBugsnagApplication = {
  metaData?: {
    [key: string]: Record<string, any>
  }
  /*
   * @uniqueItems true
   */
  resource?: BugsnagApplication[]
  responseMessages?: ResponseMessage[]
}

export type BugsnagSetupTestData = {
  appId: string
  settingId: string
  instanceName?: string
  isServiceLevel?: boolean
  instanceElement?: Instance
  hostExpression?: string
  workflowId?: string
  guid?: string
  stateType?:
    | 'SUB_WORKFLOW'
    | 'REPEAT'
    | 'FORK'
    | 'WAIT'
    | 'PAUSE'
    | 'BARRIER'
    | 'RESOURCE_CONSTRAINT'
    | 'SHELL_SCRIPT'
    | 'HTTP'
    | 'TEMPLATIZED_SECRET_MANAGER'
    | 'EMAIL'
    | 'APP_DYNAMICS'
    | 'NEW_RELIC'
    | 'NEW_RELIC_DEPLOYMENT_MARKER'
    | 'DYNA_TRACE'
    | 'PROMETHEUS'
    | 'SPLUNKV2'
    | 'ELK'
    | 'LOGZ'
    | 'SUMO'
    | 'DATA_DOG'
    | 'DATA_DOG_LOG'
    | 'CVNG'
    | 'CLOUD_WATCH'
    | 'AWS_LAMBDA_VERIFICATION'
    | 'APM_VERIFICATION'
    | 'LOG_VERIFICATION'
    | 'BUG_SNAG'
    | 'STACK_DRIVER'
    | 'STACK_DRIVER_LOG'
    | 'INSTANA'
    | 'SCALYR'
    | 'ENV_STATE'
    | 'ENV_LOOP_STATE'
    | 'ENV_RESUME_STATE'
    | 'ENV_LOOP_RESUME_STATE'
    | 'COMMAND'
    | 'APPROVAL'
    | 'APPROVAL_RESUME'
    | 'ELASTIC_LOAD_BALANCER'
    | 'JENKINS'
    | 'GCB'
    | 'BAMBOO'
    | 'ARTIFACT_COLLECTION'
    | 'ARTIFACT_CHECK'
    | 'AZURE_NODE_SELECT'
    | 'AZURE_VMSS_SETUP'
    | 'AZURE_VMSS_DEPLOY'
    | 'AZURE_VMSS_ROLLBACK'
    | 'AZURE_VMSS_SWITCH_ROUTES'
    | 'AZURE_VMSS_SWITCH_ROUTES_ROLLBACK'
    | 'AZURE_WEBAPP_SLOT_SETUP'
    | 'AZURE_WEBAPP_SLOT_SWAP'
    | 'AZURE_WEBAPP_SLOT_SHIFT_TRAFFIC'
    | 'AZURE_WEBAPP_SLOT_ROLLBACK'
    | 'AWS_NODE_SELECT'
    | 'DC_NODE_SELECT'
    | 'ROLLING_NODE_SELECT'
    | 'PHASE'
    | 'PHASE_STEP'
    | 'STAGING_ORIGINAL_EXECUTION'
    | 'AWS_CODEDEPLOY_STATE'
    | 'AWS_CODEDEPLOY_ROLLBACK'
    | 'AWS_LAMBDA_STATE'
    | 'AWS_LAMBDA_ROLLBACK'
    | 'AWS_AMI_SERVICE_SETUP'
    | 'ASG_AMI_SERVICE_ALB_SHIFT_SETUP'
    | 'AWS_AMI_SERVICE_DEPLOY'
    | 'ASG_AMI_SERVICE_ALB_SHIFT_DEPLOY'
    | 'AWS_AMI_SWITCH_ROUTES'
    | 'ASG_AMI_ALB_SHIFT_SWITCH_ROUTES'
    | 'AWS_AMI_ROLLBACK_SWITCH_ROUTES'
    | 'ASG_AMI_ROLLBACK_ALB_SHIFT_SWITCH_ROUTES'
    | 'AWS_AMI_SERVICE_ROLLBACK'
    | 'ECS_SERVICE_SETUP'
    | 'SPOTINST_SETUP'
    | 'SPOTINST_ALB_SHIFT_SETUP'
    | 'SPOTINST_DEPLOY'
    | 'SPOTINST_ALB_SHIFT_DEPLOY'
    | 'SPOTINST_LISTENER_UPDATE'
    | 'SPOTINST_LISTENER_ALB_SHIFT'
    | 'SPOTINST_ROLLBACK'
    | 'SPOTINST_LISTENER_UPDATE_ROLLBACK'
    | 'SPOTINST_LISTENER_ALB_SHIFT_ROLLBACK'
    | 'ECS_SERVICE_SETUP_ROLLBACK'
    | 'ECS_DAEMON_SERVICE_SETUP'
    | 'ECS_BG_SERVICE_SETUP'
    | 'ECS_BG_SERVICE_SETUP_ROUTE53'
    | 'ECS_SERVICE_DEPLOY'
    | 'ECS_SERVICE_ROLLBACK'
    | 'ECS_LISTENER_UPDATE'
    | 'ECS_LISTENER_UPDATE_ROLLBACK'
    | 'ECS_ROUTE53_DNS_WEIGHT_UPDATE'
    | 'ECS_ROUTE53_DNS_WEIGHT_UPDATE_ROLLBACK'
    | 'KUBERNETES_SETUP'
    | 'KUBERNETES_SETUP_ROLLBACK'
    | 'KUBERNETES_DEPLOY'
    | 'KUBERNETES_DEPLOY_ROLLBACK'
    | 'KUBERNETES_STEADY_STATE_CHECK'
    | 'ECS_STEADY_STATE_CHECK'
    | 'ECS_RUN_TASK'
    | 'GCP_CLUSTER_SETUP'
    | 'HELM_DEPLOY'
    | 'HELM_ROLLBACK'
    | 'PCF_SETUP'
    | 'PCF_RESIZE'
    | 'PCF_ROLLBACK'
    | 'PCF_MAP_ROUTE'
    | 'PCF_UNMAP_ROUTE'
    | 'PCF_BG_MAP_ROUTE'
    | 'PCF_PLUGIN'
    | 'TERRAFORM_PROVISION'
    | 'TERRAFORM_APPLY'
    | 'TERRAGRUNT_PROVISION'
    | 'TERRAGRUNT_DESTROY'
    | 'TERRAGRUNT_ROLLBACK'
    | 'ARM_CREATE_RESOURCE'
    | 'ARM_ROLLBACK'
    | 'SHELL_SCRIPT_PROVISION'
    | 'TERRAFORM_DESTROY'
    | 'CLOUD_FORMATION_CREATE_STACK'
    | 'CLOUD_FORMATION_DELETE_STACK'
    | 'KUBERNETES_SWAP_SERVICE_SELECTORS'
    | 'CLOUD_FORMATION_ROLLBACK_STACK'
    | 'TERRAFORM_ROLLBACK'
    | 'K8S_DEPLOYMENT_ROLLING'
    | 'K8S_SCALE'
    | 'K8S_DEPLOYMENT_ROLLING_ROLLBACK'
    | 'K8S_BLUE_GREEN_DEPLOY'
    | 'K8S_CANARY_DEPLOY'
    | 'K8S_DELETE'
    | 'RANCHER_RESOLVE'
    | 'RANCHER_K8S_DEPLOYMENT_ROLLING'
    | 'RANCHER_K8S_CANARY_DEPLOY'
    | 'RANCHER_K8S_BLUE_GREEN_DEPLOY'
    | 'RANCHER_KUBERNETES_SWAP_SERVICE_SELECTORS'
    | 'RANCHER_K8S_DELETE'
    | 'RANCHER_K8S_DEPLOYMENT_ROLLING_ROLLBACK'
    | 'JIRA_CREATE_UPDATE'
    | 'SERVICENOW_CREATE_UPDATE'
    | 'K8S_TRAFFIC_SPLIT'
    | 'K8S_APPLY'
    | 'CUSTOM_DEPLOYMENT_FETCH_INSTANCES'
  /*
   * @format int64
   */
  toTime?: number
  /*
   * @format int64
   */
  fromTime?: number
  orgId?: string
  projectId?: string
  releaseStage?: string
  query?: string
  browserApplication?: boolean
  serviceLevel?: boolean
}

export type BuildDetails = {
  number?: string
  revision?: string
  description?: string
  artifactPath?: string
  buildUrl?: string
  buildDisplayName?: string
  buildFullDisplayName?: string
  artifactFileSize?: string
  uiDisplayName?: string
  status?: 'FAILURE' | 'UNSTABLE' | 'SUCCESS'
  buildParameters?: {
    [key: string]: string
  }
  metadata?: {
    [key: string]: string
  }
  labels?: {
    [key: string]: string
  }
  artifactFileMetadataList?: ArtifactFileMetadata[]
}

export type JobDetails = {
  jobName?: string
  url?: string
  parameters?: JobParameter[]
  folder?: boolean
}

export type JobParameter = {
  name?: string
  options?: string[]
  defaultValue?: string
  description?: string
}

export type RestResponseSetJobDetails = {
  metaData?: {
    [key: string]: Record<string, any>
  }
  /*
   * @uniqueItems true
   */
  resource?: JobDetails[]
  responseMessages?: ResponseMessage[]
}

export type RestResponseJobDetails = {
  metaData?: {
    [key: string]: Record<string, any>
  }
  resource?: JobDetails
  responseMessages?: ResponseMessage[]
}

export type RestResponseListBuildDetails = {
  metaData?: {
    [key: string]: Record<string, any>
  }
  resource?: BuildDetails[]
  responseMessages?: ResponseMessage[]
}

export type AzureDevopsProject = {
  id?: string
  name?: string
}

export type RestResponseListAzureDevopsProject = {
  metaData?: {
    [key: string]: Record<string, any>
  }
  resource?: AzureDevopsProject[]
  responseMessages?: ResponseMessage[]
}

export type AzureArtifactsFeed = {
  id?: string
  name?: string
  fullyQualifiedName?: string
  project?: AzureDevopsProject
}

export type RestResponseListAzureArtifactsFeed = {
  metaData?: {
    [key: string]: Record<string, any>
  }
  resource?: AzureArtifactsFeed[]
  responseMessages?: ResponseMessage[]
}

export type AzureArtifactsPackage = {
  id?: string
  name?: string
  protocolType?: string
}

export type RestResponseListAzureArtifactsPackage = {
  metaData?: {
    [key: string]: Record<string, any>
  }
  resource?: AzureArtifactsPackage[]
  responseMessages?: ResponseMessage[]
}

export type CECommunications = {
  uuid?: string
  accountId?: string
  emailId?: string
  type?: 'WEEKLY_REPORT'
  enabled?: boolean
  selfEnabled?: boolean
  /*
   * @format int64
   */
  createdAt?: number
  /*
   * @format int64
   */
  lastUpdatedAt?: number
}

export type RestResponseListCECommunications = {
  metaData?: {
    [key: string]: Record<string, any>
  }
  resource?: CECommunications[]
  responseMessages?: ResponseMessage[]
}

export type CEReportSchedule = {
  uuid?: string
  /*
   * @minLength 1
   * @maxLength 32
   */
  name?: string
  enabled?: boolean
  /*
   * @minLength 0
   * @maxLength 100
   */
  description?: string
  /*
   * @maxItems 1
   * @minItems 1
   */
  viewsId: string[]
  userCron?: string
  /*
   * @maxItems 50
   * @minItems 0
   */
  recipients?: string[]
  accountId?: string
  /*
   * @format int64
   */
  createdAt?: number
  /*
   * @format int64
   */
  lastUpdatedAt?: number
  userCronTimeZone?: string
  createdBy?: EmbeddedUser
  lastUpdatedBy?: EmbeddedUser
  /*
   * @format date-time
   */
  nextExecution?: string
}

export type CESlackWebhook = {
  uuid?: string
  accountId?: string
  webhookUrl?: string
  sendCostReport?: boolean
  sendAnomalyAlerts?: boolean
  /*
   * @format int64
   */
  createdAt?: number
  /*
   * @format int64
   */
  lastUpdatedAt?: number
}

export type RestResponseCESlackWebhook = {
  metaData?: {
    [key: string]: Record<string, any>
  }
  resource?: CESlackWebhook
  responseMessages?: ResponseMessage[]
}

export type CVActivityLog = {
  uuid?: string
  cvConfigId?: string
  stateExecutionId?: string
  /*
   * @format int64
   */
  timestamp?: number
  /*
   * @format int64
   */
  dataCollectionMinute?: number
  log?: string
  logLevel?: 'INFO' | 'WARN' | 'ERROR'
  timestampParams?: number[]
  accountId?: string
  /*
   * @format date-time
   */
  validUntil?: string
  ansiLog?: string
}

export type RestResponseListCVActivityLog = {
  metaData?: {
    [key: string]: Record<string, any>
  }
  resource?: CVActivityLog[]
  responseMessages?: ResponseMessage[]
}

export type RestResponseCVConfiguration = {
  metaData?: {
    [key: string]: Record<string, any>
  }
  resource?: CVConfiguration
  responseMessages?: ResponseMessage[]
}

export type RestResponseListCVConfiguration = {
  metaData?: {
    [key: string]: Record<string, any>
  }
  resource?: CVConfiguration[]
  responseMessages?: ResponseMessage[]
}

export type LogsCVConfiguration = {
  uuid: string
  appId: string
  createdBy?: EmbeddedUser
  /*
   * @format int64
   */
  createdAt?: number
  lastUpdatedBy?: EmbeddedUser
  /*
   * @format int64
   */
  lastUpdatedAt: number
  name: string
  accountId: string
  connectorId: string
  envId: string
  serviceId: string
  stateType:
    | 'SUB_WORKFLOW'
    | 'REPEAT'
    | 'FORK'
    | 'WAIT'
    | 'PAUSE'
    | 'BARRIER'
    | 'RESOURCE_CONSTRAINT'
    | 'SHELL_SCRIPT'
    | 'HTTP'
    | 'TEMPLATIZED_SECRET_MANAGER'
    | 'EMAIL'
    | 'APP_DYNAMICS'
    | 'NEW_RELIC'
    | 'NEW_RELIC_DEPLOYMENT_MARKER'
    | 'DYNA_TRACE'
    | 'PROMETHEUS'
    | 'SPLUNKV2'
    | 'ELK'
    | 'LOGZ'
    | 'SUMO'
    | 'DATA_DOG'
    | 'DATA_DOG_LOG'
    | 'CVNG'
    | 'CLOUD_WATCH'
    | 'AWS_LAMBDA_VERIFICATION'
    | 'APM_VERIFICATION'
    | 'LOG_VERIFICATION'
    | 'BUG_SNAG'
    | 'STACK_DRIVER'
    | 'STACK_DRIVER_LOG'
    | 'INSTANA'
    | 'SCALYR'
    | 'ENV_STATE'
    | 'ENV_LOOP_STATE'
    | 'ENV_RESUME_STATE'
    | 'ENV_LOOP_RESUME_STATE'
    | 'COMMAND'
    | 'APPROVAL'
    | 'APPROVAL_RESUME'
    | 'ELASTIC_LOAD_BALANCER'
    | 'JENKINS'
    | 'GCB'
    | 'BAMBOO'
    | 'ARTIFACT_COLLECTION'
    | 'ARTIFACT_CHECK'
    | 'AZURE_NODE_SELECT'
    | 'AZURE_VMSS_SETUP'
    | 'AZURE_VMSS_DEPLOY'
    | 'AZURE_VMSS_ROLLBACK'
    | 'AZURE_VMSS_SWITCH_ROUTES'
    | 'AZURE_VMSS_SWITCH_ROUTES_ROLLBACK'
    | 'AZURE_WEBAPP_SLOT_SETUP'
    | 'AZURE_WEBAPP_SLOT_SWAP'
    | 'AZURE_WEBAPP_SLOT_SHIFT_TRAFFIC'
    | 'AZURE_WEBAPP_SLOT_ROLLBACK'
    | 'AWS_NODE_SELECT'
    | 'DC_NODE_SELECT'
    | 'ROLLING_NODE_SELECT'
    | 'PHASE'
    | 'PHASE_STEP'
    | 'STAGING_ORIGINAL_EXECUTION'
    | 'AWS_CODEDEPLOY_STATE'
    | 'AWS_CODEDEPLOY_ROLLBACK'
    | 'AWS_LAMBDA_STATE'
    | 'AWS_LAMBDA_ROLLBACK'
    | 'AWS_AMI_SERVICE_SETUP'
    | 'ASG_AMI_SERVICE_ALB_SHIFT_SETUP'
    | 'AWS_AMI_SERVICE_DEPLOY'
    | 'ASG_AMI_SERVICE_ALB_SHIFT_DEPLOY'
    | 'AWS_AMI_SWITCH_ROUTES'
    | 'ASG_AMI_ALB_SHIFT_SWITCH_ROUTES'
    | 'AWS_AMI_ROLLBACK_SWITCH_ROUTES'
    | 'ASG_AMI_ROLLBACK_ALB_SHIFT_SWITCH_ROUTES'
    | 'AWS_AMI_SERVICE_ROLLBACK'
    | 'ECS_SERVICE_SETUP'
    | 'SPOTINST_SETUP'
    | 'SPOTINST_ALB_SHIFT_SETUP'
    | 'SPOTINST_DEPLOY'
    | 'SPOTINST_ALB_SHIFT_DEPLOY'
    | 'SPOTINST_LISTENER_UPDATE'
    | 'SPOTINST_LISTENER_ALB_SHIFT'
    | 'SPOTINST_ROLLBACK'
    | 'SPOTINST_LISTENER_UPDATE_ROLLBACK'
    | 'SPOTINST_LISTENER_ALB_SHIFT_ROLLBACK'
    | 'ECS_SERVICE_SETUP_ROLLBACK'
    | 'ECS_DAEMON_SERVICE_SETUP'
    | 'ECS_BG_SERVICE_SETUP'
    | 'ECS_BG_SERVICE_SETUP_ROUTE53'
    | 'ECS_SERVICE_DEPLOY'
    | 'ECS_SERVICE_ROLLBACK'
    | 'ECS_LISTENER_UPDATE'
    | 'ECS_LISTENER_UPDATE_ROLLBACK'
    | 'ECS_ROUTE53_DNS_WEIGHT_UPDATE'
    | 'ECS_ROUTE53_DNS_WEIGHT_UPDATE_ROLLBACK'
    | 'KUBERNETES_SETUP'
    | 'KUBERNETES_SETUP_ROLLBACK'
    | 'KUBERNETES_DEPLOY'
    | 'KUBERNETES_DEPLOY_ROLLBACK'
    | 'KUBERNETES_STEADY_STATE_CHECK'
    | 'ECS_STEADY_STATE_CHECK'
    | 'ECS_RUN_TASK'
    | 'GCP_CLUSTER_SETUP'
    | 'HELM_DEPLOY'
    | 'HELM_ROLLBACK'
    | 'PCF_SETUP'
    | 'PCF_RESIZE'
    | 'PCF_ROLLBACK'
    | 'PCF_MAP_ROUTE'
    | 'PCF_UNMAP_ROUTE'
    | 'PCF_BG_MAP_ROUTE'
    | 'PCF_PLUGIN'
    | 'TERRAFORM_PROVISION'
    | 'TERRAFORM_APPLY'
    | 'TERRAGRUNT_PROVISION'
    | 'TERRAGRUNT_DESTROY'
    | 'TERRAGRUNT_ROLLBACK'
    | 'ARM_CREATE_RESOURCE'
    | 'ARM_ROLLBACK'
    | 'SHELL_SCRIPT_PROVISION'
    | 'TERRAFORM_DESTROY'
    | 'CLOUD_FORMATION_CREATE_STACK'
    | 'CLOUD_FORMATION_DELETE_STACK'
    | 'KUBERNETES_SWAP_SERVICE_SELECTORS'
    | 'CLOUD_FORMATION_ROLLBACK_STACK'
    | 'TERRAFORM_ROLLBACK'
    | 'K8S_DEPLOYMENT_ROLLING'
    | 'K8S_SCALE'
    | 'K8S_DEPLOYMENT_ROLLING_ROLLBACK'
    | 'K8S_BLUE_GREEN_DEPLOY'
    | 'K8S_CANARY_DEPLOY'
    | 'K8S_DELETE'
    | 'RANCHER_RESOLVE'
    | 'RANCHER_K8S_DEPLOYMENT_ROLLING'
    | 'RANCHER_K8S_CANARY_DEPLOY'
    | 'RANCHER_K8S_BLUE_GREEN_DEPLOY'
    | 'RANCHER_KUBERNETES_SWAP_SERVICE_SELECTORS'
    | 'RANCHER_K8S_DELETE'
    | 'RANCHER_K8S_DEPLOYMENT_ROLLING_ROLLBACK'
    | 'JIRA_CREATE_UPDATE'
    | 'SERVICENOW_CREATE_UPDATE'
    | 'K8S_TRAFFIC_SPLIT'
    | 'K8S_APPLY'
    | 'CUSTOM_DEPLOYMENT_FETCH_INSTANCES'
  analysisTolerance: 'LOW' | 'MEDIUM' | 'HIGH'
  customThresholdRefId?: string
  enabled24x7?: boolean
  comparisonStrategy?: 'COMPARE_WITH_PREVIOUS' | 'COMPARE_WITH_CURRENT' | 'PREDICTIVE'
  contextId?: string
  alertEnabled?: boolean
  /*
   * @format double
   */
  alertThreshold?: number
  /*
   * @format int32
   */
  numOfOccurrencesForAlert?: number
  /*
   * @format int64
   */
  snoozeStartTime?: number
  /*
   * @format int64
   */
  snoozeEndTime?: number
  connectorName?: string
  serviceName?: string
  envName?: string
  appName?: string
  query?: string
  /*
   * @format int64
   */
  baselineStartMinute?: number
  /*
   * @format int64
   */
  baselineEndMinute?: number
  alertPriority?: 'BASELINE' | 'P5' | 'P4' | 'P3' | 'P2' | 'P1' | 'P0'
  is247LogsV2?: boolean
  workflowConfig?: boolean
}

export type CgEventConfig = {
  name?: string
  config: WebHookEventConfig
  rule?: CgEventRule
  accountId?: string
  delegateSelectors?: string[]
  enabled?: boolean
  appId: string
  createdBy?: EmbeddedUser
  /*
   * @format int64
   */
  createdAt?: number
  lastUpdatedBy?: EmbeddedUser
  /*
   * @format int64
   */
  lastUpdatedAt: number
  summary?: string
  uuid: string
}

export type CgEventRule = {
  type?: 'PIPELINE' | 'WORKFLOW' | 'ALL'
  pipelineRule?: PipelineRule
  workflowRule?: WorkflowRule
}

export type KeyValuePair = {
  key?: string
  value?: string
}

export type PipelineRule = {
  allEvents?: boolean
  allPipelines?: boolean
  pipelineIds?: string[]
  events?: string[]
}

export type RestResponseCgEventConfig = {
  metaData?: {
    [key: string]: Record<string, any>
  }
  resource?: CgEventConfig
  responseMessages?: ResponseMessage[]
}

export type WebHookEventConfig = {
  url?: string
  headers?: KeyValuePair[]
  useProxy?: boolean
  tags?: string[]
  /*
   * @format int32
   */
  socketTimeoutMillis?: number
}

export type WorkflowRule = {
  allEvents?: boolean
  allWorkflows?: boolean
  workflowIds?: string[]
  events?: string[]
}

export type RestResponseListCgEventConfig = {
  metaData?: {
    [key: string]: Record<string, any>
  }
  resource?: CgEventConfig[]
  responseMessages?: ResponseMessage[]
}

export type CloudWatchMetric = {
  metricName?: string
  displayName?: string
  dimension?: string
  dimensionDisplay?: string
  metricType?: string
  enabledDefault?: boolean
  statistics?: string
  unit?:
    | 'Seconds'
    | 'Microseconds'
    | 'Milliseconds'
    | 'Bytes'
    | 'Kilobytes'
    | 'Megabytes'
    | 'Gigabytes'
    | 'Terabytes'
    | 'Bits'
    | 'Kilobits'
    | 'Megabits'
    | 'Gigabits'
    | 'Terabits'
    | 'Percent'
    | 'Count'
    | 'BytesSecond'
    | 'KilobytesSecond'
    | 'MegabytesSecond'
    | 'GigabytesSecond'
    | 'TerabytesSecond'
    | 'BitsSecond'
    | 'KilobitsSecond'
    | 'MegabitsSecond'
    | 'GigabitsSecond'
    | 'TerabitsSecond'
    | 'CountSecond'
    | 'None'
}

export type CloudWatchSetupTestNodeData = {
  appId: string
  settingId: string
  instanceName?: string
  isServiceLevel?: boolean
  instanceElement?: Instance
  hostExpression?: string
  workflowId?: string
  guid?: string
  stateType?:
    | 'SUB_WORKFLOW'
    | 'REPEAT'
    | 'FORK'
    | 'WAIT'
    | 'PAUSE'
    | 'BARRIER'
    | 'RESOURCE_CONSTRAINT'
    | 'SHELL_SCRIPT'
    | 'HTTP'
    | 'TEMPLATIZED_SECRET_MANAGER'
    | 'EMAIL'
    | 'APP_DYNAMICS'
    | 'NEW_RELIC'
    | 'NEW_RELIC_DEPLOYMENT_MARKER'
    | 'DYNA_TRACE'
    | 'PROMETHEUS'
    | 'SPLUNKV2'
    | 'ELK'
    | 'LOGZ'
    | 'SUMO'
    | 'DATA_DOG'
    | 'DATA_DOG_LOG'
    | 'CVNG'
    | 'CLOUD_WATCH'
    | 'AWS_LAMBDA_VERIFICATION'
    | 'APM_VERIFICATION'
    | 'LOG_VERIFICATION'
    | 'BUG_SNAG'
    | 'STACK_DRIVER'
    | 'STACK_DRIVER_LOG'
    | 'INSTANA'
    | 'SCALYR'
    | 'ENV_STATE'
    | 'ENV_LOOP_STATE'
    | 'ENV_RESUME_STATE'
    | 'ENV_LOOP_RESUME_STATE'
    | 'COMMAND'
    | 'APPROVAL'
    | 'APPROVAL_RESUME'
    | 'ELASTIC_LOAD_BALANCER'
    | 'JENKINS'
    | 'GCB'
    | 'BAMBOO'
    | 'ARTIFACT_COLLECTION'
    | 'ARTIFACT_CHECK'
    | 'AZURE_NODE_SELECT'
    | 'AZURE_VMSS_SETUP'
    | 'AZURE_VMSS_DEPLOY'
    | 'AZURE_VMSS_ROLLBACK'
    | 'AZURE_VMSS_SWITCH_ROUTES'
    | 'AZURE_VMSS_SWITCH_ROUTES_ROLLBACK'
    | 'AZURE_WEBAPP_SLOT_SETUP'
    | 'AZURE_WEBAPP_SLOT_SWAP'
    | 'AZURE_WEBAPP_SLOT_SHIFT_TRAFFIC'
    | 'AZURE_WEBAPP_SLOT_ROLLBACK'
    | 'AWS_NODE_SELECT'
    | 'DC_NODE_SELECT'
    | 'ROLLING_NODE_SELECT'
    | 'PHASE'
    | 'PHASE_STEP'
    | 'STAGING_ORIGINAL_EXECUTION'
    | 'AWS_CODEDEPLOY_STATE'
    | 'AWS_CODEDEPLOY_ROLLBACK'
    | 'AWS_LAMBDA_STATE'
    | 'AWS_LAMBDA_ROLLBACK'
    | 'AWS_AMI_SERVICE_SETUP'
    | 'ASG_AMI_SERVICE_ALB_SHIFT_SETUP'
    | 'AWS_AMI_SERVICE_DEPLOY'
    | 'ASG_AMI_SERVICE_ALB_SHIFT_DEPLOY'
    | 'AWS_AMI_SWITCH_ROUTES'
    | 'ASG_AMI_ALB_SHIFT_SWITCH_ROUTES'
    | 'AWS_AMI_ROLLBACK_SWITCH_ROUTES'
    | 'ASG_AMI_ROLLBACK_ALB_SHIFT_SWITCH_ROUTES'
    | 'AWS_AMI_SERVICE_ROLLBACK'
    | 'ECS_SERVICE_SETUP'
    | 'SPOTINST_SETUP'
    | 'SPOTINST_ALB_SHIFT_SETUP'
    | 'SPOTINST_DEPLOY'
    | 'SPOTINST_ALB_SHIFT_DEPLOY'
    | 'SPOTINST_LISTENER_UPDATE'
    | 'SPOTINST_LISTENER_ALB_SHIFT'
    | 'SPOTINST_ROLLBACK'
    | 'SPOTINST_LISTENER_UPDATE_ROLLBACK'
    | 'SPOTINST_LISTENER_ALB_SHIFT_ROLLBACK'
    | 'ECS_SERVICE_SETUP_ROLLBACK'
    | 'ECS_DAEMON_SERVICE_SETUP'
    | 'ECS_BG_SERVICE_SETUP'
    | 'ECS_BG_SERVICE_SETUP_ROUTE53'
    | 'ECS_SERVICE_DEPLOY'
    | 'ECS_SERVICE_ROLLBACK'
    | 'ECS_LISTENER_UPDATE'
    | 'ECS_LISTENER_UPDATE_ROLLBACK'
    | 'ECS_ROUTE53_DNS_WEIGHT_UPDATE'
    | 'ECS_ROUTE53_DNS_WEIGHT_UPDATE_ROLLBACK'
    | 'KUBERNETES_SETUP'
    | 'KUBERNETES_SETUP_ROLLBACK'
    | 'KUBERNETES_DEPLOY'
    | 'KUBERNETES_DEPLOY_ROLLBACK'
    | 'KUBERNETES_STEADY_STATE_CHECK'
    | 'ECS_STEADY_STATE_CHECK'
    | 'ECS_RUN_TASK'
    | 'GCP_CLUSTER_SETUP'
    | 'HELM_DEPLOY'
    | 'HELM_ROLLBACK'
    | 'PCF_SETUP'
    | 'PCF_RESIZE'
    | 'PCF_ROLLBACK'
    | 'PCF_MAP_ROUTE'
    | 'PCF_UNMAP_ROUTE'
    | 'PCF_BG_MAP_ROUTE'
    | 'PCF_PLUGIN'
    | 'TERRAFORM_PROVISION'
    | 'TERRAFORM_APPLY'
    | 'TERRAGRUNT_PROVISION'
    | 'TERRAGRUNT_DESTROY'
    | 'TERRAGRUNT_ROLLBACK'
    | 'ARM_CREATE_RESOURCE'
    | 'ARM_ROLLBACK'
    | 'SHELL_SCRIPT_PROVISION'
    | 'TERRAFORM_DESTROY'
    | 'CLOUD_FORMATION_CREATE_STACK'
    | 'CLOUD_FORMATION_DELETE_STACK'
    | 'KUBERNETES_SWAP_SERVICE_SELECTORS'
    | 'CLOUD_FORMATION_ROLLBACK_STACK'
    | 'TERRAFORM_ROLLBACK'
    | 'K8S_DEPLOYMENT_ROLLING'
    | 'K8S_SCALE'
    | 'K8S_DEPLOYMENT_ROLLING_ROLLBACK'
    | 'K8S_BLUE_GREEN_DEPLOY'
    | 'K8S_CANARY_DEPLOY'
    | 'K8S_DELETE'
    | 'RANCHER_RESOLVE'
    | 'RANCHER_K8S_DEPLOYMENT_ROLLING'
    | 'RANCHER_K8S_CANARY_DEPLOY'
    | 'RANCHER_K8S_BLUE_GREEN_DEPLOY'
    | 'RANCHER_KUBERNETES_SWAP_SERVICE_SELECTORS'
    | 'RANCHER_K8S_DELETE'
    | 'RANCHER_K8S_DEPLOYMENT_ROLLING_ROLLBACK'
    | 'JIRA_CREATE_UPDATE'
    | 'SERVICENOW_CREATE_UPDATE'
    | 'K8S_TRAFFIC_SPLIT'
    | 'K8S_APPLY'
    | 'CUSTOM_DEPLOYMENT_FETCH_INSTANCES'
  /*
   * @format int64
   */
  toTime?: number
  /*
   * @format int64
   */
  fromTime?: number
  region?: string
  hostName?: string
  loadBalancerMetricsByLBName?: {
    [key: string]: CloudWatchMetric[]
  }
  ecsMetrics?: {
    [key: string]: CloudWatchMetric[]
  }
  lambdaFunctionsMetrics?: {
    [key: string]: CloudWatchMetric[]
  }
  ec2Metrics?: CloudWatchMetric[]
  serviceLevel?: boolean
}

export type RestResponseListCloudWatchMetric = {
  metaData?: {
    [key: string]: Record<string, any>
  }
  resource?: CloudWatchMetric[]
  responseMessages?: ResponseMessage[]
}

export type Cluster = {
  clusterName?: string
  cloudProviderId?: string
  clusterType?: string
}

export type ClusterRecord = {
  uuid?: string
  accountId?: string
  cluster?: Cluster
  perpetualTaskIds?: string[]
  /*
   * @format int64
   */
  createdAt?: number
  /*
   * @format int64
   */
  lastUpdatedAt?: number
  deactivated?: boolean
}

export type DirectKubernetesCluster = Cluster & {}

export type EcsCluster = Cluster & {
  region?: string
}

export type GcpKubernetesCluster = Cluster & {}

export type RestResponseClusterRecord = {
  metaData?: {
    [key: string]: Record<string, any>
  }
  resource?: ClusterRecord
  responseMessages?: ResponseMessage[]
}

export type RestResponseListClusterRecord = {
  metaData?: {
    [key: string]: Record<string, any>
  }
  resource?: ClusterRecord[]
  responseMessages?: ResponseMessage[]
}

export type RestResponseConfigFile = {
  metaData?: {
    [key: string]: Record<string, any>
  }
  resource?: ConfigFile
  responseMessages?: ResponseMessage[]
}

export type RestResponsePageResponseConfigFile = {
  metaData?: {
    [key: string]: Record<string, any>
  }
  resource?: ConfigFile[]
  responseMessages?: ResponseMessage[]
}

export type ContinuousVerificationExecutionMetaData = {
  /*
   * @format int64
   */
  workflowStartTs?: number
  /*
   * @format int64
   */
  pipelineStartTs?: number
  accountId?: string
  envId?: string
  applicationId?: string
  serviceId?: string
  workflowId?: string
  workflowExecutionId?: string
  stateExecutionId?: string
  stateType?:
    | 'SUB_WORKFLOW'
    | 'REPEAT'
    | 'FORK'
    | 'WAIT'
    | 'PAUSE'
    | 'BARRIER'
    | 'RESOURCE_CONSTRAINT'
    | 'SHELL_SCRIPT'
    | 'HTTP'
    | 'TEMPLATIZED_SECRET_MANAGER'
    | 'EMAIL'
    | 'APP_DYNAMICS'
    | 'NEW_RELIC'
    | 'NEW_RELIC_DEPLOYMENT_MARKER'
    | 'DYNA_TRACE'
    | 'PROMETHEUS'
    | 'SPLUNKV2'
    | 'ELK'
    | 'LOGZ'
    | 'SUMO'
    | 'DATA_DOG'
    | 'DATA_DOG_LOG'
    | 'CVNG'
    | 'CLOUD_WATCH'
    | 'AWS_LAMBDA_VERIFICATION'
    | 'APM_VERIFICATION'
    | 'LOG_VERIFICATION'
    | 'BUG_SNAG'
    | 'STACK_DRIVER'
    | 'STACK_DRIVER_LOG'
    | 'INSTANA'
    | 'SCALYR'
    | 'ENV_STATE'
    | 'ENV_LOOP_STATE'
    | 'ENV_RESUME_STATE'
    | 'ENV_LOOP_RESUME_STATE'
    | 'COMMAND'
    | 'APPROVAL'
    | 'APPROVAL_RESUME'
    | 'ELASTIC_LOAD_BALANCER'
    | 'JENKINS'
    | 'GCB'
    | 'BAMBOO'
    | 'ARTIFACT_COLLECTION'
    | 'ARTIFACT_CHECK'
    | 'AZURE_NODE_SELECT'
    | 'AZURE_VMSS_SETUP'
    | 'AZURE_VMSS_DEPLOY'
    | 'AZURE_VMSS_ROLLBACK'
    | 'AZURE_VMSS_SWITCH_ROUTES'
    | 'AZURE_VMSS_SWITCH_ROUTES_ROLLBACK'
    | 'AZURE_WEBAPP_SLOT_SETUP'
    | 'AZURE_WEBAPP_SLOT_SWAP'
    | 'AZURE_WEBAPP_SLOT_SHIFT_TRAFFIC'
    | 'AZURE_WEBAPP_SLOT_ROLLBACK'
    | 'AWS_NODE_SELECT'
    | 'DC_NODE_SELECT'
    | 'ROLLING_NODE_SELECT'
    | 'PHASE'
    | 'PHASE_STEP'
    | 'STAGING_ORIGINAL_EXECUTION'
    | 'AWS_CODEDEPLOY_STATE'
    | 'AWS_CODEDEPLOY_ROLLBACK'
    | 'AWS_LAMBDA_STATE'
    | 'AWS_LAMBDA_ROLLBACK'
    | 'AWS_AMI_SERVICE_SETUP'
    | 'ASG_AMI_SERVICE_ALB_SHIFT_SETUP'
    | 'AWS_AMI_SERVICE_DEPLOY'
    | 'ASG_AMI_SERVICE_ALB_SHIFT_DEPLOY'
    | 'AWS_AMI_SWITCH_ROUTES'
    | 'ASG_AMI_ALB_SHIFT_SWITCH_ROUTES'
    | 'AWS_AMI_ROLLBACK_SWITCH_ROUTES'
    | 'ASG_AMI_ROLLBACK_ALB_SHIFT_SWITCH_ROUTES'
    | 'AWS_AMI_SERVICE_ROLLBACK'
    | 'ECS_SERVICE_SETUP'
    | 'SPOTINST_SETUP'
    | 'SPOTINST_ALB_SHIFT_SETUP'
    | 'SPOTINST_DEPLOY'
    | 'SPOTINST_ALB_SHIFT_DEPLOY'
    | 'SPOTINST_LISTENER_UPDATE'
    | 'SPOTINST_LISTENER_ALB_SHIFT'
    | 'SPOTINST_ROLLBACK'
    | 'SPOTINST_LISTENER_UPDATE_ROLLBACK'
    | 'SPOTINST_LISTENER_ALB_SHIFT_ROLLBACK'
    | 'ECS_SERVICE_SETUP_ROLLBACK'
    | 'ECS_DAEMON_SERVICE_SETUP'
    | 'ECS_BG_SERVICE_SETUP'
    | 'ECS_BG_SERVICE_SETUP_ROUTE53'
    | 'ECS_SERVICE_DEPLOY'
    | 'ECS_SERVICE_ROLLBACK'
    | 'ECS_LISTENER_UPDATE'
    | 'ECS_LISTENER_UPDATE_ROLLBACK'
    | 'ECS_ROUTE53_DNS_WEIGHT_UPDATE'
    | 'ECS_ROUTE53_DNS_WEIGHT_UPDATE_ROLLBACK'
    | 'KUBERNETES_SETUP'
    | 'KUBERNETES_SETUP_ROLLBACK'
    | 'KUBERNETES_DEPLOY'
    | 'KUBERNETES_DEPLOY_ROLLBACK'
    | 'KUBERNETES_STEADY_STATE_CHECK'
    | 'ECS_STEADY_STATE_CHECK'
    | 'ECS_RUN_TASK'
    | 'GCP_CLUSTER_SETUP'
    | 'HELM_DEPLOY'
    | 'HELM_ROLLBACK'
    | 'PCF_SETUP'
    | 'PCF_RESIZE'
    | 'PCF_ROLLBACK'
    | 'PCF_MAP_ROUTE'
    | 'PCF_UNMAP_ROUTE'
    | 'PCF_BG_MAP_ROUTE'
    | 'PCF_PLUGIN'
    | 'TERRAFORM_PROVISION'
    | 'TERRAFORM_APPLY'
    | 'TERRAGRUNT_PROVISION'
    | 'TERRAGRUNT_DESTROY'
    | 'TERRAGRUNT_ROLLBACK'
    | 'ARM_CREATE_RESOURCE'
    | 'ARM_ROLLBACK'
    | 'SHELL_SCRIPT_PROVISION'
    | 'TERRAFORM_DESTROY'
    | 'CLOUD_FORMATION_CREATE_STACK'
    | 'CLOUD_FORMATION_DELETE_STACK'
    | 'KUBERNETES_SWAP_SERVICE_SELECTORS'
    | 'CLOUD_FORMATION_ROLLBACK_STACK'
    | 'TERRAFORM_ROLLBACK'
    | 'K8S_DEPLOYMENT_ROLLING'
    | 'K8S_SCALE'
    | 'K8S_DEPLOYMENT_ROLLING_ROLLBACK'
    | 'K8S_BLUE_GREEN_DEPLOY'
    | 'K8S_CANARY_DEPLOY'
    | 'K8S_DELETE'
    | 'RANCHER_RESOLVE'
    | 'RANCHER_K8S_DEPLOYMENT_ROLLING'
    | 'RANCHER_K8S_CANARY_DEPLOY'
    | 'RANCHER_K8S_BLUE_GREEN_DEPLOY'
    | 'RANCHER_KUBERNETES_SWAP_SERVICE_SELECTORS'
    | 'RANCHER_K8S_DELETE'
    | 'RANCHER_K8S_DEPLOYMENT_ROLLING_ROLLBACK'
    | 'JIRA_CREATE_UPDATE'
    | 'SERVICENOW_CREATE_UPDATE'
    | 'K8S_TRAFFIC_SPLIT'
    | 'K8S_APPLY'
    | 'CUSTOM_DEPLOYMENT_FETCH_INSTANCES'
  pipelineId?: string
  pipelineExecutionId?: string
  phaseId?: string
  artifactName?: string
  envName?: string
  workflowName?: string
  appName?: string
  serviceName?: string
  phaseName?: string
  /*
   * @format int64
   */
  stateStartTs?: number
  pipelineName?: string
  executionStatus?:
    | 'ABORTED'
    | 'DISCONTINUING'
    | 'ERROR'
    | 'FAILED'
    | 'NEW'
    | 'PAUSED'
    | 'PAUSING'
    | 'QUEUED'
    | 'RESUMED'
    | 'RUNNING'
    | 'SCHEDULED'
    | 'STARTING'
    | 'SUCCESS'
    | 'WAITING'
    | 'SKIPPED'
    | 'ABORTING'
    | 'REJECTED'
    | 'EXPIRED'
    | 'PREPARING'
  noData?: boolean
  manualOverride?: boolean
  /*
   * @format date-time
   */
  validUntil?: string
  uuid: string
  appId: string
  createdBy?: EmbeddedUser
  /*
   * @format int64
   */
  createdAt?: number
  lastUpdatedBy?: EmbeddedUser
  /*
   * @format int64
   */
  lastUpdatedAt: number
}

export type RestResponseLinkedHashMapLongLinkedHashMapStringLinkedHashMapStringLinkedHashMapStringLinkedHashMapStringListContinuousVerificationExecutionMetaData =
  {
    metaData?: {
      [key: string]: Record<string, any>
    }
    resource?: {
      [key: string]: {
        [key: string]: {
          [key: string]: {
            [key: string]: {
              [key: string]: ContinuousVerificationExecutionMetaData[]
            }
          }
        }
      }
    }
    responseMessages?: ResponseMessage[]
  }

export type RestResponsePageResponseContinuousVerificationExecutionMetaData = {
  metaData?: {
    [key: string]: Record<string, any>
  }
  resource?: ContinuousVerificationExecutionMetaData[]
  responseMessages?: ResponseMessage[]
}

export type HeatMap = {
  cvConfiguration?: CVConfiguration
  riskLevelSummary?: HeatMapUnit[]
  observedTimeSeries?: {
    [key: string]: {
      [key: string]: TimeSeriesDataPoint[]
    }
  }
  predictedTimeSeries?: {
    [key: string]: {
      [key: string]: TimeSeriesDataPoint[]
    }
  }
}

export type HeatMapUnit = {
  /*
   * @format int64
   */
  startTime?: number
  /*
   * @format int64
   */
  endTime?: number
  /*
   * @format int32
   */
  highRisk?: number
  /*
   * @format int32
   */
  mediumRisk?: number
  /*
   * @format int32
   */
  lowRisk?: number
  /*
   * @format int32
   */
  na?: number
  /*
   * @format double
   */
  overallScore?: number
  scoreList?: number[]
  /*
   * @format double
   */
  keyTransactionScore?: number
  keyTransactionScoreList?: number[]
}

export type RestResponseListHeatMap = {
  metaData?: {
    [key: string]: Record<string, any>
  }
  resource?: HeatMap[]
  responseMessages?: ResponseMessage[]
}

export type TimeSeriesDataPoint = {
  /*
   * @format int64
   */
  timestamp?: number
  /*
   * @format double
   */
  value?: number
  /*
   * @format int32
   */
  risk?: number
}

export type CVDeploymentData = {
  appId?: string
  envId?: string
  serviceId?: string
  accountId?: string
  status?:
    | 'ABORTED'
    | 'DISCONTINUING'
    | 'ERROR'
    | 'FAILED'
    | 'NEW'
    | 'PAUSED'
    | 'PAUSING'
    | 'QUEUED'
    | 'RESUMED'
    | 'RUNNING'
    | 'SCHEDULED'
    | 'STARTING'
    | 'SUCCESS'
    | 'WAITING'
    | 'SKIPPED'
    | 'ABORTING'
    | 'REJECTED'
    | 'EXPIRED'
    | 'PREPARING'
  /*
   * @format int64
   */
  startTs?: number
  workflowExecutionId?: string
  pipelineExecutionId?: string
  workflowName?: string
  pipelineName?: string
}

export type RestResponseListCVDeploymentData = {
  metaData?: {
    [key: string]: Record<string, any>
  }
  resource?: CVDeploymentData[]
  responseMessages?: ResponseMessage[]
}

export type RestResponseListWorkflowExecution = {
  metaData?: {
    [key: string]: Record<string, any>
  }
  resource?: WorkflowExecution[]
  responseMessages?: ResponseMessage[]
}

export type RestResponseSortedSetTransactionTimeSeries = {
  metaData?: {
    [key: string]: Record<string, any>
  }
  /*
   * @uniqueItems true
   */
  resource?: TransactionTimeSeries[]
  responseMessages?: ResponseMessage[]
}

export type TimeSeriesOfMetric = {
  /*
   * @format int32
   */
  risk?: number
  metricName?: string
  metricType?: string
  metricDeeplinkUrl?: string
  /*
   * @format int64
   */
  lastSeenTime?: number
  timeSeries?: TimeSeriesDataPoint[]
  risksForTimeSeries?: TimeSeriesRisk[]
  longTermPattern?: boolean
}

export type TimeSeriesRisk = {
  /*
   * @format int64
   */
  startTime?: number
  /*
   * @format int64
   */
  endTime?: number
  /*
   * @format int32
   */
  risk?: number
}

export type TransactionTimeSeries = {
  tag?: string
  transactionName?: string
  /*
   * @uniqueItems true
   */
  metricTimeSeries?: TimeSeriesOfMetric[]
}

export type RestResponseServiceGuardTimeSeries = {
  metaData?: {
    [key: string]: Record<string, any>
  }
  resource?: ServiceGuardTimeSeries
  responseMessages?: ResponseMessage[]
}

export type ServiceGuardTimeSeries = {
  /*
   * @uniqueItems true
   */
  timeSeriesSet?: TransactionTimeSeries[]
  /*
   * @uniqueItems true
   */
  transactionsInAnalysis?: string[]
  /*
   * @format int32
   */
  totalRecords?: number
}

export type TimeSeriesFilter = {
  cvConfigId?: string
  /*
   * @format int64
   */
  startTime?: number
  /*
   * @format int64
   */
  endTime?: number
  /*
   * @format int64
   */
  historyStartTime?: number
  /*
   * @uniqueItems true
   */
  txnNames?: string[]
  /*
   * @uniqueItems true
   */
  metricNames?: string[]
  /*
   * @uniqueItems true
   */
  tags?: string[]
}

export type LogMLAnalysisSummary = {
  query?: string
  riskLevel?: 'HIGH' | 'MEDIUM' | 'LOW' | 'NA'
  analysisSummaryMessage?: string
  baseLineExecutionId?: string
  /*
   * @format double
   */
  score?: number
  /*
   * @format int32
   */
  highRiskClusters?: number
  /*
   * @format int32
   */
  mediumRiskClusters?: number
  /*
   * @format int32
   */
  lowRiskClusters?: number
  controlClusters?: LogMLClusterSummary[]
  testClusters?: LogMLClusterSummary[]
  unknownClusters?: LogMLClusterSummary[]
  ignoreClusters?: LogMLClusterSummary[]
  stateType?:
    | 'SUB_WORKFLOW'
    | 'REPEAT'
    | 'FORK'
    | 'WAIT'
    | 'PAUSE'
    | 'BARRIER'
    | 'RESOURCE_CONSTRAINT'
    | 'SHELL_SCRIPT'
    | 'HTTP'
    | 'TEMPLATIZED_SECRET_MANAGER'
    | 'EMAIL'
    | 'APP_DYNAMICS'
    | 'NEW_RELIC'
    | 'NEW_RELIC_DEPLOYMENT_MARKER'
    | 'DYNA_TRACE'
    | 'PROMETHEUS'
    | 'SPLUNKV2'
    | 'ELK'
    | 'LOGZ'
    | 'SUMO'
    | 'DATA_DOG'
    | 'DATA_DOG_LOG'
    | 'CVNG'
    | 'CLOUD_WATCH'
    | 'AWS_LAMBDA_VERIFICATION'
    | 'APM_VERIFICATION'
    | 'LOG_VERIFICATION'
    | 'BUG_SNAG'
    | 'STACK_DRIVER'
    | 'STACK_DRIVER_LOG'
    | 'INSTANA'
    | 'SCALYR'
    | 'ENV_STATE'
    | 'ENV_LOOP_STATE'
    | 'ENV_RESUME_STATE'
    | 'ENV_LOOP_RESUME_STATE'
    | 'COMMAND'
    | 'APPROVAL'
    | 'APPROVAL_RESUME'
    | 'ELASTIC_LOAD_BALANCER'
    | 'JENKINS'
    | 'GCB'
    | 'BAMBOO'
    | 'ARTIFACT_COLLECTION'
    | 'ARTIFACT_CHECK'
    | 'AZURE_NODE_SELECT'
    | 'AZURE_VMSS_SETUP'
    | 'AZURE_VMSS_DEPLOY'
    | 'AZURE_VMSS_ROLLBACK'
    | 'AZURE_VMSS_SWITCH_ROUTES'
    | 'AZURE_VMSS_SWITCH_ROUTES_ROLLBACK'
    | 'AZURE_WEBAPP_SLOT_SETUP'
    | 'AZURE_WEBAPP_SLOT_SWAP'
    | 'AZURE_WEBAPP_SLOT_SHIFT_TRAFFIC'
    | 'AZURE_WEBAPP_SLOT_ROLLBACK'
    | 'AWS_NODE_SELECT'
    | 'DC_NODE_SELECT'
    | 'ROLLING_NODE_SELECT'
    | 'PHASE'
    | 'PHASE_STEP'
    | 'STAGING_ORIGINAL_EXECUTION'
    | 'AWS_CODEDEPLOY_STATE'
    | 'AWS_CODEDEPLOY_ROLLBACK'
    | 'AWS_LAMBDA_STATE'
    | 'AWS_LAMBDA_ROLLBACK'
    | 'AWS_AMI_SERVICE_SETUP'
    | 'ASG_AMI_SERVICE_ALB_SHIFT_SETUP'
    | 'AWS_AMI_SERVICE_DEPLOY'
    | 'ASG_AMI_SERVICE_ALB_SHIFT_DEPLOY'
    | 'AWS_AMI_SWITCH_ROUTES'
    | 'ASG_AMI_ALB_SHIFT_SWITCH_ROUTES'
    | 'AWS_AMI_ROLLBACK_SWITCH_ROUTES'
    | 'ASG_AMI_ROLLBACK_ALB_SHIFT_SWITCH_ROUTES'
    | 'AWS_AMI_SERVICE_ROLLBACK'
    | 'ECS_SERVICE_SETUP'
    | 'SPOTINST_SETUP'
    | 'SPOTINST_ALB_SHIFT_SETUP'
    | 'SPOTINST_DEPLOY'
    | 'SPOTINST_ALB_SHIFT_DEPLOY'
    | 'SPOTINST_LISTENER_UPDATE'
    | 'SPOTINST_LISTENER_ALB_SHIFT'
    | 'SPOTINST_ROLLBACK'
    | 'SPOTINST_LISTENER_UPDATE_ROLLBACK'
    | 'SPOTINST_LISTENER_ALB_SHIFT_ROLLBACK'
    | 'ECS_SERVICE_SETUP_ROLLBACK'
    | 'ECS_DAEMON_SERVICE_SETUP'
    | 'ECS_BG_SERVICE_SETUP'
    | 'ECS_BG_SERVICE_SETUP_ROUTE53'
    | 'ECS_SERVICE_DEPLOY'
    | 'ECS_SERVICE_ROLLBACK'
    | 'ECS_LISTENER_UPDATE'
    | 'ECS_LISTENER_UPDATE_ROLLBACK'
    | 'ECS_ROUTE53_DNS_WEIGHT_UPDATE'
    | 'ECS_ROUTE53_DNS_WEIGHT_UPDATE_ROLLBACK'
    | 'KUBERNETES_SETUP'
    | 'KUBERNETES_SETUP_ROLLBACK'
    | 'KUBERNETES_DEPLOY'
    | 'KUBERNETES_DEPLOY_ROLLBACK'
    | 'KUBERNETES_STEADY_STATE_CHECK'
    | 'ECS_STEADY_STATE_CHECK'
    | 'ECS_RUN_TASK'
    | 'GCP_CLUSTER_SETUP'
    | 'HELM_DEPLOY'
    | 'HELM_ROLLBACK'
    | 'PCF_SETUP'
    | 'PCF_RESIZE'
    | 'PCF_ROLLBACK'
    | 'PCF_MAP_ROUTE'
    | 'PCF_UNMAP_ROUTE'
    | 'PCF_BG_MAP_ROUTE'
    | 'PCF_PLUGIN'
    | 'TERRAFORM_PROVISION'
    | 'TERRAFORM_APPLY'
    | 'TERRAGRUNT_PROVISION'
    | 'TERRAGRUNT_DESTROY'
    | 'TERRAGRUNT_ROLLBACK'
    | 'ARM_CREATE_RESOURCE'
    | 'ARM_ROLLBACK'
    | 'SHELL_SCRIPT_PROVISION'
    | 'TERRAFORM_DESTROY'
    | 'CLOUD_FORMATION_CREATE_STACK'
    | 'CLOUD_FORMATION_DELETE_STACK'
    | 'KUBERNETES_SWAP_SERVICE_SELECTORS'
    | 'CLOUD_FORMATION_ROLLBACK_STACK'
    | 'TERRAFORM_ROLLBACK'
    | 'K8S_DEPLOYMENT_ROLLING'
    | 'K8S_SCALE'
    | 'K8S_DEPLOYMENT_ROLLING_ROLLBACK'
    | 'K8S_BLUE_GREEN_DEPLOY'
    | 'K8S_CANARY_DEPLOY'
    | 'K8S_DELETE'
    | 'RANCHER_RESOLVE'
    | 'RANCHER_K8S_DEPLOYMENT_ROLLING'
    | 'RANCHER_K8S_CANARY_DEPLOY'
    | 'RANCHER_K8S_BLUE_GREEN_DEPLOY'
    | 'RANCHER_KUBERNETES_SWAP_SERVICE_SELECTORS'
    | 'RANCHER_K8S_DELETE'
    | 'RANCHER_K8S_DEPLOYMENT_ROLLING_ROLLBACK'
    | 'JIRA_CREATE_UPDATE'
    | 'SERVICENOW_CREATE_UPDATE'
    | 'K8S_TRAFFIC_SPLIT'
    | 'K8S_APPLY'
    | 'CUSTOM_DEPLOYMENT_FETCH_INSTANCES'
  analysisComparisonStrategy?: 'COMPARE_WITH_PREVIOUS' | 'COMPARE_WITH_CURRENT' | 'PREDICTIVE'
  /*
   * @format int32
   */
  analysisMinute?: number
  /*
   * @format int32
   */
  progress?: number
  /*
   * @format int32
   */
  timeDuration?: number
  /*
   * @uniqueItems true
   */
  newVersionNodes?: string[]
  /*
   * @uniqueItems true
   */
  previousVersionNodes?: string[]
  /*
   * @format int64
   */
  baselineStartTime?: number
  /*
   * @format int64
   */
  baselineEndTime?: number
  emptyResult?: boolean
}

export type LogMLClusterSummary = {
  hostSummary?: {
    [key: string]: LogMLHostSummary
  }
  logText?: string
  tags?: string[]
  /*
   * @format double
   */
  score?: number
  riskLevel?: 'HIGH' | 'MEDIUM' | 'LOW' | 'NA'
  priority?: 'BASELINE' | 'P5' | 'P4' | 'P3' | 'P2' | 'P1' | 'P0'
  /*
   * @format int32
   */
  clusterLabel?: number
  logMLFeedbackType?:
    | 'IGNORE_SERVICE'
    | 'IGNORE_WORKFLOW'
    | 'IGNORE_WORKFLOW_EXECUTION'
    | 'IGNORE_ALWAYS'
    | 'DISMISS'
    | 'PRIORITIZE'
    | 'THUMBS_UP'
    | 'THUMBS_DOWN'
    | 'UNDO_IGNORE'
  logMLFeedbackId?: string
  jiraLink?: string
  feedbackSummary?: LogMLFeedbackSummary
}

export type LogMLFeedbackSummary = {
  priority?: 'BASELINE' | 'P5' | 'P4' | 'P3' | 'P2' | 'P1' | 'P0'
  logMLFeedbackId?: string
  jiraLink?: string
  feedbackNote?: string
  lastUpdatedBy?: EmbeddedUser
  /*
   * @format int64
   */
  lastUpdatedAt?: number
}

export type LogMLHostSummary = {
  /*
   * @format int32
   */
  count?: number
  unexpectedFreq?: boolean
  frequencies?: number[]
  frequencyMap?: {
    [key: string]: number
  }
  /*
   * @format double
   */
  xcordinate?: number
  /*
   * @format double
   */
  ycordinate?: number
}

export type RestResponseLogMLAnalysisSummary = {
  metaData?: {
    [key: string]: Record<string, any>
  }
  resource?: LogMLAnalysisSummary
  responseMessages?: ResponseMessage[]
}

export type RestResponseMapStringDouble = {
  metaData?: {
    [key: string]: Record<string, any>
  }
  resource?: {
    [key: string]: number
  }
  responseMessages?: ResponseMessage[]
}

export type RestResponseLong = {
  metaData?: {
    [key: string]: Record<string, any>
  }
  /*
   * @format int64
   */
  resource?: number
  responseMessages?: ResponseMessage[]
}

export type APMFetchConfig = {
  url?: string
  body?: string
  guid?: string
}

export type APMSetupTestNodeData = {
  fetchConfig?: APMFetchConfig
  apmMetricCollectionInfo?: MetricCollectionInfo
  host?: string
  appId: string
  settingId: string
  instanceName?: string
  isServiceLevel?: boolean
  instanceElement?: Instance
  hostExpression?: string
  workflowId?: string
  guid?: string
  stateType?:
    | 'SUB_WORKFLOW'
    | 'REPEAT'
    | 'FORK'
    | 'WAIT'
    | 'PAUSE'
    | 'BARRIER'
    | 'RESOURCE_CONSTRAINT'
    | 'SHELL_SCRIPT'
    | 'HTTP'
    | 'TEMPLATIZED_SECRET_MANAGER'
    | 'EMAIL'
    | 'APP_DYNAMICS'
    | 'NEW_RELIC'
    | 'NEW_RELIC_DEPLOYMENT_MARKER'
    | 'DYNA_TRACE'
    | 'PROMETHEUS'
    | 'SPLUNKV2'
    | 'ELK'
    | 'LOGZ'
    | 'SUMO'
    | 'DATA_DOG'
    | 'DATA_DOG_LOG'
    | 'CVNG'
    | 'CLOUD_WATCH'
    | 'AWS_LAMBDA_VERIFICATION'
    | 'APM_VERIFICATION'
    | 'LOG_VERIFICATION'
    | 'BUG_SNAG'
    | 'STACK_DRIVER'
    | 'STACK_DRIVER_LOG'
    | 'INSTANA'
    | 'SCALYR'
    | 'ENV_STATE'
    | 'ENV_LOOP_STATE'
    | 'ENV_RESUME_STATE'
    | 'ENV_LOOP_RESUME_STATE'
    | 'COMMAND'
    | 'APPROVAL'
    | 'APPROVAL_RESUME'
    | 'ELASTIC_LOAD_BALANCER'
    | 'JENKINS'
    | 'GCB'
    | 'BAMBOO'
    | 'ARTIFACT_COLLECTION'
    | 'ARTIFACT_CHECK'
    | 'AZURE_NODE_SELECT'
    | 'AZURE_VMSS_SETUP'
    | 'AZURE_VMSS_DEPLOY'
    | 'AZURE_VMSS_ROLLBACK'
    | 'AZURE_VMSS_SWITCH_ROUTES'
    | 'AZURE_VMSS_SWITCH_ROUTES_ROLLBACK'
    | 'AZURE_WEBAPP_SLOT_SETUP'
    | 'AZURE_WEBAPP_SLOT_SWAP'
    | 'AZURE_WEBAPP_SLOT_SHIFT_TRAFFIC'
    | 'AZURE_WEBAPP_SLOT_ROLLBACK'
    | 'AWS_NODE_SELECT'
    | 'DC_NODE_SELECT'
    | 'ROLLING_NODE_SELECT'
    | 'PHASE'
    | 'PHASE_STEP'
    | 'STAGING_ORIGINAL_EXECUTION'
    | 'AWS_CODEDEPLOY_STATE'
    | 'AWS_CODEDEPLOY_ROLLBACK'
    | 'AWS_LAMBDA_STATE'
    | 'AWS_LAMBDA_ROLLBACK'
    | 'AWS_AMI_SERVICE_SETUP'
    | 'ASG_AMI_SERVICE_ALB_SHIFT_SETUP'
    | 'AWS_AMI_SERVICE_DEPLOY'
    | 'ASG_AMI_SERVICE_ALB_SHIFT_DEPLOY'
    | 'AWS_AMI_SWITCH_ROUTES'
    | 'ASG_AMI_ALB_SHIFT_SWITCH_ROUTES'
    | 'AWS_AMI_ROLLBACK_SWITCH_ROUTES'
    | 'ASG_AMI_ROLLBACK_ALB_SHIFT_SWITCH_ROUTES'
    | 'AWS_AMI_SERVICE_ROLLBACK'
    | 'ECS_SERVICE_SETUP'
    | 'SPOTINST_SETUP'
    | 'SPOTINST_ALB_SHIFT_SETUP'
    | 'SPOTINST_DEPLOY'
    | 'SPOTINST_ALB_SHIFT_DEPLOY'
    | 'SPOTINST_LISTENER_UPDATE'
    | 'SPOTINST_LISTENER_ALB_SHIFT'
    | 'SPOTINST_ROLLBACK'
    | 'SPOTINST_LISTENER_UPDATE_ROLLBACK'
    | 'SPOTINST_LISTENER_ALB_SHIFT_ROLLBACK'
    | 'ECS_SERVICE_SETUP_ROLLBACK'
    | 'ECS_DAEMON_SERVICE_SETUP'
    | 'ECS_BG_SERVICE_SETUP'
    | 'ECS_BG_SERVICE_SETUP_ROUTE53'
    | 'ECS_SERVICE_DEPLOY'
    | 'ECS_SERVICE_ROLLBACK'
    | 'ECS_LISTENER_UPDATE'
    | 'ECS_LISTENER_UPDATE_ROLLBACK'
    | 'ECS_ROUTE53_DNS_WEIGHT_UPDATE'
    | 'ECS_ROUTE53_DNS_WEIGHT_UPDATE_ROLLBACK'
    | 'KUBERNETES_SETUP'
    | 'KUBERNETES_SETUP_ROLLBACK'
    | 'KUBERNETES_DEPLOY'
    | 'KUBERNETES_DEPLOY_ROLLBACK'
    | 'KUBERNETES_STEADY_STATE_CHECK'
    | 'ECS_STEADY_STATE_CHECK'
    | 'ECS_RUN_TASK'
    | 'GCP_CLUSTER_SETUP'
    | 'HELM_DEPLOY'
    | 'HELM_ROLLBACK'
    | 'PCF_SETUP'
    | 'PCF_RESIZE'
    | 'PCF_ROLLBACK'
    | 'PCF_MAP_ROUTE'
    | 'PCF_UNMAP_ROUTE'
    | 'PCF_BG_MAP_ROUTE'
    | 'PCF_PLUGIN'
    | 'TERRAFORM_PROVISION'
    | 'TERRAFORM_APPLY'
    | 'TERRAGRUNT_PROVISION'
    | 'TERRAGRUNT_DESTROY'
    | 'TERRAGRUNT_ROLLBACK'
    | 'ARM_CREATE_RESOURCE'
    | 'ARM_ROLLBACK'
    | 'SHELL_SCRIPT_PROVISION'
    | 'TERRAFORM_DESTROY'
    | 'CLOUD_FORMATION_CREATE_STACK'
    | 'CLOUD_FORMATION_DELETE_STACK'
    | 'KUBERNETES_SWAP_SERVICE_SELECTORS'
    | 'CLOUD_FORMATION_ROLLBACK_STACK'
    | 'TERRAFORM_ROLLBACK'
    | 'K8S_DEPLOYMENT_ROLLING'
    | 'K8S_SCALE'
    | 'K8S_DEPLOYMENT_ROLLING_ROLLBACK'
    | 'K8S_BLUE_GREEN_DEPLOY'
    | 'K8S_CANARY_DEPLOY'
    | 'K8S_DELETE'
    | 'RANCHER_RESOLVE'
    | 'RANCHER_K8S_DEPLOYMENT_ROLLING'
    | 'RANCHER_K8S_CANARY_DEPLOY'
    | 'RANCHER_K8S_BLUE_GREEN_DEPLOY'
    | 'RANCHER_KUBERNETES_SWAP_SERVICE_SELECTORS'
    | 'RANCHER_K8S_DELETE'
    | 'RANCHER_K8S_DEPLOYMENT_ROLLING_ROLLBACK'
    | 'JIRA_CREATE_UPDATE'
    | 'SERVICENOW_CREATE_UPDATE'
    | 'K8S_TRAFFIC_SPLIT'
    | 'K8S_APPLY'
    | 'CUSTOM_DEPLOYMENT_FETCH_INSTANCES'
  /*
   * @format int64
   */
  toTime?: number
  /*
   * @format int64
   */
  fromTime?: number
  serviceLevel?: boolean
}

export type MetricCollectionInfo = {
  metricName?: string
  metricType?: 'INFRA' | 'VALUE' | 'RESP_TIME' | 'THROUGHPUT' | 'ERROR' | 'APDEX' | 'VALUE_LOWER'
  tag?: string
  collectionUrl?: string
  baselineCollectionUrl?: string
  collectionBody?: string
  responseType?: 'JSON'
  responseMapping?: ResponseMapping
  method?: 'POST' | 'GET'
}

export type ResponseMapping = {
  logMessageJsonPath?: string
  hostJsonPath?: string
  hostRegex?: string
  timestampJsonPath?: string
  timestampFormat?: string
}

export type Store = {
  name?: string
}

export type VerificationDataAnalysisResponse = {
  executionStatus?:
    | 'ABORTED'
    | 'DISCONTINUING'
    | 'ERROR'
    | 'FAILED'
    | 'NEW'
    | 'PAUSED'
    | 'PAUSING'
    | 'QUEUED'
    | 'RESUMED'
    | 'RUNNING'
    | 'SCHEDULED'
    | 'STARTING'
    | 'SUCCESS'
    | 'WAITING'
    | 'SKIPPED'
    | 'ABORTING'
    | 'REJECTED'
    | 'EXPIRED'
    | 'PREPARING'
  stateExecutionData?: VerificationStateAnalysisExecutionData
}

export type VerificationStateAnalysisExecutionData = {
  wingsPersistence?: WingsPersistence
  correlationId?: string
  stateExecutionInstanceId?: string
  baselineExecutionId?: string
  serverConfigId?: string
  /*
   * @uniqueItems true
   */
  canaryNewHostNames?: string[]
  /*
   * @uniqueItems true
   */
  lastExecutionNodes?: string[]
  /*
   * @format int32
   */
  analysisMinute?: number
  query?: string
  /*
   * @format int32
   */
  progressPercentage?: number
  comparisonStrategy?: 'COMPARE_WITH_PREVIOUS' | 'COMPARE_WITH_CURRENT' | 'PREDICTIVE'
  /*
   * @format int64
   */
  remainingMinutes?: number
  customThresholdRefId?: string
  stateName?: string
  stateType?: string
  /*
   * @format int64
   */
  startTs?: number
  /*
   * @format int64
   */
  endTs?: number
  status?:
    | 'ABORTED'
    | 'DISCONTINUING'
    | 'ERROR'
    | 'FAILED'
    | 'NEW'
    | 'PAUSED'
    | 'PAUSING'
    | 'QUEUED'
    | 'RESUMED'
    | 'RUNNING'
    | 'SCHEDULED'
    | 'STARTING'
    | 'SUCCESS'
    | 'WAITING'
    | 'SKIPPED'
    | 'ABORTING'
    | 'REJECTED'
    | 'EXPIRED'
    | 'PREPARING'
  errorMsg?: string
  /*
   * @format int32
   */
  waitInterval?: number
  element?: ContextElement
  stateParams?: {
    [key: string]: Record<string, any>
  }
  delegateMetaInfo?: DelegateMetaInfo
  templateVariable?: {
    [key: string]: Record<string, any>
  }
}

export type WingsPersistence = {
  classStores?: {
    [key: string]: Store
  }
}

export type AdditionalMetadata = {
  values?: {
    [key: string]: Record<string, any>
  }
}

export type DataCollectionInfoV2 = {
  accountId?: string
  applicationId?: string
  envId?: string
  /*
   * @format int64
   */
  startTime?: number
  /*
   * @format int64
   */
  endTime?: number
  /*
   * @uniqueItems true
   */
  hosts?: string[]
  cvConfigId?: string
  stateExecutionId?: string
  workflowId?: string
  workflowExecutionId?: string
  serviceId?: string
  cvTaskId?: string
  connectorId?: string
  encryptedDataDetails?: EncryptedDataDetail[]
  /*
   * @format int64
   */
  dataCollectionStartTime?: number
  shouldSendHeartbeat?: boolean
}

export type EncryptedDataDetail = {
  encryptedData?: EncryptedRecordData
  encryptionConfig?: EncryptionConfig
  fieldName?: string
  identifier?: SecretUniqueIdentifier
}

export type EncryptedDataParams = {
  name?: string
  value?: string
}

export type EncryptedRecordData = {
  uuid?: string
  name?: string
  path?: string
  /*
   * @uniqueItems true
   */
  parameters?: EncryptedDataParams[]
  encryptionKey?: string
  encryptedValue?: string[]
  kmsId?: string
  encryptionType?:
    | 'LOCAL'
    | 'KMS'
    | 'GCP_KMS'
    | 'AWS_SECRETS_MANAGER'
    | 'AZURE_VAULT'
    | 'CYBERARK'
    | 'VAULT'
    | 'GCP_SECRETS_MANAGER'
    | 'CUSTOM'
    | 'VAULT_SSH'
  backupEncryptedValue?: string[]
  backupEncryptionKey?: string
  backupKmsId?: string
  backupEncryptionType?:
    | 'LOCAL'
    | 'KMS'
    | 'GCP_KMS'
    | 'AWS_SECRETS_MANAGER'
    | 'AZURE_VAULT'
    | 'CYBERARK'
    | 'VAULT'
    | 'GCP_SECRETS_MANAGER'
    | 'CUSTOM'
    | 'VAULT_SSH'
  base64Encoded?: boolean
  additionalMetadata?: AdditionalMetadata
}

export type EncryptionConfig = {
  name?: string
  ['default']?: boolean
  type?: 'KMS' | 'VAULT' | 'CUSTOM' | 'SSH'
  uuid?: string
  encryptionType?:
    | 'LOCAL'
    | 'KMS'
    | 'GCP_KMS'
    | 'AWS_SECRETS_MANAGER'
    | 'AZURE_VAULT'
    | 'CYBERARK'
    | 'VAULT'
    | 'GCP_SECRETS_MANAGER'
    | 'CUSTOM'
    | 'VAULT_SSH'
  /*
   * @format int32
   */
  numOfEncryptedValue?: number
  encryptionServiceUrl?: string
  validationCriteria?: string
  globalKms?: boolean
  accountId?: string
}

export type SecretUniqueIdentifier = {
  kmsId?: string
}

export type RestResponseStateExecutionData = {
  metaData?: {
    [key: string]: Record<string, any>
  }
  resource?: StateExecutionData
  responseMessages?: ResponseMessage[]
}

export type CVCertifiedDetailsForWorkflowState = {
  workflowName?: string
  workflowId?: string
  workflowExecutionId?: string
  pipelineId?: string
  pipelineName?: string
  pipelineExecutionId?: string
  phaseName?: string
  stateExecutionId?: string
  executionDetails?: StateExecutionInstance
}

export type ExecutionEventAdvisor = Record<string, any>

export type ExecutionInterruptEffect = {
  interruptId?: string
  /*
   * @format date-time
   */
  tookEffectAt?: string
}

export type LoopParams = Record<string, any>

export type RestResponseListCVCertifiedDetailsForWorkflowState = {
  metaData?: {
    [key: string]: Record<string, any>
  }
  resource?: CVCertifiedDetailsForWorkflowState[]
  responseMessages?: ResponseMessage[]
}

export type StateExecutionInstance = {
  uuid?: string
  appId?: string
  /*
   * @format int64
   */
  createdAt?: number
  /*
   * @format int64
   */
  lastUpdatedAt?: number
  accountId?: string
  childStateMachineId?: string
  displayName?: string
  stateName?: string
  stateType?: string
  contextElement?: ContextElement
  contextTransition?: boolean
  rollback?: boolean
  waitingForInputs?: boolean
  actionOnTimeout?:
    | 'MANUAL_INTERVENTION'
    | 'ROLLBACK_WORKFLOW'
    | 'ROLLBACK_PROVISIONER_AFTER_PHASES'
    | 'ROLLBACK_PHASE'
    | 'IGNORE'
    | 'RETRY'
    | 'END_EXECUTION'
    | 'CONTINUE_WITH_DEFAULTS'
    | 'ABORT_WORKFLOW_EXECUTION'
  continued?: boolean
  waitingForManualIntervention?: boolean
  actionAfterManualInterventionTimeout?:
    | 'ABORT'
    | 'ABORT_ALL'
    | 'PAUSE'
    | 'PAUSE_FOR_INPUTS'
    | 'PAUSE_ALL'
    | 'RESUME'
    | 'RESUME_ALL'
    | 'RETRY'
    | 'IGNORE'
    | 'WAITING_FOR_MANUAL_INTERVENTION'
    | 'MARK_FAILED'
    | 'MARK_SUCCESS'
    | 'ROLLBACK'
    | 'ROLLBACK_PROVISIONER_AFTER_PHASES'
    | 'NEXT_STEP'
    | 'END_EXECUTION'
    | 'ROLLBACK_DONE'
    | 'MARK_EXPIRED'
    | 'CONTINUE_WITH_DEFAULTS'
    | 'CONTINUE_PIPELINE_STAGE'
  delegateTaskId?: string
  delegateTasksDetails?: DelegateTaskDetails[]
  selectionLogsTrackingForTasksEnabled?: boolean
  rollbackPhaseName?: string
  parentLoopedState?: boolean
  loopedStateParams?: LoopParams
  contextElements?: ContextElement[]
  stateExecutionMap?: {
    [key: string]: StateExecutionData
  }
  stateExecutionDataHistory?: StateExecutionData[]
  /*
   * @format int32
   */
  dedicatedInterruptCount?: number
  interruptHistory?: ExecutionInterruptEffect[]
  executionEventAdvisors?: ExecutionEventAdvisor[]
  notifyElements?: ContextElement[]
  callback?: StateMachineExecutionCallback
  executionName?: string
  executionType?: 'PIPELINE' | 'ORCHESTRATION'
  executionUuid?: string
  parentInstanceId?: string
  subGraphFilterId?: string
  prevInstanceId?: string
  nextInstanceId?: string
  cloneInstanceId?: string
  notifyId?: string
  status?:
    | 'ABORTED'
    | 'DISCONTINUING'
    | 'ERROR'
    | 'FAILED'
    | 'NEW'
    | 'PAUSED'
    | 'PAUSING'
    | 'QUEUED'
    | 'RESUMED'
    | 'RUNNING'
    | 'SCHEDULED'
    | 'STARTING'
    | 'SUCCESS'
    | 'WAITING'
    | 'SKIPPED'
    | 'ABORTING'
    | 'REJECTED'
    | 'EXPIRED'
    | 'PREPARING'
  stateParams?: {
    [key: string]: Record<string, any>
  }
  /*
   * @format int64
   */
  startTs?: number
  /*
   * @format int64
   */
  endTs?: number
  /*
   * @format int64
   */
  expiryTs?: number
  /*
   * @format int64
   */
  stateTimeout?: number
  retry?: boolean
  /*
   * @format int32
   */
  retryCount?: number
  hasInspection?: boolean
  workflowId?: string
  pipelineStageElementId?: string
  /*
   * @format int32
   */
  pipelineStageParallelIndex?: number
  stageName?: string
  phaseSubWorkflowId?: string
  stepId?: string
  orchestrationWorkflowType?: 'BUILD' | 'BASIC' | 'CANARY' | 'MULTI_SERVICE' | 'BLUE_GREEN' | 'ROLLING' | 'CUSTOM'
  isOnDemandRollback?: boolean
  rollbackProvisionerAfterPhases?: boolean
}

export type StateMachineExecutionCallback = Record<string, any>

export type EntitySummary = {
  id?: string
  name?: string
  type?: string
}

export type EntitySummaryStats = {
  entitySummary?: EntitySummary
  /*
   * @format int64
   */
  count?: number
}

export type InstanceSummaryStats = {
  /*
   * @format int64
   */
  totalCount?: number
  countMap?: {
    [key: string]: EntitySummaryStats[]
  }
}

export type RestResponseInstanceSummaryStats = {
  metaData?: {
    [key: string]: Record<string, any>
  }
  resource?: InstanceSummaryStats
  responseMessages?: ResponseMessage[]
}

export type ContainerInstanceKey = {
  containerId?: string
  namespace?: string
}

export type HostInstanceKey = {
  hostName?: string
  infraMappingId?: string
}

export type InstanceInfo = Record<string, any>

export type PcfInstanceKey = {
  id?: string
}

export type PodInstanceKey = {
  podName?: string
  namespace?: string
}

export type RestResponseInstance = {
  metaData?: {
    [key: string]: Record<string, any>
  }
  resource?: Instance
  responseMessages?: ResponseMessage[]
}

export type EnvironmentSummary = {
  id?: string
  name?: string
  type?: string
  prod?: boolean
}

export type InstanceStats = {
  /*
   * @format int64
   */
  totalCount?: number
  entitySummaryList?: EntitySummary[]
  invocationCount?: InvocationCount
}

export type InstanceStatsByArtifact = {
  entitySummary?: ArtifactSummary
  instanceStats?: InstanceStats
}

export type InstanceStatsByEnvironment = {
  environmentSummary?: EnvironmentSummary
  instanceStatsByArtifactList?: InstanceStatsByArtifact[]
  infraMappingSyncStatusList?: SyncStatus[]
  hasSyncIssues?: boolean
}

export type InvocationCount = {
  key?: 'LAST_30_DAYS' | 'SINCE_LAST_DEPLOYED'
  /*
   * @format int64
   */
  count?: number
  /*
   * @format int64
   */
  from?: number
  /*
   * @format int64
   */
  to?: number
}

export type RestResponseListInstanceStatsByEnvironment = {
  metaData?: {
    [key: string]: Record<string, any>
  }
  resource?: InstanceStatsByEnvironment[]
  responseMessages?: ResponseMessage[]
}

export type SyncStatus = {
  uuid: string
  appId: string
  createdBy?: EmbeddedUser
  /*
   * @format int64
   */
  createdAt?: number
  lastUpdatedBy?: EmbeddedUser
  /*
   * @format int64
   */
  lastUpdatedAt: number
  envId?: string
  serviceId?: string
  infraMappingId?: string
  infraMappingName?: string
  /*
   * @format int64
   */
  lastSyncedAt?: number
  /*
   * @format int64
   */
  lastSuccessfullySyncedAt?: number
  syncFailureReason?: string
}

export type CurrentActiveInstances = {
  environment?: EntitySummary
  /*
   * @format int64
   */
  instanceCount?: number
  artifact?: ArtifactSummary
  manifest?: ManifestSummary
  serviceInfra?: EntitySummary
  workflow?: EntitySummary
  /*
   * @format date-time
   */
  lastWorkflowExecutionDate?: string
  /*
   * @format date-time
   */
  deployedAt?: string
  lastWorkflowExecution?: EntitySummary
  lastPipelineExecution?: EntitySummary
  onDemandRollbackAvailable?: boolean
}

export type DeploymentHistory = {
  artifact?: ArtifactSummary
  manifest?: ManifestSummary
  /*
   * @format date-time
   */
  deployedAt?: string
  status?: string
  triggeredBy?: EntitySummary
  pipeline?: EntitySummary
  workflow?: EntitySummary
  /*
   * @format int64
   */
  instanceCount?: number
  inframappings?: EntitySummary[]
  envs?: EntitySummary[]
  rolledBack?: boolean
}

export type RestResponseServiceInstanceDashboard = {
  metaData?: {
    [key: string]: Record<string, any>
  }
  resource?: ServiceInstanceDashboard
  responseMessages?: ResponseMessage[]
}

export type ServiceInstanceDashboard = {
  serviceSummary?: EntitySummary
  currentActiveInstancesList?: CurrentActiveInstances[]
  deploymentHistoryList?: DeploymentHistory[]
}

export type CompareEnvironmentAggregationResponseInfo = {
  serviceId?: string
  serviceName?: string
  count?: string
  envInfo?: {
    [key: string]: ServiceInfoResponseSummary[]
  }
}

export type RestResponsePageResponseCompareEnvironmentAggregationResponseInfo = {
  metaData?: {
    [key: string]: Record<string, any>
  }
  resource?: CompareEnvironmentAggregationResponseInfo[]
  responseMessages?: ResponseMessage[]
}

export type ServiceInfoResponseSummary = {
  lastArtifactBuildNum?: string
  lastWorkflowExecutionId?: string
  lastWorkflowExecutionName?: string
  infraMappingId?: string
  infraMappingName?: string
}

export type InstanceStatsByService = {
  /*
   * @format int64
   */
  totalCount?: number
  serviceSummary?: ServiceSummary
  instanceStatsByEnvList?: InstanceStatsByEnvironment[]
}

export type RestResponseListInstanceStatsByService = {
  metaData?: {
    [key: string]: Record<string, any>
  }
  resource?: InstanceStatsByService[]
  responseMessages?: ResponseMessage[]
}

export type ServiceSummary = {
  id?: string
  name?: string
  type?: string
  appSummary?: EntitySummary
}

export type InstanceSummaryStatsByService = {
  /*
   * @format int64
   */
  totalCount?: number
  /*
   * @format int64
   */
  prodCount?: number
  /*
   * @format int64
   */
  nonprodCount?: number
  serviceSummary?: ServiceSummary
  invocationCount?: InvocationCount
}

export type RestResponsePageResponseInstanceSummaryStatsByService = {
  metaData?: {
    [key: string]: Record<string, any>
  }
  resource?: InstanceSummaryStatsByService[]
  responseMessages?: ResponseMessage[]
}

export type RestResponseListBoolean = {
  metaData?: {
    [key: string]: Record<string, any>
  }
  resource?: boolean[]
  responseMessages?: ResponseMessage[]
}

export type Aggregate = {
  entityType?: string
  name?: string
  id?: string
  entityDeleted?: boolean
  /*
   * @format int64
   */
  invocationCount?: number
  invocationCountKey?: 'LAST_30_DAYS' | 'SINCE_LAST_DEPLOYED'
}

export type DataPoint = {
  /*
   * @format int64
   */
  timestamp?: number
  accountId?: string
  aggregateInvocationCountList?: Aggregate[]
  /*
   * @format int64
   */
  totalInvocationCount?: number
  invocationCountKey?: 'LAST_30_DAYS' | 'SINCE_LAST_DEPLOYED'
}

export type InstanceTimeline = {
  points?: DataPoint[]
  localPercentile?: {
    [key: string]: Record<string, any>
  }
}

export type RestResponseInstanceTimeline = {
  metaData?: {
    [key: string]: Record<string, any>
  }
  resource?: InstanceTimeline
  responseMessages?: ResponseMessage[]
}

export type RestResponseListTimeRange = {
  metaData?: {
    [key: string]: Record<string, any>
  }
  resource?: TimeRange[]
  responseMessages?: ResponseMessage[]
}

export type TimeRange = {
  /*
   * @format int64
   */
  from?: number
  /*
   * @format int64
   */
  to?: number
  timeZone?: string
  durationBased?: boolean
  /*
   * @format int64
   */
  duration?: number
  /*
   * @format int64
   */
  endTime?: number
  freezeOccurrence?: 'DAILY' | 'WEEKLY' | 'MONTHLY' | 'ANNUAL'
  expires?: boolean
  label?: string
}

export type Metric = {
  metricName?: string
  mlMetricType?: 'INFRA' | 'VALUE' | 'RESP_TIME' | 'THROUGHPUT' | 'ERROR' | 'APDEX' | 'VALUE_LOWER'
  displayName?: string
  /*
   * @uniqueItems true
   */
  tags?: string[]
}

export type RestResponseListMetric = {
  metaData?: {
    [key: string]: Record<string, any>
  }
  resource?: Metric[]
  responseMessages?: ResponseMessage[]
}

export type DataDogSetupTestNodeData = {
  appId: string
  settingId: string
  instanceName?: string
  isServiceLevel?: boolean
  instanceElement?: Instance
  hostExpression?: string
  workflowId?: string
  guid?: string
  stateType?:
    | 'SUB_WORKFLOW'
    | 'REPEAT'
    | 'FORK'
    | 'WAIT'
    | 'PAUSE'
    | 'BARRIER'
    | 'RESOURCE_CONSTRAINT'
    | 'SHELL_SCRIPT'
    | 'HTTP'
    | 'TEMPLATIZED_SECRET_MANAGER'
    | 'EMAIL'
    | 'APP_DYNAMICS'
    | 'NEW_RELIC'
    | 'NEW_RELIC_DEPLOYMENT_MARKER'
    | 'DYNA_TRACE'
    | 'PROMETHEUS'
    | 'SPLUNKV2'
    | 'ELK'
    | 'LOGZ'
    | 'SUMO'
    | 'DATA_DOG'
    | 'DATA_DOG_LOG'
    | 'CVNG'
    | 'CLOUD_WATCH'
    | 'AWS_LAMBDA_VERIFICATION'
    | 'APM_VERIFICATION'
    | 'LOG_VERIFICATION'
    | 'BUG_SNAG'
    | 'STACK_DRIVER'
    | 'STACK_DRIVER_LOG'
    | 'INSTANA'
    | 'SCALYR'
    | 'ENV_STATE'
    | 'ENV_LOOP_STATE'
    | 'ENV_RESUME_STATE'
    | 'ENV_LOOP_RESUME_STATE'
    | 'COMMAND'
    | 'APPROVAL'
    | 'APPROVAL_RESUME'
    | 'ELASTIC_LOAD_BALANCER'
    | 'JENKINS'
    | 'GCB'
    | 'BAMBOO'
    | 'ARTIFACT_COLLECTION'
    | 'ARTIFACT_CHECK'
    | 'AZURE_NODE_SELECT'
    | 'AZURE_VMSS_SETUP'
    | 'AZURE_VMSS_DEPLOY'
    | 'AZURE_VMSS_ROLLBACK'
    | 'AZURE_VMSS_SWITCH_ROUTES'
    | 'AZURE_VMSS_SWITCH_ROUTES_ROLLBACK'
    | 'AZURE_WEBAPP_SLOT_SETUP'
    | 'AZURE_WEBAPP_SLOT_SWAP'
    | 'AZURE_WEBAPP_SLOT_SHIFT_TRAFFIC'
    | 'AZURE_WEBAPP_SLOT_ROLLBACK'
    | 'AWS_NODE_SELECT'
    | 'DC_NODE_SELECT'
    | 'ROLLING_NODE_SELECT'
    | 'PHASE'
    | 'PHASE_STEP'
    | 'STAGING_ORIGINAL_EXECUTION'
    | 'AWS_CODEDEPLOY_STATE'
    | 'AWS_CODEDEPLOY_ROLLBACK'
    | 'AWS_LAMBDA_STATE'
    | 'AWS_LAMBDA_ROLLBACK'
    | 'AWS_AMI_SERVICE_SETUP'
    | 'ASG_AMI_SERVICE_ALB_SHIFT_SETUP'
    | 'AWS_AMI_SERVICE_DEPLOY'
    | 'ASG_AMI_SERVICE_ALB_SHIFT_DEPLOY'
    | 'AWS_AMI_SWITCH_ROUTES'
    | 'ASG_AMI_ALB_SHIFT_SWITCH_ROUTES'
    | 'AWS_AMI_ROLLBACK_SWITCH_ROUTES'
    | 'ASG_AMI_ROLLBACK_ALB_SHIFT_SWITCH_ROUTES'
    | 'AWS_AMI_SERVICE_ROLLBACK'
    | 'ECS_SERVICE_SETUP'
    | 'SPOTINST_SETUP'
    | 'SPOTINST_ALB_SHIFT_SETUP'
    | 'SPOTINST_DEPLOY'
    | 'SPOTINST_ALB_SHIFT_DEPLOY'
    | 'SPOTINST_LISTENER_UPDATE'
    | 'SPOTINST_LISTENER_ALB_SHIFT'
    | 'SPOTINST_ROLLBACK'
    | 'SPOTINST_LISTENER_UPDATE_ROLLBACK'
    | 'SPOTINST_LISTENER_ALB_SHIFT_ROLLBACK'
    | 'ECS_SERVICE_SETUP_ROLLBACK'
    | 'ECS_DAEMON_SERVICE_SETUP'
    | 'ECS_BG_SERVICE_SETUP'
    | 'ECS_BG_SERVICE_SETUP_ROUTE53'
    | 'ECS_SERVICE_DEPLOY'
    | 'ECS_SERVICE_ROLLBACK'
    | 'ECS_LISTENER_UPDATE'
    | 'ECS_LISTENER_UPDATE_ROLLBACK'
    | 'ECS_ROUTE53_DNS_WEIGHT_UPDATE'
    | 'ECS_ROUTE53_DNS_WEIGHT_UPDATE_ROLLBACK'
    | 'KUBERNETES_SETUP'
    | 'KUBERNETES_SETUP_ROLLBACK'
    | 'KUBERNETES_DEPLOY'
    | 'KUBERNETES_DEPLOY_ROLLBACK'
    | 'KUBERNETES_STEADY_STATE_CHECK'
    | 'ECS_STEADY_STATE_CHECK'
    | 'ECS_RUN_TASK'
    | 'GCP_CLUSTER_SETUP'
    | 'HELM_DEPLOY'
    | 'HELM_ROLLBACK'
    | 'PCF_SETUP'
    | 'PCF_RESIZE'
    | 'PCF_ROLLBACK'
    | 'PCF_MAP_ROUTE'
    | 'PCF_UNMAP_ROUTE'
    | 'PCF_BG_MAP_ROUTE'
    | 'PCF_PLUGIN'
    | 'TERRAFORM_PROVISION'
    | 'TERRAFORM_APPLY'
    | 'TERRAGRUNT_PROVISION'
    | 'TERRAGRUNT_DESTROY'
    | 'TERRAGRUNT_ROLLBACK'
    | 'ARM_CREATE_RESOURCE'
    | 'ARM_ROLLBACK'
    | 'SHELL_SCRIPT_PROVISION'
    | 'TERRAFORM_DESTROY'
    | 'CLOUD_FORMATION_CREATE_STACK'
    | 'CLOUD_FORMATION_DELETE_STACK'
    | 'KUBERNETES_SWAP_SERVICE_SELECTORS'
    | 'CLOUD_FORMATION_ROLLBACK_STACK'
    | 'TERRAFORM_ROLLBACK'
    | 'K8S_DEPLOYMENT_ROLLING'
    | 'K8S_SCALE'
    | 'K8S_DEPLOYMENT_ROLLING_ROLLBACK'
    | 'K8S_BLUE_GREEN_DEPLOY'
    | 'K8S_CANARY_DEPLOY'
    | 'K8S_DELETE'
    | 'RANCHER_RESOLVE'
    | 'RANCHER_K8S_DEPLOYMENT_ROLLING'
    | 'RANCHER_K8S_CANARY_DEPLOY'
    | 'RANCHER_K8S_BLUE_GREEN_DEPLOY'
    | 'RANCHER_KUBERNETES_SWAP_SERVICE_SELECTORS'
    | 'RANCHER_K8S_DELETE'
    | 'RANCHER_K8S_DEPLOYMENT_ROLLING_ROLLBACK'
    | 'JIRA_CREATE_UPDATE'
    | 'SERVICENOW_CREATE_UPDATE'
    | 'K8S_TRAFFIC_SPLIT'
    | 'K8S_APPLY'
    | 'CUSTOM_DEPLOYMENT_FETCH_INSTANCES'
  /*
   * @format int64
   */
  toTime?: number
  /*
   * @format int64
   */
  fromTime?: number
  datadogServiceName?: string
  dockerMetrics?: {
    [key: string]: string
  }
  ecsMetrics?: {
    [key: string]: string
  }
  customMetricsMap?: {
    [key: string]: Metric[]
  }
  metrics?: string
  hostNameField?: string
  query?: string
  customMetrics?: {
    [key: string]: Metric[]
  }
  deploymentType?: string
  serviceLevel?: boolean
}

export type Delegate = {
  uuid: string
  /*
   * @format int64
   */
  createdAt?: number
  accountId?: string
  sizeDetails?: DelegateSizeDetails
  owner?: DelegateEntityOwner
  ng?: boolean
  status?: 'ENABLED' | 'WAITING_FOR_APPROVAL' | 'DISABLED' | 'DELETED'
  description?: string
  ip?: string
  hostName?: string
  delegateGroupName?: string
  delegateGroupId?: string
  delegateName?: string
  delegateProfileId?: string
  /*
   * @format int64
   */
  lastHeartBeat?: number
  version?: string
  sequenceNum?: string
  delegateType?: string
  delegateRandomToken?: string
  keepAlivePacket?: boolean
  polllingModeEnabled?: boolean
  proxy?: boolean
  ceEnabled?: boolean
  supportedTaskTypes?: string[]
  currentlyExecutingDelegateTasks?: string[]
  useCdn?: boolean
  useJreVersion?: string
  location?: string
  includeScopes?: DelegateScope[]
  excludeScopes?: DelegateScope[]
  tags?: string[]
  profileResult?: string
  profileError?: boolean
  /*
   * @format int64
   */
  profileExecutedAt?: number
  sampleDelegate?: boolean
  /*
   * @format int64
   */
  capabilitiesCheckNextIteration?: number
  /*
   * @format date-time
   */
  validUntil?: string
  keywords?: string[]
  /*
   * @format int64
   */
  taskExpiryCheckNextIteration?: number
  /*
   * @format int64
   */
  lastExpiredEventHeartbeatTime?: number
  delegateTokenName?: string
}

export type DelegateEntityOwner = {
  identifier?: string
}

export type DelegateScope = {
  uuid: string
  createdBy?: EmbeddedUser
  /*
   * @format int64
   */
  createdAt?: number
  lastUpdatedBy?: EmbeddedUser
  /*
   * @format int64
   */
  lastUpdatedAt: number
  accountId?: string
  name?: string
  taskTypes?: (
    | 'SCRIPT'
    | 'HTTP'
    | 'SPLUNK'
    | 'APPDYNAMICS'
    | 'INSTANA'
    | 'NEWRELIC'
    | 'STACKDRIVER'
    | 'DYNA_TRACE'
    | 'PROMETHEUS'
    | 'CLOUD_WATCH'
    | 'JENKINS'
    | 'COMMAND'
    | 'BAMBOO'
    | 'DOCKER'
    | 'ECR'
    | 'GCR'
    | 'GCS'
    | 'GCB'
    | 'GCP'
    | 'ACR'
    | 'NEXUS'
    | 'S3'
    | 'AZURE_ARTIFACTS'
    | 'AZURE_VMSS'
    | 'AZURE_APP_SERVICE'
    | 'AZURE_ARM'
    | 'AZURE_RESOURCE'
    | 'ELK'
    | 'LOGZ'
    | 'SUMO'
    | 'ARTIFACTORY'
    | 'HOST_VALIDATION'
    | 'KMS'
    | 'GIT'
    | 'CONTAINER'
    | 'AMI'
    | 'HELM'
    | 'COLLABORATION_PROVIDER'
    | 'PCF'
    | 'SPOTINST'
    | 'APM'
    | 'LOG'
    | 'CLOUD_FORMATION'
    | 'TERRAFORM'
    | 'TERRAGRUNT'
    | 'AWS'
    | 'LDAP'
    | 'K8S'
    | 'SMB'
    | 'SFTP'
    | 'TRIGGER'
    | 'JIRA'
    | 'CONNECTIVITY_VALIDATION'
    | 'BUILD_SOURCE'
    | 'CUSTOM'
    | 'SHELL_SCRIPT_PROVISION'
    | 'SERVICENOW'
    | 'HELM_REPO_CONFIG_VALIDATION'
    | 'HELM_VALUES_FETCH_TASK'
    | 'GUARD_24x7'
    | 'CI'
    | 'SLACK'
    | 'ARTIFACT_COLLECT_NG'
    | 'K8S_NG'
    | 'CAPABILITY_VALIDATION'
    | 'JIRA_NG'
    | 'CVNG'
    | 'NOTIFICATION'
    | 'HTTP_NG'
    | 'SHELL_SCRIPT_NG'
    | 'GIT_NG'
    | 'BATCH_CAPABILITY_CHECK'
    | 'CUSTOM_MANIFEST_VALUES_FETCH_TASK'
    | 'CUSTOM_MANIFEST_FETCH_TASK'
    | 'TERRAFORM_NG'
    | 'CE'
    | 'SERVICENOW_NG'
  )[]
  environmentTypes?: ('PROD' | 'NON_PROD' | 'ALL')[]
  applications?: string[]
  environments?: string[]
  serviceInfrastructures?: string[]
  services?: string[]
  infrastructureDefinitions?: string[]
  valid?: boolean
}

export type DelegateSizeDetails = {
  size?: 'EXTRA_SMALL' | 'LAPTOP' | 'SMALL' | 'MEDIUM' | 'LARGE'
  label?: string
  /*
   * @format int32
   */
  replicas?: number
  /*
   * @format int32
   */
  ram?: number
  /*
   * @format double
   */
  cpu?: number
}

export type RestResponseDelegate = {
  metaData?: {
    [key: string]: Record<string, any>
  }
  resource?: Delegate
  responseMessages?: ResponseMessage[]
}

export type DelegateRegisterResponse = {
  delegateId?: string
  action?: 'SELF_DESTRUCT' | 'MIGRATE'
  migrateUrl?: string
  sequenceNum?: string
  delegateRandomToken?: string
}

export type RestResponseDelegateRegisterResponse = {
  metaData?: {
    [key: string]: Record<string, any>
  }
  resource?: DelegateRegisterResponse
  responseMessages?: ResponseMessage[]
}

export type DelegateParams = {
  delegateId?: string
  accountId?: string
  sessionIdentifier?: string
  orgIdentifier?: string
  projectIdentifier?: string
  delegateSize?: string
  ip?: string
  hostName?: string
  delegateName?: string
  delegateGroupName?: string
  delegateGroupId?: string
  delegateProfileId?: string
  description?: string
  version?: string
  delegateType?: string
  delegateRandomToken?: string
  sequenceNum?: string
  location?: string
  /*
   * @format int64
   */
  lastHeartBeat?: number
  ng?: boolean
  sampleDelegate?: boolean
  keepAlivePacket?: boolean
  pollingModeEnabled?: boolean
  proxy?: boolean
  ceEnabled?: boolean
  supportedTaskTypes?: string[]
  currentlyExecutingDelegateTasks?: string[]
  tags?: string[]
}

export type DelegateUnregisterRequest = {
  delegateId?: string
  hostName?: string
  ng?: boolean
  delegateType?: string
  ipAddress?: string
}

export type RestResponseDelegateConfiguration = {
  metaData?: {
    [key: string]: Record<string, any>
  }
  resource?: DelegateConfiguration
  responseMessages?: ResponseMessage[]
}

export type DelegateProfileParams = {
  name?: string
  profileId?: string
  /*
   * @format int64
   */
  profileLastUpdatedAt?: number
  scriptContent?: string
}

export type RestResponseDelegateProfileParams = {
  metaData?: {
    [key: string]: Record<string, any>
  }
  resource?: DelegateProfileParams
  responseMessages?: ResponseMessage[]
}

export type DelegateConnectionHeartbeat = {
  delegateConnectionId?: string
  version?: string
  location?: string
}

export type DelegateTaskPackage = {
  accountId?: string
  delegateTaskId?: string
  delegateId?: string
  logStreamingToken?: string
  delegateCallbackToken?: string
  data?: TaskData
  encryptionConfigs?: {
    [key: string]: EncryptionConfig
  }
  secretDetails?: {
    [key: string]: SecretDetail
  }
  /*
   * @uniqueItems true
   */
  secrets?: string[]
  executionCapabilities?: ExecutionCapability[]
  logStreamingAbstractions?: {
    [key: string]: string
  }
}

export type Duration = {
  /*
   * @format int64
   */
  seconds?: number
  zero?: boolean
  /*
   * @format int32
   */
  nano?: number
  units?: TemporalUnit[]
  negative?: boolean
}

export type EncryptedRecord = {
  name?: string
  /*
   * @uniqueItems true
   */
  parameters?: EncryptedDataParams[]
  path?: string
  uuid?: string
  encryptionKey?: string
  encryptedValue?: string[]
  backupEncryptedValue?: string[]
  backupEncryptionKey?: string
  backupKmsId?: string
  backupEncryptionType?:
    | 'LOCAL'
    | 'KMS'
    | 'GCP_KMS'
    | 'AWS_SECRETS_MANAGER'
    | 'AZURE_VAULT'
    | 'CYBERARK'
    | 'VAULT'
    | 'GCP_SECRETS_MANAGER'
    | 'CUSTOM'
    | 'VAULT_SSH'
  base64Encoded?: boolean
  additionalMetadata?: AdditionalMetadata
  encryptionType?:
    | 'LOCAL'
    | 'KMS'
    | 'GCP_KMS'
    | 'AWS_SECRETS_MANAGER'
    | 'AZURE_VAULT'
    | 'CYBERARK'
    | 'VAULT'
    | 'GCP_SECRETS_MANAGER'
    | 'CUSTOM'
    | 'VAULT_SSH'
  kmsId?: string
}

export type ExecutionCapability = {
  capabilityType?:
    | 'SOCKET'
    | 'SOCKET_BULK_OR'
    | 'ALWAYS_TRUE'
    | 'PROCESS_EXECUTOR'
    | 'AWS_REGION'
    | 'SYSTEM_ENV'
    | 'HTTP'
    | 'HELM_INSTALL'
    | 'CHART_MUSEUM'
    | 'ALWAYS_FALSE'
    | 'SMTP'
    | 'WINRM_HOST_CONNECTION'
    | 'SSH_HOST_CONNECTION'
    | 'SFTP'
    | 'PCF_AUTO_SCALAR'
    | 'PCF_CONNECTIVITY'
    | 'PCF_INSTALL'
    | 'POWERSHELL'
    | 'HELM_COMMAND'
    | 'CLUSTER_MASTER_URL'
    | 'SHELL_CONNECTION'
    | 'GIT_CONNECTION'
    | 'KUSTOMIZE'
    | 'SMB'
    | 'SELECTORS'
    | 'GIT_CONNECTION_NG'
    | 'GIT_INSTALLATION'
    | 'LITE_ENGINE'
    | 'CI_VM'
    | 'ARTIFACTORY'
  maxValidityPeriod?: Duration
  periodUntilNextValidation?: Duration
}

export type SecretDetail = {
  configUuid?: string
  encryptedRecord?: EncryptedRecord
}

export type TaskData = {
  parked?: boolean
  async?: boolean
  taskType: string
  parameters?: Record<string, any>[]
  /*
   * @format int64
   */
  timeout?: number
  /*
   * @format int32
   */
  expressionFunctorToken?: number
  expressions?: {
    [key: string]: string
  }
}

export type TemporalUnit = {
  duration?: Duration
  timeBased?: boolean
  dateBased?: boolean
  durationEstimated?: boolean
}

export type DelegateConnectionResultDetail = {
  uuid?: string
  /*
   * @format int64
   */
  lastUpdatedAt?: number
  accountId?: string
  delegateId?: string
  criteria?: string
  validated?: boolean
  /*
   * @format int64
   */
  duration?: number
  /*
   * @format date-time
   */
  validUntil?: string
}

export type DelegateScripts = {
  version?: string
  doUpgrade?: boolean
  stopScript?: string
  startScript?: string
  delegateScript?: string
  setupProxyScript?: string
}

export type RestResponseDelegateScripts = {
  metaData?: {
    [key: string]: Record<string, any>
  }
  resource?: DelegateScripts
  responseMessages?: ResponseMessage[]
}

export type DelegateTaskAbortEvent = DelegateTaskEvent & {}

export type DelegateTaskEvent = {
  accountId?: string
  delegateTaskId?: string
  sync?: boolean
}

export type DelegateTaskEventsResponse = {
  delegateTaskEvents?: DelegateTaskEvent[]
}

export type DelegateHeartbeatResponse = {
  delegateId?: string
  status?: string
  useCdn?: boolean
  jreVersion?: string
  delegateRandomToken?: string
  sequenceNumber?: string
}

export type RestResponseDelegateHeartbeatResponse = {
  metaData?: {
    [key: string]: Record<string, any>
  }
  resource?: DelegateHeartbeatResponse
  responseMessages?: ResponseMessage[]
}

export type ConnectorHeartbeatDelegateResponse = {
  accountIdentifier?: string
  orgIdentifier?: string
  projectIdentifier?: string
  identifier?: string
  name?: string
  connectorValidationResult?: ConnectorValidationResult
}

export type ConnectorValidationResult = {
  status?: 'SUCCESS' | 'FAILURE' | 'PARTIAL' | 'UNKNOWN'
  errors?: ErrorDetail[]
  errorSummary?: string
  /*
   * @format int64
   */
  testedAt?: number
  delegateId?: string
}

export type ErrorDetail = {
  reason?: string
  message?: string
  /*
   * @format int32
   */
  code?: number
}

export type StreamingOutput = Record<string, any>

export type DelegateFile = {
  fileUuid?: string
  fileName?: string
  /*
   * @format int64
   */
  fileLength?: number
  accountId?: string
  mimeType?: string
  checksumType?: 'MD5' | 'SHA1' | 'SHA256'
  checksum?: string
  relativePath?: string
  metadata?: {
    [key: string]: Record<string, any>
  }
  fileId?: string
  bucket?:
    | 'LOB'
    | 'ARTIFACTS'
    | 'AUDITS'
    | 'CONFIGS'
    | 'CUSTOM_MANIFEST'
    | 'LOGS'
    | 'PLATFORMS'
    | 'TERRAFORM_STATE'
    | 'PROFILE_RESULTS'
    | 'TERRAFORM_PLAN'
    | 'TERRAFORM_PLAN_JSON'
    | 'EXPORT_EXECUTIONS'
  entityId?: string
  localFilePath?: string
  delegateId?: string
  taskId?: string
  appId?: string
  /*
   * @format int64
   */
  length?: number
}

export type RestResponseDelegateFile = {
  metaData?: {
    [key: string]: Record<string, any>
  }
  resource?: DelegateFile
  responseMessages?: ResponseMessage[]
}

export type DelegateProfile = {
  uuid: string
  accountId?: string
  name?: string
  description?: string
  primary?: boolean
  approvalRequired?: boolean
  startupScript?: string
  scopingRules?: DelegateProfileScopingRule[]
  selectors?: string[]
  createdBy?: EmbeddedUser
  /*
   * @format int64
   */
  createdAt?: number
  lastUpdatedBy?: EmbeddedUser
  /*
   * @format int64
   */
  lastUpdatedAt: number
  identifier?: string
  owner?: DelegateEntityOwner
  ng?: boolean
}

export type DelegateProfileScopingRule = {
  description?: string
  scopingEntities?: {
    [key: string]: string[]
  }
}

export type RestResponseDelegateProfile = {
  metaData?: {
    [key: string]: Record<string, any>
  }
  resource?: DelegateProfile
  responseMessages?: ResponseMessage[]
}

export type RestResponsePageResponseDelegateProfile = {
  metaData?: {
    [key: string]: Record<string, any>
  }
  resource?: DelegateProfile[]
  responseMessages?: ResponseMessage[]
}

export type DelegateProfileDetails = {
  uuid?: string
  accountId?: string
  name?: string
  description?: string
  primary?: boolean
  approvalRequired?: boolean
  startupScript?: string
  scopingRules?: ScopingRuleDetails[]
  selectors?: string[]
  createdBy?: EmbeddedUserDetails
  lastUpdatedBy?: EmbeddedUserDetails
  identifier?: string
}

export type EmbeddedUserDetails = {
  uuid?: string
  name?: string
  email?: string
}

export type RestResponseDelegateProfileDetails = {
  metaData?: {
    [key: string]: Record<string, any>
  }
  resource?: DelegateProfileDetails
  responseMessages?: ResponseMessage[]
}

export type ScopingRuleDetails = {
  description?: string
  applicationId?: string
  /*
   * @uniqueItems true
   */
  serviceIds?: string[]
  environmentTypeId?: string
  /*
   * @uniqueItems true
   */
  environmentIds?: string[]
}

export type RestResponsePageResponseDelegateProfileDetails = {
  metaData?: {
    [key: string]: Record<string, any>
  }
  resource?: DelegateProfileDetails[]
  responseMessages?: ResponseMessage[]
}

export type ScopingRules = {
  scopingRuleDetails?: ScopingRuleDetails[]
}

export type RestResponseDelegateScope = {
  metaData?: {
    [key: string]: Record<string, any>
  }
  resource?: DelegateScope
  responseMessages?: ResponseMessage[]
}

export type RestResponsePageResponseDelegateScope = {
  metaData?: {
    [key: string]: Record<string, any>
  }
  resource?: DelegateScope[]
  responseMessages?: ResponseMessage[]
}

export type DelegateSelectionLogParams = {
  delegateId?: string
  delegateType?: string
  delegateName?: string
  delegateHostName?: string
  delegateProfileName?: string
  conclusion?: string
  message?: string
  /*
   * @format int64
   */
  eventTimestamp?: number
  profileScopingRulesDetails?: ProfileScopingRulesDetails
}

export type ProfileScopingRulesDetails = {
  profileId?: string
  profileName?: string
  /*
   * @uniqueItems true
   */
  scopingRulesDescriptions?: string[]
}

export type RestResponseListDelegateSelectionLogParams = {
  metaData?: {
    [key: string]: Record<string, any>
  }
  resource?: DelegateSelectionLogParams[]
  responseMessages?: ResponseMessage[]
}

export type DelegateSelectionLogResponse = {
  delegateSelectionLogs?: DelegateSelectionLogParams[]
  taskSetupAbstractions?: {
    [key: string]: string
  }
}

export type RestResponseDelegateSelectionLogResponse = {
  metaData?: {
    [key: string]: Record<string, any>
  }
  resource?: DelegateSelectionLogResponse
  responseMessages?: ResponseMessage[]
}

export type RestResponsePageResponseDelegate = {
  metaData?: {
    [key: string]: Record<string, any>
  }
  resource?: Delegate[]
  responseMessages?: ResponseMessage[]
}

export type DelegateScalingGroup = {
  groupName?: string
  delegates?: DelegateInner[]
}

export type DelegateStatus = {
  publishedVersions?: string[]
  delegates?: DelegateInner[]
  scalingGroups?: DelegateScalingGroup[]
}

export type RestResponseDelegateStatus = {
  metaData?: {
    [key: string]: Record<string, any>
  }
  resource?: DelegateStatus
  responseMessages?: ResponseMessage[]
}

export type RestResponseDouble = {
  metaData?: {
    [key: string]: Record<string, any>
  }
  /*
   * @format double
   */
  resource?: number
  responseMessages?: ResponseMessage[]
}

export type CEDelegateStatus = {
  uuid?: string
  found?: boolean
  ceEnabled?: boolean
  /*
   * @format int64
   */
  lastHeartBeat?: number
  delegateName?: string
  delegateType?: string
  status?: 'ENABLED' | 'WAITING_FOR_APPROVAL' | 'DISABLED' | 'DELETED'
  connections?: DelegateConnectionDetails[]
  metricsServerCheck?: MetricsServerCheck
  permissionRuleList?: Rule[]
}

export type MetricsServerCheck = {
  isInstalled?: boolean
  message?: string
}

export type RestResponseCEDelegateStatus = {
  metaData?: {
    [key: string]: Record<string, any>
  }
  resource?: CEDelegateStatus
  responseMessages?: ResponseMessage[]
}

export type Rule = {
  apiGroups?: string
  resources?: string
  verbs?: string
  message?: string
}

export type RestResponseListDelegateSizeDetails = {
  metaData?: {
    [key: string]: Record<string, any>
  }
  resource?: DelegateSizeDetails[]
  responseMessages?: ResponseMessage[]
}

export type DelegateScopes = {
  includeScopeIds?: string[]
  excludeScopeIds?: string[]
}

export type DelegateTags = {
  tags?: string[]
}

export type DelegateSetupDetails = {
  orgIdentifier?: string
  projectIdentifier?: string
  name: string
  description?: string
  size?: 'EXTRA_SMALL' | 'LAPTOP' | 'SMALL' | 'MEDIUM' | 'LARGE'
  delegateConfigurationId?: string
  identifier?: string
  k8sConfigDetails?: K8sConfigDetails
  /*
   * @uniqueItems true
   */
  tags?: string[]
  delegateType: string
  tokenName?: string
}

export type K8sConfigDetails = {
  k8sPermissionType?: 'CLUSTER_ADMIN' | 'CLUSTER_VIEWER' | 'NAMESPACE_ADMIN'
  namespace?: string
}

export type RestResponseDelegateSetupDetails = {
  metaData?: {
    [key: string]: Record<string, any>
  }
  resource?: DelegateSetupDetails
  responseMessages?: ResponseMessage[]
}

export type RestResponseTaskSelectorMap = {
  metaData?: {
    [key: string]: Record<string, any>
  }
  resource?: TaskSelectorMap
  responseMessages?: ResponseMessage[]
}

export type TaskSelectorMap = {
  uuid: string
  createdBy?: EmbeddedUser
  /*
   * @format int64
   */
  createdAt?: number
  lastUpdatedBy?: EmbeddedUser
  /*
   * @format int64
   */
  lastUpdatedAt: number
  accountId?: string
  taskGroup?:
    | 'SCRIPT'
    | 'HTTP'
    | 'SPLUNK'
    | 'APPDYNAMICS'
    | 'INSTANA'
    | 'NEWRELIC'
    | 'STACKDRIVER'
    | 'DYNA_TRACE'
    | 'PROMETHEUS'
    | 'CLOUD_WATCH'
    | 'JENKINS'
    | 'COMMAND'
    | 'BAMBOO'
    | 'DOCKER'
    | 'ECR'
    | 'GCR'
    | 'GCS'
    | 'GCB'
    | 'GCP'
    | 'ACR'
    | 'NEXUS'
    | 'S3'
    | 'AZURE_ARTIFACTS'
    | 'AZURE_VMSS'
    | 'AZURE_APP_SERVICE'
    | 'AZURE_ARM'
    | 'AZURE_RESOURCE'
    | 'ELK'
    | 'LOGZ'
    | 'SUMO'
    | 'ARTIFACTORY'
    | 'HOST_VALIDATION'
    | 'KMS'
    | 'GIT'
    | 'CONTAINER'
    | 'AMI'
    | 'HELM'
    | 'COLLABORATION_PROVIDER'
    | 'PCF'
    | 'SPOTINST'
    | 'APM'
    | 'LOG'
    | 'CLOUD_FORMATION'
    | 'TERRAFORM'
    | 'TERRAGRUNT'
    | 'AWS'
    | 'LDAP'
    | 'K8S'
    | 'SMB'
    | 'SFTP'
    | 'TRIGGER'
    | 'JIRA'
    | 'CONNECTIVITY_VALIDATION'
    | 'BUILD_SOURCE'
    | 'CUSTOM'
    | 'SHELL_SCRIPT_PROVISION'
    | 'SERVICENOW'
    | 'HELM_REPO_CONFIG_VALIDATION'
    | 'HELM_VALUES_FETCH_TASK'
    | 'GUARD_24x7'
    | 'CI'
    | 'SLACK'
    | 'ARTIFACT_COLLECT_NG'
    | 'K8S_NG'
    | 'CAPABILITY_VALIDATION'
    | 'JIRA_NG'
    | 'CVNG'
    | 'NOTIFICATION'
    | 'HTTP_NG'
    | 'SHELL_SCRIPT_NG'
    | 'GIT_NG'
    | 'BATCH_CAPABILITY_CHECK'
    | 'CUSTOM_MANIFEST_VALUES_FETCH_TASK'
    | 'CUSTOM_MANIFEST_FETCH_TASK'
    | 'TERRAFORM_NG'
    | 'CE'
    | 'SERVICENOW_NG'
  /*
   * @uniqueItems true
   */
  selectors?: string[]
}

export type RestResponseListTaskSelectorMap = {
  metaData?: {
    [key: string]: Record<string, any>
  }
  resource?: TaskSelectorMap[]
  responseMessages?: ResponseMessage[]
}

export type DelegateHeartbeatDetails = {
  /*
   * @format int32
   */
  numberOfRegisteredDelegates?: number
  /*
   * @format int32
   */
  numberOfConnectedDelegates?: number
}

export type RestResponseDelegateHeartbeatDetails = {
  metaData?: {
    [key: string]: Record<string, any>
  }
  resource?: DelegateHeartbeatDetails
  responseMessages?: ResponseMessage[]
}

export type DelegateInitializationDetails = {
  delegateId?: string
  hostname?: string
  initialized?: boolean
  profileError?: boolean
  /*
   * @format int64
   */
  profileExecutedAt?: number
}

export type RestResponseListDelegateInitializationDetails = {
  metaData?: {
    [key: string]: Record<string, any>
  }
  resource?: DelegateInitializationDetails[]
  responseMessages?: ResponseMessage[]
}

export type DynaTraceSetupTestNodeData = {
  appId: string
  settingId: string
  instanceName?: string
  isServiceLevel?: boolean
  instanceElement?: Instance
  hostExpression?: string
  workflowId?: string
  guid?: string
  stateType?:
    | 'SUB_WORKFLOW'
    | 'REPEAT'
    | 'FORK'
    | 'WAIT'
    | 'PAUSE'
    | 'BARRIER'
    | 'RESOURCE_CONSTRAINT'
    | 'SHELL_SCRIPT'
    | 'HTTP'
    | 'TEMPLATIZED_SECRET_MANAGER'
    | 'EMAIL'
    | 'APP_DYNAMICS'
    | 'NEW_RELIC'
    | 'NEW_RELIC_DEPLOYMENT_MARKER'
    | 'DYNA_TRACE'
    | 'PROMETHEUS'
    | 'SPLUNKV2'
    | 'ELK'
    | 'LOGZ'
    | 'SUMO'
    | 'DATA_DOG'
    | 'DATA_DOG_LOG'
    | 'CVNG'
    | 'CLOUD_WATCH'
    | 'AWS_LAMBDA_VERIFICATION'
    | 'APM_VERIFICATION'
    | 'LOG_VERIFICATION'
    | 'BUG_SNAG'
    | 'STACK_DRIVER'
    | 'STACK_DRIVER_LOG'
    | 'INSTANA'
    | 'SCALYR'
    | 'ENV_STATE'
    | 'ENV_LOOP_STATE'
    | 'ENV_RESUME_STATE'
    | 'ENV_LOOP_RESUME_STATE'
    | 'COMMAND'
    | 'APPROVAL'
    | 'APPROVAL_RESUME'
    | 'ELASTIC_LOAD_BALANCER'
    | 'JENKINS'
    | 'GCB'
    | 'BAMBOO'
    | 'ARTIFACT_COLLECTION'
    | 'ARTIFACT_CHECK'
    | 'AZURE_NODE_SELECT'
    | 'AZURE_VMSS_SETUP'
    | 'AZURE_VMSS_DEPLOY'
    | 'AZURE_VMSS_ROLLBACK'
    | 'AZURE_VMSS_SWITCH_ROUTES'
    | 'AZURE_VMSS_SWITCH_ROUTES_ROLLBACK'
    | 'AZURE_WEBAPP_SLOT_SETUP'
    | 'AZURE_WEBAPP_SLOT_SWAP'
    | 'AZURE_WEBAPP_SLOT_SHIFT_TRAFFIC'
    | 'AZURE_WEBAPP_SLOT_ROLLBACK'
    | 'AWS_NODE_SELECT'
    | 'DC_NODE_SELECT'
    | 'ROLLING_NODE_SELECT'
    | 'PHASE'
    | 'PHASE_STEP'
    | 'STAGING_ORIGINAL_EXECUTION'
    | 'AWS_CODEDEPLOY_STATE'
    | 'AWS_CODEDEPLOY_ROLLBACK'
    | 'AWS_LAMBDA_STATE'
    | 'AWS_LAMBDA_ROLLBACK'
    | 'AWS_AMI_SERVICE_SETUP'
    | 'ASG_AMI_SERVICE_ALB_SHIFT_SETUP'
    | 'AWS_AMI_SERVICE_DEPLOY'
    | 'ASG_AMI_SERVICE_ALB_SHIFT_DEPLOY'
    | 'AWS_AMI_SWITCH_ROUTES'
    | 'ASG_AMI_ALB_SHIFT_SWITCH_ROUTES'
    | 'AWS_AMI_ROLLBACK_SWITCH_ROUTES'
    | 'ASG_AMI_ROLLBACK_ALB_SHIFT_SWITCH_ROUTES'
    | 'AWS_AMI_SERVICE_ROLLBACK'
    | 'ECS_SERVICE_SETUP'
    | 'SPOTINST_SETUP'
    | 'SPOTINST_ALB_SHIFT_SETUP'
    | 'SPOTINST_DEPLOY'
    | 'SPOTINST_ALB_SHIFT_DEPLOY'
    | 'SPOTINST_LISTENER_UPDATE'
    | 'SPOTINST_LISTENER_ALB_SHIFT'
    | 'SPOTINST_ROLLBACK'
    | 'SPOTINST_LISTENER_UPDATE_ROLLBACK'
    | 'SPOTINST_LISTENER_ALB_SHIFT_ROLLBACK'
    | 'ECS_SERVICE_SETUP_ROLLBACK'
    | 'ECS_DAEMON_SERVICE_SETUP'
    | 'ECS_BG_SERVICE_SETUP'
    | 'ECS_BG_SERVICE_SETUP_ROUTE53'
    | 'ECS_SERVICE_DEPLOY'
    | 'ECS_SERVICE_ROLLBACK'
    | 'ECS_LISTENER_UPDATE'
    | 'ECS_LISTENER_UPDATE_ROLLBACK'
    | 'ECS_ROUTE53_DNS_WEIGHT_UPDATE'
    | 'ECS_ROUTE53_DNS_WEIGHT_UPDATE_ROLLBACK'
    | 'KUBERNETES_SETUP'
    | 'KUBERNETES_SETUP_ROLLBACK'
    | 'KUBERNETES_DEPLOY'
    | 'KUBERNETES_DEPLOY_ROLLBACK'
    | 'KUBERNETES_STEADY_STATE_CHECK'
    | 'ECS_STEADY_STATE_CHECK'
    | 'ECS_RUN_TASK'
    | 'GCP_CLUSTER_SETUP'
    | 'HELM_DEPLOY'
    | 'HELM_ROLLBACK'
    | 'PCF_SETUP'
    | 'PCF_RESIZE'
    | 'PCF_ROLLBACK'
    | 'PCF_MAP_ROUTE'
    | 'PCF_UNMAP_ROUTE'
    | 'PCF_BG_MAP_ROUTE'
    | 'PCF_PLUGIN'
    | 'TERRAFORM_PROVISION'
    | 'TERRAFORM_APPLY'
    | 'TERRAGRUNT_PROVISION'
    | 'TERRAGRUNT_DESTROY'
    | 'TERRAGRUNT_ROLLBACK'
    | 'ARM_CREATE_RESOURCE'
    | 'ARM_ROLLBACK'
    | 'SHELL_SCRIPT_PROVISION'
    | 'TERRAFORM_DESTROY'
    | 'CLOUD_FORMATION_CREATE_STACK'
    | 'CLOUD_FORMATION_DELETE_STACK'
    | 'KUBERNETES_SWAP_SERVICE_SELECTORS'
    | 'CLOUD_FORMATION_ROLLBACK_STACK'
    | 'TERRAFORM_ROLLBACK'
    | 'K8S_DEPLOYMENT_ROLLING'
    | 'K8S_SCALE'
    | 'K8S_DEPLOYMENT_ROLLING_ROLLBACK'
    | 'K8S_BLUE_GREEN_DEPLOY'
    | 'K8S_CANARY_DEPLOY'
    | 'K8S_DELETE'
    | 'RANCHER_RESOLVE'
    | 'RANCHER_K8S_DEPLOYMENT_ROLLING'
    | 'RANCHER_K8S_CANARY_DEPLOY'
    | 'RANCHER_K8S_BLUE_GREEN_DEPLOY'
    | 'RANCHER_KUBERNETES_SWAP_SERVICE_SELECTORS'
    | 'RANCHER_K8S_DELETE'
    | 'RANCHER_K8S_DEPLOYMENT_ROLLING_ROLLBACK'
    | 'JIRA_CREATE_UPDATE'
    | 'SERVICENOW_CREATE_UPDATE'
    | 'K8S_TRAFFIC_SPLIT'
    | 'K8S_APPLY'
    | 'CUSTOM_DEPLOYMENT_FETCH_INSTANCES'
  /*
   * @format int64
   */
  toTime?: number
  /*
   * @format int64
   */
  fromTime?: number
  serviceMethods?: string
  serviceEntityId?: string
  serviceLevel?: boolean
}

export type DynaTraceApplication = {
  entityId?: string
  displayName?: string
}

export type RestResponseListDynaTraceApplication = {
  metaData?: {
    [key: string]: Record<string, any>
  }
  resource?: DynaTraceApplication[]
  responseMessages?: ResponseMessage[]
}

export type ElkIndexTemplate = {
  name?: string
  properties?: {
    [key: string]: Record<string, any>
  }
}

export type RestResponseMapStringElkIndexTemplate = {
  metaData?: {
    [key: string]: Record<string, any>
  }
  resource?: {
    [key: string]: ElkIndexTemplate
  }
  responseMessages?: ResponseMessage[]
}

export type RestResponseObject = {
  metaData?: {
    [key: string]: Record<string, any>
  }
  resource?: Record<string, any>
  responseMessages?: ResponseMessage[]
}

export type ElkSetupTestNodeData = {
  appId: string
  settingId: string
  instanceName?: string
  isServiceLevel?: boolean
  instanceElement?: Instance
  hostExpression?: string
  workflowId?: string
  guid?: string
  stateType?:
    | 'SUB_WORKFLOW'
    | 'REPEAT'
    | 'FORK'
    | 'WAIT'
    | 'PAUSE'
    | 'BARRIER'
    | 'RESOURCE_CONSTRAINT'
    | 'SHELL_SCRIPT'
    | 'HTTP'
    | 'TEMPLATIZED_SECRET_MANAGER'
    | 'EMAIL'
    | 'APP_DYNAMICS'
    | 'NEW_RELIC'
    | 'NEW_RELIC_DEPLOYMENT_MARKER'
    | 'DYNA_TRACE'
    | 'PROMETHEUS'
    | 'SPLUNKV2'
    | 'ELK'
    | 'LOGZ'
    | 'SUMO'
    | 'DATA_DOG'
    | 'DATA_DOG_LOG'
    | 'CVNG'
    | 'CLOUD_WATCH'
    | 'AWS_LAMBDA_VERIFICATION'
    | 'APM_VERIFICATION'
    | 'LOG_VERIFICATION'
    | 'BUG_SNAG'
    | 'STACK_DRIVER'
    | 'STACK_DRIVER_LOG'
    | 'INSTANA'
    | 'SCALYR'
    | 'ENV_STATE'
    | 'ENV_LOOP_STATE'
    | 'ENV_RESUME_STATE'
    | 'ENV_LOOP_RESUME_STATE'
    | 'COMMAND'
    | 'APPROVAL'
    | 'APPROVAL_RESUME'
    | 'ELASTIC_LOAD_BALANCER'
    | 'JENKINS'
    | 'GCB'
    | 'BAMBOO'
    | 'ARTIFACT_COLLECTION'
    | 'ARTIFACT_CHECK'
    | 'AZURE_NODE_SELECT'
    | 'AZURE_VMSS_SETUP'
    | 'AZURE_VMSS_DEPLOY'
    | 'AZURE_VMSS_ROLLBACK'
    | 'AZURE_VMSS_SWITCH_ROUTES'
    | 'AZURE_VMSS_SWITCH_ROUTES_ROLLBACK'
    | 'AZURE_WEBAPP_SLOT_SETUP'
    | 'AZURE_WEBAPP_SLOT_SWAP'
    | 'AZURE_WEBAPP_SLOT_SHIFT_TRAFFIC'
    | 'AZURE_WEBAPP_SLOT_ROLLBACK'
    | 'AWS_NODE_SELECT'
    | 'DC_NODE_SELECT'
    | 'ROLLING_NODE_SELECT'
    | 'PHASE'
    | 'PHASE_STEP'
    | 'STAGING_ORIGINAL_EXECUTION'
    | 'AWS_CODEDEPLOY_STATE'
    | 'AWS_CODEDEPLOY_ROLLBACK'
    | 'AWS_LAMBDA_STATE'
    | 'AWS_LAMBDA_ROLLBACK'
    | 'AWS_AMI_SERVICE_SETUP'
    | 'ASG_AMI_SERVICE_ALB_SHIFT_SETUP'
    | 'AWS_AMI_SERVICE_DEPLOY'
    | 'ASG_AMI_SERVICE_ALB_SHIFT_DEPLOY'
    | 'AWS_AMI_SWITCH_ROUTES'
    | 'ASG_AMI_ALB_SHIFT_SWITCH_ROUTES'
    | 'AWS_AMI_ROLLBACK_SWITCH_ROUTES'
    | 'ASG_AMI_ROLLBACK_ALB_SHIFT_SWITCH_ROUTES'
    | 'AWS_AMI_SERVICE_ROLLBACK'
    | 'ECS_SERVICE_SETUP'
    | 'SPOTINST_SETUP'
    | 'SPOTINST_ALB_SHIFT_SETUP'
    | 'SPOTINST_DEPLOY'
    | 'SPOTINST_ALB_SHIFT_DEPLOY'
    | 'SPOTINST_LISTENER_UPDATE'
    | 'SPOTINST_LISTENER_ALB_SHIFT'
    | 'SPOTINST_ROLLBACK'
    | 'SPOTINST_LISTENER_UPDATE_ROLLBACK'
    | 'SPOTINST_LISTENER_ALB_SHIFT_ROLLBACK'
    | 'ECS_SERVICE_SETUP_ROLLBACK'
    | 'ECS_DAEMON_SERVICE_SETUP'
    | 'ECS_BG_SERVICE_SETUP'
    | 'ECS_BG_SERVICE_SETUP_ROUTE53'
    | 'ECS_SERVICE_DEPLOY'
    | 'ECS_SERVICE_ROLLBACK'
    | 'ECS_LISTENER_UPDATE'
    | 'ECS_LISTENER_UPDATE_ROLLBACK'
    | 'ECS_ROUTE53_DNS_WEIGHT_UPDATE'
    | 'ECS_ROUTE53_DNS_WEIGHT_UPDATE_ROLLBACK'
    | 'KUBERNETES_SETUP'
    | 'KUBERNETES_SETUP_ROLLBACK'
    | 'KUBERNETES_DEPLOY'
    | 'KUBERNETES_DEPLOY_ROLLBACK'
    | 'KUBERNETES_STEADY_STATE_CHECK'
    | 'ECS_STEADY_STATE_CHECK'
    | 'ECS_RUN_TASK'
    | 'GCP_CLUSTER_SETUP'
    | 'HELM_DEPLOY'
    | 'HELM_ROLLBACK'
    | 'PCF_SETUP'
    | 'PCF_RESIZE'
    | 'PCF_ROLLBACK'
    | 'PCF_MAP_ROUTE'
    | 'PCF_UNMAP_ROUTE'
    | 'PCF_BG_MAP_ROUTE'
    | 'PCF_PLUGIN'
    | 'TERRAFORM_PROVISION'
    | 'TERRAFORM_APPLY'
    | 'TERRAGRUNT_PROVISION'
    | 'TERRAGRUNT_DESTROY'
    | 'TERRAGRUNT_ROLLBACK'
    | 'ARM_CREATE_RESOURCE'
    | 'ARM_ROLLBACK'
    | 'SHELL_SCRIPT_PROVISION'
    | 'TERRAFORM_DESTROY'
    | 'CLOUD_FORMATION_CREATE_STACK'
    | 'CLOUD_FORMATION_DELETE_STACK'
    | 'KUBERNETES_SWAP_SERVICE_SELECTORS'
    | 'CLOUD_FORMATION_ROLLBACK_STACK'
    | 'TERRAFORM_ROLLBACK'
    | 'K8S_DEPLOYMENT_ROLLING'
    | 'K8S_SCALE'
    | 'K8S_DEPLOYMENT_ROLLING_ROLLBACK'
    | 'K8S_BLUE_GREEN_DEPLOY'
    | 'K8S_CANARY_DEPLOY'
    | 'K8S_DELETE'
    | 'RANCHER_RESOLVE'
    | 'RANCHER_K8S_DEPLOYMENT_ROLLING'
    | 'RANCHER_K8S_CANARY_DEPLOY'
    | 'RANCHER_K8S_BLUE_GREEN_DEPLOY'
    | 'RANCHER_KUBERNETES_SWAP_SERVICE_SELECTORS'
    | 'RANCHER_K8S_DELETE'
    | 'RANCHER_K8S_DEPLOYMENT_ROLLING_ROLLBACK'
    | 'JIRA_CREATE_UPDATE'
    | 'SERVICENOW_CREATE_UPDATE'
    | 'K8S_TRAFFIC_SPLIT'
    | 'K8S_APPLY'
    | 'CUSTOM_DEPLOYMENT_FETCH_INSTANCES'
  /*
   * @format int64
   */
  toTime?: number
  /*
   * @format int64
   */
  fromTime?: number
  query?: string
  indices?: string
  messageField?: string
  timeStampField?: string
  timeStampFieldFormat?: string
  queryType?: 'TERM' | 'MATCH' | 'MATCH_PHRASE'
  hostNameField?: string
  serviceLevel?: boolean
}

export type RestResponseEnvironment = {
  metaData?: {
    [key: string]: Record<string, any>
  }
  resource?: Environment
  responseMessages?: ResponseMessage[]
}

export type RestResponsePageResponseEnvironment = {
  metaData?: {
    [key: string]: Record<string, any>
  }
  resource?: Environment[]
  responseMessages?: ResponseMessage[]
}

export type CloneMetadata = {
  targetAppId?: string
  serviceMapping?: {
    [key: string]: string
  }
  workflow?: Workflow
  environment?: Environment
}

export type Workflow = {
  uuid: string
  appId: string
  createdBy?: EmbeddedUser
  /*
   * @format int64
   */
  createdAt?: number
  lastUpdatedBy?: EmbeddedUser
  /*
   * @format int64
   */
  lastUpdatedAt: number
  name: string
  description?: string
  workflowType?: 'PIPELINE' | 'ORCHESTRATION'
  envId?: string
  /*
   * @format int32
   */
  defaultVersion?: number
  templatized?: boolean
  templateExpressions?: TemplateExpression[]
  /*
   * @uniqueItems true
   */
  keywords?: string[]
  notes?: string
  orchestration?: OrchestrationWorkflow
  orchestrationWorkflow?: OrchestrationWorkflow
  services?: Service[]
  workflowExecutions?: WorkflowExecution[]
  serviceId?: string
  infraMappingId?: string
  infraDefinitionId?: string
  creationFlags?: WorkflowCreationFlags
  envTemplatized?: boolean
  tagLinks?: HarnessTagLink[]
  templatizedServiceIds?: string[]
  linkedTemplateUuids?: string[]
  linkedArtifactStreamIds?: string[]
  deploymentTypes?: (
    | 'SSH'
    | 'AWS_CODEDEPLOY'
    | 'ECS'
    | 'SPOTINST'
    | 'KUBERNETES'
    | 'HELM'
    | 'AWS_LAMBDA'
    | 'AMI'
    | 'WINRM'
    | 'PCF'
    | 'AZURE_VMSS'
    | 'AZURE_WEBAPP'
    | 'CUSTOM'
  )[]
  accountId?: string
  sample?: boolean
}

export type WorkflowCreationFlags = {
  ecsBGType?: string
  awsTrafficShiftType?: string
  ecsBgDnsType?: boolean
  awsTrafficShiftAlbType?: boolean
}

export type KubernetesPayload = {
  advancedConfig?: string
}

export type RestResponseWorkflowVariablesMetadata = {
  metaData?: {
    [key: string]: Record<string, any>
  }
  resource?: WorkflowVariablesMetadata
  responseMessages?: ResponseMessage[]
}

export type WorkflowVariablesMetadata = {
  workflowVariables?: Variable[]
  changed?: boolean
  changedMessage?: string
}

export type RestResponseWorkflowExecution = {
  metaData?: {
    [key: string]: Record<string, any>
  }
  resource?: WorkflowExecution
  responseMessages?: ResponseMessage[]
}

export type RestResponsePageResponseWorkflowExecution = {
  metaData?: {
    [key: string]: Record<string, any>
  }
  resource?: WorkflowExecution[]
  responseMessages?: ResponseMessage[]
}

export type PipelineStageGroupedInfo = {
  name?: string
  pipelineStageElementNames?: string[]
  /*
   * @format int32
   */
  parallelIndex?: number
}

export type RestResponseListPipelineStageGroupedInfo = {
  metaData?: {
    [key: string]: Record<string, any>
  }
  resource?: PipelineStageGroupedInfo[]
  responseMessages?: ResponseMessage[]
}

export type RestResponseRollbackConfirmation = {
  metaData?: {
    [key: string]: Record<string, any>
  }
  resource?: RollbackConfirmation
  responseMessages?: ResponseMessage[]
}

export type RollbackConfirmation = {
  validationMessage?: string
  activeWorkflowExecution?: WorkflowExecution
  workflowId?: string
  valid?: boolean
  artifacts?: Artifact[]
}

export type ExecutionInterrupt = {
  uuid: string
  appId: string
  createdBy?: EmbeddedUser
  /*
   * @format int64
   */
  createdAt?: number
  lastUpdatedBy?: EmbeddedUser
  /*
   * @format int64
   */
  lastUpdatedAt: number
  executionInterruptType:
    | 'ABORT'
    | 'ABORT_ALL'
    | 'PAUSE'
    | 'PAUSE_FOR_INPUTS'
    | 'PAUSE_ALL'
    | 'RESUME'
    | 'RESUME_ALL'
    | 'RETRY'
    | 'IGNORE'
    | 'WAITING_FOR_MANUAL_INTERVENTION'
    | 'MARK_FAILED'
    | 'MARK_SUCCESS'
    | 'ROLLBACK'
    | 'ROLLBACK_PROVISIONER_AFTER_PHASES'
    | 'NEXT_STEP'
    | 'END_EXECUTION'
    | 'ROLLBACK_DONE'
    | 'MARK_EXPIRED'
    | 'CONTINUE_WITH_DEFAULTS'
    | 'CONTINUE_PIPELINE_STAGE'
  seized?: boolean
  envId?: string
  executionUuid: string
  stateExecutionInstanceId?: string
  accountId?: string
  properties?: {
    [key: string]: Record<string, any>
  }
}

export type RestResponseExecutionInterrupt = {
  metaData?: {
    [key: string]: Record<string, any>
  }
  resource?: ExecutionInterrupt
  responseMessages?: ResponseMessage[]
}

export type ApprovalDetails = {
  approvalId?: string
  approvedBy?: EmbeddedUser
  comments?: string
  action?: 'APPROVE' | 'REJECT'
  approvalFromSlack?: boolean
  approvalFromGraphQL?: boolean
  approvalViaApiKey?: boolean
  variables?: NameValuePair[]
}

export type RequiredExecutionArgs = {
  /*
   * @uniqueItems true
   */
  entityTypes?: (
    | 'SERVICE'
    | 'PROVISIONER'
    | 'ENVIRONMENT'
    | 'HOST'
    | 'RELEASE'
    | 'ARTIFACT'
    | 'SSH_USER'
    | 'SSH_PASSWORD'
    | 'SSH_APP_ACCOUNT'
    | 'SSH_KEY_PASSPHRASE'
    | 'SSH_APP_ACCOUNT_PASSOWRD'
    | 'SIMPLE_DEPLOYMENT'
    | 'ORCHESTRATED_DEPLOYMENT'
    | 'PIPELINE'
    | 'WORKFLOW'
    | 'DEPLOYMENT'
    | 'INSTANCE'
    | 'APPLICATION'
    | 'COMMAND'
    | 'CONFIG'
    | 'SERVICE_TEMPLATE'
    | 'INFRASTRUCTURE_MAPPING'
    | 'INFRASTRUCTURE_DEFINITION'
    | 'USER'
    | 'ARTIFACT_STREAM'
    | 'APPDYNAMICS_CONFIGID'
    | 'APPDYNAMICS_APPID'
    | 'APPDYNAMICS_TIERID'
    | 'ELK_CONFIGID'
    | 'ELK_INDICES'
    | 'NEWRELIC_CONFIGID'
    | 'NEWRELIC_APPID'
    | 'SS_SSH_CONNECTION_ATTRIBUTE'
    | 'SS_WINRM_CONNECTION_ATTRIBUTE'
    | 'SUMOLOGIC_CONFIGID'
    | 'SPLUNK_CONFIGID'
    | 'NEWRELIC_MARKER_CONFIGID'
    | 'NEWRELIC_MARKER_APPID'
    | 'API_KEY'
    | 'ACCOUNT'
    | 'APPLICATION_MANIFEST'
    | 'USER_GROUP'
    | 'WHITELISTED_IP'
    | 'CF_AWS_CONFIG_ID'
    | 'VERIFICATION_CONFIGURATION'
    | 'HELM_GIT_CONFIG_ID'
    | 'NOTIFICATION_GROUP'
    | 'HELM_CHART_SPECIFICATION'
    | 'PCF_SERVICE_SPECIFICATION'
    | 'LAMBDA_SPECIFICATION'
    | 'USER_DATA_SPECIFICATION'
    | 'ECS_CONTAINER_SPECIFICATION'
    | 'ECS_SERVICE_SPECIFICATION'
    | 'K8S_CONTAINER_SPECIFICATION'
    | 'CONFIG_FILE'
    | 'SERVICE_COMMAND'
    | 'MANIFEST_FILE'
    | 'SERVICE_VARIABLE'
    | 'TRIGGER'
    | 'ROLE'
    | 'TEMPLATE'
    | 'TEMPLATE_FOLDER'
    | 'SETTING_ATTRIBUTE'
    | 'ENCRYPTED_RECORDS'
    | 'CV_CONFIGURATION'
    | 'TAG'
    | 'CUSTOM_DASHBOARD'
    | 'PIPELINE_GOVERNANCE_STANDARD'
    | 'WORKFLOW_EXECUTION'
    | 'SERVERLESS_INSTANCE'
    | 'USER_INVITE'
    | 'LOGIN_SETTINGS'
    | 'SSO_SETTINGS'
    | 'DELEGATE'
    | 'DELEGATE_SCOPE'
    | 'DELEGATE_PROFILE'
    | 'EXPORT_EXECUTIONS_REQUEST'
    | 'GCP_CONFIG'
    | 'GIT_CONFIG'
    | 'JENKINS_SERVER'
    | 'SECRETS_MANAGER'
    | 'HELM_CHART'
    | 'SECRET'
    | 'CONNECTOR'
    | 'CLOUD_PROVIDER'
    | 'GOVERNANCE_FREEZE_CONFIG'
    | 'GOVERNANCE_CONFIG'
    | 'EVENT_RULE'
  )[]
  defaultExecutionArgs?: ExecutionArgs
}

export type RestResponseRequiredExecutionArgs = {
  metaData?: {
    [key: string]: Record<string, any>
  }
  resource?: RequiredExecutionArgs
  responseMessages?: ResponseMessage[]
}

export type DeploymentMetadata = {
  artifactRequiredServices?: Service[]
  artifactRequiredServiceIds?: string[]
  envSummaries?: EnvSummary[]
  envIds?: string[]
  deploymentTypes?: (
    | 'SSH'
    | 'AWS_CODEDEPLOY'
    | 'ECS'
    | 'SPOTINST'
    | 'KUBERNETES'
    | 'HELM'
    | 'AWS_LAMBDA'
    | 'AMI'
    | 'WINRM'
    | 'PCF'
    | 'AZURE_VMSS'
    | 'AZURE_WEBAPP'
    | 'CUSTOM'
  )[]
  artifactVariables?: ArtifactVariable[]
  manifestVariables?: ManifestVariable[]
  manifestRequiredServiceIds?: string[]
}

export type RestResponseDeploymentMetadata = {
  metaData?: {
    [key: string]: Record<string, any>
  }
  resource?: DeploymentMetadata
  responseMessages?: ResponseMessage[]
}

export type RestResponseGraphNode = {
  metaData?: {
    [key: string]: Record<string, any>
  }
  resource?: GraphNode
  responseMessages?: ResponseMessage[]
}

export type RestResponseListStateExecutionData = {
  metaData?: {
    [key: string]: Record<string, any>
  }
  resource?: StateExecutionData[]
  responseMessages?: ResponseMessage[]
}

export type RestResponseListStateExecutionInterrupt = {
  metaData?: {
    [key: string]: Record<string, any>
  }
  resource?: StateExecutionInterrupt[]
  responseMessages?: ResponseMessage[]
}

export type StateExecutionInterrupt = {
  interrupt?: ExecutionInterrupt
  /*
   * @format date-time
   */
  tookAffectAt?: string
}

export type RestResponseStateInspection = {
  metaData?: {
    [key: string]: Record<string, any>
  }
  resource?: StateInspection
  responseMessages?: ResponseMessage[]
}

export type RestResponseListStateExecutionElement = {
  metaData?: {
    [key: string]: Record<string, any>
  }
  resource?: StateExecutionElement[]
  responseMessages?: ResponseMessage[]
}

export type StateExecutionElement = {
  executionContextElementId?: string
  status?:
    | 'ABORTED'
    | 'DISCONTINUING'
    | 'ERROR'
    | 'FAILED'
    | 'NEW'
    | 'PAUSED'
    | 'PAUSING'
    | 'QUEUED'
    | 'RESUMED'
    | 'RUNNING'
    | 'SCHEDULED'
    | 'STARTING'
    | 'SUCCESS'
    | 'WAITING'
    | 'SKIPPED'
    | 'ABORTING'
    | 'REJECTED'
    | 'EXPIRED'
    | 'PREPARING'
  name?: string
  /*
   * @format int32
   */
  progress?: number
  runningSteps?: string[]
}

export type RestResponseSetWorkflowExecutionBaseline = {
  metaData?: {
    [key: string]: Record<string, any>
  }
  /*
   * @uniqueItems true
   */
  resource?: WorkflowExecutionBaseline[]
  responseMessages?: ResponseMessage[]
}

export type WorkflowExecutionBaseline = {
  workflowId?: string
  envId?: string
  serviceId?: string
  workflowExecutionId?: string
  accountId?: string
  pipelineExecutionId?: string
  uuid: string
  appId: string
  createdBy?: EmbeddedUser
  /*
   * @format int64
   */
  createdAt?: number
  lastUpdatedBy?: EmbeddedUser
  /*
   * @format int64
   */
  lastUpdatedAt: number
}

export type RestResponseWorkflowExecutionBaseline = {
  metaData?: {
    [key: string]: Record<string, any>
  }
  resource?: WorkflowExecutionBaseline
  responseMessages?: ResponseMessage[]
}

export type RestResponseListArtifact = {
  metaData?: {
    [key: string]: Record<string, any>
  }
  resource?: Artifact[]
  responseMessages?: ResponseMessage[]
}

export type ApprovalAuthorization = {
  authorized?: boolean
}

export type RestResponseApprovalAuthorization = {
  metaData?: {
    [key: string]: Record<string, any>
  }
  resource?: ApprovalAuthorization
  responseMessages?: ResponseMessage[]
}

export type ConcurrentExecutionResponse = {
  state?: 'BLOCKED' | 'ACTIVE' | 'FINISHED' | 'REJECTED'
  unitType?: 'INFRA' | 'CUSTOM' | 'NONE'
  executions?: WorkflowExecution[]
  infrastructureDetails?: {
    [key: string]: Record<string, any>
  }
}

export type RestResponseConcurrentExecutionResponse = {
  metaData?: {
    [key: string]: Record<string, any>
  }
  resource?: ConcurrentExecutionResponse
  responseMessages?: ResponseMessage[]
}

export type RestResponseMapStringGraphGroup = {
  metaData?: {
    [key: string]: Record<string, any>
  }
  resource?: {
    [key: string]: GraphGroup
  }
  responseMessages?: ResponseMessage[]
}

export type RestResponseWorkflowExecutionInfo = {
  metaData?: {
    [key: string]: Record<string, any>
  }
  resource?: WorkflowExecutionInfo
  responseMessages?: ResponseMessage[]
}

export type ExpAnalysisInfo = {
  stateExecutionId?: string
  appId?: string
  stateType?:
    | 'SUB_WORKFLOW'
    | 'REPEAT'
    | 'FORK'
    | 'WAIT'
    | 'PAUSE'
    | 'BARRIER'
    | 'RESOURCE_CONSTRAINT'
    | 'SHELL_SCRIPT'
    | 'HTTP'
    | 'TEMPLATIZED_SECRET_MANAGER'
    | 'EMAIL'
    | 'APP_DYNAMICS'
    | 'NEW_RELIC'
    | 'NEW_RELIC_DEPLOYMENT_MARKER'
    | 'DYNA_TRACE'
    | 'PROMETHEUS'
    | 'SPLUNKV2'
    | 'ELK'
    | 'LOGZ'
    | 'SUMO'
    | 'DATA_DOG'
    | 'DATA_DOG_LOG'
    | 'CVNG'
    | 'CLOUD_WATCH'
    | 'AWS_LAMBDA_VERIFICATION'
    | 'APM_VERIFICATION'
    | 'LOG_VERIFICATION'
    | 'BUG_SNAG'
    | 'STACK_DRIVER'
    | 'STACK_DRIVER_LOG'
    | 'INSTANA'
    | 'SCALYR'
    | 'ENV_STATE'
    | 'ENV_LOOP_STATE'
    | 'ENV_RESUME_STATE'
    | 'ENV_LOOP_RESUME_STATE'
    | 'COMMAND'
    | 'APPROVAL'
    | 'APPROVAL_RESUME'
    | 'ELASTIC_LOAD_BALANCER'
    | 'JENKINS'
    | 'GCB'
    | 'BAMBOO'
    | 'ARTIFACT_COLLECTION'
    | 'ARTIFACT_CHECK'
    | 'AZURE_NODE_SELECT'
    | 'AZURE_VMSS_SETUP'
    | 'AZURE_VMSS_DEPLOY'
    | 'AZURE_VMSS_ROLLBACK'
    | 'AZURE_VMSS_SWITCH_ROUTES'
    | 'AZURE_VMSS_SWITCH_ROUTES_ROLLBACK'
    | 'AZURE_WEBAPP_SLOT_SETUP'
    | 'AZURE_WEBAPP_SLOT_SWAP'
    | 'AZURE_WEBAPP_SLOT_SHIFT_TRAFFIC'
    | 'AZURE_WEBAPP_SLOT_ROLLBACK'
    | 'AWS_NODE_SELECT'
    | 'DC_NODE_SELECT'
    | 'ROLLING_NODE_SELECT'
    | 'PHASE'
    | 'PHASE_STEP'
    | 'STAGING_ORIGINAL_EXECUTION'
    | 'AWS_CODEDEPLOY_STATE'
    | 'AWS_CODEDEPLOY_ROLLBACK'
    | 'AWS_LAMBDA_STATE'
    | 'AWS_LAMBDA_ROLLBACK'
    | 'AWS_AMI_SERVICE_SETUP'
    | 'ASG_AMI_SERVICE_ALB_SHIFT_SETUP'
    | 'AWS_AMI_SERVICE_DEPLOY'
    | 'ASG_AMI_SERVICE_ALB_SHIFT_DEPLOY'
    | 'AWS_AMI_SWITCH_ROUTES'
    | 'ASG_AMI_ALB_SHIFT_SWITCH_ROUTES'
    | 'AWS_AMI_ROLLBACK_SWITCH_ROUTES'
    | 'ASG_AMI_ROLLBACK_ALB_SHIFT_SWITCH_ROUTES'
    | 'AWS_AMI_SERVICE_ROLLBACK'
    | 'ECS_SERVICE_SETUP'
    | 'SPOTINST_SETUP'
    | 'SPOTINST_ALB_SHIFT_SETUP'
    | 'SPOTINST_DEPLOY'
    | 'SPOTINST_ALB_SHIFT_DEPLOY'
    | 'SPOTINST_LISTENER_UPDATE'
    | 'SPOTINST_LISTENER_ALB_SHIFT'
    | 'SPOTINST_ROLLBACK'
    | 'SPOTINST_LISTENER_UPDATE_ROLLBACK'
    | 'SPOTINST_LISTENER_ALB_SHIFT_ROLLBACK'
    | 'ECS_SERVICE_SETUP_ROLLBACK'
    | 'ECS_DAEMON_SERVICE_SETUP'
    | 'ECS_BG_SERVICE_SETUP'
    | 'ECS_BG_SERVICE_SETUP_ROUTE53'
    | 'ECS_SERVICE_DEPLOY'
    | 'ECS_SERVICE_ROLLBACK'
    | 'ECS_LISTENER_UPDATE'
    | 'ECS_LISTENER_UPDATE_ROLLBACK'
    | 'ECS_ROUTE53_DNS_WEIGHT_UPDATE'
    | 'ECS_ROUTE53_DNS_WEIGHT_UPDATE_ROLLBACK'
    | 'KUBERNETES_SETUP'
    | 'KUBERNETES_SETUP_ROLLBACK'
    | 'KUBERNETES_DEPLOY'
    | 'KUBERNETES_DEPLOY_ROLLBACK'
    | 'KUBERNETES_STEADY_STATE_CHECK'
    | 'ECS_STEADY_STATE_CHECK'
    | 'ECS_RUN_TASK'
    | 'GCP_CLUSTER_SETUP'
    | 'HELM_DEPLOY'
    | 'HELM_ROLLBACK'
    | 'PCF_SETUP'
    | 'PCF_RESIZE'
    | 'PCF_ROLLBACK'
    | 'PCF_MAP_ROUTE'
    | 'PCF_UNMAP_ROUTE'
    | 'PCF_BG_MAP_ROUTE'
    | 'PCF_PLUGIN'
    | 'TERRAFORM_PROVISION'
    | 'TERRAFORM_APPLY'
    | 'TERRAGRUNT_PROVISION'
    | 'TERRAGRUNT_DESTROY'
    | 'TERRAGRUNT_ROLLBACK'
    | 'ARM_CREATE_RESOURCE'
    | 'ARM_ROLLBACK'
    | 'SHELL_SCRIPT_PROVISION'
    | 'TERRAFORM_DESTROY'
    | 'CLOUD_FORMATION_CREATE_STACK'
    | 'CLOUD_FORMATION_DELETE_STACK'
    | 'KUBERNETES_SWAP_SERVICE_SELECTORS'
    | 'CLOUD_FORMATION_ROLLBACK_STACK'
    | 'TERRAFORM_ROLLBACK'
    | 'K8S_DEPLOYMENT_ROLLING'
    | 'K8S_SCALE'
    | 'K8S_DEPLOYMENT_ROLLING_ROLLBACK'
    | 'K8S_BLUE_GREEN_DEPLOY'
    | 'K8S_CANARY_DEPLOY'
    | 'K8S_DELETE'
    | 'RANCHER_RESOLVE'
    | 'RANCHER_K8S_DEPLOYMENT_ROLLING'
    | 'RANCHER_K8S_CANARY_DEPLOY'
    | 'RANCHER_K8S_BLUE_GREEN_DEPLOY'
    | 'RANCHER_KUBERNETES_SWAP_SERVICE_SELECTORS'
    | 'RANCHER_K8S_DELETE'
    | 'RANCHER_K8S_DEPLOYMENT_ROLLING_ROLLBACK'
    | 'JIRA_CREATE_UPDATE'
    | 'SERVICENOW_CREATE_UPDATE'
    | 'K8S_TRAFFIC_SPLIT'
    | 'K8S_APPLY'
    | 'CUSTOM_DEPLOYMENT_FETCH_INSTANCES'
  expName?: string
  envId?: string
  workflowExecutionId?: string
  /*
   * @format int64
   */
  createdAt?: number
  mismatch?: boolean
}

export type RestResponseListExpAnalysisInfo = {
  metaData?: {
    [key: string]: Record<string, any>
  }
  resource?: ExpAnalysisInfo[]
  responseMessages?: ResponseMessage[]
}

export type ExperimentalMessageComparisonResult = {
  stateExecutionId?: string
  cvConfigId?: string
  /*
   * @format int32
   */
  logCollectionMinute?: number
  /*
   * @format int32
   */
  numVotes?: number
  message1?: string
  message2?: string
  prediction?: string
  cluster_type?: string
  /*
   * @format double
   */
  similarity?: number
  modelVersion?: string
  userVotes?: {
    [key: string]: string
  }
  uuid?: string
  /*
   * @format int64
   */
  createdAt?: number
}

export type RestResponseListExperimentalMessageComparisonResult = {
  metaData?: {
    [key: string]: Record<string, any>
  }
  resource?: ExperimentalMessageComparisonResult[]
  responseMessages?: ResponseMessage[]
}

export type ExperimentalMetricAnalysis = {
  metricName?: string
  riskLevel?: 'HIGH' | 'MEDIUM' | 'LOW' | 'NA'
  experimentalRiskLevel?: 'HIGH' | 'MEDIUM' | 'LOW' | 'NA'
  metricValues?: ExperimentalMetricAnalysisValue[]
  displayName?: string
  fullMetricName?: string
  tag?: string
  mismatch?: boolean
}

export type ExperimentalMetricAnalysisValue = {
  name?: string
  type?: string
  alertType?: string
  riskLevel?: 'HIGH' | 'MEDIUM' | 'LOW' | 'NA'
  experimentalRiskLevel?: 'HIGH' | 'MEDIUM' | 'LOW' | 'NA'
  /*
   * @format double
   */
  testValue?: number
  /*
   * @format double
   */
  controlValue?: number
  hostAnalysisValues?: ExperimentalMetricHostAnalysisValue[]
  mismatch?: boolean
}

export type ExperimentalMetricHostAnalysisValue = {
  riskLevel?: 'HIGH' | 'MEDIUM' | 'LOW' | 'NA'
  experimentalRiskLevel?: 'HIGH' | 'MEDIUM' | 'LOW' | 'NA'
  testHostName?: string
  controlHostName?: string
  testValues?: number[]
  controlValues?: number[]
  anomalies?: number[]
  /*
   * @format int32
   */
  testStartIndex?: number
  mismatch?: boolean
}

export type ExperimentalMetricRecord = {
  workflowExecutionId?: string
  stateExecutionId?: string
  cvConfigId?: string
  /*
   * @format int32
   */
  analysisMinute?: number
  stateType?:
    | 'SUB_WORKFLOW'
    | 'REPEAT'
    | 'FORK'
    | 'WAIT'
    | 'PAUSE'
    | 'BARRIER'
    | 'RESOURCE_CONSTRAINT'
    | 'SHELL_SCRIPT'
    | 'HTTP'
    | 'TEMPLATIZED_SECRET_MANAGER'
    | 'EMAIL'
    | 'APP_DYNAMICS'
    | 'NEW_RELIC'
    | 'NEW_RELIC_DEPLOYMENT_MARKER'
    | 'DYNA_TRACE'
    | 'PROMETHEUS'
    | 'SPLUNKV2'
    | 'ELK'
    | 'LOGZ'
    | 'SUMO'
    | 'DATA_DOG'
    | 'DATA_DOG_LOG'
    | 'CVNG'
    | 'CLOUD_WATCH'
    | 'AWS_LAMBDA_VERIFICATION'
    | 'APM_VERIFICATION'
    | 'LOG_VERIFICATION'
    | 'BUG_SNAG'
    | 'STACK_DRIVER'
    | 'STACK_DRIVER_LOG'
    | 'INSTANA'
    | 'SCALYR'
    | 'ENV_STATE'
    | 'ENV_LOOP_STATE'
    | 'ENV_RESUME_STATE'
    | 'ENV_LOOP_RESUME_STATE'
    | 'COMMAND'
    | 'APPROVAL'
    | 'APPROVAL_RESUME'
    | 'ELASTIC_LOAD_BALANCER'
    | 'JENKINS'
    | 'GCB'
    | 'BAMBOO'
    | 'ARTIFACT_COLLECTION'
    | 'ARTIFACT_CHECK'
    | 'AZURE_NODE_SELECT'
    | 'AZURE_VMSS_SETUP'
    | 'AZURE_VMSS_DEPLOY'
    | 'AZURE_VMSS_ROLLBACK'
    | 'AZURE_VMSS_SWITCH_ROUTES'
    | 'AZURE_VMSS_SWITCH_ROUTES_ROLLBACK'
    | 'AZURE_WEBAPP_SLOT_SETUP'
    | 'AZURE_WEBAPP_SLOT_SWAP'
    | 'AZURE_WEBAPP_SLOT_SHIFT_TRAFFIC'
    | 'AZURE_WEBAPP_SLOT_ROLLBACK'
    | 'AWS_NODE_SELECT'
    | 'DC_NODE_SELECT'
    | 'ROLLING_NODE_SELECT'
    | 'PHASE'
    | 'PHASE_STEP'
    | 'STAGING_ORIGINAL_EXECUTION'
    | 'AWS_CODEDEPLOY_STATE'
    | 'AWS_CODEDEPLOY_ROLLBACK'
    | 'AWS_LAMBDA_STATE'
    | 'AWS_LAMBDA_ROLLBACK'
    | 'AWS_AMI_SERVICE_SETUP'
    | 'ASG_AMI_SERVICE_ALB_SHIFT_SETUP'
    | 'AWS_AMI_SERVICE_DEPLOY'
    | 'ASG_AMI_SERVICE_ALB_SHIFT_DEPLOY'
    | 'AWS_AMI_SWITCH_ROUTES'
    | 'ASG_AMI_ALB_SHIFT_SWITCH_ROUTES'
    | 'AWS_AMI_ROLLBACK_SWITCH_ROUTES'
    | 'ASG_AMI_ROLLBACK_ALB_SHIFT_SWITCH_ROUTES'
    | 'AWS_AMI_SERVICE_ROLLBACK'
    | 'ECS_SERVICE_SETUP'
    | 'SPOTINST_SETUP'
    | 'SPOTINST_ALB_SHIFT_SETUP'
    | 'SPOTINST_DEPLOY'
    | 'SPOTINST_ALB_SHIFT_DEPLOY'
    | 'SPOTINST_LISTENER_UPDATE'
    | 'SPOTINST_LISTENER_ALB_SHIFT'
    | 'SPOTINST_ROLLBACK'
    | 'SPOTINST_LISTENER_UPDATE_ROLLBACK'
    | 'SPOTINST_LISTENER_ALB_SHIFT_ROLLBACK'
    | 'ECS_SERVICE_SETUP_ROLLBACK'
    | 'ECS_DAEMON_SERVICE_SETUP'
    | 'ECS_BG_SERVICE_SETUP'
    | 'ECS_BG_SERVICE_SETUP_ROUTE53'
    | 'ECS_SERVICE_DEPLOY'
    | 'ECS_SERVICE_ROLLBACK'
    | 'ECS_LISTENER_UPDATE'
    | 'ECS_LISTENER_UPDATE_ROLLBACK'
    | 'ECS_ROUTE53_DNS_WEIGHT_UPDATE'
    | 'ECS_ROUTE53_DNS_WEIGHT_UPDATE_ROLLBACK'
    | 'KUBERNETES_SETUP'
    | 'KUBERNETES_SETUP_ROLLBACK'
    | 'KUBERNETES_DEPLOY'
    | 'KUBERNETES_DEPLOY_ROLLBACK'
    | 'KUBERNETES_STEADY_STATE_CHECK'
    | 'ECS_STEADY_STATE_CHECK'
    | 'ECS_RUN_TASK'
    | 'GCP_CLUSTER_SETUP'
    | 'HELM_DEPLOY'
    | 'HELM_ROLLBACK'
    | 'PCF_SETUP'
    | 'PCF_RESIZE'
    | 'PCF_ROLLBACK'
    | 'PCF_MAP_ROUTE'
    | 'PCF_UNMAP_ROUTE'
    | 'PCF_BG_MAP_ROUTE'
    | 'PCF_PLUGIN'
    | 'TERRAFORM_PROVISION'
    | 'TERRAFORM_APPLY'
    | 'TERRAGRUNT_PROVISION'
    | 'TERRAGRUNT_DESTROY'
    | 'TERRAGRUNT_ROLLBACK'
    | 'ARM_CREATE_RESOURCE'
    | 'ARM_ROLLBACK'
    | 'SHELL_SCRIPT_PROVISION'
    | 'TERRAFORM_DESTROY'
    | 'CLOUD_FORMATION_CREATE_STACK'
    | 'CLOUD_FORMATION_DELETE_STACK'
    | 'KUBERNETES_SWAP_SERVICE_SELECTORS'
    | 'CLOUD_FORMATION_ROLLBACK_STACK'
    | 'TERRAFORM_ROLLBACK'
    | 'K8S_DEPLOYMENT_ROLLING'
    | 'K8S_SCALE'
    | 'K8S_DEPLOYMENT_ROLLING_ROLLBACK'
    | 'K8S_BLUE_GREEN_DEPLOY'
    | 'K8S_CANARY_DEPLOY'
    | 'K8S_DELETE'
    | 'RANCHER_RESOLVE'
    | 'RANCHER_K8S_DEPLOYMENT_ROLLING'
    | 'RANCHER_K8S_CANARY_DEPLOY'
    | 'RANCHER_K8S_BLUE_GREEN_DEPLOY'
    | 'RANCHER_KUBERNETES_SWAP_SERVICE_SELECTORS'
    | 'RANCHER_K8S_DELETE'
    | 'RANCHER_K8S_DEPLOYMENT_ROLLING_ROLLBACK'
    | 'JIRA_CREATE_UPDATE'
    | 'SERVICENOW_CREATE_UPDATE'
    | 'K8S_TRAFFIC_SPLIT'
    | 'K8S_APPLY'
    | 'CUSTOM_DEPLOYMENT_FETCH_INSTANCES'
  riskLevel?: 'HIGH' | 'MEDIUM' | 'LOW' | 'NA'
  experimentalRiskLevel?: 'HIGH' | 'MEDIUM' | 'LOW' | 'NA'
  mlAnalysisType?: 'COMPARATIVE' | 'PREDICTIVE' | 'TIMESERIES_24x7'
  metricAnalysis?: ExperimentalMetricAnalysis[]
  baseLineExecutionId?: string
  mismatch?: boolean
  experimentStatus?: 'UNDETERMINED' | 'SUCCESS' | 'FAILURE'
}

export type RestResponseExperimentalMetricRecord = {
  metaData?: {
    [key: string]: Record<string, any>
  }
  resource?: ExperimentalMetricRecord
  responseMessages?: ResponseMessage[]
}

export type ExperimentPerformance = Record<string, any>

export type RestResponseExperimentPerformance = {
  metaData?: {
    [key: string]: Record<string, any>
  }
  resource?: ExperimentPerformance
  responseMessages?: ResponseMessage[]
}

export type RestResponsePageResponseExpAnalysisInfo = {
  metaData?: {
    [key: string]: Record<string, any>
  }
  resource?: ExpAnalysisInfo[]
  responseMessages?: ResponseMessage[]
}

export type ExportExecutionsRequestLimitChecks = {
  queuedRequests?: LimitCheck
  executionCount?: LimitCheck
}

export type LimitCheck = {
  /*
   * @format int64
   */
  limit?: number
  /*
   * @format int64
   */
  value?: number
}

export type RestResponseExportExecutionsRequestLimitChecks = {
  metaData?: {
    [key: string]: Record<string, any>
  }
  resource?: ExportExecutionsRequestLimitChecks
  responseMessages?: ResponseMessage[]
}

export type ExportExecutionsRequestSummary = {
  requestId?: string
  status?: 'QUEUED' | 'READY' | 'FAILED' | 'EXPIRED'
  /*
   * @format int64
   */
  totalExecutions?: number
  /*
   * @format date-time
   */
  triggeredAt?: string
  statusLink?: string
  downloadLink?: string
  /*
   * @format date-time
   */
  expiresAt?: string
  errorMessage?: string
}

export type RestResponseExportExecutionsRequestSummary = {
  metaData?: {
    [key: string]: Record<string, any>
  }
  resource?: ExportExecutionsRequestSummary
  responseMessages?: ResponseMessage[]
}

export type ExportExecutionsUserParams = {
  outputFormat?: 'JSON'
  notifyOnlyTriggeringUser?: boolean
  userGroupIds?: string[]
  createdByType?: 'USER' | 'API_KEY' | 'TRIGGER'
}

export type ExecutionStatusResponse = {
  status?: string
}

export type FeatureFlag = {
  uuid?: string
  name?: string
  enabled?: boolean
  /*
   * @format int64
   */
  lastUpdatedAt?: number
}

export type RestResponseFeatureFlag = {
  metaData?: {
    [key: string]: Record<string, any>
  }
  resource?: FeatureFlag
  responseMessages?: ResponseMessage[]
}

export type RestResponseListFeatureFlag = {
  metaData?: {
    [key: string]: Record<string, any>
  }
  resource?: FeatureFlag[]
  responseMessages?: ResponseMessage[]
}

export type FeatureUsageComplianceReport = {
  featureName?: string
  properties?: {
    [key: string]: Record<string, any>
  }
}

export type FeaturesUsageComplianceReport = {
  accountId?: string
  targetAccountType?: string
  featureUsageComplianceReports?: FeatureUsageComplianceReport[]
}

export type RestResponseFeaturesUsageComplianceReport = {
  metaData?: {
    [key: string]: Record<string, any>
  }
  resource?: FeaturesUsageComplianceReport
  responseMessages?: ResponseMessage[]
}

export type RestResponseFeatureRestrictions = {
  metaData?: {
    [key: string]: Record<string, any>
  }
  resource?: {
    [key: string]: {
      [key: string]: {
        [key: string]: Record<string, any>
      }
    }
  }
  responseMessages?: ResponseMessage[]
}

export type GcpBillingAccount = {
  uuid?: string
  accountId?: string
  organizationSettingId?: string
  gcpBillingAccountId?: string
  gcpBillingAccountName?: string
  exportEnabled?: boolean
  bqProjectId?: string
  bqDatasetId?: string
  bqDataSetRegion?: string
  /*
   * @format int64
   */
  createdAt?: number
  /*
   * @format int64
   */
  lastUpdatedAt?: number
}

export type RestResponseGcpBillingAccount = {
  metaData?: {
    [key: string]: Record<string, any>
  }
  resource?: GcpBillingAccount
  responseMessages?: ResponseMessage[]
}

export type RestResponseListGcpBillingAccount = {
  metaData?: {
    [key: string]: Record<string, any>
  }
  resource?: GcpBillingAccount[]
  responseMessages?: ResponseMessage[]
}

export type GcpOrganization = {
  uuid?: string
  accountId?: string
  organizationId?: string
  organizationName?: string
  serviceAccountEmail?: string
  /*
   * @format int64
   */
  createdAt?: number
  /*
   * @format int64
   */
  lastUpdatedAt?: number
}

export type RestResponseGcpOrganization = {
  metaData?: {
    [key: string]: Record<string, any>
  }
  resource?: GcpOrganization
  responseMessages?: ResponseMessage[]
}

export type GitRepositoryInfo = {
  url?: string
  displayUrl?: string
  provider?: 'GITHUB' | 'BITBUCKET' | 'GITLAB' | 'UNKNOWN'
}

export type GitSyncError = {
  uuid: string
  appId: string
  createdBy?: EmbeddedUser
  /*
   * @format int64
   */
  createdAt?: number
  lastUpdatedBy?: EmbeddedUser
  /*
   * @format int64
   */
  lastUpdatedAt: number
  accountId?: string
  yamlFilePath?: string
  changeType?: string
  failureReason?: string
  yamlContent?: string
  gitCommitId?: string
  /*
   * @format int64
   */
  nextIteration?: number
  fullSyncPath?: boolean
  lastAttemptedYaml?: string
  status?: 'ACTIVE' | 'DISCARDED' | 'EXPIRED' | 'RESOLVED' | 'OVERRIDDEN'
  gitConnectorId?: string
  repositoryName?: string
  gitConnectorName?: string
  repositoryInfo?: GitRepositoryInfo
  branchName?: string
  yamlGitConfigId?: string
  /*
   * @format int64
   */
  commitTime?: number
  additionalErrorDetails?: GitSyncErrorDetails
  gitSyncDirection?: string
  userDoesNotHavePermForFile?: boolean
}

export type GitSyncErrorDetails = Record<string, any>

export type GitToHarnessErrorCommitStats = {
  gitCommitId?: string
  /*
   * @format int32
   */
  failedCount?: number
  /*
   * @format int64
   */
  commitTime?: number
  gitConnectorId?: string
  branchName?: string
  repositoryName?: string
  gitConnectorName?: string
  commitMessage?: string
  errorsForSummaryView?: GitSyncError[]
  repositoryInfo?: GitRepositoryInfo
}

export type RestResponsePageResponseGitToHarnessErrorCommitStats = {
  metaData?: {
    [key: string]: Record<string, any>
  }
  resource?: GitToHarnessErrorCommitStats[]
  responseMessages?: ResponseMessage[]
}

export type RestResponseInteger = {
  metaData?: {
    [key: string]: Record<string, any>
  }
  /*
   * @format int32
   */
  resource?: number
  responseMessages?: ResponseMessage[]
}

export type GitDetail = {
  entityName?: string
  entityType?:
    | 'SERVICE'
    | 'PROVISIONER'
    | 'ENVIRONMENT'
    | 'HOST'
    | 'RELEASE'
    | 'ARTIFACT'
    | 'SSH_USER'
    | 'SSH_PASSWORD'
    | 'SSH_APP_ACCOUNT'
    | 'SSH_KEY_PASSPHRASE'
    | 'SSH_APP_ACCOUNT_PASSOWRD'
    | 'SIMPLE_DEPLOYMENT'
    | 'ORCHESTRATED_DEPLOYMENT'
    | 'PIPELINE'
    | 'WORKFLOW'
    | 'DEPLOYMENT'
    | 'INSTANCE'
    | 'APPLICATION'
    | 'COMMAND'
    | 'CONFIG'
    | 'SERVICE_TEMPLATE'
    | 'INFRASTRUCTURE_MAPPING'
    | 'INFRASTRUCTURE_DEFINITION'
    | 'USER'
    | 'ARTIFACT_STREAM'
    | 'APPDYNAMICS_CONFIGID'
    | 'APPDYNAMICS_APPID'
    | 'APPDYNAMICS_TIERID'
    | 'ELK_CONFIGID'
    | 'ELK_INDICES'
    | 'NEWRELIC_CONFIGID'
    | 'NEWRELIC_APPID'
    | 'SS_SSH_CONNECTION_ATTRIBUTE'
    | 'SS_WINRM_CONNECTION_ATTRIBUTE'
    | 'SUMOLOGIC_CONFIGID'
    | 'SPLUNK_CONFIGID'
    | 'NEWRELIC_MARKER_CONFIGID'
    | 'NEWRELIC_MARKER_APPID'
    | 'API_KEY'
    | 'ACCOUNT'
    | 'APPLICATION_MANIFEST'
    | 'USER_GROUP'
    | 'WHITELISTED_IP'
    | 'CF_AWS_CONFIG_ID'
    | 'VERIFICATION_CONFIGURATION'
    | 'HELM_GIT_CONFIG_ID'
    | 'NOTIFICATION_GROUP'
    | 'HELM_CHART_SPECIFICATION'
    | 'PCF_SERVICE_SPECIFICATION'
    | 'LAMBDA_SPECIFICATION'
    | 'USER_DATA_SPECIFICATION'
    | 'ECS_CONTAINER_SPECIFICATION'
    | 'ECS_SERVICE_SPECIFICATION'
    | 'K8S_CONTAINER_SPECIFICATION'
    | 'CONFIG_FILE'
    | 'SERVICE_COMMAND'
    | 'MANIFEST_FILE'
    | 'SERVICE_VARIABLE'
    | 'TRIGGER'
    | 'ROLE'
    | 'TEMPLATE'
    | 'TEMPLATE_FOLDER'
    | 'SETTING_ATTRIBUTE'
    | 'ENCRYPTED_RECORDS'
    | 'CV_CONFIGURATION'
    | 'TAG'
    | 'CUSTOM_DASHBOARD'
    | 'PIPELINE_GOVERNANCE_STANDARD'
    | 'WORKFLOW_EXECUTION'
    | 'SERVERLESS_INSTANCE'
    | 'USER_INVITE'
    | 'LOGIN_SETTINGS'
    | 'SSO_SETTINGS'
    | 'DELEGATE'
    | 'DELEGATE_SCOPE'
    | 'DELEGATE_PROFILE'
    | 'EXPORT_EXECUTIONS_REQUEST'
    | 'GCP_CONFIG'
    | 'GIT_CONFIG'
    | 'JENKINS_SERVER'
    | 'SECRETS_MANAGER'
    | 'HELM_CHART'
    | 'SECRET'
    | 'CONNECTOR'
    | 'CLOUD_PROVIDER'
    | 'GOVERNANCE_FREEZE_CONFIG'
    | 'GOVERNANCE_CONFIG'
    | 'EVENT_RULE'
  repositoryUrl?: string
  branchName?: string
  yamlGitConfigId?: string
  gitConnectorId?: string
  appId?: string
  gitCommitId?: string
  connectorName?: string
  repositoryInfo?: GitRepositoryInfo
}

export type RestResponseListGitDetail = {
  metaData?: {
    [key: string]: Record<string, any>
  }
  resource?: GitDetail[]
  responseMessages?: ResponseMessage[]
}

export type GitFileActivitySummary = {
  uuid: string
  accountId?: string
  commitId?: string
  branchName?: string
  repositoryName?: string
  gitConnectorId?: string
  appId?: string
  /*
   * @format int64
   */
  createdAt?: number
  commitMessage?: string
  /*
   * @format int64
   */
  lastUpdatedAt?: number
  gitToHarness?: boolean
  status?: 'QUEUED' | 'RUNNING' | 'COMPLETED' | 'FAILED' | 'COMPLETED_WITH_ERRORS' | 'SKIPPED'
  fileProcessingSummary?: GitFileProcessingSummary
  connectorName?: string
  repositoryInfo?: GitRepositoryInfo
}

export type GitFileProcessingSummary = {
  /*
   * @format int64
   */
  failureCount?: number
  /*
   * @format int64
   */
  successCount?: number
  /*
   * @format int64
   */
  totalCount?: number
  /*
   * @format int64
   */
  skippedCount?: number
  /*
   * @format int64
   */
  queuedCount?: number
}

export type RestResponsePageResponseGitFileActivitySummary = {
  metaData?: {
    [key: string]: Record<string, any>
  }
  resource?: GitFileActivitySummary[]
  responseMessages?: ResponseMessage[]
}

export type RestResponsePageResponseGitSyncError = {
  metaData?: {
    [key: string]: Record<string, any>
  }
  resource?: GitSyncError[]
  responseMessages?: ResponseMessage[]
}

export type GitProcessingError = {
  accountId?: string
  message?: string
  /*
   * @format int64
   */
  createdAt?: number
  gitConnectorId?: string
  branchName?: string
  repositoryName?: string
  connectorName?: string
  repositoryInfo?: GitRepositoryInfo
}

export type RestResponsePageResponseGitProcessingError = {
  metaData?: {
    [key: string]: Record<string, any>
  }
  resource?: GitProcessingError[]
  responseMessages?: ResponseMessage[]
}

export type GitFileActivity = {
  uuid?: string
  accountId?: string
  filePath?: string
  fileContent?: string
  commitId?: string
  processingCommitId?: string
  changeType?: 'ADD' | 'RENAME' | 'MODIFY' | 'DELETE' | 'NONE'
  errorMessage?: string
  status?: 'SUCCESS' | 'FAILED' | 'DISCARDED' | 'EXPIRED' | 'SKIPPED' | 'QUEUED'
  triggeredBy?: 'USER' | 'GIT' | 'FULL_SYNC'
  changeFromAnotherCommit?: boolean
  commitMessage?: string
  processingCommitMessage?: string
  appId?: string
  /*
   * @format int64
   */
  createdAt?: number
  /*
   * @format int64
   */
  lastUpdatedAt?: number
  gitConnectorId?: string
  repositoryName?: string
  branchName?: string
  connectorName?: string
  repositoryInfo?: GitRepositoryInfo
  userDoesNotHavePermForFile?: boolean
}

export type RestResponsePageResponseGitFileActivity = {
  metaData?: {
    [key: string]: Record<string, any>
  }
  resource?: GitFileActivity[]
  responseMessages?: ResponseMessage[]
}

export type ChangeSetDTO = {
  gitDetail?: GitDetail
  status?: 'QUEUED' | 'RUNNING' | 'FAILED' | 'COMPLETED' | 'SKIPPED'
  changeSetId?: string
  gitToHarness?: boolean
  changesetInformation?: ChangesetInformation
}

export type ChangesetInformation = Record<string, any>

export type RestResponseListChangeSetDTO = {
  metaData?: {
    [key: string]: Record<string, any>
  }
  resource?: ChangeSetDTO[]
  responseMessages?: ResponseMessage[]
}

export type AccessTokenBean = {
  projectId?: string
  tokenValue?: string
  /*
   * @format int64
   */
  expirationTimeMillis?: number
}

export type RestResponseAccessTokenBean = {
  metaData?: {
    [key: string]: Record<string, any>
  }
  resource?: AccessTokenBean
  responseMessages?: ResponseMessage[]
}

export type RestResponseSampleAppStatus = {
  metaData?: {
    [key: string]: Record<string, any>
  }
  resource?: SampleAppStatus
  responseMessages?: ResponseMessage[]
}

export type SampleAppEntityStatus = {
  entityName?: string
  entityType?: string
  health?: 'GOOD' | 'BAD'
}

export type SampleAppStatus = {
  deploymentType?: string
  health?: 'GOOD' | 'BAD'
  statusList?: SampleAppEntityStatus[]
}

export type RestResponsePageResponseHarnessTagLink = {
  metaData?: {
    [key: string]: Record<string, any>
  }
  resource?: HarnessTagLink[]
  responseMessages?: ResponseMessage[]
}

export type HarnessTag = {
  uuid?: string
  accountId?: string
  key?: string
  tagType?: 'USER' | 'HARNESS'
  /*
   * @uniqueItems true
   */
  allowedValues?: string[]
  /*
   * @uniqueItems true
   */
  inUseValues?: string[]
  createdBy?: EmbeddedUser
  /*
   * @format int64
   */
  createdAt?: number
  lastUpdatedBy?: EmbeddedUser
  /*
   * @format int64
   */
  lastUpdatedAt: number
}

export type RestResponseHarnessTag = {
  metaData?: {
    [key: string]: Record<string, any>
  }
  resource?: HarnessTag
  responseMessages?: ResponseMessage[]
}

export type RestResponsePageResponseHarnessTag = {
  metaData?: {
    [key: string]: Record<string, any>
  }
  resource?: HarnessTag[]
  responseMessages?: ResponseMessage[]
}

export type HarnessUserGroup = {
  uuid: string
  appId: string
  createdBy?: EmbeddedUser
  /*
   * @format int64
   */
  createdAt?: number
  lastUpdatedBy?: EmbeddedUser
  /*
   * @format int64
   */
  lastUpdatedAt: number
  name?: string
  description?: string
  /*
   * @uniqueItems true
   */
  memberIds?: string[]
  /*
   * @uniqueItems true
   */
  accountIds?: string[]
  groupType?: 'DEFAULT' | 'RESTRICTED'
}

export type RestResponseHarnessUserGroup = {
  metaData?: {
    [key: string]: Record<string, any>
  }
  resource?: HarnessUserGroup
  responseMessages?: ResponseMessage[]
}

export type HarnessUserGroupDTO = {
  name?: string
  description?: string
  /*
   * @uniqueItems true
   */
  emailIds?: string[]
  /*
   * @uniqueItems true
   */
  accountIds?: string[]
}

export type RestResponseListHarnessUserGroup = {
  metaData?: {
    [key: string]: Record<string, any>
  }
  resource?: HarnessUserGroup[]
  responseMessages?: ResponseMessage[]
}

export type HarnessSupportUserDTO = {
  name?: string
  id?: string
  emailId?: string
}

export type RestResponseListHarnessSupportUserDTO = {
  metaData?: {
    [key: string]: Record<string, any>
  }
  resource?: HarnessSupportUserDTO[]
  responseMessages?: ResponseMessage[]
}

export type RestResponseListHelmChart = {
  metaData?: {
    [key: string]: Record<string, any>
  }
  resource?: HelmChart[]
  responseMessages?: ResponseMessage[]
}

export type RestResponseHelmChart = {
  metaData?: {
    [key: string]: Record<string, any>
  }
  resource?: HelmChart
  responseMessages?: ResponseMessage[]
}

export type RestResponseHost = {
  metaData?: {
    [key: string]: Record<string, any>
  }
  resource?: Host
  responseMessages?: ResponseMessage[]
}

export type RestResponsePageResponseHost = {
  metaData?: {
    [key: string]: Record<string, any>
  }
  resource?: Host[]
  responseMessages?: ResponseMessage[]
}

export type RestResponseListAccount = {
  metaData?: {
    [key: string]: Record<string, any>
  }
  resource?: Account[]
  responseMessages?: ResponseMessage[]
}

export type RestResponseUser = {
  metaData?: {
    [key: string]: Record<string, any>
  }
  resource?: User
  responseMessages?: ResponseMessage[]
}

export type LogoutResponse = {
  logoutUrl?: string
}

export type RestResponseLogoutResponse = {
  metaData?: {
    [key: string]: Record<string, any>
  }
  resource?: LogoutResponse
  responseMessages?: ResponseMessage[]
}

export type AccountSettingsResponse = {
  authenticationMechanism?: 'USER_PASSWORD' | 'SAML' | 'LDAP' | 'OAUTH'
  /*
   * @uniqueItems true
   */
  allowedDomains?: string[]
  /*
   * @uniqueItems true
   */
  oauthProviderTypes?: ('AZURE' | 'BITBUCKET' | 'GITHUB' | 'GITLAB' | 'GOOGLE' | 'LINKEDIN')[]
}

export type RestResponseAccountSettingsResponse = {
  metaData?: {
    [key: string]: Record<string, any>
  }
  resource?: AccountSettingsResponse
  responseMessages?: ResponseMessage[]
}

export type OauthUserInfo = {
  email?: string
  name?: string
  login?: string
  utmInfo?: UtmInfo
  freemiumProducts?: ('CD' | 'CE' | 'CI')[]
  freemiumAssistedOption?: boolean
}

export type LdapIdentificationInfo = {
  host?: string
  /*
   * @format int32
   */
  port?: number
}

export type OauthIdentificationInfo = {
  /*
   * @uniqueItems true
   */
  providers?: ('AZURE' | 'BITBUCKET' | 'GITHUB' | 'GITLAB' | 'GOOGLE' | 'LINKEDIN')[]
}

export type RestResponseRestrictedSwitchAccountInfo = {
  metaData?: {
    [key: string]: Record<string, any>
  }
  resource?: RestrictedSwitchAccountInfo
  responseMessages?: ResponseMessage[]
}

export type RestrictedSwitchAccountInfo = {
  skipReAuthentication?: boolean
  authenticationMechanism?: 'USER_PASSWORD' | 'SAML' | 'LDAP' | 'OAUTH'
  ldapIdentificationInfo?: LdapIdentificationInfo
  oauthIdentificationInfo?: OauthIdentificationInfo
  samlIdentificationInfo?: SamlIdentificationInfo
  /*
   * @uniqueItems true
   */
  whitelistedDomains?: string[]
  harnessSupportGroupUser?: boolean
  twoFactorAuthEnabledForAccount?: boolean
}

export type SamlIdentificationInfo = {
  origin?: string
  metaDataFile?: string
}

export type RestResponseListUser = {
  metaData?: {
    [key: string]: Record<string, any>
  }
  resource?: User[]
  responseMessages?: ResponseMessage[]
}

export type RestResponseInfrastructureDefinition = {
  metaData?: {
    [key: string]: Record<string, any>
  }
  resource?: InfrastructureDefinition
  responseMessages?: ResponseMessage[]
}

export type RestResponsePageResponseInfrastructureDefinition = {
  metaData?: {
    [key: string]: Record<string, any>
  }
  resource?: InfrastructureDefinition[]
  responseMessages?: ResponseMessage[]
}

export type ListInfraDefinitionParams = {
  deploymentTypeFromMetaData?: string[]
  serviceIds?: string[]
}

export type InfraDefinitionDetail = {
  infrastructureDefinition?: InfrastructureDefinition
  derivedInfraMappingDetailList?: InfraMappingDetail[]
  /*
   * @format int32
   */
  countDerivedInfraMappings?: number
}

export type InfraMappingDetail = {
  infrastructureMapping?: InfrastructureMapping
  workflowExecutionList?: WorkflowExecution[]
}

export type RestResponseInfraDefinitionDetail = {
  metaData?: {
    [key: string]: Record<string, any>
  }
  resource?: InfraDefinitionDetail
  responseMessages?: ResponseMessage[]
}

export type AwsLoadBalancerDetails = {
  arn?: string
  name?: string
  type?: string
  scheme?: string
  vpcId?: string
  ipAddressType?: string
  dnsname?: string
}

export type RestResponseListAwsLoadBalancerDetails = {
  metaData?: {
    [key: string]: Record<string, any>
  }
  resource?: AwsLoadBalancerDetails[]
  responseMessages?: ResponseMessage[]
}

export type ElastiGroup = {
  id?: string
  name?: string
  capacity?: ElastiGroupCapacity
}

export type ElastiGroupCapacity = {
  /*
   * @format int32
   */
  minimum?: number
  /*
   * @format int32
   */
  maximum?: number
  /*
   * @format int32
   */
  target?: number
}

export type RestResponseListElastiGroup = {
  metaData?: {
    [key: string]: Record<string, any>
  }
  resource?: ElastiGroup[]
  responseMessages?: ResponseMessage[]
}

export type RestResponseSpotinstElastigroupRunningCountData = {
  metaData?: {
    [key: string]: Record<string, any>
  }
  resource?: SpotinstElastigroupRunningCountData
  responseMessages?: ResponseMessage[]
}

export type SpotinstElastigroupRunningCountData = {
  /*
   * @format int32
   */
  elastigroupMin?: number
  /*
   * @format int32
   */
  elastigroupMax?: number
  /*
   * @format int32
   */
  elastigroupTarget?: number
  elastigroupName?: string
}

export type RestResponseVirtualMachineScaleSetData = {
  metaData?: {
    [key: string]: Record<string, any>
  }
  resource?: VirtualMachineScaleSetData
  responseMessages?: ResponseMessage[]
}

export type VirtualMachineScaleSetData = {
  id?: string
  name?: string
  virtualMachineAdministratorUsername?: string
}

export type DeploymentSlotData = {
  type?: string
  name?: string
}

export type RestResponseListDeploymentSlotData = {
  metaData?: {
    [key: string]: Record<string, any>
  }
  resource?: DeploymentSlotData[]
  responseMessages?: ResponseMessage[]
}

export type AwsElbListener = {
  listenerArn?: string
  loadBalancerArn?: string
  /*
   * @format int32
   */
  port?: number
  protocol?: string
  rules?: AwsElbListenerRuleData[]
}

export type AwsElbListenerRuleData = {
  ruleArn?: string
  rulePriority?: string
  ruleTargetGroupArn?: string
  ['default']?: boolean
}

export type RestResponseListAwsElbListener = {
  metaData?: {
    [key: string]: Record<string, any>
  }
  resource?: AwsElbListener[]
  responseMessages?: ResponseMessage[]
}

export type AwsSubnet = {
  id?: string
  name?: string
}

export type RestResponseListAwsSubnet = {
  metaData?: {
    [key: string]: Record<string, any>
  }
  resource?: AwsSubnet[]
  responseMessages?: ResponseMessage[]
}

export type RestResponsePageResponseInfraDefinitionDetail = {
  metaData?: {
    [key: string]: Record<string, any>
  }
  resource?: InfraDefinitionDetail[]
  responseMessages?: ResponseMessage[]
}

export type AwsVPC = {
  id?: string
  name?: string
}

export type RestResponseListAwsVPC = {
  metaData?: {
    [key: string]: Record<string, any>
  }
  resource?: AwsVPC[]
  responseMessages?: ResponseMessage[]
}

export type AwsAsgGetRunningCountData = {
  /*
   * @format int32
   */
  asgMin?: number
  /*
   * @format int32
   */
  asgMax?: number
  /*
   * @format int32
   */
  asgDesired?: number
  asgName?: string
}

export type RestResponseAwsAsgGetRunningCountData = {
  metaData?: {
    [key: string]: Record<string, any>
  }
  resource?: AwsAsgGetRunningCountData
  responseMessages?: ResponseMessage[]
}

export type RestResponseMapDeploymentTypeListSettingVariableTypes = {
  metaData?: {
    [key: string]: Record<string, any>
  }
  resource?: {
    [key: string]: (
      | 'HOST_CONNECTION_ATTRIBUTES'
      | 'BASTION_HOST_CONNECTION_ATTRIBUTES'
      | 'SMTP'
      | 'SFTP'
      | 'JENKINS'
      | 'BAMBOO'
      | 'STRING'
      | 'SPLUNK'
      | 'ELK'
      | 'LOGZ'
      | 'SUMO'
      | 'DATA_DOG'
      | 'APM_VERIFICATION'
      | 'BUG_SNAG'
      | 'LOG_VERIFICATION'
      | 'APP_DYNAMICS'
      | 'NEW_RELIC'
      | 'DYNA_TRACE'
      | 'INSTANA'
      | 'DATA_DOG_LOG'
      | 'CLOUD_WATCH'
      | 'SCALYR'
      | 'ELB'
      | 'SLACK'
      | 'AWS'
      | 'GCS'
      | 'GCP'
      | 'AZURE'
      | 'PCF'
      | 'RANCHER'
      | 'DIRECT'
      | 'KUBERNETES_CLUSTER'
      | 'DOCKER'
      | 'ECR'
      | 'GCR'
      | 'ACR'
      | 'PHYSICAL_DATA_CENTER'
      | 'KUBERNETES'
      | 'NEXUS'
      | 'ARTIFACTORY'
      | 'SMB'
      | 'AMAZON_S3'
      | 'GIT'
      | 'SSH_SESSION_CONFIG'
      | 'SERVICE_VARIABLE'
      | 'CONFIG_FILE'
      | 'KMS'
      | 'GCP_KMS'
      | 'JIRA'
      | 'SERVICENOW'
      | 'SECRET_TEXT'
      | 'YAML_GIT_SYNC'
      | 'VAULT'
      | 'VAULT_SSH'
      | 'AWS_SECRETS_MANAGER'
      | 'CYBERARK'
      | 'WINRM_CONNECTION_ATTRIBUTES'
      | 'WINRM_SESSION_CONFIG'
      | 'PROMETHEUS'
      | 'INFRASTRUCTURE_MAPPING'
      | 'HTTP_HELM_REPO'
      | 'AMAZON_S3_HELM_REPO'
      | 'GCS_HELM_REPO'
      | 'SPOT_INST'
      | 'AZURE_ARTIFACTS_PAT'
      | 'CUSTOM'
      | 'CE_AWS'
      | 'CE_GCP'
      | 'CE_AZURE'
      | 'AZURE_VAULT'
      | 'KUBERNETES_CLUSTER_NG'
      | 'GIT_NG'
      | 'SSO_SAML'
      | 'GCP_SECRETS_MANAGER'
      | 'TRIGGER'
    )[]
  }
  responseMessages?: ResponseMessage[]
}

export type AwsSecurityGroup = {
  id?: string
  name?: string
}

export type RestResponseListAwsSecurityGroup = {
  metaData?: {
    [key: string]: Record<string, any>
  }
  resource?: AwsSecurityGroup[]
  responseMessages?: ResponseMessage[]
}

export type AwsRoute53HostedZoneData = {
  hostedZoneId?: string
  hostedZoneName?: string
}

export type RestResponseListAwsRoute53HostedZoneData = {
  metaData?: {
    [key: string]: Record<string, any>
  }
  resource?: AwsRoute53HostedZoneData[]
  responseMessages?: ResponseMessage[]
}

export type HostValidationResponse = {
  hostName?: string
  status?: string
  errorCode?: string
  errorDescription?: string
}

export type RestResponseListHostValidationResponse = {
  metaData?: {
    [key: string]: Record<string, any>
  }
  resource?: HostValidationResponse[]
  responseMessages?: ResponseMessage[]
}

export type HostValidationRequest = {
  appId?: string
  envId?: string
  computeProviderSettingId?: string
  deploymentType?: string
  hostConnectionAttrs?: string
  executionCredential?: ExecutionCredential
  hostNames?: string[]
}

export type RestResponseInfrastructureMapping = {
  metaData?: {
    [key: string]: Record<string, any>
  }
  resource?: InfrastructureMapping
  responseMessages?: ResponseMessage[]
}

export type RestResponsePageResponseInfrastructureMapping = {
  metaData?: {
    [key: string]: Record<string, any>
  }
  resource?: InfrastructureMapping[]
  responseMessages?: ResponseMessage[]
}

export type ARMInfrastructureProvisioner = InfrastructureProvisioner & {
  resourceType?: 'ARM' | 'BLUEPRINT'
  sourceType?: 'TEMPLATE_BODY' | 'GIT'
  scopeType?: 'RESOURCE_GROUP' | 'SUBSCRIPTION' | 'MANAGEMENT_GROUP' | 'TENANT'
  templateBody?: string
  gitFileConfig?: GitFileConfig
}

export type BlueprintProperty = {
  name?: string
  value: string
  valueType?: string
  fields?: NameValuePair[]
}

export type CloudFormationInfrastructureProvisioner = InfrastructureProvisioner & {
  sourceType?: string
  templateBody?: string
  templateFilePath?: string
  gitFileConfig?: GitFileConfig
}

export type InfrastructureMappingBlueprint = {
  serviceId?: string
  deploymentType:
    | 'SSH'
    | 'AWS_CODEDEPLOY'
    | 'ECS'
    | 'SPOTINST'
    | 'KUBERNETES'
    | 'HELM'
    | 'AWS_LAMBDA'
    | 'AMI'
    | 'WINRM'
    | 'PCF'
    | 'AZURE_VMSS'
    | 'AZURE_WEBAPP'
    | 'CUSTOM'
  cloudProviderType: 'AWS' | 'GCP' | 'PHYSICAL_DATA_CENTER'
  nodeFilteringType?:
    | 'AWS_INSTANCE_FILTER'
    | 'AWS_AUTOSCALING_GROUP'
    | 'AWS_ECS_EC2'
    | 'AWS_ECS_FARGATE'
    | 'AWS_ASG_AMI'
  properties: BlueprintProperty[]
}

export type InfrastructureProvisioner = {
  uuid: string
  appId: string
  createdBy?: EmbeddedUser
  /*
   * @format int64
   */
  createdAt?: number
  lastUpdatedBy?: EmbeddedUser
  /*
   * @format int64
   */
  lastUpdatedAt: number
  name?: string
  description?: string
  infrastructureProvisionerType?: string
  variables?: NameValuePair[]
  mappingBlueprints?: InfrastructureMappingBlueprint[]
  accountId?: string
  tagLinks?: HarnessTagLink[]
}

export type RestResponseInfrastructureProvisioner = {
  metaData?: {
    [key: string]: Record<string, any>
  }
  resource?: InfrastructureProvisioner
  responseMessages?: ResponseMessage[]
}

export type ShellScriptInfrastructureProvisioner = InfrastructureProvisioner & {
  scriptBody?: string
}

export type TerraformInfrastructureProvisioner = InfrastructureProvisioner & {
  sourceRepoSettingId?: string
  sourceRepoBranch?: string
  commitId?: string
  repoName?: string
  path: string
  normalizedPath?: string
  backendConfigs?: NameValuePair[]
  environmentVariables?: NameValuePair[]
  templatized?: boolean
  workspaces?: string[]
  kmsId?: string
  skipRefreshBeforeApplyingPlan?: boolean
}

export type TerragruntInfrastructureProvisioner = InfrastructureProvisioner & {
  sourceRepoSettingId?: string
  sourceRepoBranch?: string
  commitId?: string
  repoName?: string
  path: string
  normalizedPath?: string
  templatized?: boolean
  secretManagerId?: string
  skipRefreshBeforeApplyingPlan?: boolean
}

export type RestResponsePageResponseInfrastructureProvisioner = {
  metaData?: {
    [key: string]: Record<string, any>
  }
  resource?: InfrastructureProvisioner[]
  responseMessages?: ResponseMessage[]
}

export type RestResponseMapPairDeploymentTypeCloudProviderTypeMapStringString = {
  metaData?: {
    [key: string]: Record<string, any>
  }
  resource?: {
    [key: string]: {
      [key: string]: string
    }
  }
  responseMessages?: ResponseMessage[]
}

export type InfrastructureProvisionerDetails = {
  uuid?: string
  name?: string
  description?: string
  infrastructureProvisionerType?: string
  repository?: string
  services?: {
    [key: string]: string
  }
  cloudFormationSourceType?: string
  azureARMResourceType?: 'ARM' | 'BLUEPRINT'
  tagLinks?: HarnessTagLink[]
}

export type RestResponsePageResponseInfrastructureProvisionerDetails = {
  metaData?: {
    [key: string]: Record<string, any>
  }
  resource?: InfrastructureProvisionerDetails[]
  responseMessages?: ResponseMessage[]
}

export type AwsCFTemplateParamsData = {
  paramKey?: string
  paramType?: string
  defaultValue?: string
}

export type RestResponseListAwsCFTemplateParamsData = {
  metaData?: {
    [key: string]: Record<string, any>
  }
  resource?: AwsCFTemplateParamsData[]
  responseMessages?: ResponseMessage[]
}

export type InstanaApplicationParams = {
  hostTagFilter?: string
  tagFilters?: InstanaTagFilter[]
}

export type InstanaInfraParams = {
  metrics?: string[]
  query?: string
}

export type InstanaSetupTestNodeData = {
  infraParams?: InstanaInfraParams
  applicationParams?: InstanaApplicationParams
  tagFilters?: InstanaTagFilter[]
  appId: string
  settingId: string
  instanceName?: string
  isServiceLevel?: boolean
  instanceElement?: Instance
  hostExpression?: string
  workflowId?: string
  guid?: string
  stateType?:
    | 'SUB_WORKFLOW'
    | 'REPEAT'
    | 'FORK'
    | 'WAIT'
    | 'PAUSE'
    | 'BARRIER'
    | 'RESOURCE_CONSTRAINT'
    | 'SHELL_SCRIPT'
    | 'HTTP'
    | 'TEMPLATIZED_SECRET_MANAGER'
    | 'EMAIL'
    | 'APP_DYNAMICS'
    | 'NEW_RELIC'
    | 'NEW_RELIC_DEPLOYMENT_MARKER'
    | 'DYNA_TRACE'
    | 'PROMETHEUS'
    | 'SPLUNKV2'
    | 'ELK'
    | 'LOGZ'
    | 'SUMO'
    | 'DATA_DOG'
    | 'DATA_DOG_LOG'
    | 'CVNG'
    | 'CLOUD_WATCH'
    | 'AWS_LAMBDA_VERIFICATION'
    | 'APM_VERIFICATION'
    | 'LOG_VERIFICATION'
    | 'BUG_SNAG'
    | 'STACK_DRIVER'
    | 'STACK_DRIVER_LOG'
    | 'INSTANA'
    | 'SCALYR'
    | 'ENV_STATE'
    | 'ENV_LOOP_STATE'
    | 'ENV_RESUME_STATE'
    | 'ENV_LOOP_RESUME_STATE'
    | 'COMMAND'
    | 'APPROVAL'
    | 'APPROVAL_RESUME'
    | 'ELASTIC_LOAD_BALANCER'
    | 'JENKINS'
    | 'GCB'
    | 'BAMBOO'
    | 'ARTIFACT_COLLECTION'
    | 'ARTIFACT_CHECK'
    | 'AZURE_NODE_SELECT'
    | 'AZURE_VMSS_SETUP'
    | 'AZURE_VMSS_DEPLOY'
    | 'AZURE_VMSS_ROLLBACK'
    | 'AZURE_VMSS_SWITCH_ROUTES'
    | 'AZURE_VMSS_SWITCH_ROUTES_ROLLBACK'
    | 'AZURE_WEBAPP_SLOT_SETUP'
    | 'AZURE_WEBAPP_SLOT_SWAP'
    | 'AZURE_WEBAPP_SLOT_SHIFT_TRAFFIC'
    | 'AZURE_WEBAPP_SLOT_ROLLBACK'
    | 'AWS_NODE_SELECT'
    | 'DC_NODE_SELECT'
    | 'ROLLING_NODE_SELECT'
    | 'PHASE'
    | 'PHASE_STEP'
    | 'STAGING_ORIGINAL_EXECUTION'
    | 'AWS_CODEDEPLOY_STATE'
    | 'AWS_CODEDEPLOY_ROLLBACK'
    | 'AWS_LAMBDA_STATE'
    | 'AWS_LAMBDA_ROLLBACK'
    | 'AWS_AMI_SERVICE_SETUP'
    | 'ASG_AMI_SERVICE_ALB_SHIFT_SETUP'
    | 'AWS_AMI_SERVICE_DEPLOY'
    | 'ASG_AMI_SERVICE_ALB_SHIFT_DEPLOY'
    | 'AWS_AMI_SWITCH_ROUTES'
    | 'ASG_AMI_ALB_SHIFT_SWITCH_ROUTES'
    | 'AWS_AMI_ROLLBACK_SWITCH_ROUTES'
    | 'ASG_AMI_ROLLBACK_ALB_SHIFT_SWITCH_ROUTES'
    | 'AWS_AMI_SERVICE_ROLLBACK'
    | 'ECS_SERVICE_SETUP'
    | 'SPOTINST_SETUP'
    | 'SPOTINST_ALB_SHIFT_SETUP'
    | 'SPOTINST_DEPLOY'
    | 'SPOTINST_ALB_SHIFT_DEPLOY'
    | 'SPOTINST_LISTENER_UPDATE'
    | 'SPOTINST_LISTENER_ALB_SHIFT'
    | 'SPOTINST_ROLLBACK'
    | 'SPOTINST_LISTENER_UPDATE_ROLLBACK'
    | 'SPOTINST_LISTENER_ALB_SHIFT_ROLLBACK'
    | 'ECS_SERVICE_SETUP_ROLLBACK'
    | 'ECS_DAEMON_SERVICE_SETUP'
    | 'ECS_BG_SERVICE_SETUP'
    | 'ECS_BG_SERVICE_SETUP_ROUTE53'
    | 'ECS_SERVICE_DEPLOY'
    | 'ECS_SERVICE_ROLLBACK'
    | 'ECS_LISTENER_UPDATE'
    | 'ECS_LISTENER_UPDATE_ROLLBACK'
    | 'ECS_ROUTE53_DNS_WEIGHT_UPDATE'
    | 'ECS_ROUTE53_DNS_WEIGHT_UPDATE_ROLLBACK'
    | 'KUBERNETES_SETUP'
    | 'KUBERNETES_SETUP_ROLLBACK'
    | 'KUBERNETES_DEPLOY'
    | 'KUBERNETES_DEPLOY_ROLLBACK'
    | 'KUBERNETES_STEADY_STATE_CHECK'
    | 'ECS_STEADY_STATE_CHECK'
    | 'ECS_RUN_TASK'
    | 'GCP_CLUSTER_SETUP'
    | 'HELM_DEPLOY'
    | 'HELM_ROLLBACK'
    | 'PCF_SETUP'
    | 'PCF_RESIZE'
    | 'PCF_ROLLBACK'
    | 'PCF_MAP_ROUTE'
    | 'PCF_UNMAP_ROUTE'
    | 'PCF_BG_MAP_ROUTE'
    | 'PCF_PLUGIN'
    | 'TERRAFORM_PROVISION'
    | 'TERRAFORM_APPLY'
    | 'TERRAGRUNT_PROVISION'
    | 'TERRAGRUNT_DESTROY'
    | 'TERRAGRUNT_ROLLBACK'
    | 'ARM_CREATE_RESOURCE'
    | 'ARM_ROLLBACK'
    | 'SHELL_SCRIPT_PROVISION'
    | 'TERRAFORM_DESTROY'
    | 'CLOUD_FORMATION_CREATE_STACK'
    | 'CLOUD_FORMATION_DELETE_STACK'
    | 'KUBERNETES_SWAP_SERVICE_SELECTORS'
    | 'CLOUD_FORMATION_ROLLBACK_STACK'
    | 'TERRAFORM_ROLLBACK'
    | 'K8S_DEPLOYMENT_ROLLING'
    | 'K8S_SCALE'
    | 'K8S_DEPLOYMENT_ROLLING_ROLLBACK'
    | 'K8S_BLUE_GREEN_DEPLOY'
    | 'K8S_CANARY_DEPLOY'
    | 'K8S_DELETE'
    | 'RANCHER_RESOLVE'
    | 'RANCHER_K8S_DEPLOYMENT_ROLLING'
    | 'RANCHER_K8S_CANARY_DEPLOY'
    | 'RANCHER_K8S_BLUE_GREEN_DEPLOY'
    | 'RANCHER_KUBERNETES_SWAP_SERVICE_SELECTORS'
    | 'RANCHER_K8S_DELETE'
    | 'RANCHER_K8S_DEPLOYMENT_ROLLING_ROLLBACK'
    | 'JIRA_CREATE_UPDATE'
    | 'SERVICENOW_CREATE_UPDATE'
    | 'K8S_TRAFFIC_SPLIT'
    | 'K8S_APPLY'
    | 'CUSTOM_DEPLOYMENT_FETCH_INSTANCES'
  /*
   * @format int64
   */
  toTime?: number
  /*
   * @format int64
   */
  fromTime?: number
  serviceLevel?: boolean
}

export type InstanaTagFilter = {
  name?: string
  value?: string
  operator?: 'EQUALS' | 'CONTAINS' | 'NOT_EQUAL' | 'NOT_CONTAIN' | 'NOT_EMPTY' | 'IS_EMPTY'
}

export type LogDataRecord = {
  stateType?:
    | 'SUB_WORKFLOW'
    | 'REPEAT'
    | 'FORK'
    | 'WAIT'
    | 'PAUSE'
    | 'BARRIER'
    | 'RESOURCE_CONSTRAINT'
    | 'SHELL_SCRIPT'
    | 'HTTP'
    | 'TEMPLATIZED_SECRET_MANAGER'
    | 'EMAIL'
    | 'APP_DYNAMICS'
    | 'NEW_RELIC'
    | 'NEW_RELIC_DEPLOYMENT_MARKER'
    | 'DYNA_TRACE'
    | 'PROMETHEUS'
    | 'SPLUNKV2'
    | 'ELK'
    | 'LOGZ'
    | 'SUMO'
    | 'DATA_DOG'
    | 'DATA_DOG_LOG'
    | 'CVNG'
    | 'CLOUD_WATCH'
    | 'AWS_LAMBDA_VERIFICATION'
    | 'APM_VERIFICATION'
    | 'LOG_VERIFICATION'
    | 'BUG_SNAG'
    | 'STACK_DRIVER'
    | 'STACK_DRIVER_LOG'
    | 'INSTANA'
    | 'SCALYR'
    | 'ENV_STATE'
    | 'ENV_LOOP_STATE'
    | 'ENV_RESUME_STATE'
    | 'ENV_LOOP_RESUME_STATE'
    | 'COMMAND'
    | 'APPROVAL'
    | 'APPROVAL_RESUME'
    | 'ELASTIC_LOAD_BALANCER'
    | 'JENKINS'
    | 'GCB'
    | 'BAMBOO'
    | 'ARTIFACT_COLLECTION'
    | 'ARTIFACT_CHECK'
    | 'AZURE_NODE_SELECT'
    | 'AZURE_VMSS_SETUP'
    | 'AZURE_VMSS_DEPLOY'
    | 'AZURE_VMSS_ROLLBACK'
    | 'AZURE_VMSS_SWITCH_ROUTES'
    | 'AZURE_VMSS_SWITCH_ROUTES_ROLLBACK'
    | 'AZURE_WEBAPP_SLOT_SETUP'
    | 'AZURE_WEBAPP_SLOT_SWAP'
    | 'AZURE_WEBAPP_SLOT_SHIFT_TRAFFIC'
    | 'AZURE_WEBAPP_SLOT_ROLLBACK'
    | 'AWS_NODE_SELECT'
    | 'DC_NODE_SELECT'
    | 'ROLLING_NODE_SELECT'
    | 'PHASE'
    | 'PHASE_STEP'
    | 'STAGING_ORIGINAL_EXECUTION'
    | 'AWS_CODEDEPLOY_STATE'
    | 'AWS_CODEDEPLOY_ROLLBACK'
    | 'AWS_LAMBDA_STATE'
    | 'AWS_LAMBDA_ROLLBACK'
    | 'AWS_AMI_SERVICE_SETUP'
    | 'ASG_AMI_SERVICE_ALB_SHIFT_SETUP'
    | 'AWS_AMI_SERVICE_DEPLOY'
    | 'ASG_AMI_SERVICE_ALB_SHIFT_DEPLOY'
    | 'AWS_AMI_SWITCH_ROUTES'
    | 'ASG_AMI_ALB_SHIFT_SWITCH_ROUTES'
    | 'AWS_AMI_ROLLBACK_SWITCH_ROUTES'
    | 'ASG_AMI_ROLLBACK_ALB_SHIFT_SWITCH_ROUTES'
    | 'AWS_AMI_SERVICE_ROLLBACK'
    | 'ECS_SERVICE_SETUP'
    | 'SPOTINST_SETUP'
    | 'SPOTINST_ALB_SHIFT_SETUP'
    | 'SPOTINST_DEPLOY'
    | 'SPOTINST_ALB_SHIFT_DEPLOY'
    | 'SPOTINST_LISTENER_UPDATE'
    | 'SPOTINST_LISTENER_ALB_SHIFT'
    | 'SPOTINST_ROLLBACK'
    | 'SPOTINST_LISTENER_UPDATE_ROLLBACK'
    | 'SPOTINST_LISTENER_ALB_SHIFT_ROLLBACK'
    | 'ECS_SERVICE_SETUP_ROLLBACK'
    | 'ECS_DAEMON_SERVICE_SETUP'
    | 'ECS_BG_SERVICE_SETUP'
    | 'ECS_BG_SERVICE_SETUP_ROUTE53'
    | 'ECS_SERVICE_DEPLOY'
    | 'ECS_SERVICE_ROLLBACK'
    | 'ECS_LISTENER_UPDATE'
    | 'ECS_LISTENER_UPDATE_ROLLBACK'
    | 'ECS_ROUTE53_DNS_WEIGHT_UPDATE'
    | 'ECS_ROUTE53_DNS_WEIGHT_UPDATE_ROLLBACK'
    | 'KUBERNETES_SETUP'
    | 'KUBERNETES_SETUP_ROLLBACK'
    | 'KUBERNETES_DEPLOY'
    | 'KUBERNETES_DEPLOY_ROLLBACK'
    | 'KUBERNETES_STEADY_STATE_CHECK'
    | 'ECS_STEADY_STATE_CHECK'
    | 'ECS_RUN_TASK'
    | 'GCP_CLUSTER_SETUP'
    | 'HELM_DEPLOY'
    | 'HELM_ROLLBACK'
    | 'PCF_SETUP'
    | 'PCF_RESIZE'
    | 'PCF_ROLLBACK'
    | 'PCF_MAP_ROUTE'
    | 'PCF_UNMAP_ROUTE'
    | 'PCF_BG_MAP_ROUTE'
    | 'PCF_PLUGIN'
    | 'TERRAFORM_PROVISION'
    | 'TERRAFORM_APPLY'
    | 'TERRAGRUNT_PROVISION'
    | 'TERRAGRUNT_DESTROY'
    | 'TERRAGRUNT_ROLLBACK'
    | 'ARM_CREATE_RESOURCE'
    | 'ARM_ROLLBACK'
    | 'SHELL_SCRIPT_PROVISION'
    | 'TERRAFORM_DESTROY'
    | 'CLOUD_FORMATION_CREATE_STACK'
    | 'CLOUD_FORMATION_DELETE_STACK'
    | 'KUBERNETES_SWAP_SERVICE_SELECTORS'
    | 'CLOUD_FORMATION_ROLLBACK_STACK'
    | 'TERRAFORM_ROLLBACK'
    | 'K8S_DEPLOYMENT_ROLLING'
    | 'K8S_SCALE'
    | 'K8S_DEPLOYMENT_ROLLING_ROLLBACK'
    | 'K8S_BLUE_GREEN_DEPLOY'
    | 'K8S_CANARY_DEPLOY'
    | 'K8S_DELETE'
    | 'RANCHER_RESOLVE'
    | 'RANCHER_K8S_DEPLOYMENT_ROLLING'
    | 'RANCHER_K8S_CANARY_DEPLOY'
    | 'RANCHER_K8S_BLUE_GREEN_DEPLOY'
    | 'RANCHER_KUBERNETES_SWAP_SERVICE_SELECTORS'
    | 'RANCHER_K8S_DELETE'
    | 'RANCHER_K8S_DEPLOYMENT_ROLLING_ROLLBACK'
    | 'JIRA_CREATE_UPDATE'
    | 'SERVICENOW_CREATE_UPDATE'
    | 'K8S_TRAFFIC_SPLIT'
    | 'K8S_APPLY'
    | 'CUSTOM_DEPLOYMENT_FETCH_INSTANCES'
  workflowId?: string
  workflowExecutionId?: string
  serviceId?: string
  stateExecutionId?: string
  cvConfigId?: string
  query?: string
  clusterLabel?: string
  host?: string
  /*
   * @format int64
   */
  timeStamp?: number
  supervisedLabel?: string
  /*
   * @format int32
   */
  timesLabeled?: number
  /*
   * @format int32
   */
  count?: number
  logMessage?: string
  logMD5Hash?: string
  clusterLevel?: 'L0' | 'L1' | 'L2' | 'H0' | 'H1' | 'H2' | 'HF'
  /*
   * @format int64
   */
  logCollectionMinute?: number
  accountId?: string
  /*
   * @format date-time
   */
  validUntil?: string
  uuid: string
  appId: string
  createdBy?: EmbeddedUser
  /*
   * @format int64
   */
  createdAt?: number
  lastUpdatedBy?: EmbeddedUser
  /*
   * @format int64
   */
  lastUpdatedAt: number
}

export type RestResponseListLogDataRecord = {
  metaData?: {
    [key: string]: Record<string, any>
  }
  resource?: LogDataRecord[]
  responseMessages?: ResponseMessage[]
}

export type CVFeedbackRecord = {
  uuid?: string
  accountId?: string
  serviceId?: string
  envId?: string
  stateExecutionId?: string
  cvConfigId?: string
  /*
   * @format int32
   */
  clusterLabel?: number
  clusterType?: 'CONTROL' | 'TEST' | 'UNKNOWN' | 'IGNORE'
  logMessage?: string
  comment?: string
  supervisedLabel?: string
  priority?: 'BASELINE' | 'P5' | 'P4' | 'P3' | 'P2' | 'P1' | 'P0'
  jiraLink?: string
  /*
   * @format int64
   */
  analysisMinute?: number
  actionTaken?: 'ADD_TO_BASELINE' | 'REMOVE_FROM_BASELINE' | 'UPDATE_PRIORITY'
  feedbackNote?: string
  /*
   * @format int64
   */
  createdAt?: number
  /*
   * @format int64
   */
  lastUpdatedAt?: number
  createdBy?: EmbeddedUser
  lastUpdatedBy?: EmbeddedUser
  duplicate?: boolean
}

export type RestResponseMapPairStringStringInteger = {
  metaData?: {
    [key: string]: Record<string, any>
  }
  resource?: {
    [key: string]: number
  }
  responseMessages?: ResponseMessage[]
}

export type RestResponseListCVFeedbackRecord = {
  metaData?: {
    [key: string]: Record<string, any>
  }
  resource?: CVFeedbackRecord[]
  responseMessages?: ResponseMessage[]
}

export type RestResponseMapStringListCVFeedbackRecord = {
  metaData?: {
    [key: string]: Record<string, any>
  }
  resource?: {
    [key: string]: CVFeedbackRecord[]
  }
  responseMessages?: ResponseMessage[]
}

export type RestResponseMapStringListString = {
  metaData?: {
    [key: string]: Record<string, any>
  }
  resource?: {
    [key: string]: string[]
  }
  responseMessages?: ResponseMessage[]
}

export type LabeledLogRecord = {
  label?: string
  accountId?: string
  /*
   * @uniqueItems true
   */
  feedbackIds?: string[]
  /*
   * @uniqueItems true
   */
  logDataRecordIds?: string[]
  /*
   * @format int64
   */
  createdAt?: number
  /*
   * @format int64
   */
  lastUpdatedAt?: number
  serviceId?: string
  envId?: string
  uuid?: string
}

export type RestResponseListLogLabel = {
  metaData?: {
    [key: string]: Record<string, any>
  }
  resource?: (
    | 'NOISE'
    | 'CLEAN'
    | 'INFRA'
    | 'THIRD_PARTY'
    | 'IMPORTANT'
    | 'BACKGROUND'
    | 'JAVA_THROWABLE'
    | 'ERROR'
    | 'EXCEPTION'
    | 'RUNTIME'
    | 'HTTP'
    | 'UPSTREAM'
    | 'DOWNSTREAM'
    | 'DATABASE'
    | 'NETWORK'
    | 'APM'
    | 'LOGS'
    | 'JVM'
    | 'WARN'
  )[]
  responseMessages?: ResponseMessage[]
}

export type LogMLFeedbackRecord = {
  uuid: string
  appId: string
  createdBy?: EmbeddedUser
  /*
   * @format int64
   */
  createdAt?: number
  lastUpdatedBy?: EmbeddedUser
  /*
   * @format int64
   */
  lastUpdatedAt: number
  serviceId?: string
  envId?: string
  workflowId?: string
  workflowExecutionId?: string
  stateExecutionId?: string
  stateType?:
    | 'SUB_WORKFLOW'
    | 'REPEAT'
    | 'FORK'
    | 'WAIT'
    | 'PAUSE'
    | 'BARRIER'
    | 'RESOURCE_CONSTRAINT'
    | 'SHELL_SCRIPT'
    | 'HTTP'
    | 'TEMPLATIZED_SECRET_MANAGER'
    | 'EMAIL'
    | 'APP_DYNAMICS'
    | 'NEW_RELIC'
    | 'NEW_RELIC_DEPLOYMENT_MARKER'
    | 'DYNA_TRACE'
    | 'PROMETHEUS'
    | 'SPLUNKV2'
    | 'ELK'
    | 'LOGZ'
    | 'SUMO'
    | 'DATA_DOG'
    | 'DATA_DOG_LOG'
    | 'CVNG'
    | 'CLOUD_WATCH'
    | 'AWS_LAMBDA_VERIFICATION'
    | 'APM_VERIFICATION'
    | 'LOG_VERIFICATION'
    | 'BUG_SNAG'
    | 'STACK_DRIVER'
    | 'STACK_DRIVER_LOG'
    | 'INSTANA'
    | 'SCALYR'
    | 'ENV_STATE'
    | 'ENV_LOOP_STATE'
    | 'ENV_RESUME_STATE'
    | 'ENV_LOOP_RESUME_STATE'
    | 'COMMAND'
    | 'APPROVAL'
    | 'APPROVAL_RESUME'
    | 'ELASTIC_LOAD_BALANCER'
    | 'JENKINS'
    | 'GCB'
    | 'BAMBOO'
    | 'ARTIFACT_COLLECTION'
    | 'ARTIFACT_CHECK'
    | 'AZURE_NODE_SELECT'
    | 'AZURE_VMSS_SETUP'
    | 'AZURE_VMSS_DEPLOY'
    | 'AZURE_VMSS_ROLLBACK'
    | 'AZURE_VMSS_SWITCH_ROUTES'
    | 'AZURE_VMSS_SWITCH_ROUTES_ROLLBACK'
    | 'AZURE_WEBAPP_SLOT_SETUP'
    | 'AZURE_WEBAPP_SLOT_SWAP'
    | 'AZURE_WEBAPP_SLOT_SHIFT_TRAFFIC'
    | 'AZURE_WEBAPP_SLOT_ROLLBACK'
    | 'AWS_NODE_SELECT'
    | 'DC_NODE_SELECT'
    | 'ROLLING_NODE_SELECT'
    | 'PHASE'
    | 'PHASE_STEP'
    | 'STAGING_ORIGINAL_EXECUTION'
    | 'AWS_CODEDEPLOY_STATE'
    | 'AWS_CODEDEPLOY_ROLLBACK'
    | 'AWS_LAMBDA_STATE'
    | 'AWS_LAMBDA_ROLLBACK'
    | 'AWS_AMI_SERVICE_SETUP'
    | 'ASG_AMI_SERVICE_ALB_SHIFT_SETUP'
    | 'AWS_AMI_SERVICE_DEPLOY'
    | 'ASG_AMI_SERVICE_ALB_SHIFT_DEPLOY'
    | 'AWS_AMI_SWITCH_ROUTES'
    | 'ASG_AMI_ALB_SHIFT_SWITCH_ROUTES'
    | 'AWS_AMI_ROLLBACK_SWITCH_ROUTES'
    | 'ASG_AMI_ROLLBACK_ALB_SHIFT_SWITCH_ROUTES'
    | 'AWS_AMI_SERVICE_ROLLBACK'
    | 'ECS_SERVICE_SETUP'
    | 'SPOTINST_SETUP'
    | 'SPOTINST_ALB_SHIFT_SETUP'
    | 'SPOTINST_DEPLOY'
    | 'SPOTINST_ALB_SHIFT_DEPLOY'
    | 'SPOTINST_LISTENER_UPDATE'
    | 'SPOTINST_LISTENER_ALB_SHIFT'
    | 'SPOTINST_ROLLBACK'
    | 'SPOTINST_LISTENER_UPDATE_ROLLBACK'
    | 'SPOTINST_LISTENER_ALB_SHIFT_ROLLBACK'
    | 'ECS_SERVICE_SETUP_ROLLBACK'
    | 'ECS_DAEMON_SERVICE_SETUP'
    | 'ECS_BG_SERVICE_SETUP'
    | 'ECS_BG_SERVICE_SETUP_ROUTE53'
    | 'ECS_SERVICE_DEPLOY'
    | 'ECS_SERVICE_ROLLBACK'
    | 'ECS_LISTENER_UPDATE'
    | 'ECS_LISTENER_UPDATE_ROLLBACK'
    | 'ECS_ROUTE53_DNS_WEIGHT_UPDATE'
    | 'ECS_ROUTE53_DNS_WEIGHT_UPDATE_ROLLBACK'
    | 'KUBERNETES_SETUP'
    | 'KUBERNETES_SETUP_ROLLBACK'
    | 'KUBERNETES_DEPLOY'
    | 'KUBERNETES_DEPLOY_ROLLBACK'
    | 'KUBERNETES_STEADY_STATE_CHECK'
    | 'ECS_STEADY_STATE_CHECK'
    | 'ECS_RUN_TASK'
    | 'GCP_CLUSTER_SETUP'
    | 'HELM_DEPLOY'
    | 'HELM_ROLLBACK'
    | 'PCF_SETUP'
    | 'PCF_RESIZE'
    | 'PCF_ROLLBACK'
    | 'PCF_MAP_ROUTE'
    | 'PCF_UNMAP_ROUTE'
    | 'PCF_BG_MAP_ROUTE'
    | 'PCF_PLUGIN'
    | 'TERRAFORM_PROVISION'
    | 'TERRAFORM_APPLY'
    | 'TERRAGRUNT_PROVISION'
    | 'TERRAGRUNT_DESTROY'
    | 'TERRAGRUNT_ROLLBACK'
    | 'ARM_CREATE_RESOURCE'
    | 'ARM_ROLLBACK'
    | 'SHELL_SCRIPT_PROVISION'
    | 'TERRAFORM_DESTROY'
    | 'CLOUD_FORMATION_CREATE_STACK'
    | 'CLOUD_FORMATION_DELETE_STACK'
    | 'KUBERNETES_SWAP_SERVICE_SELECTORS'
    | 'CLOUD_FORMATION_ROLLBACK_STACK'
    | 'TERRAFORM_ROLLBACK'
    | 'K8S_DEPLOYMENT_ROLLING'
    | 'K8S_SCALE'
    | 'K8S_DEPLOYMENT_ROLLING_ROLLBACK'
    | 'K8S_BLUE_GREEN_DEPLOY'
    | 'K8S_CANARY_DEPLOY'
    | 'K8S_DELETE'
    | 'RANCHER_RESOLVE'
    | 'RANCHER_K8S_DEPLOYMENT_ROLLING'
    | 'RANCHER_K8S_CANARY_DEPLOY'
    | 'RANCHER_K8S_BLUE_GREEN_DEPLOY'
    | 'RANCHER_KUBERNETES_SWAP_SERVICE_SELECTORS'
    | 'RANCHER_K8S_DELETE'
    | 'RANCHER_K8S_DEPLOYMENT_ROLLING_ROLLBACK'
    | 'JIRA_CREATE_UPDATE'
    | 'SERVICENOW_CREATE_UPDATE'
    | 'K8S_TRAFFIC_SPLIT'
    | 'K8S_APPLY'
    | 'CUSTOM_DEPLOYMENT_FETCH_INSTANCES'
  /*
   * @format int32
   */
  clusterLabel?: number
  clusterType?: 'CONTROL' | 'TEST' | 'UNKNOWN' | 'IGNORE'
  logMLFeedbackType?:
    | 'IGNORE_SERVICE'
    | 'IGNORE_WORKFLOW'
    | 'IGNORE_WORKFLOW_EXECUTION'
    | 'IGNORE_ALWAYS'
    | 'DISMISS'
    | 'PRIORITIZE'
    | 'THUMBS_UP'
    | 'THUMBS_DOWN'
    | 'UNDO_IGNORE'
  logMessage?: string
  logMD5Hash?: string
  cvConfigId?: string
  comment?: string
  supervisedLabel?: string
  priority?: 'BASELINE' | 'P5' | 'P4' | 'P3' | 'P2' | 'P1' | 'P0'
  jiraLink?: string
  /*
   * @format int64
   */
  analysisMinute?: number
  actionTaken?: 'ADD_TO_BASELINE' | 'REMOVE_FROM_BASELINE' | 'UPDATE_PRIORITY'
  metadata?: Record<string, any>
}

export type RestResponseListLogMLFeedbackRecord = {
  metaData?: {
    [key: string]: Record<string, any>
  }
  resource?: LogMLFeedbackRecord[]
  responseMessages?: ResponseMessage[]
}

export type RestResponseMapStringMapStringInstanceDetails = {
  metaData?: {
    [key: string]: Record<string, any>
  }
  resource?: {
    [key: string]: {
      [key: string]: InstanceDetails
    }
  }
  responseMessages?: ResponseMessage[]
}

export type LogMLFeedback = {
  appId?: string
  stateExecutionId?: string
  clusterType?: 'CONTROL' | 'TEST' | 'UNKNOWN' | 'IGNORE'
  /*
   * @format int32
   */
  clusterLabel?: number
  logMLFeedbackType?:
    | 'IGNORE_SERVICE'
    | 'IGNORE_WORKFLOW'
    | 'IGNORE_WORKFLOW_EXECUTION'
    | 'IGNORE_ALWAYS'
    | 'DISMISS'
    | 'PRIORITIZE'
    | 'THUMBS_UP'
    | 'THUMBS_DOWN'
    | 'UNDO_IGNORE'
  comment?: string
  logMLFeedbackId?: string
  /*
   * @format int64
   */
  analysisMinute?: number
  serviceId?: string
  envId?: string
}

export type RestResponseMapFeedbackActionListFeedbackAction = {
  metaData?: {
    [key: string]: Record<string, any>
  }
  resource?: {
    [key: string]: ('ADD_TO_BASELINE' | 'REMOVE_FROM_BASELINE' | 'UPDATE_PRIORITY')[]
  }
  responseMessages?: ResponseMessage[]
}

export type CVCollaborationProviderParameters = {
  collaborationProviderConfigId?: string
  jiraTaskParameters?: JiraTaskParameters
  cvFeedbackRecord?: CVFeedbackRecord
}

export type JiraConfig = {
  type?: string
  baseUrl?: string
  username?: string
  password?: string[]
  encryptedPassword?: string
  accountId?: string
  delegateSelectors?: string[]
  settingType?:
    | 'HOST_CONNECTION_ATTRIBUTES'
    | 'BASTION_HOST_CONNECTION_ATTRIBUTES'
    | 'SMTP'
    | 'SFTP'
    | 'JENKINS'
    | 'BAMBOO'
    | 'STRING'
    | 'SPLUNK'
    | 'ELK'
    | 'LOGZ'
    | 'SUMO'
    | 'DATA_DOG'
    | 'APM_VERIFICATION'
    | 'BUG_SNAG'
    | 'LOG_VERIFICATION'
    | 'APP_DYNAMICS'
    | 'NEW_RELIC'
    | 'DYNA_TRACE'
    | 'INSTANA'
    | 'DATA_DOG_LOG'
    | 'CLOUD_WATCH'
    | 'SCALYR'
    | 'ELB'
    | 'SLACK'
    | 'AWS'
    | 'GCS'
    | 'GCP'
    | 'AZURE'
    | 'PCF'
    | 'RANCHER'
    | 'DIRECT'
    | 'KUBERNETES_CLUSTER'
    | 'DOCKER'
    | 'ECR'
    | 'GCR'
    | 'ACR'
    | 'PHYSICAL_DATA_CENTER'
    | 'KUBERNETES'
    | 'NEXUS'
    | 'ARTIFACTORY'
    | 'SMB'
    | 'AMAZON_S3'
    | 'GIT'
    | 'SSH_SESSION_CONFIG'
    | 'SERVICE_VARIABLE'
    | 'CONFIG_FILE'
    | 'KMS'
    | 'GCP_KMS'
    | 'JIRA'
    | 'SERVICENOW'
    | 'SECRET_TEXT'
    | 'YAML_GIT_SYNC'
    | 'VAULT'
    | 'VAULT_SSH'
    | 'AWS_SECRETS_MANAGER'
    | 'CYBERARK'
    | 'WINRM_CONNECTION_ATTRIBUTES'
    | 'WINRM_SESSION_CONFIG'
    | 'PROMETHEUS'
    | 'INFRASTRUCTURE_MAPPING'
    | 'HTTP_HELM_REPO'
    | 'AMAZON_S3_HELM_REPO'
    | 'GCS_HELM_REPO'
    | 'SPOT_INST'
    | 'AZURE_ARTIFACTS_PAT'
    | 'CUSTOM'
    | 'CE_AWS'
    | 'CE_GCP'
    | 'CE_AZURE'
    | 'AZURE_VAULT'
    | 'KUBERNETES_CLUSTER_NG'
    | 'GIT_NG'
    | 'SSO_SAML'
    | 'GCP_SECRETS_MANAGER'
    | 'TRIGGER'
  certValidationRequired?: boolean
}

export type JiraCustomFieldValue = {
  fieldType?: string
  fieldValue?: string
}

export type JiraTaskParameters = {
  jiraConfig?: JiraConfig
  jiraAction?:
    | 'CREATE_TICKET'
    | 'UPDATE_TICKET'
    | 'AUTH'
    | 'GET_PROJECTS'
    | 'GET_FIELDS_OPTIONS'
    | 'GET_STATUSES'
    | 'GET_CREATE_METADATA'
    | 'FETCH_ISSUE'
    | 'FETCH_ISSUE_DATA'
    | 'CHECK_APPROVAL'
  project?: string
  summary?: string
  description?: string
  issueType?: string
  priority?: string
  labels?: string[]
  customFields?: {
    [key: string]: JiraCustomFieldValue
  }
  issueId?: string
  updateIssueIds?: string[]
  status?: string
  comment?: string
  createmetaExpandParam?: string
  encryptionDetails?: EncryptedDataDetail[]
  accountId?: string
  appId?: string
  activityId?: string
  approvalId?: string
  approvalField?: string
  approvalValue?: string
  rejectionField?: string
  rejectionValue?: string
}

export type CustomLogSetupTestNodeData = {
  logCollectionInfo?: LogCollectionInfo
  host?: string
  appId: string
  settingId: string
  instanceName?: string
  isServiceLevel?: boolean
  instanceElement?: Instance
  hostExpression?: string
  workflowId?: string
  guid?: string
  stateType?:
    | 'SUB_WORKFLOW'
    | 'REPEAT'
    | 'FORK'
    | 'WAIT'
    | 'PAUSE'
    | 'BARRIER'
    | 'RESOURCE_CONSTRAINT'
    | 'SHELL_SCRIPT'
    | 'HTTP'
    | 'TEMPLATIZED_SECRET_MANAGER'
    | 'EMAIL'
    | 'APP_DYNAMICS'
    | 'NEW_RELIC'
    | 'NEW_RELIC_DEPLOYMENT_MARKER'
    | 'DYNA_TRACE'
    | 'PROMETHEUS'
    | 'SPLUNKV2'
    | 'ELK'
    | 'LOGZ'
    | 'SUMO'
    | 'DATA_DOG'
    | 'DATA_DOG_LOG'
    | 'CVNG'
    | 'CLOUD_WATCH'
    | 'AWS_LAMBDA_VERIFICATION'
    | 'APM_VERIFICATION'
    | 'LOG_VERIFICATION'
    | 'BUG_SNAG'
    | 'STACK_DRIVER'
    | 'STACK_DRIVER_LOG'
    | 'INSTANA'
    | 'SCALYR'
    | 'ENV_STATE'
    | 'ENV_LOOP_STATE'
    | 'ENV_RESUME_STATE'
    | 'ENV_LOOP_RESUME_STATE'
    | 'COMMAND'
    | 'APPROVAL'
    | 'APPROVAL_RESUME'
    | 'ELASTIC_LOAD_BALANCER'
    | 'JENKINS'
    | 'GCB'
    | 'BAMBOO'
    | 'ARTIFACT_COLLECTION'
    | 'ARTIFACT_CHECK'
    | 'AZURE_NODE_SELECT'
    | 'AZURE_VMSS_SETUP'
    | 'AZURE_VMSS_DEPLOY'
    | 'AZURE_VMSS_ROLLBACK'
    | 'AZURE_VMSS_SWITCH_ROUTES'
    | 'AZURE_VMSS_SWITCH_ROUTES_ROLLBACK'
    | 'AZURE_WEBAPP_SLOT_SETUP'
    | 'AZURE_WEBAPP_SLOT_SWAP'
    | 'AZURE_WEBAPP_SLOT_SHIFT_TRAFFIC'
    | 'AZURE_WEBAPP_SLOT_ROLLBACK'
    | 'AWS_NODE_SELECT'
    | 'DC_NODE_SELECT'
    | 'ROLLING_NODE_SELECT'
    | 'PHASE'
    | 'PHASE_STEP'
    | 'STAGING_ORIGINAL_EXECUTION'
    | 'AWS_CODEDEPLOY_STATE'
    | 'AWS_CODEDEPLOY_ROLLBACK'
    | 'AWS_LAMBDA_STATE'
    | 'AWS_LAMBDA_ROLLBACK'
    | 'AWS_AMI_SERVICE_SETUP'
    | 'ASG_AMI_SERVICE_ALB_SHIFT_SETUP'
    | 'AWS_AMI_SERVICE_DEPLOY'
    | 'ASG_AMI_SERVICE_ALB_SHIFT_DEPLOY'
    | 'AWS_AMI_SWITCH_ROUTES'
    | 'ASG_AMI_ALB_SHIFT_SWITCH_ROUTES'
    | 'AWS_AMI_ROLLBACK_SWITCH_ROUTES'
    | 'ASG_AMI_ROLLBACK_ALB_SHIFT_SWITCH_ROUTES'
    | 'AWS_AMI_SERVICE_ROLLBACK'
    | 'ECS_SERVICE_SETUP'
    | 'SPOTINST_SETUP'
    | 'SPOTINST_ALB_SHIFT_SETUP'
    | 'SPOTINST_DEPLOY'
    | 'SPOTINST_ALB_SHIFT_DEPLOY'
    | 'SPOTINST_LISTENER_UPDATE'
    | 'SPOTINST_LISTENER_ALB_SHIFT'
    | 'SPOTINST_ROLLBACK'
    | 'SPOTINST_LISTENER_UPDATE_ROLLBACK'
    | 'SPOTINST_LISTENER_ALB_SHIFT_ROLLBACK'
    | 'ECS_SERVICE_SETUP_ROLLBACK'
    | 'ECS_DAEMON_SERVICE_SETUP'
    | 'ECS_BG_SERVICE_SETUP'
    | 'ECS_BG_SERVICE_SETUP_ROUTE53'
    | 'ECS_SERVICE_DEPLOY'
    | 'ECS_SERVICE_ROLLBACK'
    | 'ECS_LISTENER_UPDATE'
    | 'ECS_LISTENER_UPDATE_ROLLBACK'
    | 'ECS_ROUTE53_DNS_WEIGHT_UPDATE'
    | 'ECS_ROUTE53_DNS_WEIGHT_UPDATE_ROLLBACK'
    | 'KUBERNETES_SETUP'
    | 'KUBERNETES_SETUP_ROLLBACK'
    | 'KUBERNETES_DEPLOY'
    | 'KUBERNETES_DEPLOY_ROLLBACK'
    | 'KUBERNETES_STEADY_STATE_CHECK'
    | 'ECS_STEADY_STATE_CHECK'
    | 'ECS_RUN_TASK'
    | 'GCP_CLUSTER_SETUP'
    | 'HELM_DEPLOY'
    | 'HELM_ROLLBACK'
    | 'PCF_SETUP'
    | 'PCF_RESIZE'
    | 'PCF_ROLLBACK'
    | 'PCF_MAP_ROUTE'
    | 'PCF_UNMAP_ROUTE'
    | 'PCF_BG_MAP_ROUTE'
    | 'PCF_PLUGIN'
    | 'TERRAFORM_PROVISION'
    | 'TERRAFORM_APPLY'
    | 'TERRAGRUNT_PROVISION'
    | 'TERRAGRUNT_DESTROY'
    | 'TERRAGRUNT_ROLLBACK'
    | 'ARM_CREATE_RESOURCE'
    | 'ARM_ROLLBACK'
    | 'SHELL_SCRIPT_PROVISION'
    | 'TERRAFORM_DESTROY'
    | 'CLOUD_FORMATION_CREATE_STACK'
    | 'CLOUD_FORMATION_DELETE_STACK'
    | 'KUBERNETES_SWAP_SERVICE_SELECTORS'
    | 'CLOUD_FORMATION_ROLLBACK_STACK'
    | 'TERRAFORM_ROLLBACK'
    | 'K8S_DEPLOYMENT_ROLLING'
    | 'K8S_SCALE'
    | 'K8S_DEPLOYMENT_ROLLING_ROLLBACK'
    | 'K8S_BLUE_GREEN_DEPLOY'
    | 'K8S_CANARY_DEPLOY'
    | 'K8S_DELETE'
    | 'RANCHER_RESOLVE'
    | 'RANCHER_K8S_DEPLOYMENT_ROLLING'
    | 'RANCHER_K8S_CANARY_DEPLOY'
    | 'RANCHER_K8S_BLUE_GREEN_DEPLOY'
    | 'RANCHER_KUBERNETES_SWAP_SERVICE_SELECTORS'
    | 'RANCHER_K8S_DELETE'
    | 'RANCHER_K8S_DEPLOYMENT_ROLLING_ROLLBACK'
    | 'JIRA_CREATE_UPDATE'
    | 'SERVICENOW_CREATE_UPDATE'
    | 'K8S_TRAFFIC_SPLIT'
    | 'K8S_APPLY'
    | 'CUSTOM_DEPLOYMENT_FETCH_INSTANCES'
  /*
   * @format int64
   */
  toTime?: number
  /*
   * @format int64
   */
  fromTime?: number
  serviceLevel?: boolean
}

export type LogCollectionInfo = {
  collectionUrl?: string
  collectionBody?: string
  responseType?: 'JSON'
  responseMapping?: ResponseMapping
  method?: 'POST' | 'GET'
}

export type LoginSettings = {
  uuid: string
  accountId: string
  lastUpdatedBy?: EmbeddedUser
  /*
   * @format int64
   */
  lastUpdatedAt?: number
  userLockoutPolicy: UserLockoutPolicy
  passwordExpirationPolicy: PasswordExpirationPolicy
  passwordStrengthPolicy: PasswordStrengthPolicy
}

export type PasswordExpirationPolicy = {
  enabled?: boolean
  /*
   * @format int32
   */
  daysBeforePasswordExpires?: number
  /*
   * @format int32
   */
  daysBeforeUserNotifiedOfPasswordExpiration?: number
}

export type PasswordStrengthPolicy = {
  enabled?: boolean
  /*
   * @format int32
   */
  minNumberOfCharacters?: number
  /*
   * @format int32
   */
  minNumberOfUppercaseCharacters?: number
  /*
   * @format int32
   */
  minNumberOfLowercaseCharacters?: number
  /*
   * @format int32
   */
  minNumberOfSpecialCharacters?: number
  /*
   * @format int32
   */
  minNumberOfDigits?: number
}

export type RestResponseLoginSettings = {
  metaData?: {
    [key: string]: Record<string, any>
  }
  resource?: LoginSettings
  responseMessages?: ResponseMessage[]
}

export type UserLockoutPolicy = {
  enableLockoutPolicy?: boolean
  /*
   * @format int32
   */
  numberOfFailedAttemptsBeforeLockout?: number
  /*
   * @format int32
   */
  lockOutPeriod?: number
  notifyUser?: boolean
  userGroupsToNotify?: UserGroup[]
}

export type RestResponseNewRelicApplication = {
  metaData?: {
    [key: string]: Record<string, any>
  }
  resource?: NewRelicApplication
  responseMessages?: ResponseMessage[]
}

export type NewRelicSetupTestNodeData = {
  appId: string
  settingId: string
  instanceName?: string
  isServiceLevel?: boolean
  instanceElement?: Instance
  hostExpression?: string
  workflowId?: string
  guid?: string
  stateType?:
    | 'SUB_WORKFLOW'
    | 'REPEAT'
    | 'FORK'
    | 'WAIT'
    | 'PAUSE'
    | 'BARRIER'
    | 'RESOURCE_CONSTRAINT'
    | 'SHELL_SCRIPT'
    | 'HTTP'
    | 'TEMPLATIZED_SECRET_MANAGER'
    | 'EMAIL'
    | 'APP_DYNAMICS'
    | 'NEW_RELIC'
    | 'NEW_RELIC_DEPLOYMENT_MARKER'
    | 'DYNA_TRACE'
    | 'PROMETHEUS'
    | 'SPLUNKV2'
    | 'ELK'
    | 'LOGZ'
    | 'SUMO'
    | 'DATA_DOG'
    | 'DATA_DOG_LOG'
    | 'CVNG'
    | 'CLOUD_WATCH'
    | 'AWS_LAMBDA_VERIFICATION'
    | 'APM_VERIFICATION'
    | 'LOG_VERIFICATION'
    | 'BUG_SNAG'
    | 'STACK_DRIVER'
    | 'STACK_DRIVER_LOG'
    | 'INSTANA'
    | 'SCALYR'
    | 'ENV_STATE'
    | 'ENV_LOOP_STATE'
    | 'ENV_RESUME_STATE'
    | 'ENV_LOOP_RESUME_STATE'
    | 'COMMAND'
    | 'APPROVAL'
    | 'APPROVAL_RESUME'
    | 'ELASTIC_LOAD_BALANCER'
    | 'JENKINS'
    | 'GCB'
    | 'BAMBOO'
    | 'ARTIFACT_COLLECTION'
    | 'ARTIFACT_CHECK'
    | 'AZURE_NODE_SELECT'
    | 'AZURE_VMSS_SETUP'
    | 'AZURE_VMSS_DEPLOY'
    | 'AZURE_VMSS_ROLLBACK'
    | 'AZURE_VMSS_SWITCH_ROUTES'
    | 'AZURE_VMSS_SWITCH_ROUTES_ROLLBACK'
    | 'AZURE_WEBAPP_SLOT_SETUP'
    | 'AZURE_WEBAPP_SLOT_SWAP'
    | 'AZURE_WEBAPP_SLOT_SHIFT_TRAFFIC'
    | 'AZURE_WEBAPP_SLOT_ROLLBACK'
    | 'AWS_NODE_SELECT'
    | 'DC_NODE_SELECT'
    | 'ROLLING_NODE_SELECT'
    | 'PHASE'
    | 'PHASE_STEP'
    | 'STAGING_ORIGINAL_EXECUTION'
    | 'AWS_CODEDEPLOY_STATE'
    | 'AWS_CODEDEPLOY_ROLLBACK'
    | 'AWS_LAMBDA_STATE'
    | 'AWS_LAMBDA_ROLLBACK'
    | 'AWS_AMI_SERVICE_SETUP'
    | 'ASG_AMI_SERVICE_ALB_SHIFT_SETUP'
    | 'AWS_AMI_SERVICE_DEPLOY'
    | 'ASG_AMI_SERVICE_ALB_SHIFT_DEPLOY'
    | 'AWS_AMI_SWITCH_ROUTES'
    | 'ASG_AMI_ALB_SHIFT_SWITCH_ROUTES'
    | 'AWS_AMI_ROLLBACK_SWITCH_ROUTES'
    | 'ASG_AMI_ROLLBACK_ALB_SHIFT_SWITCH_ROUTES'
    | 'AWS_AMI_SERVICE_ROLLBACK'
    | 'ECS_SERVICE_SETUP'
    | 'SPOTINST_SETUP'
    | 'SPOTINST_ALB_SHIFT_SETUP'
    | 'SPOTINST_DEPLOY'
    | 'SPOTINST_ALB_SHIFT_DEPLOY'
    | 'SPOTINST_LISTENER_UPDATE'
    | 'SPOTINST_LISTENER_ALB_SHIFT'
    | 'SPOTINST_ROLLBACK'
    | 'SPOTINST_LISTENER_UPDATE_ROLLBACK'
    | 'SPOTINST_LISTENER_ALB_SHIFT_ROLLBACK'
    | 'ECS_SERVICE_SETUP_ROLLBACK'
    | 'ECS_DAEMON_SERVICE_SETUP'
    | 'ECS_BG_SERVICE_SETUP'
    | 'ECS_BG_SERVICE_SETUP_ROUTE53'
    | 'ECS_SERVICE_DEPLOY'
    | 'ECS_SERVICE_ROLLBACK'
    | 'ECS_LISTENER_UPDATE'
    | 'ECS_LISTENER_UPDATE_ROLLBACK'
    | 'ECS_ROUTE53_DNS_WEIGHT_UPDATE'
    | 'ECS_ROUTE53_DNS_WEIGHT_UPDATE_ROLLBACK'
    | 'KUBERNETES_SETUP'
    | 'KUBERNETES_SETUP_ROLLBACK'
    | 'KUBERNETES_DEPLOY'
    | 'KUBERNETES_DEPLOY_ROLLBACK'
    | 'KUBERNETES_STEADY_STATE_CHECK'
    | 'ECS_STEADY_STATE_CHECK'
    | 'ECS_RUN_TASK'
    | 'GCP_CLUSTER_SETUP'
    | 'HELM_DEPLOY'
    | 'HELM_ROLLBACK'
    | 'PCF_SETUP'
    | 'PCF_RESIZE'
    | 'PCF_ROLLBACK'
    | 'PCF_MAP_ROUTE'
    | 'PCF_UNMAP_ROUTE'
    | 'PCF_BG_MAP_ROUTE'
    | 'PCF_PLUGIN'
    | 'TERRAFORM_PROVISION'
    | 'TERRAFORM_APPLY'
    | 'TERRAGRUNT_PROVISION'
    | 'TERRAGRUNT_DESTROY'
    | 'TERRAGRUNT_ROLLBACK'
    | 'ARM_CREATE_RESOURCE'
    | 'ARM_ROLLBACK'
    | 'SHELL_SCRIPT_PROVISION'
    | 'TERRAFORM_DESTROY'
    | 'CLOUD_FORMATION_CREATE_STACK'
    | 'CLOUD_FORMATION_DELETE_STACK'
    | 'KUBERNETES_SWAP_SERVICE_SELECTORS'
    | 'CLOUD_FORMATION_ROLLBACK_STACK'
    | 'TERRAFORM_ROLLBACK'
    | 'K8S_DEPLOYMENT_ROLLING'
    | 'K8S_SCALE'
    | 'K8S_DEPLOYMENT_ROLLING_ROLLBACK'
    | 'K8S_BLUE_GREEN_DEPLOY'
    | 'K8S_CANARY_DEPLOY'
    | 'K8S_DELETE'
    | 'RANCHER_RESOLVE'
    | 'RANCHER_K8S_DEPLOYMENT_ROLLING'
    | 'RANCHER_K8S_CANARY_DEPLOY'
    | 'RANCHER_K8S_BLUE_GREEN_DEPLOY'
    | 'RANCHER_KUBERNETES_SWAP_SERVICE_SELECTORS'
    | 'RANCHER_K8S_DELETE'
    | 'RANCHER_K8S_DEPLOYMENT_ROLLING_ROLLBACK'
    | 'JIRA_CREATE_UPDATE'
    | 'SERVICENOW_CREATE_UPDATE'
    | 'K8S_TRAFFIC_SPLIT'
    | 'K8S_APPLY'
    | 'CUSTOM_DEPLOYMENT_FETCH_INSTANCES'
  /*
   * @format int64
   */
  toTime?: number
  /*
   * @format int64
   */
  fromTime?: number
  /*
   * @format int64
   */
  newRelicAppId?: number
  serviceLevel?: boolean
}

export type NewRelicApplicationInstance = {
  /*
   * @format int64
   */
  id?: number
  host?: string
  /*
   * @format int32
   */
  port?: number
}

export type RestResponseListNewRelicApplicationInstance = {
  metaData?: {
    [key: string]: Record<string, any>
  }
  resource?: NewRelicApplicationInstance[]
  responseMessages?: ResponseMessage[]
}

export type NewRelicMetric = {
  name?: string
}

export type RestResponseListNewRelicMetric = {
  metaData?: {
    [key: string]: Record<string, any>
  }
  resource?: NewRelicMetric[]
  responseMessages?: ResponseMessage[]
}

export type RestResponseNotification = {
  metaData?: {
    [key: string]: Record<string, any>
  }
  resource?: Notification
  responseMessages?: ResponseMessage[]
}

export type RestResponsePageResponseNotification = {
  metaData?: {
    [key: string]: Record<string, any>
  }
  resource?: Notification[]
  responseMessages?: ResponseMessage[]
}

export type RestResponsePageResponseNotificationGroup = {
  metaData?: {
    [key: string]: Record<string, any>
  }
  resource?: NotificationGroup[]
  responseMessages?: ResponseMessage[]
}

export type RestResponseNotificationGroup = {
  metaData?: {
    [key: string]: Record<string, any>
  }
  resource?: NotificationGroup
  responseMessages?: ResponseMessage[]
}

export type PerpetualTaskScheduleConfig = {
  uuid: string
  accountId?: string
  perpetualTaskType?: string
  /*
   * @format int64
   */
  timeIntervalInMillis?: number
}

export type RestResponsePerpetualTaskScheduleConfig = {
  metaData?: {
    [key: string]: Record<string, any>
  }
  resource?: PerpetualTaskScheduleConfig
  responseMessages?: ResponseMessage[]
}

export type RestResponsePipeline = {
  metaData?: {
    [key: string]: Record<string, any>
  }
  resource?: Pipeline
  responseMessages?: ResponseMessage[]
}

export type RestResponsePageResponsePipeline = {
  metaData?: {
    [key: string]: Record<string, any>
  }
  resource?: Pipeline[]
  responseMessages?: ResponseMessage[]
}

export type RestResponseListEntityType = {
  metaData?: {
    [key: string]: Record<string, any>
  }
  resource?: (
    | 'SERVICE'
    | 'PROVISIONER'
    | 'ENVIRONMENT'
    | 'HOST'
    | 'RELEASE'
    | 'ARTIFACT'
    | 'SSH_USER'
    | 'SSH_PASSWORD'
    | 'SSH_APP_ACCOUNT'
    | 'SSH_KEY_PASSPHRASE'
    | 'SSH_APP_ACCOUNT_PASSOWRD'
    | 'SIMPLE_DEPLOYMENT'
    | 'ORCHESTRATED_DEPLOYMENT'
    | 'PIPELINE'
    | 'WORKFLOW'
    | 'DEPLOYMENT'
    | 'INSTANCE'
    | 'APPLICATION'
    | 'COMMAND'
    | 'CONFIG'
    | 'SERVICE_TEMPLATE'
    | 'INFRASTRUCTURE_MAPPING'
    | 'INFRASTRUCTURE_DEFINITION'
    | 'USER'
    | 'ARTIFACT_STREAM'
    | 'APPDYNAMICS_CONFIGID'
    | 'APPDYNAMICS_APPID'
    | 'APPDYNAMICS_TIERID'
    | 'ELK_CONFIGID'
    | 'ELK_INDICES'
    | 'NEWRELIC_CONFIGID'
    | 'NEWRELIC_APPID'
    | 'SS_SSH_CONNECTION_ATTRIBUTE'
    | 'SS_WINRM_CONNECTION_ATTRIBUTE'
    | 'SUMOLOGIC_CONFIGID'
    | 'SPLUNK_CONFIGID'
    | 'NEWRELIC_MARKER_CONFIGID'
    | 'NEWRELIC_MARKER_APPID'
    | 'API_KEY'
    | 'ACCOUNT'
    | 'APPLICATION_MANIFEST'
    | 'USER_GROUP'
    | 'WHITELISTED_IP'
    | 'CF_AWS_CONFIG_ID'
    | 'VERIFICATION_CONFIGURATION'
    | 'HELM_GIT_CONFIG_ID'
    | 'NOTIFICATION_GROUP'
    | 'HELM_CHART_SPECIFICATION'
    | 'PCF_SERVICE_SPECIFICATION'
    | 'LAMBDA_SPECIFICATION'
    | 'USER_DATA_SPECIFICATION'
    | 'ECS_CONTAINER_SPECIFICATION'
    | 'ECS_SERVICE_SPECIFICATION'
    | 'K8S_CONTAINER_SPECIFICATION'
    | 'CONFIG_FILE'
    | 'SERVICE_COMMAND'
    | 'MANIFEST_FILE'
    | 'SERVICE_VARIABLE'
    | 'TRIGGER'
    | 'ROLE'
    | 'TEMPLATE'
    | 'TEMPLATE_FOLDER'
    | 'SETTING_ATTRIBUTE'
    | 'ENCRYPTED_RECORDS'
    | 'CV_CONFIGURATION'
    | 'TAG'
    | 'CUSTOM_DASHBOARD'
    | 'PIPELINE_GOVERNANCE_STANDARD'
    | 'WORKFLOW_EXECUTION'
    | 'SERVERLESS_INSTANCE'
    | 'USER_INVITE'
    | 'LOGIN_SETTINGS'
    | 'SSO_SETTINGS'
    | 'DELEGATE'
    | 'DELEGATE_SCOPE'
    | 'DELEGATE_PROFILE'
    | 'EXPORT_EXECUTIONS_REQUEST'
    | 'GCP_CONFIG'
    | 'GIT_CONFIG'
    | 'JENKINS_SERVER'
    | 'SECRETS_MANAGER'
    | 'HELM_CHART'
    | 'SECRET'
    | 'CONNECTOR'
    | 'CLOUD_PROVIDER'
    | 'GOVERNANCE_FREEZE_CONFIG'
    | 'GOVERNANCE_CONFIG'
    | 'EVENT_RULE'
  )[]
  responseMessages?: ResponseMessage[]
}

export type JsonNode = {
  array?: boolean
  ['null']?: boolean
  object?: boolean
  valueNode?: boolean
  containerNode?: boolean
  missingNode?: boolean
  nodeType?: 'ARRAY' | 'BINARY' | 'BOOLEAN' | 'MISSING' | 'NULL' | 'NUMBER' | 'OBJECT' | 'POJO' | 'STRING'
  pojo?: boolean
  number?: boolean
  integralNumber?: boolean
  floatingPointNumber?: boolean
  short?: boolean
  int?: boolean
  long?: boolean
  float?: boolean
  double?: boolean
  bigDecimal?: boolean
  bigInteger?: boolean
  textual?: boolean
  boolean?: boolean
  binary?: boolean
}

export type RestResponseListStencil = {
  metaData?: {
    [key: string]: Record<string, any>
  }
  resource?: Stencil[]
  responseMessages?: ResponseMessage[]
}

export type Stencil = {
  name?: string
  type?: string
  stencilCategory?:
    | 'BUILD'
    | 'CLOUD'
    | 'COLLABORATION'
    | 'COLLECTIONS'
    | 'COMMANDS'
    | 'COMMONS'
    | 'CONFIGURATIONS'
    | 'CONTAINERS'
    | 'CONTROLS'
    | 'COPY'
    | 'ENVIRONMENTS'
    | 'FLOW_CONTROLS'
    | 'KUBERNETES'
    | 'OTHERS'
    | 'PROVISIONERS'
    | 'SCRIPTS'
    | 'SUB_WORKFLOW'
    | 'VERIFICATIONS'
    | 'ECS'
    | 'SPOTINST'
    | 'STAGING_ORIGINAL_EXECUTION'
    | 'AZURE_VMSS'
    | 'AZURE_WEBAPP'
    | 'AZURE_ARM'
    | 'TERRAGRUNT_PROVISION'
  jsonSchema?: JsonNode
  uiSchema?: Record<string, any>
  /*
   * @format int32
   */
  displayOrder?: number
}

export type RestResponseListFailureStrategy = {
  metaData?: {
    [key: string]: Record<string, any>
  }
  resource?: FailureStrategy[]
  responseMessages?: ResponseMessage[]
}

export type AccountPlugin = {
  type?: string
  displayName?: string
  pluginCategories?: (
    | 'Artifact'
    | 'Verification'
    | 'Collaboration'
    | 'CloudProvider'
    | 'ConnectionAttributes'
    | 'LoadBalancer'
    | 'SourceRepo'
    | 'HelmRepo'
    | 'AzureArtifacts'
  )[]
  accountId?: string
  version?: Version
  enabled?: boolean
}

export type RestResponseListAccountPlugin = {
  metaData?: {
    [key: string]: Record<string, any>
  }
  resource?: AccountPlugin[]
  responseMessages?: ResponseMessage[]
}

export type Version = {
  preReleaseVersion?: string
  buildMetadata?: string
  /*
   * @format int32
   */
  patchVersion?: number
  normalVersion?: string
  /*
   * @format int32
   */
  majorVersion?: number
  /*
   * @format int32
   */
  minorVersion?: number
}

export type RestResponseMapStringMapStringObject = {
  metaData?: {
    [key: string]: Record<string, any>
  }
  resource?: {
    [key: string]: {
      [key: string]: Record<string, any>
    }
  }
  responseMessages?: ResponseMessage[]
}

export type AccountAuditFilter = {
  resourceTypes?: string[]
  resourceIds?: string[]
}

export type ApplicationAuditFilter = {
  appIds?: string[]
  resourceTypes?: string[]
  resourceIds?: string[]
}

export type AuditPreference = Preference & {
  startTime?: string
  endTime?: string
  /*
   * @format int32
   */
  lastNDays?: number
  createdByUserIds?: string[]
  operationTypes?: string[]
  includeAccountLevelResources?: boolean
  includeAppLevelResources?: boolean
  accountAuditFilter?: AccountAuditFilter
  applicationAuditFilter?: ApplicationAuditFilter
}

export type AuditPreferenceResponse = {
  auditPreferences?: AuditPreference[]
  resourceLookupMap?: {
    [key: string]: ResourceLookup
  }
}

export type ResourceLookup = {
  uuid: string
  accountId?: string
  appId?: string
  resourceId?: string
  resourceType?: string
  resourceName?: string
  tags?: NameValuePair[]
  /*
   * @format int64
   */
  createdAt?: number
  /*
   * @format int64
   */
  lastUpdatedAt?: number
}

export type RestResponseAuditPreferenceResponse = {
  metaData?: {
    [key: string]: Record<string, any>
  }
  resource?: AuditPreferenceResponse
  responseMessages?: ResponseMessage[]
}

export type DeploymentPreference = Preference & {
  appIds?: string[]
  pipelineIds?: string[]
  workflowIds?: string[]
  serviceIds?: string[]
  envIds?: string[]
  status?: string[]
  startTime?: string
  endTime?: string
  includeIndirectExecutions?: boolean
  harnessTagFilter?: HarnessTagFilter
  uiDisplayTagString?: string
  keywords?: string[]
}

export type HarnessTagFilter = {
  matchAll?: boolean
  conditions?: TagFilterCondition[]
}

export type Preference = {
  name?: string
  accountId?: string
  userId?: string
  preferenceType?: string
  uuid: string
  appId: string
  createdBy?: EmbeddedUser
  /*
   * @format int64
   */
  createdAt?: number
  lastUpdatedBy?: EmbeddedUser
  /*
   * @format int64
   */
  lastUpdatedAt: number
}

export type RestResponsePageResponsePreference = {
  metaData?: {
    [key: string]: Record<string, any>
  }
  resource?: Preference[]
  responseMessages?: ResponseMessage[]
}

export type TagFilterCondition = {
  name?: string
  tagType?: 'USER' | 'HARNESS'
  values?: string[]
  operator?:
    | 'EQ'
    | 'NOT_EQ'
    | 'LT'
    | 'LT_EQ'
    | 'GE'
    | 'GT'
    | 'CONTAINS'
    | 'STARTS_WITH'
    | 'HAS'
    | 'IN'
    | 'NOT_IN'
    | 'EXISTS'
    | 'NOT_EXISTS'
    | 'HAS_ALL'
    | 'OR'
    | 'AND'
    | 'ELEMENT_MATCH'
}

export type RestResponsePreference = {
  metaData?: {
    [key: string]: Record<string, any>
  }
  resource?: Preference
  responseMessages?: ResponseMessage[]
}

export type PrometheusSetupTestNodeData = {
  appId: string
  settingId: string
  instanceName?: string
  isServiceLevel?: boolean
  instanceElement?: Instance
  hostExpression?: string
  workflowId?: string
  guid?: string
  stateType?:
    | 'SUB_WORKFLOW'
    | 'REPEAT'
    | 'FORK'
    | 'WAIT'
    | 'PAUSE'
    | 'BARRIER'
    | 'RESOURCE_CONSTRAINT'
    | 'SHELL_SCRIPT'
    | 'HTTP'
    | 'TEMPLATIZED_SECRET_MANAGER'
    | 'EMAIL'
    | 'APP_DYNAMICS'
    | 'NEW_RELIC'
    | 'NEW_RELIC_DEPLOYMENT_MARKER'
    | 'DYNA_TRACE'
    | 'PROMETHEUS'
    | 'SPLUNKV2'
    | 'ELK'
    | 'LOGZ'
    | 'SUMO'
    | 'DATA_DOG'
    | 'DATA_DOG_LOG'
    | 'CVNG'
    | 'CLOUD_WATCH'
    | 'AWS_LAMBDA_VERIFICATION'
    | 'APM_VERIFICATION'
    | 'LOG_VERIFICATION'
    | 'BUG_SNAG'
    | 'STACK_DRIVER'
    | 'STACK_DRIVER_LOG'
    | 'INSTANA'
    | 'SCALYR'
    | 'ENV_STATE'
    | 'ENV_LOOP_STATE'
    | 'ENV_RESUME_STATE'
    | 'ENV_LOOP_RESUME_STATE'
    | 'COMMAND'
    | 'APPROVAL'
    | 'APPROVAL_RESUME'
    | 'ELASTIC_LOAD_BALANCER'
    | 'JENKINS'
    | 'GCB'
    | 'BAMBOO'
    | 'ARTIFACT_COLLECTION'
    | 'ARTIFACT_CHECK'
    | 'AZURE_NODE_SELECT'
    | 'AZURE_VMSS_SETUP'
    | 'AZURE_VMSS_DEPLOY'
    | 'AZURE_VMSS_ROLLBACK'
    | 'AZURE_VMSS_SWITCH_ROUTES'
    | 'AZURE_VMSS_SWITCH_ROUTES_ROLLBACK'
    | 'AZURE_WEBAPP_SLOT_SETUP'
    | 'AZURE_WEBAPP_SLOT_SWAP'
    | 'AZURE_WEBAPP_SLOT_SHIFT_TRAFFIC'
    | 'AZURE_WEBAPP_SLOT_ROLLBACK'
    | 'AWS_NODE_SELECT'
    | 'DC_NODE_SELECT'
    | 'ROLLING_NODE_SELECT'
    | 'PHASE'
    | 'PHASE_STEP'
    | 'STAGING_ORIGINAL_EXECUTION'
    | 'AWS_CODEDEPLOY_STATE'
    | 'AWS_CODEDEPLOY_ROLLBACK'
    | 'AWS_LAMBDA_STATE'
    | 'AWS_LAMBDA_ROLLBACK'
    | 'AWS_AMI_SERVICE_SETUP'
    | 'ASG_AMI_SERVICE_ALB_SHIFT_SETUP'
    | 'AWS_AMI_SERVICE_DEPLOY'
    | 'ASG_AMI_SERVICE_ALB_SHIFT_DEPLOY'
    | 'AWS_AMI_SWITCH_ROUTES'
    | 'ASG_AMI_ALB_SHIFT_SWITCH_ROUTES'
    | 'AWS_AMI_ROLLBACK_SWITCH_ROUTES'
    | 'ASG_AMI_ROLLBACK_ALB_SHIFT_SWITCH_ROUTES'
    | 'AWS_AMI_SERVICE_ROLLBACK'
    | 'ECS_SERVICE_SETUP'
    | 'SPOTINST_SETUP'
    | 'SPOTINST_ALB_SHIFT_SETUP'
    | 'SPOTINST_DEPLOY'
    | 'SPOTINST_ALB_SHIFT_DEPLOY'
    | 'SPOTINST_LISTENER_UPDATE'
    | 'SPOTINST_LISTENER_ALB_SHIFT'
    | 'SPOTINST_ROLLBACK'
    | 'SPOTINST_LISTENER_UPDATE_ROLLBACK'
    | 'SPOTINST_LISTENER_ALB_SHIFT_ROLLBACK'
    | 'ECS_SERVICE_SETUP_ROLLBACK'
    | 'ECS_DAEMON_SERVICE_SETUP'
    | 'ECS_BG_SERVICE_SETUP'
    | 'ECS_BG_SERVICE_SETUP_ROUTE53'
    | 'ECS_SERVICE_DEPLOY'
    | 'ECS_SERVICE_ROLLBACK'
    | 'ECS_LISTENER_UPDATE'
    | 'ECS_LISTENER_UPDATE_ROLLBACK'
    | 'ECS_ROUTE53_DNS_WEIGHT_UPDATE'
    | 'ECS_ROUTE53_DNS_WEIGHT_UPDATE_ROLLBACK'
    | 'KUBERNETES_SETUP'
    | 'KUBERNETES_SETUP_ROLLBACK'
    | 'KUBERNETES_DEPLOY'
    | 'KUBERNETES_DEPLOY_ROLLBACK'
    | 'KUBERNETES_STEADY_STATE_CHECK'
    | 'ECS_STEADY_STATE_CHECK'
    | 'ECS_RUN_TASK'
    | 'GCP_CLUSTER_SETUP'
    | 'HELM_DEPLOY'
    | 'HELM_ROLLBACK'
    | 'PCF_SETUP'
    | 'PCF_RESIZE'
    | 'PCF_ROLLBACK'
    | 'PCF_MAP_ROUTE'
    | 'PCF_UNMAP_ROUTE'
    | 'PCF_BG_MAP_ROUTE'
    | 'PCF_PLUGIN'
    | 'TERRAFORM_PROVISION'
    | 'TERRAFORM_APPLY'
    | 'TERRAGRUNT_PROVISION'
    | 'TERRAGRUNT_DESTROY'
    | 'TERRAGRUNT_ROLLBACK'
    | 'ARM_CREATE_RESOURCE'
    | 'ARM_ROLLBACK'
    | 'SHELL_SCRIPT_PROVISION'
    | 'TERRAFORM_DESTROY'
    | 'CLOUD_FORMATION_CREATE_STACK'
    | 'CLOUD_FORMATION_DELETE_STACK'
    | 'KUBERNETES_SWAP_SERVICE_SELECTORS'
    | 'CLOUD_FORMATION_ROLLBACK_STACK'
    | 'TERRAFORM_ROLLBACK'
    | 'K8S_DEPLOYMENT_ROLLING'
    | 'K8S_SCALE'
    | 'K8S_DEPLOYMENT_ROLLING_ROLLBACK'
    | 'K8S_BLUE_GREEN_DEPLOY'
    | 'K8S_CANARY_DEPLOY'
    | 'K8S_DELETE'
    | 'RANCHER_RESOLVE'
    | 'RANCHER_K8S_DEPLOYMENT_ROLLING'
    | 'RANCHER_K8S_CANARY_DEPLOY'
    | 'RANCHER_K8S_BLUE_GREEN_DEPLOY'
    | 'RANCHER_KUBERNETES_SWAP_SERVICE_SELECTORS'
    | 'RANCHER_K8S_DELETE'
    | 'RANCHER_K8S_DEPLOYMENT_ROLLING_ROLLBACK'
    | 'JIRA_CREATE_UPDATE'
    | 'SERVICENOW_CREATE_UPDATE'
    | 'K8S_TRAFFIC_SPLIT'
    | 'K8S_APPLY'
    | 'CUSTOM_DEPLOYMENT_FETCH_INSTANCES'
  /*
   * @format int64
   */
  toTime?: number
  /*
   * @format int64
   */
  fromTime?: number
  timeSeriesToAnalyze?: TimeSeries[]
  serviceLevel?: boolean
}

export type TimeSeries = {
  txnName: string
  url: string
  metricName: string
  metricType: string
}

export type ResourceConstraint = {
  uuid: string
  createdBy?: EmbeddedUser
  /*
   * @format int64
   */
  createdAt?: number
  lastUpdatedBy?: EmbeddedUser
  /*
   * @format int64
   */
  lastUpdatedAt: number
  accountId?: string
  name?: string
  /*
   * @format int32
   * @minimum 1
   * @maximum 1000
   */
  capacity?: number
  strategy?: 'ASAP' | 'FIFO'
  harnessOwned?: boolean
}

export type RestResponseResourceConstraint = {
  metaData?: {
    [key: string]: Record<string, any>
  }
  resource?: ResourceConstraint
  responseMessages?: ResponseMessage[]
}

export type RestResponsePageResponseResourceConstraint = {
  metaData?: {
    [key: string]: Record<string, any>
  }
  resource?: ResourceConstraint[]
  responseMessages?: ResponseMessage[]
}

export type ActiveScope = {
  releaseEntityType?: string
  releaseEntityId?: string
  releaseEntityName?: string
  unit?: string
  /*
   * @format int32
   */
  permits?: number
  /*
   * @format int64
   */
  acquiredAt?: number
}

export type ResourceConstraintUsage = {
  resourceConstraintId?: string
  activeScopes?: ActiveScope[]
}

export type RestResponseListResourceConstraintUsage = {
  metaData?: {
    [key: string]: Record<string, any>
  }
  resource?: ResourceConstraintUsage[]
  responseMessages?: ResponseMessage[]
}

export type RestResponsePageResponseResourceLookup = {
  metaData?: {
    [key: string]: Record<string, any>
  }
  resource?: ResourceLookup[]
  responseMessages?: ResponseMessage[]
}

export type RestResponseRole = {
  metaData?: {
    [key: string]: Record<string, any>
  }
  resource?: Role
  responseMessages?: ResponseMessage[]
}

export type RestResponsePageResponseRole = {
  metaData?: {
    [key: string]: Record<string, any>
  }
  resource?: Role[]
  responseMessages?: ResponseMessage[]
}

export type RestResponseSSOConfig = {
  metaData?: {
    [key: string]: Record<string, any>
  }
  resource?: SSOConfig
  responseMessages?: ResponseMessage[]
}

export type SSOConfig = {
  accountId?: string
  ssoSettings?: SSOSettings[]
  authenticationMechanism?: 'USER_PASSWORD' | 'SAML' | 'LDAP' | 'OAUTH'
}

export type SSOSettings = {
  uuid: string
  appId: string
  createdBy?: EmbeddedUser
  /*
   * @format int64
   */
  createdAt?: number
  lastUpdatedBy?: EmbeddedUser
  /*
   * @format int64
   */
  lastUpdatedAt: number
  type: 'SAML' | 'LDAP' | 'OAUTH'
  displayName?: string
  url?: string
  /*
   * @format int64
   */
  nextIteration?: number
  nextIterations?: number[]
  accountId?: string
}

export type LdapConnectionSettings = {
  host: string
  /*
   * @format int32
   */
  port?: number
  sslEnabled?: boolean
  referralsEnabled?: boolean
  /*
   * @format int32
   * @minimum 1
   */
  maxReferralHops?: number
  bindDN?: string
  bindPassword?: string
  /*
   * @format int32
   */
  connectTimeout?: number
  /*
   * @format int32
   */
  responseTimeout?: number
  useRecursiveGroupMembershipSearch?: boolean
}

export type LdapGroupSettings = {
  baseDN?: string
  searchFilter?: string
  nameAttr?: string
  descriptionAttr?: string
  userMembershipAttr?: string
  referencedUserAttr?: string
}

export type LdapSettings = {
  displayName?: string
  accountId?: string
  connectionSettings: LdapConnectionSettings
  userSettingsList?: LdapUserSettings[]
  groupSettingsList?: LdapGroupSettings[]
  uuid: string
  appId: string
  createdBy?: EmbeddedUser
  /*
   * @format int64
   */
  createdAt?: number
  lastUpdatedBy?: EmbeddedUser
  /*
   * @format int64
   */
  lastUpdatedAt: number
  type: 'SAML' | 'LDAP' | 'OAUTH'
  url?: string
  /*
   * @format int64
   */
  nextIteration?: number
  nextIterations?: number[]
  userSettings?: LdapUserSettings
  groupSettings?: LdapGroupSettings
  cronExpression?: string
}

export type LdapUserSettings = {
  baseDN?: string
  searchFilter?: string
  uidAttr?: string
  samAccountNameAttr?: string
  emailAttr?: string
  displayNameAttr?: string
  groupMembershipAttr?: string
}

export type RestResponseLdapSettings = {
  metaData?: {
    [key: string]: Record<string, any>
  }
  resource?: LdapSettings
  responseMessages?: ResponseMessage[]
}

export type LdapTestResponse = {
  status?: 'SUCCESS' | 'FAILURE'
  message?: string
}

export type RestResponseLdapTestResponse = {
  metaData?: {
    [key: string]: Record<string, any>
  }
  resource?: LdapTestResponse
  responseMessages?: ResponseMessage[]
}

export type LdapResponse = {
  status?: 'SUCCESS' | 'FAILURE'
  message?: string
}

export type RestResponseLdapResponse = {
  metaData?: {
    [key: string]: Record<string, any>
  }
  resource?: LdapResponse
  responseMessages?: ResponseMessage[]
}

export type LDAPTestAuthenticationRequest = {
  email?: string
  password?: string
}

export type RestResponseListLong = {
  metaData?: {
    [key: string]: Record<string, any>
  }
  resource?: number[]
  responseMessages?: ResponseMessage[]
}

export type CronExpressionRequest = {
  cronExpression?: string
}

export type OauthSettings = {
  displayName?: string
  filter?: string
  /*
   * @uniqueItems true
   */
  allowedProviders?: ('AZURE' | 'BITBUCKET' | 'GITHUB' | 'GITLAB' | 'GOOGLE' | 'LINKEDIN')[]
  uuid: string
  appId: string
  createdBy?: EmbeddedUser
  /*
   * @format int64
   */
  createdAt?: number
  lastUpdatedBy?: EmbeddedUser
  /*
   * @format int64
   */
  lastUpdatedAt: number
  type: 'SAML' | 'LDAP' | 'OAUTH'
  url?: string
  /*
   * @format int64
   */
  nextIteration?: number
  nextIterations?: number[]
  accountId?: string
}

export type RestResponseOauthSettings = {
  metaData?: {
    [key: string]: Record<string, any>
  }
  resource?: OauthSettings
  responseMessages?: ResponseMessage[]
}

export type LdapGroupResponse = {
  dn?: string
  name?: string
  description?: string
  /*
   * @format int32
   */
  totalMembers?: number
  selectable?: boolean
  message?: string
  users?: LdapUserResponse[]
}

export type LdapUserResponse = {
  dn?: string
  email?: string
  name?: string
  userId?: string
}

export type RestResponseCollectionLdapGroupResponse = {
  metaData?: {
    [key: string]: Record<string, any>
  }
  resource?: LdapGroupResponse[]
  responseMessages?: ResponseMessage[]
}

export type LoginTypeResponse = {
  authenticationMechanism?: 'USER_PASSWORD' | 'SAML' | 'LDAP' | 'OAUTH'
  showCaptcha?: boolean
  defaultExperience?: 'NG' | 'CG'
  oauthEnabled?: boolean
  ssorequest?: SSORequest
}

export type RestResponseLoginTypeResponse = {
  metaData?: {
    [key: string]: Record<string, any>
  }
  resource?: LoginTypeResponse
  responseMessages?: ResponseMessage[]
}

export type SSORequest = {
  oauthProviderType?: 'AZURE' | 'BITBUCKET' | 'GITHUB' | 'GITLAB' | 'GOOGLE' | 'LINKEDIN'
  idpRedirectUrl?: string
  oauthProviderTypes?: ('AZURE' | 'BITBUCKET' | 'GITHUB' | 'GITLAB' | 'GOOGLE' | 'LINKEDIN')[]
}

export type Member = {
  value?: string
  /*
   * @format uri
   */
  ref?: string
  display?: string
}

export type ScimGroup = {
  id?: string
  externalId?: string
  meta?: JsonNode
  /*
   * @uniqueItems true
   */
  schemas?: string[]
  displayName?: string
  members?: Member[]
  harnessScopes?: string
}

export type AddOperation = PatchOperation & {
  value?: JsonNode
}

export type OktaAddOperation = PatchOperation & {
  value?: JsonNode
}

export type OktaRemoveOperation = PatchOperation & {
  value?: JsonNode
}

export type OktaReplaceOperation = PatchOperation & {
  value?: JsonNode
}

export type PatchOperation = {
  path?: string
}

export type PatchRequest = {
  Operations: PatchOperation[]
  id?: string
  externalId?: string
  meta?: JsonNode
  /*
   * @uniqueItems true
   */
  schemas: string[]
}

export type RemoveOperation = PatchOperation & {
  value?: JsonNode
}

export type ReplaceOperation = PatchOperation & {
  value?: JsonNode
}

export type ScimUser = {
  /*
   * @uniqueItems true
   */
  schemas?: string[]
  userName?: string
  displayName?: string
  active?: boolean
  emails?: JsonNode
  roles?: JsonNode
  name?: JsonNode
  groups?: JsonNode
  password?: JsonNode
  id?: string
  externalId?: string
  meta?: JsonNode
}

export type RestResponseSearchResults = {
  metaData?: {
    [key: string]: Record<string, any>
  }
  resource?: SearchResults
  responseMessages?: ResponseMessage[]
}

export type SearchResult = {
  id?: string
  name?: string
  description?: string
  accountId?: string
  /*
   * @format int64
   */
  createdAt?: number
  /*
   * @format int64
   */
  lastUpdatedAt?: number
  type?:
    | 'SERVICE'
    | 'PROVISIONER'
    | 'ENVIRONMENT'
    | 'HOST'
    | 'RELEASE'
    | 'ARTIFACT'
    | 'SSH_USER'
    | 'SSH_PASSWORD'
    | 'SSH_APP_ACCOUNT'
    | 'SSH_KEY_PASSPHRASE'
    | 'SSH_APP_ACCOUNT_PASSOWRD'
    | 'SIMPLE_DEPLOYMENT'
    | 'ORCHESTRATED_DEPLOYMENT'
    | 'PIPELINE'
    | 'WORKFLOW'
    | 'DEPLOYMENT'
    | 'INSTANCE'
    | 'APPLICATION'
    | 'COMMAND'
    | 'CONFIG'
    | 'SERVICE_TEMPLATE'
    | 'INFRASTRUCTURE_MAPPING'
    | 'INFRASTRUCTURE_DEFINITION'
    | 'USER'
    | 'ARTIFACT_STREAM'
    | 'APPDYNAMICS_CONFIGID'
    | 'APPDYNAMICS_APPID'
    | 'APPDYNAMICS_TIERID'
    | 'ELK_CONFIGID'
    | 'ELK_INDICES'
    | 'NEWRELIC_CONFIGID'
    | 'NEWRELIC_APPID'
    | 'SS_SSH_CONNECTION_ATTRIBUTE'
    | 'SS_WINRM_CONNECTION_ATTRIBUTE'
    | 'SUMOLOGIC_CONFIGID'
    | 'SPLUNK_CONFIGID'
    | 'NEWRELIC_MARKER_CONFIGID'
    | 'NEWRELIC_MARKER_APPID'
    | 'API_KEY'
    | 'ACCOUNT'
    | 'APPLICATION_MANIFEST'
    | 'USER_GROUP'
    | 'WHITELISTED_IP'
    | 'CF_AWS_CONFIG_ID'
    | 'VERIFICATION_CONFIGURATION'
    | 'HELM_GIT_CONFIG_ID'
    | 'NOTIFICATION_GROUP'
    | 'HELM_CHART_SPECIFICATION'
    | 'PCF_SERVICE_SPECIFICATION'
    | 'LAMBDA_SPECIFICATION'
    | 'USER_DATA_SPECIFICATION'
    | 'ECS_CONTAINER_SPECIFICATION'
    | 'ECS_SERVICE_SPECIFICATION'
    | 'K8S_CONTAINER_SPECIFICATION'
    | 'CONFIG_FILE'
    | 'SERVICE_COMMAND'
    | 'MANIFEST_FILE'
    | 'SERVICE_VARIABLE'
    | 'TRIGGER'
    | 'ROLE'
    | 'TEMPLATE'
    | 'TEMPLATE_FOLDER'
    | 'SETTING_ATTRIBUTE'
    | 'ENCRYPTED_RECORDS'
    | 'CV_CONFIGURATION'
    | 'TAG'
    | 'CUSTOM_DASHBOARD'
    | 'PIPELINE_GOVERNANCE_STANDARD'
    | 'WORKFLOW_EXECUTION'
    | 'SERVERLESS_INSTANCE'
    | 'USER_INVITE'
    | 'LOGIN_SETTINGS'
    | 'SSO_SETTINGS'
    | 'DELEGATE'
    | 'DELEGATE_SCOPE'
    | 'DELEGATE_PROFILE'
    | 'EXPORT_EXECUTIONS_REQUEST'
    | 'GCP_CONFIG'
    | 'GIT_CONFIG'
    | 'JENKINS_SERVER'
    | 'SECRETS_MANAGER'
    | 'HELM_CHART'
    | 'SECRET'
    | 'CONNECTOR'
    | 'CLOUD_PROVIDER'
    | 'GOVERNANCE_FREEZE_CONFIG'
    | 'GOVERNANCE_CONFIG'
    | 'EVENT_RULE'
  createdBy?: EmbeddedUser
  lastUpdatedBy?: EmbeddedUser
  /*
   * @format float
   */
  searchScore?: number
}

export type SearchResults = {
  searchResults?: {
    [key: string]: SearchResult[]
  }
}

export type AdvancedSearchQuery = {
  searchQuery?: string
  /*
   * @format int32
   */
  numResults?: number
  /*
   * @format int32
   */
  offset?: number
  entities?: string[]
}

export type LocalTime = {
  /*
   * @format int32
   */
  hour?: number
  /*
   * @format int32
   */
  minute?: number
  /*
   * @format int32
   */
  second?: number
  /*
   * @format int32
   */
  nano?: number
}

export type RestResponseServerInfo = {
  metaData?: {
    [key: string]: Record<string, any>
  }
  resource?: ServerInfo
  responseMessages?: ResponseMessage[]
}

export type ServerInfo = {
  zoneId?: ZoneId
}

export type ZoneId = {
  id?: string
  rules?: ZoneRules
}

export type ZoneOffset = {
  /*
   * @format int32
   */
  totalSeconds?: number
  id?: string
  rules?: ZoneRules
}

export type ZoneOffsetTransition = {
  offsetBefore?: ZoneOffset
  offsetAfter?: ZoneOffset
  duration?: Duration
  gap?: boolean
  overlap?: boolean
  /*
   * @format date-time
   */
  dateTimeAfter?: string
  /*
   * @format date-time
   */
  dateTimeBefore?: string
  /*
   * @format int64
   */
  instant?: number
}

export type ZoneOffsetTransitionRule = {
  month?:
    | 'JANUARY'
    | 'FEBRUARY'
    | 'MARCH'
    | 'APRIL'
    | 'MAY'
    | 'JUNE'
    | 'JULY'
    | 'AUGUST'
    | 'SEPTEMBER'
    | 'OCTOBER'
    | 'NOVEMBER'
    | 'DECEMBER'
  timeDefinition?: 'UTC' | 'WALL' | 'STANDARD'
  standardOffset?: ZoneOffset
  offsetBefore?: ZoneOffset
  offsetAfter?: ZoneOffset
  dayOfWeek?: 'MONDAY' | 'TUESDAY' | 'WEDNESDAY' | 'THURSDAY' | 'FRIDAY' | 'SATURDAY' | 'SUNDAY'
  /*
   * @format int32
   */
  dayOfMonthIndicator?: number
  localTime?: LocalTime
  midnightEndOfDay?: boolean
}

export type ZoneRules = {
  transitions?: ZoneOffsetTransition[]
  fixedOffset?: boolean
  transitionRules?: ZoneOffsetTransitionRule[]
}

export type AwsLambdaInstanceKey = {
  functionName?: string
  functionVersion?: string
}

export type RestResponseServerlessInstance = {
  metaData?: {
    [key: string]: Record<string, any>
  }
  resource?: ServerlessInstance
  responseMessages?: ResponseMessage[]
}

export type ServerlessInstance = {
  uuid: string
  appId: string
  createdBy?: EmbeddedUser
  /*
   * @format int64
   */
  createdAt?: number
  lastUpdatedBy?: EmbeddedUser
  /*
   * @format int64
   */
  lastUpdatedAt: number
  instanceType?: 'AWS_LAMBDA'
  lambdaInstanceKey?: AwsLambdaInstanceKey
  envId?: string
  envName?: string
  envType?: 'PROD' | 'NON_PROD' | 'ALL'
  accountId?: string
  appName?: string
  serviceId?: string
  serviceName?: string
  computeProviderId?: string
  computeProviderName?: string
  infraMappingId?: string
  infraMappingName?: string
  infraMappingType?: string
  lastPipelineExecutionId?: string
  lastPipelineExecutionName?: string
  /*
   * @format int64
   */
  lastDeployedAt?: number
  lastDeployedById?: string
  lastDeployedByName?: string
  lastWorkflowExecutionId?: string
  lastWorkflowExecutionName?: string
  lastArtifactSourceName?: string
  lastArtifactStreamId?: string
  lastArtifactBuildNum?: string
  lastArtifactId?: string
  lastArtifactName?: string
  instanceInfo?: ServerlessInstanceInfo
  /*
   * @format int64
   */
  deletedAt?: number
  deleted?: boolean
}

export type ServerlessInstanceInfo = {
  invocationCountMap?: {
    [key: string]: InvocationCount
  }
}

export type RestResponseServerlessInstanceTimeline = {
  metaData?: {
    [key: string]: Record<string, any>
  }
  resource?: ServerlessInstanceTimeline
  responseMessages?: ResponseMessage[]
}

export type ServerlessInstanceTimeline = {
  points?: DataPoint[]
}

export type RestResponsePageResponseServiceInstance = {
  metaData?: {
    [key: string]: Record<string, any>
  }
  resource?: ServiceInstance[]
  responseMessages?: ResponseMessage[]
}

export type RestResponseServiceCommand = {
  metaData?: {
    [key: string]: Record<string, any>
  }
  resource?: ServiceCommand
  responseMessages?: ResponseMessage[]
}

export type PcfServiceSpecification = {
  serviceId: string
  manifestYaml: string
  uuid: string
  appId: string
  createdBy?: EmbeddedUser
  /*
   * @format int64
   */
  createdAt?: number
  lastUpdatedBy?: EmbeddedUser
  /*
   * @format int64
   */
  lastUpdatedAt: number
  accountId?: string
}

export type RestResponsePcfServiceSpecification = {
  metaData?: {
    [key: string]: Record<string, any>
  }
  resource?: PcfServiceSpecification
  responseMessages?: ResponseMessage[]
}

export type EcsServiceSpecification = {
  serviceId: string
  serviceSpecJson?: string
  schedulingStrategy?: string
  uuid: string
  appId: string
  createdBy?: EmbeddedUser
  /*
   * @format int64
   */
  createdAt?: number
  lastUpdatedBy?: EmbeddedUser
  /*
   * @format int64
   */
  lastUpdatedAt: number
  accountId?: string
}

export type RestResponseEcsServiceSpecification = {
  metaData?: {
    [key: string]: Record<string, any>
  }
  resource?: EcsServiceSpecification
  responseMessages?: ResponseMessage[]
}

export type RestResponseService = {
  metaData?: {
    [key: string]: Record<string, any>
  }
  resource?: Service
  responseMessages?: ResponseMessage[]
}

export type RestResponsePageResponseService = {
  metaData?: {
    [key: string]: Record<string, any>
  }
  resource?: Service[]
  responseMessages?: ResponseMessage[]
}

export type RestResponseListArtifactStream = {
  metaData?: {
    [key: string]: Record<string, any>
  }
  resource?: ArtifactStream[]
  responseMessages?: ResponseMessage[]
}

export type ContainerDefinition = {
  portMappings?: PortMapping[]
  name?: string
  commands?: string[]
  /*
   * @format double
   */
  cpu?: number
  /*
   * @format int32
   */
  memory?: number
  logConfiguration?: LogConfiguration
  storageConfigurations?: StorageConfiguration[]
}

export type ContainerTask = {
  uuid: string
  appId: string
  createdBy?: EmbeddedUser
  /*
   * @format int64
   */
  createdAt?: number
  lastUpdatedBy?: EmbeddedUser
  /*
   * @format int64
   */
  lastUpdatedAt: number
  accountId?: string
  deploymentType?: string
  serviceId?: string
  advancedConfig?: string
  containerDefinitions?: ContainerDefinition[]
}

export type LogConfiguration = {
  logDriver?: string
  options?: LogOption[]
}

export type LogOption = {
  key?: string
  value?: string
}

export type PortMapping = {
  /*
   * @format int32
   */
  containerPort?: number
  /*
   * @format int32
   */
  hostPort?: number
}

export type RestResponseContainerTask = {
  metaData?: {
    [key: string]: Record<string, any>
  }
  resource?: ContainerTask
  responseMessages?: ResponseMessage[]
}

export type StorageConfiguration = {
  hostSourcePath?: string
  containerPath?: string
  readonly?: boolean
}

export type RestResponsePageResponseContainerTask = {
  metaData?: {
    [key: string]: Record<string, any>
  }
  resource?: ContainerTask[]
  responseMessages?: ResponseMessage[]
}

export type HelmChartSpecification = {
  serviceId?: string
  chartUrl: string
  chartName: string
  chartVersion: string
  uuid: string
  appId: string
  createdBy?: EmbeddedUser
  /*
   * @format int64
   */
  createdAt?: number
  lastUpdatedBy?: EmbeddedUser
  /*
   * @format int64
   */
  lastUpdatedAt: number
  accountId?: string
}

export type RestResponseHelmChartSpecification = {
  metaData?: {
    [key: string]: Record<string, any>
  }
  resource?: HelmChartSpecification
  responseMessages?: ResponseMessage[]
}

export type RestResponsePageResponseHelmChartSpecification = {
  metaData?: {
    [key: string]: Record<string, any>
  }
  resource?: HelmChartSpecification[]
  responseMessages?: ResponseMessage[]
}

export type DefaultSpecification = {
  runtime?: string
  /*
   * @format int32
   */
  memorySize?: number
  /*
   * @format int32
   */
  timeout?: number
}

export type FunctionSpecification = {
  runtime?: string
  /*
   * @format int32
   */
  memorySize?: number
  /*
   * @format int32
   */
  timeout?: number
  functionName?: string
  handler?: string
}

export type LambdaSpecification = {
  serviceId?: string
  defaults?: DefaultSpecification
  functions?: FunctionSpecification[]
  uuid: string
  appId: string
  createdBy?: EmbeddedUser
  /*
   * @format int64
   */
  createdAt?: number
  lastUpdatedBy?: EmbeddedUser
  /*
   * @format int64
   */
  lastUpdatedAt: number
  accountId?: string
}

export type RestResponseLambdaSpecification = {
  metaData?: {
    [key: string]: Record<string, any>
  }
  resource?: LambdaSpecification
  responseMessages?: ResponseMessage[]
}

export type RestResponsePageResponseLambdaSpecification = {
  metaData?: {
    [key: string]: Record<string, any>
  }
  resource?: LambdaSpecification[]
  responseMessages?: ResponseMessage[]
}

export type RestResponseUserDataSpecification = {
  metaData?: {
    [key: string]: Record<string, any>
  }
  resource?: UserDataSpecification
  responseMessages?: ResponseMessage[]
}

export type UserDataSpecification = {
  serviceId?: string
  data: string
  uuid: string
  appId: string
  createdBy?: EmbeddedUser
  /*
   * @format int64
   */
  createdAt?: number
  lastUpdatedBy?: EmbeddedUser
  /*
   * @format int64
   */
  lastUpdatedAt: number
  accountId?: string
}

export type RestResponsePageResponseUserDataSpecification = {
  metaData?: {
    [key: string]: Record<string, any>
  }
  resource?: UserDataSpecification[]
  responseMessages?: ResponseMessage[]
}

export type CommandCategory = {
  type?: 'COMMANDS' | 'COPY' | 'SCRIPTS' | 'VERIFICATIONS'
  displayName?: string
  commandUnits?: CommandUnit[]
}

export type RestResponseListCommandCategory = {
  metaData?: {
    [key: string]: Record<string, any>
  }
  resource?: CommandCategory[]
  responseMessages?: ResponseMessage[]
}

export type RestResponseListApplicationManifest = {
  metaData?: {
    [key: string]: Record<string, any>
  }
  resource?: ApplicationManifest[]
  responseMessages?: ResponseMessage[]
}

export type RestResponseListArtifactStreamBinding = {
  metaData?: {
    [key: string]: Record<string, any>
  }
  resource?: ArtifactStreamBinding[]
  responseMessages?: ResponseMessage[]
}

export type RestResponseArtifactStreamBinding = {
  metaData?: {
    [key: string]: Record<string, any>
  }
  resource?: ArtifactStreamBinding
  responseMessages?: ResponseMessage[]
}

export type RestResponseMapStringListHelmChart = {
  metaData?: {
    [key: string]: Record<string, any>
  }
  resource?: {
    [key: string]: HelmChart[]
  }
  responseMessages?: ResponseMessage[]
}

export type RestResponseSetHelmSubCommand = {
  metaData?: {
    [key: string]: Record<string, any>
  }
  /*
   * @uniqueItems true
   */
  resource?: (
    | 'INSTALL'
    | 'UPGRADE'
    | 'ROLLBACK'
    | 'HISTORY'
    | 'DELETE'
    | 'UNINSTALL'
    | 'LIST'
    | 'VERSION'
    | 'PULL'
    | 'FETCH'
    | 'TEMPLATE'
  )[]
  responseMessages?: ResponseMessage[]
}

export type RestResponseServiceTemplate = {
  metaData?: {
    [key: string]: Record<string, any>
  }
  resource?: ServiceTemplate
  responseMessages?: ResponseMessage[]
}

export type RestResponsePageResponseServiceTemplate = {
  metaData?: {
    [key: string]: Record<string, any>
  }
  resource?: ServiceTemplate[]
  responseMessages?: ResponseMessage[]
}

export type RestResponseServiceVariable = {
  metaData?: {
    [key: string]: Record<string, any>
  }
  resource?: ServiceVariable
  responseMessages?: ResponseMessage[]
}

export type RestResponsePageResponseServiceVariable = {
  metaData?: {
    [key: string]: Record<string, any>
  }
  resource?: ServiceVariable[]
  responseMessages?: ResponseMessage[]
}

export type AppEnvRestriction = {
  appFilter?: GenericEntityFilter
  envFilter?: EnvFilter
}

export type ConnectivityValidationAttributes = Record<string, any>

export type RestResponseSettingAttribute = {
  metaData?: {
    [key: string]: Record<string, any>
  }
  resource?: SettingAttribute
  responseMessages?: ResponseMessage[]
}

export type SettingAttribute = {
  envId?: string
  uuid: string
  appId: string
  createdBy?: EmbeddedUser
  /*
   * @format int64
   */
  createdAt?: number
  /*
   * @format int64
   */
  lastUpdatedAt: number
  accountId?: string
  name?: string
  value?: SettingValue
  validationAttributes?: ConnectivityValidationAttributes
  category?: 'CLOUD_PROVIDER' | 'CONNECTOR' | 'SETTING' | 'HELM_REPO' | 'AZURE_ARTIFACTS' | 'CE_CONNECTOR'
  appIds?: string[]
  usageRestrictions?: UsageRestrictions
  /*
   * @format int64
   */
  artifactStreamCount?: number
  artifactStreams?: ArtifactStreamSummary[]
  sample?: boolean
  /*
   * @format int64
   */
  nextIteration?: number
  /*
   * @format int64
   */
  nextSecretMigrationIteration?: number
  secretsMigrated?: boolean
  connectivityError?: string
  encryptionType?:
    | 'LOCAL'
    | 'KMS'
    | 'GCP_KMS'
    | 'AWS_SECRETS_MANAGER'
    | 'AZURE_VAULT'
    | 'CYBERARK'
    | 'VAULT'
    | 'GCP_SECRETS_MANAGER'
    | 'CUSTOM'
    | 'VAULT_SSH'
  encryptedBy?: string
}

export type SettingValue = {
  type?: string
  settingType?:
    | 'HOST_CONNECTION_ATTRIBUTES'
    | 'BASTION_HOST_CONNECTION_ATTRIBUTES'
    | 'SMTP'
    | 'SFTP'
    | 'JENKINS'
    | 'BAMBOO'
    | 'STRING'
    | 'SPLUNK'
    | 'ELK'
    | 'LOGZ'
    | 'SUMO'
    | 'DATA_DOG'
    | 'APM_VERIFICATION'
    | 'BUG_SNAG'
    | 'LOG_VERIFICATION'
    | 'APP_DYNAMICS'
    | 'NEW_RELIC'
    | 'DYNA_TRACE'
    | 'INSTANA'
    | 'DATA_DOG_LOG'
    | 'CLOUD_WATCH'
    | 'SCALYR'
    | 'ELB'
    | 'SLACK'
    | 'AWS'
    | 'GCS'
    | 'GCP'
    | 'AZURE'
    | 'PCF'
    | 'RANCHER'
    | 'DIRECT'
    | 'KUBERNETES_CLUSTER'
    | 'DOCKER'
    | 'ECR'
    | 'GCR'
    | 'ACR'
    | 'PHYSICAL_DATA_CENTER'
    | 'KUBERNETES'
    | 'NEXUS'
    | 'ARTIFACTORY'
    | 'SMB'
    | 'AMAZON_S3'
    | 'GIT'
    | 'SSH_SESSION_CONFIG'
    | 'SERVICE_VARIABLE'
    | 'CONFIG_FILE'
    | 'KMS'
    | 'GCP_KMS'
    | 'JIRA'
    | 'SERVICENOW'
    | 'SECRET_TEXT'
    | 'YAML_GIT_SYNC'
    | 'VAULT'
    | 'VAULT_SSH'
    | 'AWS_SECRETS_MANAGER'
    | 'CYBERARK'
    | 'WINRM_CONNECTION_ATTRIBUTES'
    | 'WINRM_SESSION_CONFIG'
    | 'PROMETHEUS'
    | 'INFRASTRUCTURE_MAPPING'
    | 'HTTP_HELM_REPO'
    | 'AMAZON_S3_HELM_REPO'
    | 'GCS_HELM_REPO'
    | 'SPOT_INST'
    | 'AZURE_ARTIFACTS_PAT'
    | 'CUSTOM'
    | 'CE_AWS'
    | 'CE_GCP'
    | 'CE_AZURE'
    | 'AZURE_VAULT'
    | 'KUBERNETES_CLUSTER_NG'
    | 'GIT_NG'
    | 'SSO_SAML'
    | 'GCP_SECRETS_MANAGER'
    | 'TRIGGER'
  certValidationRequired?: boolean
}

export type UsageRestrictions = {
  /*
   * @uniqueItems true
   */
  appEnvRestrictions?: AppEnvRestriction[]
}

export type RestResponsePageResponseSettingAttribute = {
  metaData?: {
    [key: string]: Record<string, any>
  }
  resource?: SettingAttribute[]
  responseMessages?: ResponseMessage[]
}

export type RestResponseValidationResult = {
  metaData?: {
    [key: string]: Record<string, any>
  }
  resource?: ValidationResult
  responseMessages?: ResponseMessage[]
}

export type ValidationResult = {
  valid?: boolean
  errorMessage?: string
}

export type UserInvite = {
  uuid: string
  appId: string
  createdBy?: EmbeddedUser
  /*
   * @format int64
   */
  createdAt?: number
  lastUpdatedBy?: EmbeddedUser
  /*
   * @format int64
   */
  lastUpdatedAt: number
  accountId?: string
  email?: string
  externalUserId?: string
  roles?: Role[]
  userGroups?: UserGroup[]
  completed?: boolean
  source?: UserInviteSource
  agreement?: boolean
  name?: string
  givenName?: string
  familyName?: string
  phone?: string
  country?: string
  state?: string
  freemiumProducts?: string[]
  freemiumAssistedOption?: boolean
  password?: string[]
  accountName?: string
  companyName?: string
  marketPlaceToken?: string
  importedByScim?: boolean
  utmInfo?: UtmInfo
  createdFromNG?: boolean
  intent?: string
  signupAction?: string
  edition?: string
  billingFrequency?: string
}

export type UserInviteSource = {
  type?: 'MANUAL' | 'SSO' | 'TRIAL' | 'MARKETPLACE' | 'MARKETO_LINKEDIN' | 'AZURE_MARKETPLACE' | 'ONPREM'
  uuid?: string
}

export type RestResponseSmtpConfigResponse = {
  metaData?: {
    [key: string]: Record<string, any>
  }
  resource?: SmtpConfigResponse
  responseMessages?: ResponseMessage[]
}

export type SmtpConfig = {
  type?: string
  host?: string
  /*
   * @format int32
   */
  port?: number
  fromAddress?: string
  useSSL?: boolean
  username?: string
  password?: string[]
  encryptedPassword?: string
}

export type SmtpConfigResponse = {
  smtpConfig?: SmtpConfig
  encryptionDetails?: EncryptedDataDetail[]
}

export type SplunkSetupTestNodeData = {
  appId: string
  settingId: string
  instanceName?: string
  isServiceLevel?: boolean
  instanceElement?: Instance
  hostExpression?: string
  workflowId?: string
  guid?: string
  stateType?:
    | 'SUB_WORKFLOW'
    | 'REPEAT'
    | 'FORK'
    | 'WAIT'
    | 'PAUSE'
    | 'BARRIER'
    | 'RESOURCE_CONSTRAINT'
    | 'SHELL_SCRIPT'
    | 'HTTP'
    | 'TEMPLATIZED_SECRET_MANAGER'
    | 'EMAIL'
    | 'APP_DYNAMICS'
    | 'NEW_RELIC'
    | 'NEW_RELIC_DEPLOYMENT_MARKER'
    | 'DYNA_TRACE'
    | 'PROMETHEUS'
    | 'SPLUNKV2'
    | 'ELK'
    | 'LOGZ'
    | 'SUMO'
    | 'DATA_DOG'
    | 'DATA_DOG_LOG'
    | 'CVNG'
    | 'CLOUD_WATCH'
    | 'AWS_LAMBDA_VERIFICATION'
    | 'APM_VERIFICATION'
    | 'LOG_VERIFICATION'
    | 'BUG_SNAG'
    | 'STACK_DRIVER'
    | 'STACK_DRIVER_LOG'
    | 'INSTANA'
    | 'SCALYR'
    | 'ENV_STATE'
    | 'ENV_LOOP_STATE'
    | 'ENV_RESUME_STATE'
    | 'ENV_LOOP_RESUME_STATE'
    | 'COMMAND'
    | 'APPROVAL'
    | 'APPROVAL_RESUME'
    | 'ELASTIC_LOAD_BALANCER'
    | 'JENKINS'
    | 'GCB'
    | 'BAMBOO'
    | 'ARTIFACT_COLLECTION'
    | 'ARTIFACT_CHECK'
    | 'AZURE_NODE_SELECT'
    | 'AZURE_VMSS_SETUP'
    | 'AZURE_VMSS_DEPLOY'
    | 'AZURE_VMSS_ROLLBACK'
    | 'AZURE_VMSS_SWITCH_ROUTES'
    | 'AZURE_VMSS_SWITCH_ROUTES_ROLLBACK'
    | 'AZURE_WEBAPP_SLOT_SETUP'
    | 'AZURE_WEBAPP_SLOT_SWAP'
    | 'AZURE_WEBAPP_SLOT_SHIFT_TRAFFIC'
    | 'AZURE_WEBAPP_SLOT_ROLLBACK'
    | 'AWS_NODE_SELECT'
    | 'DC_NODE_SELECT'
    | 'ROLLING_NODE_SELECT'
    | 'PHASE'
    | 'PHASE_STEP'
    | 'STAGING_ORIGINAL_EXECUTION'
    | 'AWS_CODEDEPLOY_STATE'
    | 'AWS_CODEDEPLOY_ROLLBACK'
    | 'AWS_LAMBDA_STATE'
    | 'AWS_LAMBDA_ROLLBACK'
    | 'AWS_AMI_SERVICE_SETUP'
    | 'ASG_AMI_SERVICE_ALB_SHIFT_SETUP'
    | 'AWS_AMI_SERVICE_DEPLOY'
    | 'ASG_AMI_SERVICE_ALB_SHIFT_DEPLOY'
    | 'AWS_AMI_SWITCH_ROUTES'
    | 'ASG_AMI_ALB_SHIFT_SWITCH_ROUTES'
    | 'AWS_AMI_ROLLBACK_SWITCH_ROUTES'
    | 'ASG_AMI_ROLLBACK_ALB_SHIFT_SWITCH_ROUTES'
    | 'AWS_AMI_SERVICE_ROLLBACK'
    | 'ECS_SERVICE_SETUP'
    | 'SPOTINST_SETUP'
    | 'SPOTINST_ALB_SHIFT_SETUP'
    | 'SPOTINST_DEPLOY'
    | 'SPOTINST_ALB_SHIFT_DEPLOY'
    | 'SPOTINST_LISTENER_UPDATE'
    | 'SPOTINST_LISTENER_ALB_SHIFT'
    | 'SPOTINST_ROLLBACK'
    | 'SPOTINST_LISTENER_UPDATE_ROLLBACK'
    | 'SPOTINST_LISTENER_ALB_SHIFT_ROLLBACK'
    | 'ECS_SERVICE_SETUP_ROLLBACK'
    | 'ECS_DAEMON_SERVICE_SETUP'
    | 'ECS_BG_SERVICE_SETUP'
    | 'ECS_BG_SERVICE_SETUP_ROUTE53'
    | 'ECS_SERVICE_DEPLOY'
    | 'ECS_SERVICE_ROLLBACK'
    | 'ECS_LISTENER_UPDATE'
    | 'ECS_LISTENER_UPDATE_ROLLBACK'
    | 'ECS_ROUTE53_DNS_WEIGHT_UPDATE'
    | 'ECS_ROUTE53_DNS_WEIGHT_UPDATE_ROLLBACK'
    | 'KUBERNETES_SETUP'
    | 'KUBERNETES_SETUP_ROLLBACK'
    | 'KUBERNETES_DEPLOY'
    | 'KUBERNETES_DEPLOY_ROLLBACK'
    | 'KUBERNETES_STEADY_STATE_CHECK'
    | 'ECS_STEADY_STATE_CHECK'
    | 'ECS_RUN_TASK'
    | 'GCP_CLUSTER_SETUP'
    | 'HELM_DEPLOY'
    | 'HELM_ROLLBACK'
    | 'PCF_SETUP'
    | 'PCF_RESIZE'
    | 'PCF_ROLLBACK'
    | 'PCF_MAP_ROUTE'
    | 'PCF_UNMAP_ROUTE'
    | 'PCF_BG_MAP_ROUTE'
    | 'PCF_PLUGIN'
    | 'TERRAFORM_PROVISION'
    | 'TERRAFORM_APPLY'
    | 'TERRAGRUNT_PROVISION'
    | 'TERRAGRUNT_DESTROY'
    | 'TERRAGRUNT_ROLLBACK'
    | 'ARM_CREATE_RESOURCE'
    | 'ARM_ROLLBACK'
    | 'SHELL_SCRIPT_PROVISION'
    | 'TERRAFORM_DESTROY'
    | 'CLOUD_FORMATION_CREATE_STACK'
    | 'CLOUD_FORMATION_DELETE_STACK'
    | 'KUBERNETES_SWAP_SERVICE_SELECTORS'
    | 'CLOUD_FORMATION_ROLLBACK_STACK'
    | 'TERRAFORM_ROLLBACK'
    | 'K8S_DEPLOYMENT_ROLLING'
    | 'K8S_SCALE'
    | 'K8S_DEPLOYMENT_ROLLING_ROLLBACK'
    | 'K8S_BLUE_GREEN_DEPLOY'
    | 'K8S_CANARY_DEPLOY'
    | 'K8S_DELETE'
    | 'RANCHER_RESOLVE'
    | 'RANCHER_K8S_DEPLOYMENT_ROLLING'
    | 'RANCHER_K8S_CANARY_DEPLOY'
    | 'RANCHER_K8S_BLUE_GREEN_DEPLOY'
    | 'RANCHER_KUBERNETES_SWAP_SERVICE_SELECTORS'
    | 'RANCHER_K8S_DELETE'
    | 'RANCHER_K8S_DEPLOYMENT_ROLLING_ROLLBACK'
    | 'JIRA_CREATE_UPDATE'
    | 'SERVICENOW_CREATE_UPDATE'
    | 'K8S_TRAFFIC_SPLIT'
    | 'K8S_APPLY'
    | 'CUSTOM_DEPLOYMENT_FETCH_INSTANCES'
  /*
   * @format int64
   */
  toTime?: number
  /*
   * @format int64
   */
  fromTime?: number
  query: string
  hostNameField?: string
  advancedQuery?: boolean
  serviceLevel?: boolean
}

export type Aggregation = {
  perSeriesAligner?: string
  crossSeriesReducer?: string
  groupByFields?: string[]
}

export type StackDriverMetric = {
  metricName?: string
  metric?: string
  displayName?: string
  unit?: string
  kind?: string
  valueType?: string
}

export type StackDriverMetricDefinition = {
  metricType?: string
  metricName?: string
  txnName?: string
  filterJson?: string
  filter?: string
  aggregation?: Aggregation
}

export type StackDriverSetupTestNodeData = {
  appId: string
  settingId: string
  instanceName?: string
  isServiceLevel?: boolean
  instanceElement?: Instance
  hostExpression?: string
  workflowId?: string
  guid?: string
  stateType?:
    | 'SUB_WORKFLOW'
    | 'REPEAT'
    | 'FORK'
    | 'WAIT'
    | 'PAUSE'
    | 'BARRIER'
    | 'RESOURCE_CONSTRAINT'
    | 'SHELL_SCRIPT'
    | 'HTTP'
    | 'TEMPLATIZED_SECRET_MANAGER'
    | 'EMAIL'
    | 'APP_DYNAMICS'
    | 'NEW_RELIC'
    | 'NEW_RELIC_DEPLOYMENT_MARKER'
    | 'DYNA_TRACE'
    | 'PROMETHEUS'
    | 'SPLUNKV2'
    | 'ELK'
    | 'LOGZ'
    | 'SUMO'
    | 'DATA_DOG'
    | 'DATA_DOG_LOG'
    | 'CVNG'
    | 'CLOUD_WATCH'
    | 'AWS_LAMBDA_VERIFICATION'
    | 'APM_VERIFICATION'
    | 'LOG_VERIFICATION'
    | 'BUG_SNAG'
    | 'STACK_DRIVER'
    | 'STACK_DRIVER_LOG'
    | 'INSTANA'
    | 'SCALYR'
    | 'ENV_STATE'
    | 'ENV_LOOP_STATE'
    | 'ENV_RESUME_STATE'
    | 'ENV_LOOP_RESUME_STATE'
    | 'COMMAND'
    | 'APPROVAL'
    | 'APPROVAL_RESUME'
    | 'ELASTIC_LOAD_BALANCER'
    | 'JENKINS'
    | 'GCB'
    | 'BAMBOO'
    | 'ARTIFACT_COLLECTION'
    | 'ARTIFACT_CHECK'
    | 'AZURE_NODE_SELECT'
    | 'AZURE_VMSS_SETUP'
    | 'AZURE_VMSS_DEPLOY'
    | 'AZURE_VMSS_ROLLBACK'
    | 'AZURE_VMSS_SWITCH_ROUTES'
    | 'AZURE_VMSS_SWITCH_ROUTES_ROLLBACK'
    | 'AZURE_WEBAPP_SLOT_SETUP'
    | 'AZURE_WEBAPP_SLOT_SWAP'
    | 'AZURE_WEBAPP_SLOT_SHIFT_TRAFFIC'
    | 'AZURE_WEBAPP_SLOT_ROLLBACK'
    | 'AWS_NODE_SELECT'
    | 'DC_NODE_SELECT'
    | 'ROLLING_NODE_SELECT'
    | 'PHASE'
    | 'PHASE_STEP'
    | 'STAGING_ORIGINAL_EXECUTION'
    | 'AWS_CODEDEPLOY_STATE'
    | 'AWS_CODEDEPLOY_ROLLBACK'
    | 'AWS_LAMBDA_STATE'
    | 'AWS_LAMBDA_ROLLBACK'
    | 'AWS_AMI_SERVICE_SETUP'
    | 'ASG_AMI_SERVICE_ALB_SHIFT_SETUP'
    | 'AWS_AMI_SERVICE_DEPLOY'
    | 'ASG_AMI_SERVICE_ALB_SHIFT_DEPLOY'
    | 'AWS_AMI_SWITCH_ROUTES'
    | 'ASG_AMI_ALB_SHIFT_SWITCH_ROUTES'
    | 'AWS_AMI_ROLLBACK_SWITCH_ROUTES'
    | 'ASG_AMI_ROLLBACK_ALB_SHIFT_SWITCH_ROUTES'
    | 'AWS_AMI_SERVICE_ROLLBACK'
    | 'ECS_SERVICE_SETUP'
    | 'SPOTINST_SETUP'
    | 'SPOTINST_ALB_SHIFT_SETUP'
    | 'SPOTINST_DEPLOY'
    | 'SPOTINST_ALB_SHIFT_DEPLOY'
    | 'SPOTINST_LISTENER_UPDATE'
    | 'SPOTINST_LISTENER_ALB_SHIFT'
    | 'SPOTINST_ROLLBACK'
    | 'SPOTINST_LISTENER_UPDATE_ROLLBACK'
    | 'SPOTINST_LISTENER_ALB_SHIFT_ROLLBACK'
    | 'ECS_SERVICE_SETUP_ROLLBACK'
    | 'ECS_DAEMON_SERVICE_SETUP'
    | 'ECS_BG_SERVICE_SETUP'
    | 'ECS_BG_SERVICE_SETUP_ROUTE53'
    | 'ECS_SERVICE_DEPLOY'
    | 'ECS_SERVICE_ROLLBACK'
    | 'ECS_LISTENER_UPDATE'
    | 'ECS_LISTENER_UPDATE_ROLLBACK'
    | 'ECS_ROUTE53_DNS_WEIGHT_UPDATE'
    | 'ECS_ROUTE53_DNS_WEIGHT_UPDATE_ROLLBACK'
    | 'KUBERNETES_SETUP'
    | 'KUBERNETES_SETUP_ROLLBACK'
    | 'KUBERNETES_DEPLOY'
    | 'KUBERNETES_DEPLOY_ROLLBACK'
    | 'KUBERNETES_STEADY_STATE_CHECK'
    | 'ECS_STEADY_STATE_CHECK'
    | 'ECS_RUN_TASK'
    | 'GCP_CLUSTER_SETUP'
    | 'HELM_DEPLOY'
    | 'HELM_ROLLBACK'
    | 'PCF_SETUP'
    | 'PCF_RESIZE'
    | 'PCF_ROLLBACK'
    | 'PCF_MAP_ROUTE'
    | 'PCF_UNMAP_ROUTE'
    | 'PCF_BG_MAP_ROUTE'
    | 'PCF_PLUGIN'
    | 'TERRAFORM_PROVISION'
    | 'TERRAFORM_APPLY'
    | 'TERRAGRUNT_PROVISION'
    | 'TERRAGRUNT_DESTROY'
    | 'TERRAGRUNT_ROLLBACK'
    | 'ARM_CREATE_RESOURCE'
    | 'ARM_ROLLBACK'
    | 'SHELL_SCRIPT_PROVISION'
    | 'TERRAFORM_DESTROY'
    | 'CLOUD_FORMATION_CREATE_STACK'
    | 'CLOUD_FORMATION_DELETE_STACK'
    | 'KUBERNETES_SWAP_SERVICE_SELECTORS'
    | 'CLOUD_FORMATION_ROLLBACK_STACK'
    | 'TERRAFORM_ROLLBACK'
    | 'K8S_DEPLOYMENT_ROLLING'
    | 'K8S_SCALE'
    | 'K8S_DEPLOYMENT_ROLLING_ROLLBACK'
    | 'K8S_BLUE_GREEN_DEPLOY'
    | 'K8S_CANARY_DEPLOY'
    | 'K8S_DELETE'
    | 'RANCHER_RESOLVE'
    | 'RANCHER_K8S_DEPLOYMENT_ROLLING'
    | 'RANCHER_K8S_CANARY_DEPLOY'
    | 'RANCHER_K8S_BLUE_GREEN_DEPLOY'
    | 'RANCHER_KUBERNETES_SWAP_SERVICE_SELECTORS'
    | 'RANCHER_K8S_DELETE'
    | 'RANCHER_K8S_DEPLOYMENT_ROLLING_ROLLBACK'
    | 'JIRA_CREATE_UPDATE'
    | 'SERVICENOW_CREATE_UPDATE'
    | 'K8S_TRAFFIC_SPLIT'
    | 'K8S_APPLY'
    | 'CUSTOM_DEPLOYMENT_FETCH_INSTANCES'
  /*
   * @format int64
   */
  toTime?: number
  /*
   * @format int64
   */
  fromTime?: number
  loadBalancerMetrics?: {
    [key: string]: StackDriverMetric[]
  }
  /*
   * @uniqueItems true
   */
  podMetrics?: StackDriverMetric[]
  query?: string
  hostnameField?: string
  messageField?: string
  metricDefinitions?: StackDriverMetricDefinition[]
  logConfiguration?: boolean
  serviceLevel?: boolean
}

export type RestResponseListStackDriverMetric = {
  metaData?: {
    [key: string]: Record<string, any>
  }
  resource?: StackDriverMetric[]
  responseMessages?: ResponseMessage[]
}

export type RestResponseServiceInstanceStatistics = {
  metaData?: {
    [key: string]: Record<string, any>
  }
  resource?: ServiceInstanceStatistics
  responseMessages?: ResponseMessage[]
}

export type ServiceInstanceStatistics = {
  statsMap?: {
    [key: string]: TopConsumer[]
  }
  type?: 'DEPLOYMENT' | 'SERVICE_INSTANCE_STATISTICS'
}

export type TopConsumer = {
  appId?: string
  appName?: string
  serviceId?: string
  serviceName?: string
  /*
   * @format int32
   */
  successfulActivityCount?: number
  /*
   * @format int32
   */
  failedActivityCount?: number
  /*
   * @format int32
   */
  totalCount?: number
}

export type AggregatedDayStats = {
  /*
   * @format int32
   */
  totalCount?: number
  /*
   * @format int32
   */
  failedCount?: number
  /*
   * @format int32
   */
  instancesCount?: number
  daysStats?: DayStat[]
}

export type DayStat = {
  /*
   * @format int32
   */
  totalCount?: number
  /*
   * @format int32
   */
  failedCount?: number
  /*
   * @format int32
   */
  instancesCount?: number
  /*
   * @format int64
   */
  date?: number
}

export type DeploymentStatistics = {
  statsMap?: {
    [key: string]: AggregatedDayStats
  }
  type?: 'DEPLOYMENT' | 'SERVICE_INSTANCE_STATISTICS'
}

export type RestResponseDeploymentStatistics = {
  metaData?: {
    [key: string]: Record<string, any>
  }
  resource?: DeploymentStatistics
  responseMessages?: ResponseMessage[]
}

export type SumoLogicSetupTestNodedata = {
  appId: string
  settingId: string
  instanceName?: string
  isServiceLevel?: boolean
  instanceElement?: Instance
  hostExpression?: string
  workflowId?: string
  guid?: string
  stateType?:
    | 'SUB_WORKFLOW'
    | 'REPEAT'
    | 'FORK'
    | 'WAIT'
    | 'PAUSE'
    | 'BARRIER'
    | 'RESOURCE_CONSTRAINT'
    | 'SHELL_SCRIPT'
    | 'HTTP'
    | 'TEMPLATIZED_SECRET_MANAGER'
    | 'EMAIL'
    | 'APP_DYNAMICS'
    | 'NEW_RELIC'
    | 'NEW_RELIC_DEPLOYMENT_MARKER'
    | 'DYNA_TRACE'
    | 'PROMETHEUS'
    | 'SPLUNKV2'
    | 'ELK'
    | 'LOGZ'
    | 'SUMO'
    | 'DATA_DOG'
    | 'DATA_DOG_LOG'
    | 'CVNG'
    | 'CLOUD_WATCH'
    | 'AWS_LAMBDA_VERIFICATION'
    | 'APM_VERIFICATION'
    | 'LOG_VERIFICATION'
    | 'BUG_SNAG'
    | 'STACK_DRIVER'
    | 'STACK_DRIVER_LOG'
    | 'INSTANA'
    | 'SCALYR'
    | 'ENV_STATE'
    | 'ENV_LOOP_STATE'
    | 'ENV_RESUME_STATE'
    | 'ENV_LOOP_RESUME_STATE'
    | 'COMMAND'
    | 'APPROVAL'
    | 'APPROVAL_RESUME'
    | 'ELASTIC_LOAD_BALANCER'
    | 'JENKINS'
    | 'GCB'
    | 'BAMBOO'
    | 'ARTIFACT_COLLECTION'
    | 'ARTIFACT_CHECK'
    | 'AZURE_NODE_SELECT'
    | 'AZURE_VMSS_SETUP'
    | 'AZURE_VMSS_DEPLOY'
    | 'AZURE_VMSS_ROLLBACK'
    | 'AZURE_VMSS_SWITCH_ROUTES'
    | 'AZURE_VMSS_SWITCH_ROUTES_ROLLBACK'
    | 'AZURE_WEBAPP_SLOT_SETUP'
    | 'AZURE_WEBAPP_SLOT_SWAP'
    | 'AZURE_WEBAPP_SLOT_SHIFT_TRAFFIC'
    | 'AZURE_WEBAPP_SLOT_ROLLBACK'
    | 'AWS_NODE_SELECT'
    | 'DC_NODE_SELECT'
    | 'ROLLING_NODE_SELECT'
    | 'PHASE'
    | 'PHASE_STEP'
    | 'STAGING_ORIGINAL_EXECUTION'
    | 'AWS_CODEDEPLOY_STATE'
    | 'AWS_CODEDEPLOY_ROLLBACK'
    | 'AWS_LAMBDA_STATE'
    | 'AWS_LAMBDA_ROLLBACK'
    | 'AWS_AMI_SERVICE_SETUP'
    | 'ASG_AMI_SERVICE_ALB_SHIFT_SETUP'
    | 'AWS_AMI_SERVICE_DEPLOY'
    | 'ASG_AMI_SERVICE_ALB_SHIFT_DEPLOY'
    | 'AWS_AMI_SWITCH_ROUTES'
    | 'ASG_AMI_ALB_SHIFT_SWITCH_ROUTES'
    | 'AWS_AMI_ROLLBACK_SWITCH_ROUTES'
    | 'ASG_AMI_ROLLBACK_ALB_SHIFT_SWITCH_ROUTES'
    | 'AWS_AMI_SERVICE_ROLLBACK'
    | 'ECS_SERVICE_SETUP'
    | 'SPOTINST_SETUP'
    | 'SPOTINST_ALB_SHIFT_SETUP'
    | 'SPOTINST_DEPLOY'
    | 'SPOTINST_ALB_SHIFT_DEPLOY'
    | 'SPOTINST_LISTENER_UPDATE'
    | 'SPOTINST_LISTENER_ALB_SHIFT'
    | 'SPOTINST_ROLLBACK'
    | 'SPOTINST_LISTENER_UPDATE_ROLLBACK'
    | 'SPOTINST_LISTENER_ALB_SHIFT_ROLLBACK'
    | 'ECS_SERVICE_SETUP_ROLLBACK'
    | 'ECS_DAEMON_SERVICE_SETUP'
    | 'ECS_BG_SERVICE_SETUP'
    | 'ECS_BG_SERVICE_SETUP_ROUTE53'
    | 'ECS_SERVICE_DEPLOY'
    | 'ECS_SERVICE_ROLLBACK'
    | 'ECS_LISTENER_UPDATE'
    | 'ECS_LISTENER_UPDATE_ROLLBACK'
    | 'ECS_ROUTE53_DNS_WEIGHT_UPDATE'
    | 'ECS_ROUTE53_DNS_WEIGHT_UPDATE_ROLLBACK'
    | 'KUBERNETES_SETUP'
    | 'KUBERNETES_SETUP_ROLLBACK'
    | 'KUBERNETES_DEPLOY'
    | 'KUBERNETES_DEPLOY_ROLLBACK'
    | 'KUBERNETES_STEADY_STATE_CHECK'
    | 'ECS_STEADY_STATE_CHECK'
    | 'ECS_RUN_TASK'
    | 'GCP_CLUSTER_SETUP'
    | 'HELM_DEPLOY'
    | 'HELM_ROLLBACK'
    | 'PCF_SETUP'
    | 'PCF_RESIZE'
    | 'PCF_ROLLBACK'
    | 'PCF_MAP_ROUTE'
    | 'PCF_UNMAP_ROUTE'
    | 'PCF_BG_MAP_ROUTE'
    | 'PCF_PLUGIN'
    | 'TERRAFORM_PROVISION'
    | 'TERRAFORM_APPLY'
    | 'TERRAGRUNT_PROVISION'
    | 'TERRAGRUNT_DESTROY'
    | 'TERRAGRUNT_ROLLBACK'
    | 'ARM_CREATE_RESOURCE'
    | 'ARM_ROLLBACK'
    | 'SHELL_SCRIPT_PROVISION'
    | 'TERRAFORM_DESTROY'
    | 'CLOUD_FORMATION_CREATE_STACK'
    | 'CLOUD_FORMATION_DELETE_STACK'
    | 'KUBERNETES_SWAP_SERVICE_SELECTORS'
    | 'CLOUD_FORMATION_ROLLBACK_STACK'
    | 'TERRAFORM_ROLLBACK'
    | 'K8S_DEPLOYMENT_ROLLING'
    | 'K8S_SCALE'
    | 'K8S_DEPLOYMENT_ROLLING_ROLLBACK'
    | 'K8S_BLUE_GREEN_DEPLOY'
    | 'K8S_CANARY_DEPLOY'
    | 'K8S_DELETE'
    | 'RANCHER_RESOLVE'
    | 'RANCHER_K8S_DEPLOYMENT_ROLLING'
    | 'RANCHER_K8S_CANARY_DEPLOY'
    | 'RANCHER_K8S_BLUE_GREEN_DEPLOY'
    | 'RANCHER_KUBERNETES_SWAP_SERVICE_SELECTORS'
    | 'RANCHER_K8S_DELETE'
    | 'RANCHER_K8S_DEPLOYMENT_ROLLING_ROLLBACK'
    | 'JIRA_CREATE_UPDATE'
    | 'SERVICENOW_CREATE_UPDATE'
    | 'K8S_TRAFFIC_SPLIT'
    | 'K8S_APPLY'
    | 'CUSTOM_DEPLOYMENT_FETCH_INSTANCES'
  /*
   * @format int64
   */
  toTime?: number
  /*
   * @format int64
   */
  fromTime?: number
  query?: string
  hostNameField?: string
  serviceLevel?: boolean
}

export type DeploymentTimeSeriesAnalysis = {
  stateExecutionId?: string
  customThresholdRefId?: string
  baseLineExecutionId?: string
  message?: string
  riskLevel?: 'HIGH' | 'MEDIUM' | 'LOW' | 'NA'
  /*
   * @format int32
   */
  total?: number
  metricAnalyses?: NewRelicMetricAnalysis[]
}

export type NewRelicMetricAnalysis = {
  metricName?: string
  riskLevel?: 'HIGH' | 'MEDIUM' | 'LOW' | 'NA'
  metricValues?: NewRelicMetricAnalysisValue[]
  displayName?: string
  fullMetricName?: string
  tag?: string
}

export type NewRelicMetricAnalysisValue = {
  name?: string
  type?: string
  alertType?: string
  riskLevel?: 'HIGH' | 'MEDIUM' | 'LOW' | 'NA'
  /*
   * @format double
   */
  testValue?: number
  /*
   * @format double
   */
  controlValue?: number
  hostAnalysisValues?: NewRelicMetricHostAnalysisValue[]
}

export type NewRelicMetricHostAnalysisValue = {
  riskLevel?: 'HIGH' | 'MEDIUM' | 'LOW' | 'NA'
  testHostName?: string
  controlHostName?: string
  testValues?: number[]
  controlValues?: number[]
  upperThresholds?: number[]
  lowerThresholds?: number[]
  anomalies?: number[]
  /*
   * @format int32
   */
  testStartIndex?: number
  failFastCriteriaDescription?: string
}

export type RestResponseDeploymentTimeSeriesAnalysis = {
  metaData?: {
    [key: string]: Record<string, any>
  }
  resource?: DeploymentTimeSeriesAnalysis
  responseMessages?: ResponseMessage[]
}

export type RestResponseTimeSeriesMLTransactionThresholds = {
  metaData?: {
    [key: string]: Record<string, any>
  }
  resource?: TimeSeriesMLTransactionThresholds
  responseMessages?: ResponseMessage[]
}

export type Threshold = {
  thresholdType?: 'ALERT_WHEN_LOWER' | 'ALERT_WHEN_HIGHER' | 'ALERT_HIGHER_OR_LOWER' | 'NO_ALERT'
  comparisonType?: 'RATIO' | 'DELTA' | 'ABSOLUTE'
  /*
   * @format double
   */
  ml?: number
  customThresholdType?: 'ACCEPTABLE' | 'ANOMALOUS'
  thresholdCriteria?: TimeSeriesCustomThresholdCriteria
}

export type TimeSeriesCustomThresholdCriteria = {
  actionToTake?: 'FAIL_IMMEDIATELY' | 'FAIL_AFTER_OCCURRENCES' | 'FAIL_AFTER_CONSECUTIVE_OCCURRENCES'
  /*
   * @format int32
   */
  occurrences?: number
}

export type TimeSeriesMLTransactionThresholds = {
  serviceId?: string
  workflowId?: string
  stateType?:
    | 'SUB_WORKFLOW'
    | 'REPEAT'
    | 'FORK'
    | 'WAIT'
    | 'PAUSE'
    | 'BARRIER'
    | 'RESOURCE_CONSTRAINT'
    | 'SHELL_SCRIPT'
    | 'HTTP'
    | 'TEMPLATIZED_SECRET_MANAGER'
    | 'EMAIL'
    | 'APP_DYNAMICS'
    | 'NEW_RELIC'
    | 'NEW_RELIC_DEPLOYMENT_MARKER'
    | 'DYNA_TRACE'
    | 'PROMETHEUS'
    | 'SPLUNKV2'
    | 'ELK'
    | 'LOGZ'
    | 'SUMO'
    | 'DATA_DOG'
    | 'DATA_DOG_LOG'
    | 'CVNG'
    | 'CLOUD_WATCH'
    | 'AWS_LAMBDA_VERIFICATION'
    | 'APM_VERIFICATION'
    | 'LOG_VERIFICATION'
    | 'BUG_SNAG'
    | 'STACK_DRIVER'
    | 'STACK_DRIVER_LOG'
    | 'INSTANA'
    | 'SCALYR'
    | 'ENV_STATE'
    | 'ENV_LOOP_STATE'
    | 'ENV_RESUME_STATE'
    | 'ENV_LOOP_RESUME_STATE'
    | 'COMMAND'
    | 'APPROVAL'
    | 'APPROVAL_RESUME'
    | 'ELASTIC_LOAD_BALANCER'
    | 'JENKINS'
    | 'GCB'
    | 'BAMBOO'
    | 'ARTIFACT_COLLECTION'
    | 'ARTIFACT_CHECK'
    | 'AZURE_NODE_SELECT'
    | 'AZURE_VMSS_SETUP'
    | 'AZURE_VMSS_DEPLOY'
    | 'AZURE_VMSS_ROLLBACK'
    | 'AZURE_VMSS_SWITCH_ROUTES'
    | 'AZURE_VMSS_SWITCH_ROUTES_ROLLBACK'
    | 'AZURE_WEBAPP_SLOT_SETUP'
    | 'AZURE_WEBAPP_SLOT_SWAP'
    | 'AZURE_WEBAPP_SLOT_SHIFT_TRAFFIC'
    | 'AZURE_WEBAPP_SLOT_ROLLBACK'
    | 'AWS_NODE_SELECT'
    | 'DC_NODE_SELECT'
    | 'ROLLING_NODE_SELECT'
    | 'PHASE'
    | 'PHASE_STEP'
    | 'STAGING_ORIGINAL_EXECUTION'
    | 'AWS_CODEDEPLOY_STATE'
    | 'AWS_CODEDEPLOY_ROLLBACK'
    | 'AWS_LAMBDA_STATE'
    | 'AWS_LAMBDA_ROLLBACK'
    | 'AWS_AMI_SERVICE_SETUP'
    | 'ASG_AMI_SERVICE_ALB_SHIFT_SETUP'
    | 'AWS_AMI_SERVICE_DEPLOY'
    | 'ASG_AMI_SERVICE_ALB_SHIFT_DEPLOY'
    | 'AWS_AMI_SWITCH_ROUTES'
    | 'ASG_AMI_ALB_SHIFT_SWITCH_ROUTES'
    | 'AWS_AMI_ROLLBACK_SWITCH_ROUTES'
    | 'ASG_AMI_ROLLBACK_ALB_SHIFT_SWITCH_ROUTES'
    | 'AWS_AMI_SERVICE_ROLLBACK'
    | 'ECS_SERVICE_SETUP'
    | 'SPOTINST_SETUP'
    | 'SPOTINST_ALB_SHIFT_SETUP'
    | 'SPOTINST_DEPLOY'
    | 'SPOTINST_ALB_SHIFT_DEPLOY'
    | 'SPOTINST_LISTENER_UPDATE'
    | 'SPOTINST_LISTENER_ALB_SHIFT'
    | 'SPOTINST_ROLLBACK'
    | 'SPOTINST_LISTENER_UPDATE_ROLLBACK'
    | 'SPOTINST_LISTENER_ALB_SHIFT_ROLLBACK'
    | 'ECS_SERVICE_SETUP_ROLLBACK'
    | 'ECS_DAEMON_SERVICE_SETUP'
    | 'ECS_BG_SERVICE_SETUP'
    | 'ECS_BG_SERVICE_SETUP_ROUTE53'
    | 'ECS_SERVICE_DEPLOY'
    | 'ECS_SERVICE_ROLLBACK'
    | 'ECS_LISTENER_UPDATE'
    | 'ECS_LISTENER_UPDATE_ROLLBACK'
    | 'ECS_ROUTE53_DNS_WEIGHT_UPDATE'
    | 'ECS_ROUTE53_DNS_WEIGHT_UPDATE_ROLLBACK'
    | 'KUBERNETES_SETUP'
    | 'KUBERNETES_SETUP_ROLLBACK'
    | 'KUBERNETES_DEPLOY'
    | 'KUBERNETES_DEPLOY_ROLLBACK'
    | 'KUBERNETES_STEADY_STATE_CHECK'
    | 'ECS_STEADY_STATE_CHECK'
    | 'ECS_RUN_TASK'
    | 'GCP_CLUSTER_SETUP'
    | 'HELM_DEPLOY'
    | 'HELM_ROLLBACK'
    | 'PCF_SETUP'
    | 'PCF_RESIZE'
    | 'PCF_ROLLBACK'
    | 'PCF_MAP_ROUTE'
    | 'PCF_UNMAP_ROUTE'
    | 'PCF_BG_MAP_ROUTE'
    | 'PCF_PLUGIN'
    | 'TERRAFORM_PROVISION'
    | 'TERRAFORM_APPLY'
    | 'TERRAGRUNT_PROVISION'
    | 'TERRAGRUNT_DESTROY'
    | 'TERRAGRUNT_ROLLBACK'
    | 'ARM_CREATE_RESOURCE'
    | 'ARM_ROLLBACK'
    | 'SHELL_SCRIPT_PROVISION'
    | 'TERRAFORM_DESTROY'
    | 'CLOUD_FORMATION_CREATE_STACK'
    | 'CLOUD_FORMATION_DELETE_STACK'
    | 'KUBERNETES_SWAP_SERVICE_SELECTORS'
    | 'CLOUD_FORMATION_ROLLBACK_STACK'
    | 'TERRAFORM_ROLLBACK'
    | 'K8S_DEPLOYMENT_ROLLING'
    | 'K8S_SCALE'
    | 'K8S_DEPLOYMENT_ROLLING_ROLLBACK'
    | 'K8S_BLUE_GREEN_DEPLOY'
    | 'K8S_CANARY_DEPLOY'
    | 'K8S_DELETE'
    | 'RANCHER_RESOLVE'
    | 'RANCHER_K8S_DEPLOYMENT_ROLLING'
    | 'RANCHER_K8S_CANARY_DEPLOY'
    | 'RANCHER_K8S_BLUE_GREEN_DEPLOY'
    | 'RANCHER_KUBERNETES_SWAP_SERVICE_SELECTORS'
    | 'RANCHER_K8S_DELETE'
    | 'RANCHER_K8S_DEPLOYMENT_ROLLING_ROLLBACK'
    | 'JIRA_CREATE_UPDATE'
    | 'SERVICENOW_CREATE_UPDATE'
    | 'K8S_TRAFFIC_SPLIT'
    | 'K8S_APPLY'
    | 'CUSTOM_DEPLOYMENT_FETCH_INSTANCES'
  groupName?: string
  transactionName?: string
  metricName?: string
  cvConfigId?: string
  accountId?: string
  thresholds?: TimeSeriesMetricDefinition
  thresholdType?: 'ACCEPTABLE' | 'ANOMALOUS'
  customThresholdRefId?: string
  /*
   * @format int32
   */
  version?: number
  uuid: string
  appId: string
  createdBy?: EmbeddedUser
  /*
   * @format int64
   */
  createdAt?: number
  lastUpdatedBy?: EmbeddedUser
  /*
   * @format int64
   */
  lastUpdatedAt: number
}

export type TimeSeriesMetricDefinition = {
  metricName?: string
  metricType?: string
  /*
   * @uniqueItems true
   */
  tags?: string[]
  customThresholds?: Threshold[]
  categorizedThresholds?: {
    [key: string]: Threshold[]
  }
  thresholds?: Threshold[]
}

export type NewRelicMetricAnalysisRecord = {
  uuid: string
  appId: string
  createdBy?: EmbeddedUser
  /*
   * @format int64
   */
  createdAt?: number
  lastUpdatedBy?: EmbeddedUser
  /*
   * @format int64
   */
  lastUpdatedAt: number
  stateType?:
    | 'SUB_WORKFLOW'
    | 'REPEAT'
    | 'FORK'
    | 'WAIT'
    | 'PAUSE'
    | 'BARRIER'
    | 'RESOURCE_CONSTRAINT'
    | 'SHELL_SCRIPT'
    | 'HTTP'
    | 'TEMPLATIZED_SECRET_MANAGER'
    | 'EMAIL'
    | 'APP_DYNAMICS'
    | 'NEW_RELIC'
    | 'NEW_RELIC_DEPLOYMENT_MARKER'
    | 'DYNA_TRACE'
    | 'PROMETHEUS'
    | 'SPLUNKV2'
    | 'ELK'
    | 'LOGZ'
    | 'SUMO'
    | 'DATA_DOG'
    | 'DATA_DOG_LOG'
    | 'CVNG'
    | 'CLOUD_WATCH'
    | 'AWS_LAMBDA_VERIFICATION'
    | 'APM_VERIFICATION'
    | 'LOG_VERIFICATION'
    | 'BUG_SNAG'
    | 'STACK_DRIVER'
    | 'STACK_DRIVER_LOG'
    | 'INSTANA'
    | 'SCALYR'
    | 'ENV_STATE'
    | 'ENV_LOOP_STATE'
    | 'ENV_RESUME_STATE'
    | 'ENV_LOOP_RESUME_STATE'
    | 'COMMAND'
    | 'APPROVAL'
    | 'APPROVAL_RESUME'
    | 'ELASTIC_LOAD_BALANCER'
    | 'JENKINS'
    | 'GCB'
    | 'BAMBOO'
    | 'ARTIFACT_COLLECTION'
    | 'ARTIFACT_CHECK'
    | 'AZURE_NODE_SELECT'
    | 'AZURE_VMSS_SETUP'
    | 'AZURE_VMSS_DEPLOY'
    | 'AZURE_VMSS_ROLLBACK'
    | 'AZURE_VMSS_SWITCH_ROUTES'
    | 'AZURE_VMSS_SWITCH_ROUTES_ROLLBACK'
    | 'AZURE_WEBAPP_SLOT_SETUP'
    | 'AZURE_WEBAPP_SLOT_SWAP'
    | 'AZURE_WEBAPP_SLOT_SHIFT_TRAFFIC'
    | 'AZURE_WEBAPP_SLOT_ROLLBACK'
    | 'AWS_NODE_SELECT'
    | 'DC_NODE_SELECT'
    | 'ROLLING_NODE_SELECT'
    | 'PHASE'
    | 'PHASE_STEP'
    | 'STAGING_ORIGINAL_EXECUTION'
    | 'AWS_CODEDEPLOY_STATE'
    | 'AWS_CODEDEPLOY_ROLLBACK'
    | 'AWS_LAMBDA_STATE'
    | 'AWS_LAMBDA_ROLLBACK'
    | 'AWS_AMI_SERVICE_SETUP'
    | 'ASG_AMI_SERVICE_ALB_SHIFT_SETUP'
    | 'AWS_AMI_SERVICE_DEPLOY'
    | 'ASG_AMI_SERVICE_ALB_SHIFT_DEPLOY'
    | 'AWS_AMI_SWITCH_ROUTES'
    | 'ASG_AMI_ALB_SHIFT_SWITCH_ROUTES'
    | 'AWS_AMI_ROLLBACK_SWITCH_ROUTES'
    | 'ASG_AMI_ROLLBACK_ALB_SHIFT_SWITCH_ROUTES'
    | 'AWS_AMI_SERVICE_ROLLBACK'
    | 'ECS_SERVICE_SETUP'
    | 'SPOTINST_SETUP'
    | 'SPOTINST_ALB_SHIFT_SETUP'
    | 'SPOTINST_DEPLOY'
    | 'SPOTINST_ALB_SHIFT_DEPLOY'
    | 'SPOTINST_LISTENER_UPDATE'
    | 'SPOTINST_LISTENER_ALB_SHIFT'
    | 'SPOTINST_ROLLBACK'
    | 'SPOTINST_LISTENER_UPDATE_ROLLBACK'
    | 'SPOTINST_LISTENER_ALB_SHIFT_ROLLBACK'
    | 'ECS_SERVICE_SETUP_ROLLBACK'
    | 'ECS_DAEMON_SERVICE_SETUP'
    | 'ECS_BG_SERVICE_SETUP'
    | 'ECS_BG_SERVICE_SETUP_ROUTE53'
    | 'ECS_SERVICE_DEPLOY'
    | 'ECS_SERVICE_ROLLBACK'
    | 'ECS_LISTENER_UPDATE'
    | 'ECS_LISTENER_UPDATE_ROLLBACK'
    | 'ECS_ROUTE53_DNS_WEIGHT_UPDATE'
    | 'ECS_ROUTE53_DNS_WEIGHT_UPDATE_ROLLBACK'
    | 'KUBERNETES_SETUP'
    | 'KUBERNETES_SETUP_ROLLBACK'
    | 'KUBERNETES_DEPLOY'
    | 'KUBERNETES_DEPLOY_ROLLBACK'
    | 'KUBERNETES_STEADY_STATE_CHECK'
    | 'ECS_STEADY_STATE_CHECK'
    | 'ECS_RUN_TASK'
    | 'GCP_CLUSTER_SETUP'
    | 'HELM_DEPLOY'
    | 'HELM_ROLLBACK'
    | 'PCF_SETUP'
    | 'PCF_RESIZE'
    | 'PCF_ROLLBACK'
    | 'PCF_MAP_ROUTE'
    | 'PCF_UNMAP_ROUTE'
    | 'PCF_BG_MAP_ROUTE'
    | 'PCF_PLUGIN'
    | 'TERRAFORM_PROVISION'
    | 'TERRAFORM_APPLY'
    | 'TERRAGRUNT_PROVISION'
    | 'TERRAGRUNT_DESTROY'
    | 'TERRAGRUNT_ROLLBACK'
    | 'ARM_CREATE_RESOURCE'
    | 'ARM_ROLLBACK'
    | 'SHELL_SCRIPT_PROVISION'
    | 'TERRAFORM_DESTROY'
    | 'CLOUD_FORMATION_CREATE_STACK'
    | 'CLOUD_FORMATION_DELETE_STACK'
    | 'KUBERNETES_SWAP_SERVICE_SELECTORS'
    | 'CLOUD_FORMATION_ROLLBACK_STACK'
    | 'TERRAFORM_ROLLBACK'
    | 'K8S_DEPLOYMENT_ROLLING'
    | 'K8S_SCALE'
    | 'K8S_DEPLOYMENT_ROLLING_ROLLBACK'
    | 'K8S_BLUE_GREEN_DEPLOY'
    | 'K8S_CANARY_DEPLOY'
    | 'K8S_DELETE'
    | 'RANCHER_RESOLVE'
    | 'RANCHER_K8S_DEPLOYMENT_ROLLING'
    | 'RANCHER_K8S_CANARY_DEPLOY'
    | 'RANCHER_K8S_BLUE_GREEN_DEPLOY'
    | 'RANCHER_KUBERNETES_SWAP_SERVICE_SELECTORS'
    | 'RANCHER_K8S_DELETE'
    | 'RANCHER_K8S_DEPLOYMENT_ROLLING_ROLLBACK'
    | 'JIRA_CREATE_UPDATE'
    | 'SERVICENOW_CREATE_UPDATE'
    | 'K8S_TRAFFIC_SPLIT'
    | 'K8S_APPLY'
    | 'CUSTOM_DEPLOYMENT_FETCH_INSTANCES'
  message?: string
  riskLevel?: 'HIGH' | 'MEDIUM' | 'LOW' | 'NA'
  workflowExecutionId?: string
  stateExecutionId?: string
  accountId?: string
  cvConfigId?: string
  metricAnalyses?: NewRelicMetricAnalysis[]
  /*
   * @format int32
   */
  analysisMinute?: number
  showTimeSeries?: boolean
  baseLineExecutionId?: string
  groupName?: string
  dependencyPath?: string
  mlAnalysisType?: 'COMPARATIVE' | 'PREDICTIVE' | 'TIMESERIES_24x7'
  /*
   * @format int32
   */
  progress?: number
}

export type RestResponseSetNewRelicMetricAnalysisRecord = {
  metaData?: {
    [key: string]: Record<string, any>
  }
  /*
   * @uniqueItems true
   */
  resource?: NewRelicMetricAnalysisRecord[]
  responseMessages?: ResponseMessage[]
}

export type RestResponseListNewRelicMetricHostAnalysisValue = {
  metaData?: {
    [key: string]: Record<string, any>
  }
  resource?: NewRelicMetricHostAnalysisValue[]
  responseMessages?: ResponseMessage[]
}

export type RestResponseListTimeSeriesMLTransactionThresholds = {
  metaData?: {
    [key: string]: Record<string, any>
  }
  resource?: TimeSeriesMLTransactionThresholds[]
  responseMessages?: ResponseMessage[]
}

export type RestResponseTimeSeriesKeyTransactions = {
  metaData?: {
    [key: string]: Record<string, any>
  }
  resource?: TimeSeriesKeyTransactions
  responseMessages?: ResponseMessage[]
}

export type TimeSeriesKeyTransactions = {
  uuid?: string
  /*
   * @format int64
   */
  createdAt?: number
  /*
   * @format int64
   */
  lastUpdatedAt?: number
  createdBy?: EmbeddedUser
  lastUpdatedBy?: EmbeddedUser
  cvConfigId?: string
  serviceId?: string
  accountId?: string
  /*
   * @uniqueItems true
   */
  keyTransactions?: string[]
}

export type ArtifactSelection = {
  serviceId?: string
  serviceName?: string
  type?: 'ARTIFACT_SOURCE' | 'LAST_COLLECTED' | 'LAST_DEPLOYED' | 'PIPELINE_SOURCE' | 'WEBHOOK_VARIABLE'
  artifactStreamId?: string
  artifactSourceName?: string
  artifactFilter?: string
  pipelineId?: string
  pipelineName?: string
  workflowId?: string
  workflowName?: string
  regex?: boolean
  uiDisplayName?: string
}

export type ArtifactTriggerCondition = TriggerCondition & {
  artifactStreamId?: string
  artifactSourceName?: string
  artifactFilter?: string
  regex?: boolean
}

export type ManifestSelection = {
  serviceId?: string
  serviceName?: string
  type?: 'FROM_APP_MANIFEST' | 'LAST_COLLECTED' | 'LAST_DEPLOYED' | 'PIPELINE_SOURCE' | 'WEBHOOK_VARIABLE'
  appManifestId?: string
  versionRegex?: string
  pipelineId?: string
  pipelineName?: string
  workflowId?: string
  workflowName?: string
  appManifestName?: string
}

export type ManifestTriggerCondition = TriggerCondition & {
  appManifestId?: string
  serviceId?: string
  serviceName?: string
  versionRegex?: string
  appManifestName?: string
}

export type NewInstanceTriggerCondition = TriggerCondition & {}

export type PipelineTriggerCondition = TriggerCondition & {
  pipelineId?: string
  pipelineName?: string
}

export type RestResponseTrigger = {
  metaData?: {
    [key: string]: Record<string, any>
  }
  resource?: Trigger
  responseMessages?: ResponseMessage[]
}

export type ScheduledTriggerCondition = TriggerCondition & {
  cronExpression?: string
  cronDescription?: string
  onNewArtifactOnly?: boolean
}

export type ServiceInfraWorkflow = {
  infraMappingId?: string
  infraMappingName?: string
  workflowId?: string
  workflowName?: string
  workflowType?: 'PIPELINE' | 'ORCHESTRATION'
}

export type Trigger = {
  uuid: string
  appId: string
  createdBy?: EmbeddedUser
  /*
   * @format int64
   */
  createdAt?: number
  lastUpdatedBy?: EmbeddedUser
  /*
   * @format int64
   */
  lastUpdatedAt: number
  name?: string
  accountId?: string
  description?: string
  condition: TriggerCondition
  pipelineId?: string
  pipelineName?: string
  workflowId?: string
  workflowName?: string
  artifactSelections?: ArtifactSelection[]
  manifestSelections?: ManifestSelection[]
  workflowType?: 'PIPELINE' | 'ORCHESTRATION'
  workflowVariables?: {
    [key: string]: string
  }
  continueWithDefaultValues?: boolean
  serviceInfraWorkflows?: ServiceInfraWorkflow[]
  excludeHostsWithSameArtifact?: boolean
  tagLinks?: HarnessTagLink[]
  disabled?: boolean
  nextIterations?: number[]
}

export type TriggerCondition = {
  conditionType: 'NEW_ARTIFACT' | 'PIPELINE_COMPLETION' | 'SCHEDULED' | 'WEBHOOK' | 'NEW_INSTANCE' | 'NEW_MANIFEST'
  conditionDisplayName?: string
}

export type WebHookToken = {
  webHookToken?: string
  httpMethod?: string
  payload?: string
}

export type WebHookTriggerCondition = TriggerCondition & {
  webHookToken?: WebHookToken
  artifactStreamId?: string
  parameters?: {
    [key: string]: string
  }
  webhookSource?: 'GITHUB' | 'GITLAB' | 'BITBUCKET' | 'AZURE_DEVOPS'
  eventTypes?: (
    | 'PULL_REQUEST'
    | 'PUSH'
    | 'REPO'
    | 'ISSUE'
    | 'PING'
    | 'DELETE'
    | 'ANY'
    | 'OTHER'
    | 'RELEASE'
    | 'PACKAGE'
  )[]
  actions?: (
    | 'CLOSED'
    | 'EDITED'
    | 'OPENED'
    | 'REOPENED'
    | 'ASSIGNED'
    | 'UNASSIGNED'
    | 'LABELED'
    | 'UNLABELED'
    | 'SYNCHRONIZED'
    | 'REVIEW_REQUESTED'
    | 'REVIEW_REQUESTED_REMOVED'
    | 'PACKAGE_PUBLISHED'
  )[]
  releaseActions?: ('CREATED' | 'PUBLISHED' | 'RELEASED' | 'UNPUBLISHED' | 'EDITED' | 'DELETED' | 'PRE_RELEASED')[]
  bitBucketEvents?: (
    | 'PING'
    | 'DIAGNOSTICS_PING'
    | 'ALL'
    | 'PUSH_ANY'
    | 'ANY'
    | 'FORK'
    | 'UPDATED'
    | 'COMMIT_COMMENT_CREATED'
    | 'BUILD_STATUS_CREATED'
    | 'BUILD_STATUS_UPDATED'
    | 'PUSH'
    | 'REFS_CHANGED'
    | 'ISSUE_ANY'
    | 'ISSUE_CREATED'
    | 'ISSUE_UPDATED'
    | 'ISSUE_COMMENT_CREATED'
    | 'PULL_REQUEST_ANY'
    | 'PULL_REQUEST_CREATED'
    | 'PULL_REQUEST_UPDATED'
    | 'PULL_REQUEST_APPROVED'
    | 'PULL_REQUEST_APPROVAL_REMOVED'
    | 'PULL_REQUEST_MERGED'
    | 'PULL_REQUEST_DECLINED'
    | 'PULL_REQUEST_COMMENT_CREATED'
    | 'PULL_REQUEST_COMMENT_UPDATED'
    | 'PULL_REQUEST_COMMENT_DELETED'
  )[]
  filePaths?: string[]
  gitConnectorId?: string
  repoName?: string
  branchName?: string
  branchRegex?: string
  checkFileContentChanged?: boolean
  webHookSecret?: string
}

export type RestResponsePageResponseTrigger = {
  metaData?: {
    [key: string]: Record<string, any>
  }
  resource?: Trigger[]
  responseMessages?: ResponseMessage[]
}

export type RestResponseWebHookToken = {
  metaData?: {
    [key: string]: Record<string, any>
  }
  resource?: WebHookToken
  responseMessages?: ResponseMessage[]
}

export type RestResponseWebhookParameters = {
  metaData?: {
    [key: string]: Record<string, any>
  }
  resource?: WebhookParameters
  responseMessages?: ResponseMessage[]
}

export type WebhookParameters = {
  params?: string[]
  expressions?: string[]
}

export type RestResponseWebhookEventType = {
  metaData?: {
    [key: string]: Record<string, any>
  }
  resource?: 'PULL_REQUEST' | 'PUSH' | 'REPO' | 'ISSUE' | 'PING' | 'DELETE' | 'ANY' | 'OTHER' | 'RELEASE' | 'PACKAGE'
  responseMessages?: ResponseMessage[]
}

export type AppRestrictionsSummary = {
  application?: EntityReference
  hasAllProdEnvAccess?: boolean
  hasAllNonProdEnvAccess?: boolean
  /*
   * @uniqueItems true
   */
  environments?: EntityReference[]
}

export type EntityReference = {
  id?: string
  name?: string
  appId?: string
  entityType?: string
}

export type RestResponseRestrictionsSummary = {
  metaData?: {
    [key: string]: Record<string, any>
  }
  resource?: RestrictionsSummary
  responseMessages?: ResponseMessage[]
}

export type RestrictionsSummary = {
  hasAllAppAccess?: boolean
  hasAllProdEnvAccess?: boolean
  hasAllNonProdEnvAccess?: boolean
  /*
   * @uniqueItems true
   */
  applications?: AppRestrictionsSummary[]
}

export type IdNameReference = {
  id?: string
  name?: string
}

export type RestResponseUsageRestrictionsReferenceSummary = {
  metaData?: {
    [key: string]: Record<string, any>
  }
  resource?: UsageRestrictionsReferenceSummary
  responseMessages?: ResponseMessage[]
}

export type UsageRestrictionsReferenceSummary = {
  /*
   * @format int32
   */
  total?: number
  /*
   * @format int32
   */
  numOfSettings?: number
  /*
   * @format int32
   */
  numOfSecrets?: number
  /*
   * @uniqueItems true
   */
  settings?: IdNameReference[]
  /*
   * @uniqueItems true
   */
  secrets?: IdNameReference[]
}

export type RestResponseUsageRestrictions = {
  metaData?: {
    [key: string]: Record<string, any>
  }
  resource?: UsageRestrictions
  responseMessages?: ResponseMessage[]
}

export type RestResponseUserGroup = {
  metaData?: {
    [key: string]: Record<string, any>
  }
  resource?: UserGroup
  responseMessages?: ResponseMessage[]
}

export type RestResponsePageResponseUserGroup = {
  metaData?: {
    [key: string]: Record<string, any>
  }
  resource?: UserGroup[]
  responseMessages?: ResponseMessage[]
}

export type LdapLinkGroupRequest = {
  ldapGroupDN?: string
  ldapGroupName?: string
}

export type SamlLinkGroupRequest = {
  samlGroupName?: string
}

export type PublicUser = {
  user?: User
  inviteAccepted?: boolean
}

export type RestResponsePageResponsePublicUser = {
  metaData?: {
    [key: string]: Record<string, any>
  }
  resource?: PublicUser[]
  responseMessages?: ResponseMessage[]
}

export type AccountPermissionSummary = {
  /*
   * @uniqueItems true
   */
  permissions?: (
    | 'ACCOUNT'
    | 'LOGGED_IN'
    | 'DELEGATE'
    | 'NONE'
    | 'APP'
    | 'ALL_APP_ENTITIES'
    | 'ENV'
    | 'SERVICE'
    | 'WORKFLOW'
    | 'PIPELINE'
    | 'DEPLOYMENT'
    | 'APPLICATION_CREATE_DELETE'
    | 'USER_PERMISSION_MANAGEMENT'
    | 'ACCOUNT_MANAGEMENT'
    | 'PROVISIONER'
    | 'TEMPLATE_MANAGEMENT'
    | 'APP_TEMPLATE'
    | 'USER_PERMISSION_READ'
    | 'AUDIT_VIEWER'
    | 'TAG_MANAGEMENT'
    | 'CE_ADMIN'
    | 'CE_VIEWER'
    | 'MANAGE_CLOUD_PROVIDERS'
    | 'MANAGE_CONNECTORS'
    | 'MANAGE_APPLICATIONS'
    | 'MANAGE_APPLICATION_STACKS'
    | 'MANAGE_DELEGATES'
    | 'MANAGE_ALERT_NOTIFICATION_RULES'
    | 'MANAGE_DELEGATE_PROFILES'
    | 'MANAGE_CONFIG_AS_CODE'
    | 'MANAGE_SECRETS'
    | 'MANAGE_SECRET_MANAGERS'
    | 'MANAGE_SSH_AND_WINRM'
    | 'MANAGE_AUTHENTICATION_SETTINGS'
    | 'MANAGE_USER_AND_USER_GROUPS_AND_API_KEYS'
    | 'VIEW_USER_AND_USER_GROUPS_AND_API_KEYS'
    | 'MANAGE_IP_WHITELIST'
    | 'MANAGE_IP_WHITELISTING'
    | 'MANAGE_DEPLOYMENT_FREEZES'
    | 'ALLOW_DEPLOYMENTS_DURING_FREEZE'
    | 'MANAGE_PIPELINE_GOVERNANCE_STANDARDS'
    | 'MANAGE_API_KEYS'
    | 'MANAGE_TAGS'
    | 'MANAGE_ACCOUNT_DEFAULTS'
    | 'MANAGE_CUSTOM_DASHBOARDS'
    | 'CREATE_CUSTOM_DASHBOARDS'
    | 'MANAGE_RESTRICTED_ACCESS'
  )[]
}

export type AppPermissionSummaryForUI = {
  canCreateService?: boolean
  canCreateProvisioner?: boolean
  canCreateEnvironment?: boolean
  canCreateWorkflow?: boolean
  canCreatePipeline?: boolean
  canCreateTemplate?: boolean
  servicePermissions?: {
    [key: string]: (
      | 'ALL'
      | 'CREATE'
      | 'READ'
      | 'UPDATE'
      | 'DELETE'
      | 'EXECUTE'
      | 'EXECUTE_WORKFLOW'
      | 'EXECUTE_PIPELINE'
      | 'EXECUTE_WORKFLOW_ROLLBACK'
      | 'DEFAULT'
    )[]
  }
  provisionerPermissions?: {
    [key: string]: (
      | 'ALL'
      | 'CREATE'
      | 'READ'
      | 'UPDATE'
      | 'DELETE'
      | 'EXECUTE'
      | 'EXECUTE_WORKFLOW'
      | 'EXECUTE_PIPELINE'
      | 'EXECUTE_WORKFLOW_ROLLBACK'
      | 'DEFAULT'
    )[]
  }
  envPermissions?: {
    [key: string]: (
      | 'ALL'
      | 'CREATE'
      | 'READ'
      | 'UPDATE'
      | 'DELETE'
      | 'EXECUTE'
      | 'EXECUTE_WORKFLOW'
      | 'EXECUTE_PIPELINE'
      | 'EXECUTE_WORKFLOW_ROLLBACK'
      | 'DEFAULT'
    )[]
  }
  workflowPermissions?: {
    [key: string]: (
      | 'ALL'
      | 'CREATE'
      | 'READ'
      | 'UPDATE'
      | 'DELETE'
      | 'EXECUTE'
      | 'EXECUTE_WORKFLOW'
      | 'EXECUTE_PIPELINE'
      | 'EXECUTE_WORKFLOW_ROLLBACK'
      | 'DEFAULT'
    )[]
  }
  deploymentPermissions?: {
    [key: string]: (
      | 'ALL'
      | 'CREATE'
      | 'READ'
      | 'UPDATE'
      | 'DELETE'
      | 'EXECUTE'
      | 'EXECUTE_WORKFLOW'
      | 'EXECUTE_PIPELINE'
      | 'EXECUTE_WORKFLOW_ROLLBACK'
      | 'DEFAULT'
    )[]
  }
  pipelinePermissions?: {
    [key: string]: (
      | 'ALL'
      | 'CREATE'
      | 'READ'
      | 'UPDATE'
      | 'DELETE'
      | 'EXECUTE'
      | 'EXECUTE_WORKFLOW'
      | 'EXECUTE_PIPELINE'
      | 'EXECUTE_WORKFLOW_ROLLBACK'
      | 'DEFAULT'
    )[]
  }
  templatePermissions?: {
    [key: string]: (
      | 'ALL'
      | 'CREATE'
      | 'READ'
      | 'UPDATE'
      | 'DELETE'
      | 'EXECUTE'
      | 'EXECUTE_WORKFLOW'
      | 'EXECUTE_PIPELINE'
      | 'EXECUTE_WORKFLOW_ROLLBACK'
      | 'DEFAULT'
    )[]
  }
}

export type RestResponseUserPermissionInfo = {
  metaData?: {
    [key: string]: Record<string, any>
  }
  resource?: UserPermissionInfo
  responseMessages?: ResponseMessage[]
}

export type UserPermissionInfo = {
  accountId?: string
  accountPermissionSummary?: AccountPermissionSummary
  appPermissionMap?: {
    [key: string]: AppPermissionSummaryForUI
  }
  hasAllAppAccess?: boolean
  dashboardPermissions?: {
    [key: string]: ('READ' | 'UPDATE' | 'DELETE' | 'MANAGE')[]
  }
}

export type RestResponseCollectionFeatureFlag = {
  metaData?: {
    [key: string]: Record<string, any>
  }
  resource?: FeatureFlag[]
  responseMessages?: ResponseMessage[]
}

export type LoginRequest = {
  authorization?: string
}

export type AccountJoinRequest = {
  name?: string
  email?: string
  companyName?: string
  note?: string
  accountAdminEmail?: string
}

export type ResetPasswordRequest = {
  email?: string
  isNG?: boolean
}

export type ResendInvitationEmailRequest = {
  email?: string
}

export type UpdatePasswordRequest = {
  password?: string
}

export type AccountRole = {
  accountId?: string
  accountName?: string
  allApps?: boolean
  applicationRoles?: ApplicationRole[]
  resourceAccess?: ImmutablePairResourceTypeAction[]
}

export type ApplicationRole = {
  appId?: string
  appName?: string
  allEnvironments?: boolean
  environmentRoles?: EnvironmentRole[]
  resourceAccess?: ImmutablePairResourceTypeAction[]
}

export type EnvironmentRole = {
  envId?: string
  envName?: string
  environmentType?: 'PROD' | 'NON_PROD' | 'ALL'
  resourceAccess?: {
    [key: string]:
      | 'ALL'
      | 'CREATE'
      | 'READ'
      | 'UPDATE'
      | 'DELETE'
      | 'EXECUTE'
      | 'EXECUTE_WORKFLOW'
      | 'EXECUTE_PIPELINE'
      | 'EXECUTE_WORKFLOW_ROLLBACK'
      | 'DEFAULT'
  }
}

export type ImmutablePair = {
  left?: Record<string, any>
  right?: Record<string, any>
  value?: Record<string, any>
  key?: Record<string, any>
}

export type ImmutablePairResourceTypeAction = {
  left?:
    | 'APPLICATION'
    | 'SERVICE'
    | 'CONFIGURATION'
    | 'CONFIGURATION_OVERRIDE'
    | 'WORKFLOW'
    | 'ENVIRONMENT'
    | 'ROLE'
    | 'DEPLOYMENT'
    | 'ARTIFACT'
    | 'CLOUD'
    | 'USER'
    | 'CD'
    | 'PIPELINE'
    | 'SETTING'
    | 'LIMIT'
    | 'APP_STACK'
    | 'NOTIFICATION_GROUP'
    | 'DELEGATE'
    | 'DELEGATE_SCOPE'
    | 'WHITE_LIST'
    | 'SSO'
    | 'API_KEY'
    | 'PROVISIONER'
    | 'PREFERENCE'
    | 'TEMPLATE'
    | 'CUSTOM_DASHBOARD'
    | 'BUDGET'
    | 'GCP_RESOURCE'
    | 'CLUSTERRECORD'
    | 'K8S_LABEL'
    | 'K8S_EVENT_YAML_DIFF'
    | 'K8S_RECOMMENDATION'
    | 'CE_ANOMALIES'
    | 'CE_CLUSTER'
    | 'CE_CONNECTOR'
    | 'CE_BATCH'
    | 'LINKED_ACCOUNT'
  right?:
    | 'ALL'
    | 'CREATE'
    | 'READ'
    | 'UPDATE'
    | 'DELETE'
    | 'EXECUTE'
    | 'EXECUTE_WORKFLOW'
    | 'EXECUTE_PIPELINE'
    | 'EXECUTE_WORKFLOW_ROLLBACK'
    | 'DEFAULT'
  value?:
    | 'ALL'
    | 'CREATE'
    | 'READ'
    | 'UPDATE'
    | 'DELETE'
    | 'EXECUTE'
    | 'EXECUTE_WORKFLOW'
    | 'EXECUTE_PIPELINE'
    | 'EXECUTE_WORKFLOW_ROLLBACK'
    | 'DEFAULT'
  key?:
    | 'APPLICATION'
    | 'SERVICE'
    | 'CONFIGURATION'
    | 'CONFIGURATION_OVERRIDE'
    | 'WORKFLOW'
    | 'ENVIRONMENT'
    | 'ROLE'
    | 'DEPLOYMENT'
    | 'ARTIFACT'
    | 'CLOUD'
    | 'USER'
    | 'CD'
    | 'PIPELINE'
    | 'SETTING'
    | 'LIMIT'
    | 'APP_STACK'
    | 'NOTIFICATION_GROUP'
    | 'DELEGATE'
    | 'DELEGATE_SCOPE'
    | 'WHITE_LIST'
    | 'SSO'
    | 'API_KEY'
    | 'PROVISIONER'
    | 'PREFERENCE'
    | 'TEMPLATE'
    | 'CUSTOM_DASHBOARD'
    | 'BUDGET'
    | 'GCP_RESOURCE'
    | 'CLUSTERRECORD'
    | 'K8S_LABEL'
    | 'K8S_EVENT_YAML_DIFF'
    | 'K8S_RECOMMENDATION'
    | 'CE_ANOMALIES'
    | 'CE_CLUSTER'
    | 'CE_CONNECTOR'
    | 'CE_BATCH'
    | 'LINKED_ACCOUNT'
}

export type RestResponseAccountRole = {
  metaData?: {
    [key: string]: Record<string, any>
  }
  resource?: AccountRole
  responseMessages?: ResponseMessage[]
}

export type RestResponseApplicationRole = {
  metaData?: {
    [key: string]: Record<string, any>
  }
  resource?: ApplicationRole
  responseMessages?: ResponseMessage[]
}

export type SwitchAccountRequest = {
  accountId?: string
}

export type RestResponseSwitchAccountResponse = {
  metaData?: {
    [key: string]: Record<string, any>
  }
  resource?: SwitchAccountResponse
  responseMessages?: ResponseMessage[]
}

export type SwitchAccountResponse = {
  requiresReAuthentication?: boolean
}

export type LoginTypeRequest = {
  userName?: string
}

export type SsoRedirectRequest = {
  jwtToken?: string
}

export type RestResponsePageResponseUserInvite = {
  metaData?: {
    [key: string]: Record<string, any>
  }
  resource?: UserInvite[]
  responseMessages?: ResponseMessage[]
}

export type RestResponseUserInvite = {
  metaData?: {
    [key: string]: Record<string, any>
  }
  resource?: UserInvite
  responseMessages?: ResponseMessage[]
}

export type RestResponseListInviteOperationResponse = {
  metaData?: {
    [key: string]: Record<string, any>
  }
  resource?: (
    | 'ACCOUNT_INVITE_ACCEPTED_NEED_PASSWORD'
    | 'ACCOUNT_INVITE_ACCEPTED'
    | 'USER_INVITED_SUCCESSFULLY'
    | 'USER_ALREADY_ADDED'
    | 'USER_ALREADY_INVITED'
    | 'FAIL'
    | 'INVITE_EXPIRED'
    | 'INVITE_INVALID'
  )[]
  responseMessages?: ResponseMessage[]
}

export type RestResponseInviteOperationResponse = {
  metaData?: {
    [key: string]: Record<string, any>
  }
  resource?:
    | 'ACCOUNT_INVITE_ACCEPTED_NEED_PASSWORD'
    | 'ACCOUNT_INVITE_ACCEPTED'
    | 'USER_INVITED_SUCCESSFULLY'
    | 'USER_ALREADY_ADDED'
    | 'USER_ALREADY_INVITED'
    | 'FAIL'
    | 'INVITE_EXPIRED'
    | 'INVITE_INVALID'
  responseMessages?: ResponseMessage[]
}

export type UserInviteDTO = {
  email: string
  token: string
  accountId: string
  name: string
}

export type RestResponseZendeskSsoLoginResponse = {
  metaData?: {
    [key: string]: Record<string, any>
  }
  resource?: ZendeskSsoLoginResponse
  responseMessages?: ResponseMessage[]
}

export type ZendeskSsoLoginResponse = {
  redirectUrl?: string
  userId?: string
}

export type RestResponseTwoFactorAuthenticationSettings = {
  metaData?: {
    [key: string]: Record<string, any>
  }
  resource?: TwoFactorAuthenticationSettings
  responseMessages?: ResponseMessage[]
}

export type TwoFactorAuthenticationSettings = {
  userId?: string
  email?: string
  twoFactorAuthenticationEnabled?: boolean
  mechanism?: 'TOTP'
  totpSecretKey?: string
  totpqrurl?: string
}

export type RestResponseTwoFactorAdminOverrideSettings = {
  metaData?: {
    [key: string]: Record<string, any>
  }
  resource?: TwoFactorAdminOverrideSettings
  responseMessages?: ResponseMessage[]
}

export type TwoFactorAdminOverrideSettings = {
  adminOverrideTwoFactorEnabled?: boolean
}

export type RestResponseVersionPackage = {
  metaData?: {
    [key: string]: Record<string, any>
  }
  resource?: VersionPackage
  responseMessages?: ResponseMessage[]
}

export type RuntimeInfo = {
  primary?: boolean
  primaryVersion?: string
  deployMode?: string
}

export type VersionInfo = {
  version?: string
  buildNo?: string
  gitCommit?: string
  gitBranch?: string
  timestamp?: string
  patch?: string
}

export type VersionPackage = {
  versionInfo?: VersionInfo
  runtimeInfo?: RuntimeInfo
}

export type EntityVersionCollection = {
  uuid: string
  appId: string
  createdBy?: EmbeddedUser
  /*
   * @format int64
   */
  createdAt?: number
  lastUpdatedBy?: EmbeddedUser
  /*
   * @format int64
   */
  lastUpdatedAt: number
  entityType?:
    | 'SERVICE'
    | 'PROVISIONER'
    | 'ENVIRONMENT'
    | 'HOST'
    | 'RELEASE'
    | 'ARTIFACT'
    | 'SSH_USER'
    | 'SSH_PASSWORD'
    | 'SSH_APP_ACCOUNT'
    | 'SSH_KEY_PASSPHRASE'
    | 'SSH_APP_ACCOUNT_PASSOWRD'
    | 'SIMPLE_DEPLOYMENT'
    | 'ORCHESTRATED_DEPLOYMENT'
    | 'PIPELINE'
    | 'WORKFLOW'
    | 'DEPLOYMENT'
    | 'INSTANCE'
    | 'APPLICATION'
    | 'COMMAND'
    | 'CONFIG'
    | 'SERVICE_TEMPLATE'
    | 'INFRASTRUCTURE_MAPPING'
    | 'INFRASTRUCTURE_DEFINITION'
    | 'USER'
    | 'ARTIFACT_STREAM'
    | 'APPDYNAMICS_CONFIGID'
    | 'APPDYNAMICS_APPID'
    | 'APPDYNAMICS_TIERID'
    | 'ELK_CONFIGID'
    | 'ELK_INDICES'
    | 'NEWRELIC_CONFIGID'
    | 'NEWRELIC_APPID'
    | 'SS_SSH_CONNECTION_ATTRIBUTE'
    | 'SS_WINRM_CONNECTION_ATTRIBUTE'
    | 'SUMOLOGIC_CONFIGID'
    | 'SPLUNK_CONFIGID'
    | 'NEWRELIC_MARKER_CONFIGID'
    | 'NEWRELIC_MARKER_APPID'
    | 'API_KEY'
    | 'ACCOUNT'
    | 'APPLICATION_MANIFEST'
    | 'USER_GROUP'
    | 'WHITELISTED_IP'
    | 'CF_AWS_CONFIG_ID'
    | 'VERIFICATION_CONFIGURATION'
    | 'HELM_GIT_CONFIG_ID'
    | 'NOTIFICATION_GROUP'
    | 'HELM_CHART_SPECIFICATION'
    | 'PCF_SERVICE_SPECIFICATION'
    | 'LAMBDA_SPECIFICATION'
    | 'USER_DATA_SPECIFICATION'
    | 'ECS_CONTAINER_SPECIFICATION'
    | 'ECS_SERVICE_SPECIFICATION'
    | 'K8S_CONTAINER_SPECIFICATION'
    | 'CONFIG_FILE'
    | 'SERVICE_COMMAND'
    | 'MANIFEST_FILE'
    | 'SERVICE_VARIABLE'
    | 'TRIGGER'
    | 'ROLE'
    | 'TEMPLATE'
    | 'TEMPLATE_FOLDER'
    | 'SETTING_ATTRIBUTE'
    | 'ENCRYPTED_RECORDS'
    | 'CV_CONFIGURATION'
    | 'TAG'
    | 'CUSTOM_DASHBOARD'
    | 'PIPELINE_GOVERNANCE_STANDARD'
    | 'WORKFLOW_EXECUTION'
    | 'SERVERLESS_INSTANCE'
    | 'USER_INVITE'
    | 'LOGIN_SETTINGS'
    | 'SSO_SETTINGS'
    | 'DELEGATE'
    | 'DELEGATE_SCOPE'
    | 'DELEGATE_PROFILE'
    | 'EXPORT_EXECUTIONS_REQUEST'
    | 'GCP_CONFIG'
    | 'GIT_CONFIG'
    | 'JENKINS_SERVER'
    | 'SECRETS_MANAGER'
    | 'HELM_CHART'
    | 'SECRET'
    | 'CONNECTOR'
    | 'CLOUD_PROVIDER'
    | 'GOVERNANCE_FREEZE_CONFIG'
    | 'GOVERNANCE_CONFIG'
    | 'EVENT_RULE'
  entityName?: string
  changeType?: 'CREATED' | 'UPDATED'
  entityUuid?: string
  entityParentUuid?: string
  entityData?: string
  /*
   * @format int32
   */
  version?: number
  accountId?: string
}

export type RestResponsePageResponseEntityVersionCollection = {
  metaData?: {
    [key: string]: Record<string, any>
  }
  resource?: EntityVersionCollection[]
  responseMessages?: ResponseMessage[]
}

export type WebHookRequest = {
  application?: string
  artifacts?: {
    [key: string]: Record<string, any>
  }[]
  manifests?: {
    [key: string]: Record<string, any>
  }[]
  parameters?: {
    [key: string]: string
  }
}

export type RestResponseWhitelist = {
  metaData?: {
    [key: string]: Record<string, any>
  }
  resource?: Whitelist
  responseMessages?: ResponseMessage[]
}

export type Whitelist = {
  uuid: string
  appId: string
  createdBy?: EmbeddedUser
  /*
   * @format int64
   */
  createdAt?: number
  lastUpdatedBy?: EmbeddedUser
  /*
   * @format int64
   */
  lastUpdatedAt: number
  accountId?: string
  description?: string
  status?: 'ACTIVE' | 'DISABLED'
  filter?: string
}

export type RestResponsePageResponseWhitelist = {
  metaData?: {
    [key: string]: Record<string, any>
  }
  resource?: Whitelist[]
  responseMessages?: ResponseMessage[]
}

export type RestResponseWorkflowPhase = {
  metaData?: {
    [key: string]: Record<string, any>
  }
  resource?: WorkflowPhase
  responseMessages?: ResponseMessage[]
}

export type RestResponseWorkflow = {
  metaData?: {
    [key: string]: Record<string, any>
  }
  resource?: Workflow
  responseMessages?: ResponseMessage[]
}

export type WorkflowVersion = {
  /*
   * @format int32
   */
  defaultVersion?: number
}

export type RestResponsePageResponseWorkflow = {
  metaData?: {
    [key: string]: Record<string, any>
  }
  resource?: Workflow[]
  responseMessages?: ResponseMessage[]
}

export type RestResponseWorkflowCategorySteps = {
  metaData?: {
    [key: string]: Record<string, any>
  }
  resource?: WorkflowCategorySteps
  responseMessages?: ResponseMessage[]
}

export type WorkflowCategorySteps = {
  steps?: {
    [key: string]: WorkflowStepMeta
  }
  categories?: WorkflowCategoryStepsMeta[]
}

export type WorkflowCategoryStepsMeta = {
  id?: string
  name?: string
  stepIds?: string[]
}

export type WorkflowStepMeta = {
  name?: string
  favorite?: boolean
  available?: boolean
}

export type RestResponseConcurrencyStrategy = {
  metaData?: {
    [key: string]: Record<string, any>
  }
  resource?: ConcurrencyStrategy
  responseMessages?: ResponseMessage[]
}

export type RestResponseListVariable = {
  metaData?: {
    [key: string]: Record<string, any>
  }
  resource?: Variable[]
  responseMessages?: ResponseMessage[]
}

export type RestResponseListInstanceElement = {
  metaData?: {
    [key: string]: Record<string, any>
  }
  resource?: InstanceElement[]
  responseMessages?: ResponseMessage[]
}

export type RestResponseTrafficShiftMetadata = {
  metaData?: {
    [key: string]: Record<string, any>
  }
  resource?: TrafficShiftMetadata
  responseMessages?: ResponseMessage[]
}

export type TrafficShiftMetadata = {
  phaseIdsWithTrafficShift?: string[]
}

export type RestResponsePhaseStep = {
  metaData?: {
    [key: string]: Record<string, any>
  }
  resource?: PhaseStep
  responseMessages?: ResponseMessage[]
}

export type RestResponseListNotificationRule = {
  metaData?: {
    [key: string]: Record<string, any>
  }
  resource?: NotificationRule[]
  responseMessages?: ResponseMessage[]
}

export type Alert = {
  uuid: string
  appId: string
  /*
   * @format int64
   */
  createdAt?: number
  /*
   * @format int64
   */
  lastUpdatedAt: number
  accountId?: string
  type?:
    | 'ApprovalNeeded'
    | 'ManualInterventionNeeded'
    | 'NoActiveDelegates'
    | 'NoInstalledDelegates'
    | 'DelegatesDown'
    | 'DelegatesScalingGroupDownAlert'
    | 'DelegateProfileError'
    | 'NoEligibleDelegates'
    | 'PerpetualTaskAlert'
    | 'InvalidKMS'
    | 'GitSyncError'
    | 'GitConnectionError'
    | 'INVALID_SMTP_CONFIGURATION'
    | 'EMAIL_NOT_SENT_ALERT'
    | 'USERGROUP_SYNC_FAILED'
    | 'USAGE_LIMIT_EXCEEDED'
    | 'INSTANCE_USAGE_APPROACHING_LIMIT'
    | 'RESOURCE_USAGE_APPROACHING_LIMIT'
    | 'DEPLOYMENT_RATE_APPROACHING_LIMIT'
    | 'SETTING_ATTRIBUTE_VALIDATION_FAILED'
    | 'ARTIFACT_COLLECTION_FAILED'
    | 'CONTINUOUS_VERIFICATION_ALERT'
    | 'CONTINUOUS_VERIFICATION_DATA_COLLECTION_ALERT'
    | 'MANIFEST_COLLECTION_FAILED'
    | 'DEPLOYMENT_FREEZE_EVENT'
  status?: 'Open' | 'Closed' | 'Pending'
  title?: string
  resolutionTitle?: string
  category?: 'All' | 'Setup' | 'Approval' | 'ManualIntervention' | 'ContinuousVerification'
  severity?: 'Warning' | 'Error'
  alertData?: AlertData
  alertReconciliation?: AlertReconciliation
  /*
   * @format int64
   */
  closedAt?: number
  /*
   * @format int32
   */
  triggerCount?: number
  /*
   * @format int64
   */
  lastTriggeredAt?: number
  /*
   * @format date-time
   */
  validUntil?: string
  /*
   * @format int64
   */
  cvCleanUpIteration?: number
}

export type AlertData = Record<string, any>

export type AlertReconciliation = {
  needed?: boolean
  /*
   * @format int64
   */
  nextIteration?: number
}

export type RestResponsePageResponseAlert = {
  metaData?: {
    [key: string]: Record<string, any>
  }
  resource?: Alert[]
  responseMessages?: ResponseMessage[]
}

export type AlertRiskDetail = {
  metricName?: string
  txnName?: string
}

export type ContinuousVerificationAlertData = {
  cvConfiguration?: CVConfiguration
  mlAnalysisType?: 'TIME_SERIES' | 'LOG_CLUSTER' | 'LOG_ML' | 'FEEDBACK_ANALYSIS'
  alertStatus?: 'Open' | 'Closed' | 'Pending'
  logAnomaly?: string
  tag?: string
  /*
   * @uniqueItems true
   */
  hosts?: string[]
  portalUrl?: string
  accountId?: string
  highRiskTxns?: AlertRiskDetail[]
  /*
   * @format double
   */
  riskScore?: number
  /*
   * @format int64
   */
  analysisStartTime?: number
  /*
   * @format int64
   */
  analysisEndTime?: number
}

export type AlertType = {
  alertType?:
    | 'ApprovalNeeded'
    | 'ManualInterventionNeeded'
    | 'NoActiveDelegates'
    | 'NoInstalledDelegates'
    | 'DelegatesDown'
    | 'DelegatesScalingGroupDownAlert'
    | 'DelegateProfileError'
    | 'NoEligibleDelegates'
    | 'PerpetualTaskAlert'
    | 'InvalidKMS'
    | 'GitSyncError'
    | 'GitConnectionError'
    | 'INVALID_SMTP_CONFIGURATION'
    | 'EMAIL_NOT_SENT_ALERT'
    | 'USERGROUP_SYNC_FAILED'
    | 'USAGE_LIMIT_EXCEEDED'
    | 'INSTANCE_USAGE_APPROACHING_LIMIT'
    | 'RESOURCE_USAGE_APPROACHING_LIMIT'
    | 'DEPLOYMENT_RATE_APPROACHING_LIMIT'
    | 'SETTING_ATTRIBUTE_VALIDATION_FAILED'
    | 'ARTIFACT_COLLECTION_FAILED'
    | 'CONTINUOUS_VERIFICATION_ALERT'
    | 'CONTINUOUS_VERIFICATION_DATA_COLLECTION_ALERT'
    | 'MANIFEST_COLLECTION_FAILED'
    | 'DEPLOYMENT_FREEZE_EVENT'
  category?: 'All' | 'Setup' | 'Approval' | 'ManualIntervention' | 'ContinuousVerification'
  severity?: 'Warning' | 'Error'
}

export type RestResponseListAlertType = {
  metaData?: {
    [key: string]: Record<string, any>
  }
  resource?: AlertType[]
  responseMessages?: ResponseMessage[]
}

export type Response = {
  status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
  data?: Record<string, any>
  metaData?: Record<string, any>
  correlationId?: string
}

export type ResponseBoolean = {
  status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
  data?: boolean
  metaData?: Record<string, any>
  correlationId?: string
}

export type ResponseString = {
  status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
  data?: string
  metaData?: Record<string, any>
  correlationId?: string
}

export type K8sEventCollectionBundle = {
  connectorIdentifier: string
  orgIdentifier?: string
  projectIdentifier?: string
  clusterId?: string
  cloudProviderId?: string
  clusterName?: string
}

export type PerpetualTaskClientContext = {
  clientId?: string
  clientParams?: {
    [key: string]: string
  }
  executionBundle?: string[]
  /*
   * @format int64
   */
  lastContextUpdated?: number
}

export type PerpetualTaskRecord = {
  uuid?: string
  accountId?: string
  perpetualTaskType?: string
  clientContext?: PerpetualTaskClientContext
  /*
   * @format int64
   */
  intervalSeconds?: number
  /*
   * @format int64
   */
  timeoutMillis?: number
  delegateId?: string
  taskDescription?: string
  state?:
    | 'TASK_UNASSIGNED'
    | 'TASK_TO_REBALANCE'
    | 'TASK_PAUSED'
    | 'TASK_ASSIGNED'
    | 'NO_DELEGATE_INSTALLED'
    | 'NO_DELEGATE_AVAILABLE'
    | 'NO_ELIGIBLE_DELEGATES'
    | 'TASK_RUN_SUCCEEDED'
    | 'TASK_RUN_FAILED'
  unassignedReason?:
    | 'NO_DELEGATE_INSTALLED'
    | 'NO_DELEGATE_AVAILABLE'
    | 'NO_ELIGIBLE_DELEGATES'
    | 'MULTIPLE_FAILED_PERPETUAL_TASK'
  /*
   * @format int64
   */
  lastHeartbeat?: number
  assignerIterations?: number[]
  /*
   * @format int64
   */
  rebalanceIteration?: number
  /*
   * @format int32
   */
  assignTryCount?: number
  /*
   * @format int64
   */
  assignAfterMs?: number
  /*
   * @format int64
   */
  lastUpdatedAt?: number
  /*
   * @format int64
   */
  createdAt?: number
  /*
   * @format int64
   */
  failedExecutionCount?: number
}

export type ResponsePerpetualTaskRecord = {
  status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
  data?: PerpetualTaskRecord
  metaData?: Record<string, any>
  correlationId?: string
}

export type CommandLibraryConfigurationDTO = {
  supportedCommandStoreNameList?: string[]
  /*
   * @format int32
   */
  clImplementationVersion?: number
}

export type RestResponseCommandLibraryConfigurationDTO = {
  metaData?: {
    [key: string]: Record<string, any>
  }
  resource?: CommandLibraryConfigurationDTO
  responseMessages?: ResponseMessage[]
}

export type ArtifactSource = Record<string, any>

export type ArtifactSourceTemplate = BaseTemplate & {
  artifactSource?: ArtifactSource
}

export type AttributeMapping = {
  relativePath?: string
  mappedAttribute?: string
}

export type BaseTemplate = Record<string, any>

export type CommandRefYaml = Yaml & {
  variables?: TemplateVariableYaml[]
  templateUri?: string
}

export type CustomArtifactSourceTemplate = ArtifactSource & {
  script?: string
  timeoutSeconds?: string
  customRepositoryMapping?: CustomRepositoryMapping
}

export type CustomDeploymentTypeTemplate = BaseTemplate & {
  fetchInstanceScript?: string
  hostObjectArrayPath?: string
  hostAttributes?: {
    [key: string]: string
  }
}

export type CustomRepositoryMapping = {
  artifactRoot?: string
  buildNoPath?: string
  artifactAttributes?: AttributeMapping[]
}

export type HttpTemplate = BaseTemplate & {
  url?: string
  method?: string
  header?: string
  headers?: KeyValuePair[]
  body?: string
  assertion?: string
  executeWithPreviousSteps?: boolean
  /*
   * @format int32
   */
  timeoutMillis?: number
}

export type ImportedCommand = {
  commandStoreName?: string
  commandName?: string
  templateId?: string
  name?: string
  appId?: string
  description?: string
  createdAt?: string
  createdBy?: string
  repoUrl?: string
  /*
   * @uniqueItems true
   */
  tags?: string[]
  importedCommandVersionList?: ImportedCommandVersion[]
  highestVersion?: string
}

export type ImportedCommandVersion = {
  commandStoreName?: string
  commandName?: string
  commandDisplayName?: string
  templateId?: string
  version?: string
  description?: string
  yamlContent?: string
  templateObject?: BaseTemplate
  variables?: Variable[]
  createdAt?: string
  createdBy?: string
}

export type PcfCommandTemplate = BaseTemplate & {
  scriptString?: string
  /*
   * @format int32
   */
  timeoutIntervalInMinutes?: number
}

export type ReferencedTemplate = {
  templateReference?: TemplateReference
  variableMapping?: {
    [key: string]: Variable
  }
}

export type RestResponseListImportedCommand = {
  metaData?: {
    [key: string]: Record<string, any>
  }
  resource?: ImportedCommand[]
  responseMessages?: ResponseMessage[]
}

export type ShellScriptTemplate = BaseTemplate & {
  scriptType?: string
  scriptString?: string
  outputVars?: string
  secretOutputVars?: string
  /*
   * @format int32
   */
  timeoutMillis?: number
}

export type SshCommandTemplate = BaseTemplate & {
  commandType?: 'START' | 'STOP' | 'INSTALL' | 'ENABLE' | 'DISABLE' | 'VERIFY' | 'OTHER' | 'RESIZE' | 'SETUP'
  commands?: Yaml[]
  commandUnits?: CommandUnit[]
  referencedTemplateList?: ReferencedTemplate[]
}

export type TemplateVariableYaml = {
  name?: string
  description?: string
  value?: string
}

export type Yaml = {
  name?: string
  commandUnitType?: string
  deploymentType?: string
}

export type RestResponseImportedCommand = {
  metaData?: {
    [key: string]: Record<string, any>
  }
  resource?: ImportedCommand
  responseMessages?: ResponseMessage[]
}

export type RestResponseTemplate = {
  metaData?: {
    [key: string]: Record<string, any>
  }
  resource?: Template
  responseMessages?: ResponseMessage[]
}

export type Template = {
  uuid: string
  appId: string
  createdBy?: EmbeddedUser
  /*
   * @format int64
   */
  createdAt?: number
  lastUpdatedBy?: EmbeddedUser
  /*
   * @format int64
   */
  lastUpdatedAt: number
  name: string
  accountId?: string
  type?: string
  folderId?: string
  /*
   * @format int64
   */
  version?: number
  versionDetails?: string
  description?: string
  folderPathId?: string
  folderPath?: string
  gallery?: string
  templateObject: BaseTemplate
  variables?: Variable[]
  versionedTemplate?: VersionedTemplate
  galleryId?: string
  referencedTemplateId?: string
  /*
   * @format int64
   */
  referencedTemplateVersion?: number
  importedTemplateDetails?: ImportedTemplateDetails
  templateMetadata?: TemplateMetadata
  referencedTemplateUri?: string
  /*
   * @uniqueItems true
   */
  keywords?: string[]
}

export type VersionedTemplate = {
  templateId?: string
  /*
   * @format int64
   */
  version?: number
  importedTemplateVersion?: string
  accountId?: string
  galleryId?: string
  templateObject: BaseTemplate
  variables?: Variable[]
  uuid: string
  appId: string
  createdBy?: EmbeddedUser
  /*
   * @format int64
   */
  createdAt?: number
  lastUpdatedBy?: EmbeddedUser
  /*
   * @format int64
   */
  lastUpdatedAt: number
}

export type CustomDeploymentTypeDTO = {
  uuid?: string
  name?: string
  infraVariables?: Variable[]
}

export type RestResponseCustomDeploymentTypeDTO = {
  metaData?: {
    [key: string]: Record<string, any>
  }
  resource?: CustomDeploymentTypeDTO
  responseMessages?: ResponseMessage[]
}

export type RestResponseListCustomDeploymentTypeDTO = {
  metaData?: {
    [key: string]: Record<string, any>
  }
  resource?: CustomDeploymentTypeDTO[]
  responseMessages?: ResponseMessage[]
}

export type HarnessCDCurrentGenEventMetadata = {
  accountId?: string
  appId?: string
  serviceId?: string
  environmentId?: string
  workflowId?: string
  status?: string
  /*
   * @format int64
   */
  workflowStartTime?: number
  /*
   * @format int64
   */
  workflowEndTime?: number
  workflowExecutionId?: string
  name?: string
  artifactType?: string
  artifactName?: string
}

export type RestResponseListHarnessCDCurrentGenEventMetadata = {
  metaData?: {
    [key: string]: Record<string, any>
  }
  resource?: HarnessCDCurrentGenEventMetadata[]
  responseMessages?: ResponseMessage[]
}

export type AppDynamicsConnectorDTO = ConnectorConfigDTO & {
  username?: string
  accountname: string
  controllerUrl: string
  /*
   * @uniqueItems true
   */
  delegateSelectors?: string[]
  passwordRef?: string
  clientSecretRef?: string
  clientId?: string
  authType?: 'UsernamePassword' | 'ApiClientToken'
}

export type ArtifactoryAuthCredentials = Record<string, any>

export type ArtifactoryAuthentication = {
  type: 'UsernamePassword' | 'Anonymous'
  spec?: ArtifactoryAuthCredentials
}

export type ArtifactoryConnector = ConnectorConfigDTO & {
  artifactoryServerUrl: string
  auth?: ArtifactoryAuthentication
  /*
   * @uniqueItems true
   */
  delegateSelectors?: string[]
}

export type ArtifactoryUsernamePasswordAuth = ArtifactoryAuthCredentials & {
  username?: string
  usernameRef?: string
  passwordRef: string
}

export type AwsCodeCommitAuthenticationDTO = {
  type: 'HTTPS'
  spec: AwsCodeCommitCredentialsDTO
}

export type AwsCodeCommitConnectorDTO = ConnectorConfigDTO & {
  url: string
  authentication: AwsCodeCommitAuthenticationDTO
  /*
   * @uniqueItems true
   */
  delegateSelectors?: string[]
  type: 'Repo' | 'Region'
}

export type AwsCodeCommitCredentialsDTO = Record<string, any>

export type AwsCodeCommitHttpsCredentialsDTO = AwsCodeCommitCredentialsDTO & {
  type: 'AWSCredentials'
  spec: AwsCodeCommitHttpsCredentialsSpecDTO
}

export type AwsCodeCommitHttpsCredentialsSpecDTO = Record<string, any>

export type AwsCodeCommitSecretKeyAccessKeyDTO = AwsCodeCommitHttpsCredentialsSpecDTO & {
  accessKey?: string
  accessKeyRef?: string
  secretKeyRef: string
}

export type AwsConnector = ConnectorConfigDTO & {
  credential: AwsCredential
  /*
   * @uniqueItems true
   */
  delegateSelectors?: string[]
}

export type AwsCredential = {
  crossAccountAccess?: CrossAccountAccess
  type: 'InheritFromDelegate' | 'ManualConfig' | 'Irsa'
  spec?: AwsCredentialSpec
}

export type AwsCredentialSpec = Record<string, any>

export type AwsCurAttributes = {
  reportName: string
  s3BucketName: string
  region?: string
  s3Prefix?: string
}

export type AwsKmsConnectorCredential = {
  type: 'AssumeIAMRole' | 'AssumeSTSRole' | 'ManualConfig'
  spec?: AwsKmsCredentialSpec
}

export type AwsKmsConnectorDTO = ConnectorConfigDTO & {
  credential?: AwsKmsConnectorCredential
  kmsArn: string
  region?: string
  /*
   * @uniqueItems true
   */
  delegateSelectors?: string[]
  ['default']?: boolean
}

export type AwsKmsCredentialSpec = Record<string, any>

export type AwsKmsCredentialSpecAssumeIAM = AwsKmsCredentialSpec & {
  /*
   * @uniqueItems true
   * @maxItems 2147483647
   * @minItems 1
   */
  delegateSelectors: string[]
}

export type AwsKmsCredentialSpecAssumeSTS = AwsKmsCredentialSpec & {
  /*
   * @uniqueItems true
   * @maxItems 2147483647
   * @minItems 1
   */
  delegateSelectors: string[]
  roleArn: string
  externalName?: string
  /*
   * @format int32
   */
  assumeStsRoleDuration?: number
}

export type AwsKmsCredentialSpecManualConfig = AwsKmsCredentialSpec & {
  accessKey: string
  secretKey: string
}

export type AwsManualConfigSpec = AwsCredentialSpec & {
  accessKey?: string
  accessKeyRef?: string
  secretKeyRef: string
}

export type AwsSMCredentialSpecAssumeIAM = AwsSecretManagerCredentialSpec & Record<string, any>

export type AwsSMCredentialSpecAssumeSTS = AwsSecretManagerCredentialSpec & {
  roleArn: string
  externalId?: string
  /*
   * @format int32
   */
  assumeStsRoleDuration?: number
}

export type AwsSMCredentialSpecManualConfig = AwsSecretManagerCredentialSpec & {
  accessKey: string
  secretKey: string
}

export type AwsSecretManagerCredential = {
  type: 'AssumeIAMRole' | 'AssumeSTSRole' | 'ManualConfig'
  spec?: AwsSecretManagerCredentialSpec
}

export type AwsSecretManagerCredentialSpec = Record<string, any>

export type AwsSecretManagerDTO = ConnectorConfigDTO & {
  credential: AwsSecretManagerCredential
  region: string
  secretNamePrefix?: string
  /*
   * @uniqueItems true
   */
  delegateSelectors?: string[]
  ['default']?: boolean
}

export type AzureKeyVaultConnectorDTO = ConnectorConfigDTO & {
  clientId: string
  secretKey: string
  tenantId: string
  vaultName: string
  subscription: string
  azureEnvironmentType?: 'AZURE' | 'AZURE_US_GOVERNMENT'
  /*
   * @uniqueItems true
   */
  delegateSelectors?: string[]
  ['default']?: boolean
}

export type BillingExportSpec = {
  storageAccountName: string
  containerName: string
  directoryName: string
  reportName: string
  subscriptionId: string
}

export type BitbucketApiAccess = {
  type: 'UsernameToken'
  spec: BitbucketApiAccessSpecDTO
}

export type BitbucketApiAccessSpecDTO = Record<string, any>

export type BitbucketAuthentication = {
  type: 'Http' | 'Ssh'
  spec: BitbucketCredentialsDTO
}

export type BitbucketConnector = ConnectorConfigDTO & {
  url: string
  validationRepo?: string
  authentication: BitbucketAuthentication
  apiAccess?: BitbucketApiAccess
  /*
   * @uniqueItems true
   */
  delegateSelectors?: string[]
  type: 'Account' | 'Repo'
}

export type BitbucketCredentialsDTO = Record<string, any>

export type BitbucketHttpCredentials = BitbucketCredentialsDTO & {
  type: 'UsernamePassword'
  spec: BitbucketHttpCredentialsSpecDTO
}

export type BitbucketHttpCredentialsSpecDTO = Record<string, any>

export type BitbucketSshCredentials = BitbucketCredentialsDTO & {
  sshKeyRef: string
}

export type BitbucketUsernamePassword = BitbucketHttpCredentialsSpecDTO & {
  username?: string
  usernameRef?: string
  passwordRef: string
}

export type BitbucketUsernameTokenApiAccess = BitbucketApiAccessSpecDTO & {
  username?: string
  usernameRef?: string
  tokenRef: string
}

export type CEAwsConnector = ConnectorConfigDTO & {
  crossAccountAccess: CrossAccountAccess
  curAttributes?: AwsCurAttributes
  awsAccountId?: string
  featuresEnabled?: ('BILLING' | 'OPTIMIZATION' | 'VISIBILITY')[]
}

export type CEAzureConnector = ConnectorConfigDTO & {
  featuresEnabled?: ('BILLING' | 'OPTIMIZATION' | 'VISIBILITY')[]
  tenantId: string
  subscriptionId: string
  billingExportSpec?: BillingExportSpec
}

export type CEKubernetesClusterConfig = ConnectorConfigDTO & {
  connectorRef: string
  featuresEnabled?: ('BILLING' | 'OPTIMIZATION' | 'VISIBILITY')[]
}

export type ConnectorConfigDTO = Record<string, any>

export type ConnectorInfoDTO = {
  name: string
  identifier: string
  description?: string
  orgIdentifier?: string
  projectIdentifier?: string
  tags?: {
    [key: string]: string
  }
  type:
    | 'K8sCluster'
    | 'Git'
    | 'Splunk'
    | 'AppDynamics'
    | 'Prometheus'
    | 'Dynatrace'
    | 'Vault'
    | 'AzureKeyVault'
    | 'DockerRegistry'
    | 'Local'
    | 'AwsKms'
    | 'GcpKms'
    | 'AwsSecretManager'
    | 'Gcp'
    | 'Aws'
    | 'Artifactory'
    | 'Jira'
    | 'Nexus'
    | 'Github'
    | 'Gitlab'
    | 'Bitbucket'
    | 'Codecommit'
    | 'CEAws'
    | 'CEAzure'
    | 'GcpCloudCost'
    | 'CEK8sCluster'
    | 'HttpHelmRepo'
    | 'NewRelic'
    | 'Datadog'
    | 'SumoLogic'
    | 'PagerDuty'
    | 'CustomHealth'
    | 'ServiceNow'
    | 'ErrorTracking'
  spec: ConnectorConfigDTO
}

export type CrossAccountAccess = {
  crossAccountRoleArn: string
  externalId?: string
}

export type CustomHealthConnectorDTO = ConnectorConfigDTO & {
  baseURL: string
  headers?: CustomHealthKeyAndValue[]
  params?: CustomHealthKeyAndValue[]
  method: 'GET' | 'POST'
  validationBody?: string
  validationPath?: string
  /*
   * @uniqueItems true
   */
  delegateSelectors?: string[]
}

export type CustomHealthKeyAndValue = {
  key: string
  encryptedValueRef?: SecretRefData
  value?: string
  valueEncrypted?: boolean
}

export type DataCollectionConnectorBundle = {
  connectorIdentifier?: string
  sourceIdentifier?: string
  dataCollectionWorkerId?: string
  connectorDTO?: ConnectorInfoDTO
  dataCollectionType?: 'CV' | 'KUBERNETES'
  projectIdentifier?: string
  orgIdentifier?: string
  serviceIdentifier?: string
  envIdentifier?: string
  monitoredServiceIdentifier?: string
}

export type DatadogConnectorDTO = ConnectorConfigDTO & {
  url: string
  applicationKeyRef: string
  apiKeyRef: string
  /*
   * @uniqueItems true
   */
  delegateSelectors?: string[]
}

export type DockerAuthCredentialsDTO = Record<string, any>

export type DockerAuthenticationDTO = {
  type: 'UsernamePassword' | 'Anonymous'
  spec?: DockerAuthCredentialsDTO
}

export type DockerConnectorDTO = ConnectorConfigDTO & {
  dockerRegistryUrl: string
  providerType: 'DockerHub' | 'Harbor' | 'Quay' | 'Other'
  auth?: DockerAuthenticationDTO
  /*
   * @uniqueItems true
   */
  delegateSelectors?: string[]
}

export type DockerUserNamePasswordDTO = DockerAuthCredentialsDTO & {
  username?: string
  usernameRef?: string
  passwordRef: string
}

export type DynatraceConnectorDTO = ConnectorConfigDTO & {
  url: string
  apiTokenRef: string
  /*
   * @uniqueItems true
   */
  delegateSelectors?: string[]
}

export type ErrorTrackingConnectorDTO = ConnectorConfigDTO & {
  url: string
  apiKeyRef: string
  /*
   * @uniqueItems true
   */
  delegateSelectors?: string[]
}

export type GcpBillingExportSpec = {
  datasetId: string
  tableId: string
}

export type GcpCloudCostConnector = ConnectorConfigDTO & {
  featuresEnabled?: ('BILLING' | 'OPTIMIZATION' | 'VISIBILITY')[]
  projectId: string
  serviceAccountEmail: string
  billingExportSpec?: GcpBillingExportSpec
}

export type GcpConnector = ConnectorConfigDTO & {
  credential?: GcpConnectorCredential
  /*
   * @uniqueItems true
   */
  delegateSelectors?: string[]
}

export type GcpConnectorCredential = {
  type: 'InheritFromDelegate' | 'ManualConfig'
  spec?: GcpCredentialSpec
}

export type GcpCredentialSpec = Record<string, any>

export type GcpKmsConnectorDTO = ConnectorConfigDTO & {
  projectId?: string
  region?: string
  keyRing?: string
  keyName?: string
  credentials: string
  /*
   * @uniqueItems true
   */
  delegateSelectors?: string[]
  ['default']?: boolean
}

export type GcpManualDetails = GcpCredentialSpec & {
  secretKeyRef: string
}

export type GitAuthenticationDTO = Record<string, any>

export type GitConfigDTO = ConnectorConfigDTO & {
  url: string
  validationRepo?: string
  branchName?: string
  /*
   * @uniqueItems true
   */
  delegateSelectors?: string[]
  executeOnDelegate?: boolean
  type: 'Http' | 'Ssh'
  connectionType: 'Account' | 'Repo'
  spec: GitAuthenticationDTO
}

export type GitHTTPAuthenticationDTO = GitAuthenticationDTO & {
  username?: string
  usernameRef?: string
  passwordRef: string
}

export type GitSSHAuthenticationDTO = GitAuthenticationDTO & {
  sshKeyRef: string
}

export type GithubApiAccess = {
  type: 'GithubApp' | 'Token'
  spec?: GithubApiAccessSpecDTO
}

export type GithubApiAccessSpecDTO = Record<string, any>

export type GithubAppSpec = GithubApiAccessSpecDTO & {
  installationId: string
  applicationId: string
  privateKeyRef: string
}

export type GithubAuthentication = {
  type: 'Http' | 'Ssh'
  spec: GithubCredentialsDTO
}

export type GithubConnector = ConnectorConfigDTO & {
  url: string
  validationRepo?: string
  authentication: GithubAuthentication
  apiAccess?: GithubApiAccess
  /*
   * @uniqueItems true
   */
  delegateSelectors?: string[]
  executeOnDelegate?: boolean
  type: 'Account' | 'Repo'
}

export type GithubCredentialsDTO = Record<string, any>

export type GithubHttpCredentials = GithubCredentialsDTO & {
  type: 'UsernamePassword' | 'UsernameToken'
  spec: GithubHttpCredentialsSpecDTO
}

export type GithubHttpCredentialsSpecDTO = Record<string, any>

export type GithubSshCredentials = GithubCredentialsDTO & {
  sshKeyRef: string
}

export type GithubTokenSpec = GithubApiAccessSpecDTO & {
  tokenRef: string
}

export type GithubUsernamePassword = GithubHttpCredentialsSpecDTO & {
  username?: string
  usernameRef?: string
  passwordRef: string
}

export type GithubUsernameToken = GithubHttpCredentialsSpecDTO & {
  username?: string
  usernameRef?: string
  tokenRef: string
}

export type GitlabApiAccess = {
  type: 'Token'
  spec?: GitlabApiAccessSpecDTO
}

export type GitlabApiAccessSpecDTO = Record<string, any>

export type GitlabAuthentication = {
  type: 'Http' | 'Ssh'
  spec: GitlabCredentialsDTO
}

export type GitlabConnector = ConnectorConfigDTO & {
  url: string
  validationRepo?: string
  authentication: GitlabAuthentication
  apiAccess?: GitlabApiAccess
  /*
   * @uniqueItems true
   */
  delegateSelectors?: string[]
  type: 'Account' | 'Repo'
}

export type GitlabCredentialsDTO = Record<string, any>

export type GitlabHttpCredentials = GitlabCredentialsDTO & {
  type: 'UsernamePassword' | 'UsernameToken' | 'Kerberos'
  spec: GitlabHttpCredentialsSpecDTO
}

export type GitlabHttpCredentialsSpecDTO = Record<string, any>

export type GitlabKerberos = GitlabHttpCredentialsSpecDTO & {
  kerberosKeyRef: string
}

export type GitlabSshCredentials = GitlabCredentialsDTO & {
  sshKeyRef: string
}

export type GitlabTokenSpec = GitlabApiAccessSpecDTO & {
  tokenRef: string
}

export type GitlabUsernamePassword = GitlabHttpCredentialsSpecDTO & {
  username?: string
  usernameRef?: string
  passwordRef: string
}

export type GitlabUsernameToken = GitlabHttpCredentialsSpecDTO & {
  username?: string
  usernameRef?: string
  tokenRef: string
}

export type HttpHelmAuthCredentialsDTO = Record<string, any>

export type HttpHelmAuthenticationDTO = {
  type: 'UsernamePassword' | 'Anonymous'
  spec?: HttpHelmAuthCredentialsDTO
}

export type HttpHelmConnectorDTO = ConnectorConfigDTO & {
  helmRepoUrl: string
  auth?: HttpHelmAuthenticationDTO
  /*
   * @uniqueItems true
   */
  delegateSelectors?: string[]
}

export type HttpHelmUsernamePasswordDTO = HttpHelmAuthCredentialsDTO & {
  username?: string
  usernameRef?: string
  passwordRef: string
}

export type JiraConnector = ConnectorConfigDTO & {
  jiraUrl: string
  username?: string
  usernameRef?: string
  passwordRef: string
  /*
   * @uniqueItems true
   */
  delegateSelectors?: string[]
}

export type KubernetesAuthCredentialDTO = Record<string, any>

export type KubernetesAuthDTO = {
  type: 'UsernamePassword' | 'ClientKeyCert' | 'ServiceAccount' | 'OpenIdConnect'
  spec: KubernetesAuthCredentialDTO
}

export type KubernetesClientKeyCertDTO = KubernetesAuthCredentialDTO & {
  caCertRef?: string
  clientCertRef: string
  clientKeyRef: string
  clientKeyPassphraseRef?: string
  clientKeyAlgo?: string
}

export type KubernetesClusterConfigDTO = ConnectorConfigDTO & {
  credential: KubernetesCredentialDTO
  /*
   * @uniqueItems true
   */
  delegateSelectors?: string[]
}

export type KubernetesClusterDetailsDTO = KubernetesCredentialSpecDTO & {
  masterUrl: string
  auth: KubernetesAuthDTO
}

export type KubernetesCredentialDTO = {
  type: 'InheritFromDelegate' | 'ManualConfig'
  spec?: KubernetesCredentialSpecDTO
}

export type KubernetesCredentialSpecDTO = Record<string, any>

export type KubernetesOpenIdConnectDTO = KubernetesAuthCredentialDTO & {
  oidcIssuerUrl?: string
  oidcUsername?: string
  oidcUsernameRef?: string
  oidcClientIdRef: string
  oidcPasswordRef: string
  oidcSecretRef?: string
  oidcScopes?: string
}

export type KubernetesServiceAccountDTO = KubernetesAuthCredentialDTO & {
  serviceAccountTokenRef: string
  caCertRef?: string
}

export type KubernetesUserNamePasswordDTO = KubernetesAuthCredentialDTO & {
  username?: string
  usernameRef?: string
  passwordRef: string
}

export type LocalConnectorDTO = ConnectorConfigDTO & {
  ['default']?: boolean
}

export type NewRelicConnectorDTO = ConnectorConfigDTO & {
  newRelicAccountId: string
  url: string
  apiKeyRef: string
  /*
   * @uniqueItems true
   */
  delegateSelectors?: string[]
}

export type NexusAuthCredentials = Record<string, any>

export type NexusAuthentication = {
  type: 'UsernamePassword' | 'Anonymous'
  spec?: NexusAuthCredentials
}

export type NexusConnector = ConnectorConfigDTO & {
  nexusServerUrl: string
  version: string
  auth?: NexusAuthentication
  /*
   * @uniqueItems true
   */
  delegateSelectors?: string[]
}

export type NexusUsernamePasswordAuth = NexusAuthCredentials & {
  username?: string
  usernameRef?: string
  passwordRef: string
}

export type PagerDutyConnectorDTO = ConnectorConfigDTO & {
  apiTokenRef: string
  /*
   * @uniqueItems true
   */
  delegateSelectors?: string[]
}

export type PrometheusConnectorDTO = ConnectorConfigDTO & {
  url: string
  /*
   * @uniqueItems true
   */
  delegateSelectors?: string[]
}

export type SecretRefData = {
  identifier?: string
  scope?: 'account' | 'org' | 'project' | 'unknown'
  decryptedValue?: string[]
  ['null']?: boolean
}

export type ServiceNowConnector = ConnectorConfigDTO & {
  serviceNowUrl: string
  username?: string
  usernameRef?: string
  passwordRef: string
  /*
   * @uniqueItems true
   */
  delegateSelectors?: string[]
}

export type SplunkConnectorDTO = {
  splunkUrl: string
  username?: string
  accountId: string
  /*
   * @uniqueItems true
   */
  delegateSelectors?: string[]
  passwordRef: string
}

export type SumoLogicConnectorDTO = ConnectorConfigDTO & {
  url: string
  accessIdRef: string
  accessKeyRef: string
  /*
   * @uniqueItems true
   */
  delegateSelectors?: string[]
}

export type VaultConnectorDTO = ConnectorConfigDTO & {
  authToken?: string
  basePath?: string
  vaultUrl?: string
  /*
   * @format int64
   */
  renewalIntervalMinutes?: number
  secretEngineManuallyConfigured?: boolean
  secretEngineName?: string
  appRoleId?: string
  secretId?: string
  /*
   * @format int32
   */
  secretEngineVersion?: number
  /*
   * @uniqueItems true
   */
  delegateSelectors?: string[]
  namespace?: string
  sinkPath?: string
  useVaultAgent?: boolean
  useAwsIam?: boolean
  awsRegion?: string
  vaultAwsIamRole?: string
  xvaultAwsIamServerId?: string
  ['default']?: boolean
  readOnly?: boolean
  accessType?: 'APP_ROLE' | 'TOKEN' | 'VAULT_AGENT' | 'AWS_IAM'
}

export type CVNGPerpetualTaskDTO = {
  delegateId?: string
  accountId?: string
  cvngPerpetualTaskUnassignedReason?:
    | 'NO_DELEGATE_INSTALLED'
    | 'NO_DELEGATE_AVAILABLE'
    | 'NO_ELIGIBLE_DELEGATES'
    | 'MULTIPLE_FAILED_PERPETUAL_TASK'
  cvngPerpetualTaskState?: 'TASK_UNASSIGNED' | 'TASK_TO_REBALANCE' | 'TASK_PAUSED' | 'TASK_ASSIGNED'
}

export type RestResponseCVNGPerpetualTaskDTO = {
  metaData?: {
    [key: string]: Record<string, any>
  }
  resource?: CVNGPerpetualTaskDTO
  responseMessages?: ResponseMessage[]
}

export type DataCollectionRequest = {
  connectorInfoDTO?: ConnectorInfoDTO
  tracingId?: string
  type?:
    | 'SPLUNK_SAVED_SEARCHES'
    | 'SPLUNK_SAMPLE_DATA'
    | 'SPLUNK_LATEST_HISTOGRAM'
    | 'STACKDRIVER_DASHBOARD_LIST'
    | 'STACKDRIVER_DASHBOARD_GET'
    | 'STACKDRIVER_SAMPLE_DATA'
    | 'STACKDRIVER_LOG_SAMPLE_DATA'
    | 'APPDYNAMICS_FETCH_APPS'
    | 'APPDYNAMICS_FETCH_TIERS'
    | 'APPDYNAMICS_GET_METRIC_DATA'
    | 'APPDYNAMICS_GET_SINGLE_METRIC_DATA'
    | 'APPDYNAMICS_FETCH_METRIC_STRUCTURE'
    | 'NEWRELIC_APPS_REQUEST'
    | 'NEWRELIC_VALIDATION_REQUEST'
    | 'PROMETHEUS_METRIC_LIST_GET'
    | 'PROMETHEUS_LABEL_NAMES_GET'
    | 'PROMETHEUS_LABEL_VALUES_GET'
    | 'PROMETHEUS_SAMPLE_DATA'
    | 'PAGERDUTY_SERVICES'
    | 'PAGERDUTY_REGISTER_WEBHOOK'
    | 'PAGERDUTY_DELETE_WEBHOOK'
    | 'DATADOG_DASHBOARD_LIST'
    | 'DATADOG_DASHBOARD_DETAILS'
    | 'DATADOG_METRIC_TAGS'
    | 'DATADOG_ACTIVE_METRICS'
    | 'DATADOG_TIME_SERIES_POINTS'
    | 'DATADOG_LOG_SAMPLE_DATA'
    | 'DATADOG_LOG_INDEXES'
    | 'NEWRELIC_SAMPLE_FETCH_REQUEST'
    | 'SYNC_DATA_COLLECTION'
    | 'CUSTOM_HEALTH_SAMPLE_DATA'
    | 'DYNATRACE_SERVICE_LIST_REQUEST'
    | 'DYNATRACE_SERVICE_DETAILS_REQUEST'
    | 'DYNATRACE_VALIDATION_REQUEST'
    | 'DYNATRACE_SAMPLE_DATA_REQUEST'
    | 'DYNATRACE_METRIC_LIST_REQUEST'
  dsl?: string
  baseUrl?: string
}

export type RestResponseListSplunkSavedSearch = {
  metaData?: {
    [key: string]: Record<string, any>
  }
  resource?: SplunkSavedSearch[]
  responseMessages?: ResponseMessage[]
}

export type SplunkSavedSearch = {
  title?: string
  searchQuery?: string
}

export type Bar = {
  /*
   * @format int64
   */
  timestamp?: number
  /*
   * @format int64
   */
  count?: number
}

export type Histogram = {
  query?: string
  /*
   * @format int64
   */
  intervalMs?: number
  bars?: Bar[]
  errorMessage?: string
  splunkQuery?: string
  /*
   * @format int64
   */
  count?: number
}

export type RestResponseSplunkValidationResponse = {
  metaData?: {
    [key: string]: Record<string, any>
  }
  resource?: SplunkValidationResponse
  responseMessages?: ResponseMessage[]
}

export type SampleLog = {
  raw?: string
  /*
   * @format int64
   */
  timestamp?: number
}

export type SplunkSampleResponse = {
  rawSampleLogs?: SampleLog[]
  sample?: {
    [key: string]: string
  }
  splunkQuery?: string
  errorMessage?: string
}

export type SplunkValidationResponse = {
  histogram?: Histogram
  samples?: SplunkSampleResponse
  errorMessage?: string
  /*
   * @format int64
   */
  queryDurationMillis?: number
}

export type DashboardAccessPermissions = {
  userGroups?: string[]
  allowedActions?: ('READ' | 'UPDATE' | 'DELETE' | 'MANAGE')[]
}

export type DashboardSettings = {
  createdBy?: EmbeddedUser
  /*
   * @format int64
   */
  createdAt?: number
  /*
   * @format int64
   */
  lastUpdatedAt?: number
  accountId?: string
  data?: string
  description?: string
  name?: string
  canUpdate?: boolean
  canDelete?: boolean
  canManage?: boolean
  permissions?: DashboardAccessPermissions[]
  uuid: string
  shared?: boolean
  owner?: boolean
}

export type RestResponseDashboardSettings = {
  metaData?: {
    [key: string]: Record<string, any>
  }
  resource?: DashboardSettings
  responseMessages?: ResponseMessage[]
}

export type RestResponsePageResponseDashboardSettings = {
  metaData?: {
    [key: string]: Record<string, any>
  }
  resource?: DashboardSettings[]
  responseMessages?: ResponseMessage[]
}

export type AllAppFilter = ApplicationFilter & {}

export type AllEnvFilter = EnvironmentFilter & {}

export type AllNonProdEnvFilter = EnvironmentFilter & {}

export type AllProdEnvFilter = EnvironmentFilter & {}

export type ApplicationFilter = {
  filterType?: 'ALL' | 'CUSTOM'
  envSelection?: EnvironmentFilter
  serviceSelection?: ServiceFilter
}

export type CustomAppFilter = ApplicationFilter & {
  apps?: string[]
}

export type CustomEnvFilter = EnvironmentFilter & {
  environments?: string[]
}

export type EnvironmentFilter = {
  filterType?: 'ALL_PROD' | 'ALL_NON_PROD' | 'ALL' | 'CUSTOM'
}

export type GovernanceConfig = {
  uuid?: string
  accountId?: string
  appId: string
  deploymentFreeze?: boolean
  lastUpdatedBy?: EmbeddedUser
  timeRangeBasedFreezeConfigs?: TimeRangeBasedFreezeConfig[]
  weeklyFreezeConfigs?: WeeklyFreezeConfig[]
  enableNextIterations?: boolean
  enableNextCloseIterations?: boolean
  nextIterations?: number[]
  nextCloseIterations?: number[]
}

export type RestResponseGovernanceConfig = {
  metaData?: {
    [key: string]: Record<string, any>
  }
  resource?: GovernanceConfig
  responseMessages?: ResponseMessage[]
}

export type ServiceFilter = {
  filterType?: 'ALL' | 'CUSTOM'
  services?: string[]
}

export type TimeRangeBasedFreezeConfig = {
  freezeForAllApps?: boolean
  appIds?: string[]
  environmentTypes?: ('PROD' | 'NON_PROD' | 'ALL')[]
  timeRange?: TimeRange
  name?: string
  description?: string
  applicable?: boolean
  appSelections?: ApplicationFilter[]
  userGroups?: string[]
  uuid?: string
  freezeWindowState?: 'ACTIVE' | 'INACTIVE'
}

export type WeeklyFreezeConfig = {
  freezeForAllApps?: boolean
  appIds?: string[]
  environmentTypes?: ('PROD' | 'NON_PROD' | 'ALL')[]
  weeklyRange?: WeeklyRange
  name?: string
  description?: string
  applicable?: boolean
  appSelections?: ApplicationFilter[]
  userGroups?: string[]
  uuid?: string
}

export type WeeklyRange = {
  endDay?: string
  endTime?: string
  startDay?: string
  startTime?: string
  timeZone?: string
}

export type DeploymentFreezeInfo = {
  freezeAll?: boolean
  /*
   * @uniqueItems true
   */
  allEnvFrozenApps?: string[]
  appEnvs?: {
    [key: string]: string[]
  }
}

export type RestResponseDeploymentFreezeInfo = {
  metaData?: {
    [key: string]: Record<string, any>
  }
  resource?: DeploymentFreezeInfo
  responseMessages?: ResponseMessage[]
}

export type PipelineGovernanceConfig = {
  uuid?: string
  accountId?: string
  name?: string
  description?: string
  rules?: PipelineGovernanceRule[]
  restrictions?: Restriction[]
  enabled?: boolean
}

export type PipelineGovernanceRule = {
  tags?: Tag[]
  matchType?: 'ANY' | 'ALL'
  /*
   * @format int32
   */
  weight?: number
  note?: string
}

export type RestResponsePipelineGovernanceConfig = {
  metaData?: {
    [key: string]: Record<string, any>
  }
  resource?: PipelineGovernanceConfig
  responseMessages?: ResponseMessage[]
}

export type Restriction = {
  type?: 'APP_BASED' | 'TAG_BASED'
  appIds?: string[]
  tags?: Tag[]
}

export type RestResponseListPipelineGovernanceConfig = {
  metaData?: {
    [key: string]: Record<string, any>
  }
  resource?: PipelineGovernanceConfig[]
  responseMessages?: ResponseMessage[]
}

export type GovernanceRuleStatus = {
  tags?: Tag[]
  /*
   * @format int32
   */
  weight?: number
  tagsIncluded?: boolean
  matchType?: 'ANY' | 'ALL'
  tagsLocations?: Usage[]
}

export type GovernanceStandard = {
  id?: string
  name?: string
  description?: string
}

export type PipelineReportCard = {
  governanceStandard?: GovernanceStandard
  pipelineId?: string
  ruleStatuses?: GovernanceRuleStatus[]
}

export type RestResponseListPipelineReportCard = {
  metaData?: {
    [key: string]: Record<string, any>
  }
  resource?: PipelineReportCard[]
  responseMessages?: ResponseMessage[]
}

export type Usage = {
  entityId?: string
  entityType?: string
  entityName?: string
  properties?: {
    [key: string]: string
  }
}

export type GraphQLQuery = {
  operationName?: string
  query?: string
  variables?: {
    [key: string]: Record<string, any>
  }
}

export type StaticLimit = {
  /*
   * @format int32
   */
  count?: number
  limitType?: 'STATIC' | 'RATE_LIMIT'
}

export type RateLimit = {
  /*
   * @format int32
   */
  count?: number
  /*
   * @format int32
   */
  duration?: number
  durationUnit: 'NANOSECONDS' | 'MICROSECONDS' | 'MILLISECONDS' | 'SECONDS' | 'MINUTES' | 'HOURS' | 'DAYS'
  limitType?: 'STATIC' | 'RATE_LIMIT'
}

export type AwsSecretsManagerConfig = {
  name?: string
  accessKey?: string
  secretKey?: string
  region?: string
  secretNamePrefix?: string
  assumeIamRoleOnDelegate?: boolean
  assumeStsRoleOnDelegate?: boolean
  /*
   * @format int32
   */
  assumeStsRoleDuration?: number
  roleArn?: string
  externalName?: string
  /*
   * @uniqueItems true
   */
  delegateSelectors?: string[]
  uuid: string
  encryptionType?:
    | 'LOCAL'
    | 'KMS'
    | 'GCP_KMS'
    | 'AWS_SECRETS_MANAGER'
    | 'AZURE_VAULT'
    | 'CYBERARK'
    | 'VAULT'
    | 'GCP_SECRETS_MANAGER'
    | 'CUSTOM'
    | 'VAULT_SSH'
  accountId?: string
  /*
   * @format int32
   */
  numOfEncryptedValue?: number
  encryptedBy?: string
  createdBy?: EmbeddedUser
  /*
   * @format int64
   */
  createdAt?: number
  lastUpdatedBy?: EmbeddedUser
  /*
   * @format int64
   */
  lastUpdatedAt?: number
  /*
   * @format int64
   */
  nextTokenRenewIteration?: number
  /*
   * @format int64
   */
  manuallyEnteredSecretEngineMigrationIteration?: number
  usageRestrictions?: UsageRestrictions
  scopedToAccount?: boolean
  templatizedFields?: string[]
  templatized?: boolean
  ['default']?: boolean
}

export type AzureVaultConfig = {
  name?: string
  clientId?: string
  secretKey?: string
  tenantId?: string
  vaultName?: string
  subscription?: string
  /*
   * @uniqueItems true
   */
  delegateSelectors?: string[]
  azureEnvironmentType?: 'AZURE' | 'AZURE_US_GOVERNMENT'
  uuid: string
  encryptionType?:
    | 'LOCAL'
    | 'KMS'
    | 'GCP_KMS'
    | 'AWS_SECRETS_MANAGER'
    | 'AZURE_VAULT'
    | 'CYBERARK'
    | 'VAULT'
    | 'GCP_SECRETS_MANAGER'
    | 'CUSTOM'
    | 'VAULT_SSH'
  accountId?: string
  /*
   * @format int32
   */
  numOfEncryptedValue?: number
  encryptedBy?: string
  createdBy?: EmbeddedUser
  /*
   * @format int64
   */
  createdAt?: number
  lastUpdatedBy?: EmbeddedUser
  /*
   * @format int64
   */
  lastUpdatedAt?: number
  /*
   * @format int64
   */
  nextTokenRenewIteration?: number
  /*
   * @format int64
   */
  manuallyEnteredSecretEngineMigrationIteration?: number
  usageRestrictions?: UsageRestrictions
  scopedToAccount?: boolean
  templatizedFields?: string[]
  templatized?: boolean
  ['default']?: boolean
}

export type CustomSecretsManagerConfig = {
  name?: string
  templateId?: string
  /*
   * @uniqueItems true
   */
  delegateSelectors?: string[]
  /*
   * @uniqueItems true
   */
  testVariables?: EncryptedDataParams[]
  executeOnDelegate?: boolean
  host?: string
  commandPath?: string
  connectorId?: string
  customSecretsManagerShellScript?: CustomSecretsManagerShellScript
  remoteHostConnector?: EncryptableSetting
  uuid: string
  encryptionType?:
    | 'LOCAL'
    | 'KMS'
    | 'GCP_KMS'
    | 'AWS_SECRETS_MANAGER'
    | 'AZURE_VAULT'
    | 'CYBERARK'
    | 'VAULT'
    | 'GCP_SECRETS_MANAGER'
    | 'CUSTOM'
    | 'VAULT_SSH'
  accountId?: string
  /*
   * @format int32
   */
  numOfEncryptedValue?: number
  encryptedBy?: string
  createdBy?: EmbeddedUser
  /*
   * @format int64
   */
  createdAt?: number
  lastUpdatedBy?: EmbeddedUser
  /*
   * @format int64
   */
  lastUpdatedAt?: number
  /*
   * @format int64
   */
  nextTokenRenewIteration?: number
  /*
   * @format int64
   */
  manuallyEnteredSecretEngineMigrationIteration?: number
  usageRestrictions?: UsageRestrictions
  scopedToAccount?: boolean
  templatizedFields?: string[]
  connectorTemplatized?: boolean
  encryptionServiceUrl?: string
  validationCriteria?: string
  templatized?: boolean
  ['default']?: boolean
}

export type CustomSecretsManagerShellScript = {
  scriptType?: 'BASH' | 'POWERSHELL'
  scriptString?: string
  variables?: string[]
  /*
   * @format int64
   */
  timeoutMillis?: number
}

export type EncryptableSetting = {
  settingType?:
    | 'HOST_CONNECTION_ATTRIBUTES'
    | 'BASTION_HOST_CONNECTION_ATTRIBUTES'
    | 'SMTP'
    | 'SFTP'
    | 'JENKINS'
    | 'BAMBOO'
    | 'STRING'
    | 'SPLUNK'
    | 'ELK'
    | 'LOGZ'
    | 'SUMO'
    | 'DATA_DOG'
    | 'APM_VERIFICATION'
    | 'BUG_SNAG'
    | 'LOG_VERIFICATION'
    | 'APP_DYNAMICS'
    | 'NEW_RELIC'
    | 'DYNA_TRACE'
    | 'INSTANA'
    | 'DATA_DOG_LOG'
    | 'CLOUD_WATCH'
    | 'SCALYR'
    | 'ELB'
    | 'SLACK'
    | 'AWS'
    | 'GCS'
    | 'GCP'
    | 'AZURE'
    | 'PCF'
    | 'RANCHER'
    | 'DIRECT'
    | 'KUBERNETES_CLUSTER'
    | 'DOCKER'
    | 'ECR'
    | 'GCR'
    | 'ACR'
    | 'PHYSICAL_DATA_CENTER'
    | 'KUBERNETES'
    | 'NEXUS'
    | 'ARTIFACTORY'
    | 'SMB'
    | 'AMAZON_S3'
    | 'GIT'
    | 'SSH_SESSION_CONFIG'
    | 'SERVICE_VARIABLE'
    | 'CONFIG_FILE'
    | 'KMS'
    | 'GCP_KMS'
    | 'JIRA'
    | 'SERVICENOW'
    | 'SECRET_TEXT'
    | 'YAML_GIT_SYNC'
    | 'VAULT'
    | 'VAULT_SSH'
    | 'AWS_SECRETS_MANAGER'
    | 'CYBERARK'
    | 'WINRM_CONNECTION_ATTRIBUTES'
    | 'WINRM_SESSION_CONFIG'
    | 'PROMETHEUS'
    | 'INFRASTRUCTURE_MAPPING'
    | 'HTTP_HELM_REPO'
    | 'AMAZON_S3_HELM_REPO'
    | 'GCS_HELM_REPO'
    | 'SPOT_INST'
    | 'AZURE_ARTIFACTS_PAT'
    | 'CUSTOM'
    | 'CE_AWS'
    | 'CE_GCP'
    | 'CE_AZURE'
    | 'AZURE_VAULT'
    | 'KUBERNETES_CLUSTER_NG'
    | 'GIT_NG'
    | 'SSO_SAML'
    | 'GCP_SECRETS_MANAGER'
    | 'TRIGGER'
  accountId?: string
}

export type RestResponseCustomSecretsManagerConfig = {
  metaData?: {
    [key: string]: Record<string, any>
  }
  resource?: CustomSecretsManagerConfig
  responseMessages?: ResponseMessage[]
}

export type CyberArkConfig = {
  name?: string
  cyberArkUrl?: string
  appId?: string
  clientCertificate?: string
  uuid: string
  encryptionType?:
    | 'LOCAL'
    | 'KMS'
    | 'GCP_KMS'
    | 'AWS_SECRETS_MANAGER'
    | 'AZURE_VAULT'
    | 'CYBERARK'
    | 'VAULT'
    | 'GCP_SECRETS_MANAGER'
    | 'CUSTOM'
    | 'VAULT_SSH'
  accountId?: string
  /*
   * @format int32
   */
  numOfEncryptedValue?: number
  encryptedBy?: string
  createdBy?: EmbeddedUser
  /*
   * @format int64
   */
  createdAt?: number
  lastUpdatedBy?: EmbeddedUser
  /*
   * @format int64
   */
  lastUpdatedAt?: number
  /*
   * @format int64
   */
  nextTokenRenewIteration?: number
  /*
   * @format int64
   */
  manuallyEnteredSecretEngineMigrationIteration?: number
  usageRestrictions?: UsageRestrictions
  scopedToAccount?: boolean
  templatizedFields?: string[]
  encryptionServiceUrl?: string
  validationCriteria?: string
  certValidationRequired?: boolean
  templatized?: boolean
  ['default']?: boolean
}

export type KmsConfig = {
  name?: string
  accessKey?: string
  secretKey?: string
  kmsArn?: string
  region?: string
  assumeIamRoleOnDelegate?: boolean
  assumeStsRoleOnDelegate?: boolean
  /*
   * @format int32
   */
  assumeStsRoleDuration?: number
  roleArn?: string
  externalName?: string
  /*
   * @uniqueItems true
   */
  delegateSelectors?: string[]
  uuid: string
  encryptionType?:
    | 'LOCAL'
    | 'KMS'
    | 'GCP_KMS'
    | 'AWS_SECRETS_MANAGER'
    | 'AZURE_VAULT'
    | 'CYBERARK'
    | 'VAULT'
    | 'GCP_SECRETS_MANAGER'
    | 'CUSTOM'
    | 'VAULT_SSH'
  accountId?: string
  /*
   * @format int32
   */
  numOfEncryptedValue?: number
  encryptedBy?: string
  createdBy?: EmbeddedUser
  /*
   * @format int64
   */
  createdAt?: number
  lastUpdatedBy?: EmbeddedUser
  /*
   * @format int64
   */
  lastUpdatedAt?: number
  /*
   * @format int64
   */
  nextTokenRenewIteration?: number
  /*
   * @format int64
   */
  manuallyEnteredSecretEngineMigrationIteration?: number
  usageRestrictions?: UsageRestrictions
  scopedToAccount?: boolean
  templatizedFields?: string[]
  templatized?: boolean
  ['default']?: boolean
}

export type RestResponseListSecretEngineSummary = {
  metaData?: {
    [key: string]: Record<string, any>
  }
  resource?: SecretEngineSummary[]
  responseMessages?: ResponseMessage[]
}

export type SecretEngineSummary = {
  name?: string
  description?: string
  type?: string
  /*
   * @format int32
   */
  version?: number
}

export type SSHVaultConfig = {
  uuid: string
  encryptionType?:
    | 'LOCAL'
    | 'KMS'
    | 'GCP_KMS'
    | 'AWS_SECRETS_MANAGER'
    | 'AZURE_VAULT'
    | 'CYBERARK'
    | 'VAULT'
    | 'GCP_SECRETS_MANAGER'
    | 'CUSTOM'
    | 'VAULT_SSH'
  accountId?: string
  /*
   * @format int32
   */
  numOfEncryptedValue?: number
  encryptedBy?: string
  createdBy?: EmbeddedUser
  /*
   * @format int64
   */
  createdAt?: number
  lastUpdatedBy?: EmbeddedUser
  /*
   * @format int64
   */
  lastUpdatedAt?: number
  /*
   * @format int64
   */
  nextTokenRenewIteration?: number
  /*
   * @format int64
   */
  manuallyEnteredSecretEngineMigrationIteration?: number
  usageRestrictions?: UsageRestrictions
  scopedToAccount?: boolean
  templatizedFields?: string[]
  name?: string
  vaultUrl?: string
  authToken?: string
  appRoleId?: string
  secretId?: string
  secretEngineName?: string
  /*
   * @format int64
   */
  renewalInterval?: number
  engineManuallyEntered?: boolean
  namespace?: string
  /*
   * @format int64
   */
  renewedAt?: number
  useVaultAgent?: boolean
  /*
   * @uniqueItems true
   */
  delegateSelectors?: string[]
  sinkPath?: string
  useAwsIam?: boolean
  vaultAwsIamRole?: string
  awsRegion?: string
  certValidationRequired?: boolean
  xvaultAwsIamServerId?: string
  templatized?: boolean
  ['default']?: boolean
}

export type NGSecretManagerMetadata = {
  identifier?: string
  accountIdentifier?: string
  orgIdentifier?: string
  projectIdentifier?: string
  tags?: NGTag[]
  description?: string
  harnessManaged?: boolean
  deleted?: boolean
}

export type NGTag = {
  key: string
  value: string
}

export type RestResponseSecretManagerConfig = {
  metaData?: {
    [key: string]: Record<string, any>
  }
  resource?: SecretManagerConfig
  responseMessages?: ResponseMessage[]
}

export type SecretManagerConfig = {
  uuid: string
  encryptionType?:
    | 'LOCAL'
    | 'KMS'
    | 'GCP_KMS'
    | 'AWS_SECRETS_MANAGER'
    | 'AZURE_VAULT'
    | 'CYBERARK'
    | 'VAULT'
    | 'GCP_SECRETS_MANAGER'
    | 'CUSTOM'
    | 'VAULT_SSH'
  accountId?: string
  /*
   * @format int32
   */
  numOfEncryptedValue?: number
  encryptedBy?: string
  createdBy?: EmbeddedUser
  /*
   * @format int64
   */
  createdAt?: number
  lastUpdatedBy?: EmbeddedUser
  /*
   * @format int64
   */
  lastUpdatedAt?: number
  /*
   * @format int64
   */
  nextTokenRenewIteration?: number
  /*
   * @format int64
   */
  manuallyEnteredSecretEngineMigrationIteration?: number
  ngMetadata?: NGSecretManagerMetadata
  usageRestrictions?: UsageRestrictions
  scopedToAccount?: boolean
  templatizedFields?: string[]
  templatized?: boolean
  ['default']?: boolean
  name?: string
  encryptionServiceUrl?: string
  validationCriteria?: string
}

export type RestResponseListUuidAware = {
  metaData?: {
    [key: string]: Record<string, any>
  }
  resource?: UuidAware[]
  responseMessages?: ResponseMessage[]
}

export type UuidAware = {
  uuid?: string
}

export type SecretText = {
  name?: string
  kmsId?: string
  usageRestrictions?: UsageRestrictions
  scopedToAccount?: boolean
  hideFromListing?: boolean
  inheritScopesFromSM?: boolean
  additionalMetadata?: AdditionalMetadata
  runtimeParameters?: {
    [key: string]: string
  }
  value?: string
  path?: string
  /*
   * @uniqueItems true
   */
  parameters?: EncryptedDataParams[]
  parameterizedSecret?: boolean
  inlineSecret?: boolean
  referencedSecret?: boolean
}

export type AtomicInteger = {
  /*
   * @format int32
   */
  andIncrement?: number
  /*
   * @format int32
   */
  andDecrement?: number
}

export type EncryptedData = {
  uuid: string
  createdBy?: EmbeddedUser
  /*
   * @format int64
   */
  createdAt?: number
  lastUpdatedBy?: EmbeddedUser
  /*
   * @format int64
   */
  lastUpdatedAt: number
  name?: string
  encryptionKey?: string
  encryptedValue?: string[]
  path?: string
  /*
   * @uniqueItems true
   */
  parameters?: EncryptedDataParams[]
  type:
    | 'HOST_CONNECTION_ATTRIBUTES'
    | 'BASTION_HOST_CONNECTION_ATTRIBUTES'
    | 'SMTP'
    | 'SFTP'
    | 'JENKINS'
    | 'BAMBOO'
    | 'STRING'
    | 'SPLUNK'
    | 'ELK'
    | 'LOGZ'
    | 'SUMO'
    | 'DATA_DOG'
    | 'APM_VERIFICATION'
    | 'BUG_SNAG'
    | 'LOG_VERIFICATION'
    | 'APP_DYNAMICS'
    | 'NEW_RELIC'
    | 'DYNA_TRACE'
    | 'INSTANA'
    | 'DATA_DOG_LOG'
    | 'CLOUD_WATCH'
    | 'SCALYR'
    | 'ELB'
    | 'SLACK'
    | 'AWS'
    | 'GCS'
    | 'GCP'
    | 'AZURE'
    | 'PCF'
    | 'RANCHER'
    | 'DIRECT'
    | 'KUBERNETES_CLUSTER'
    | 'DOCKER'
    | 'ECR'
    | 'GCR'
    | 'ACR'
    | 'PHYSICAL_DATA_CENTER'
    | 'KUBERNETES'
    | 'NEXUS'
    | 'ARTIFACTORY'
    | 'SMB'
    | 'AMAZON_S3'
    | 'GIT'
    | 'SSH_SESSION_CONFIG'
    | 'SERVICE_VARIABLE'
    | 'CONFIG_FILE'
    | 'KMS'
    | 'GCP_KMS'
    | 'JIRA'
    | 'SERVICENOW'
    | 'SECRET_TEXT'
    | 'YAML_GIT_SYNC'
    | 'VAULT'
    | 'VAULT_SSH'
    | 'AWS_SECRETS_MANAGER'
    | 'CYBERARK'
    | 'WINRM_CONNECTION_ATTRIBUTES'
    | 'WINRM_SESSION_CONFIG'
    | 'PROMETHEUS'
    | 'INFRASTRUCTURE_MAPPING'
    | 'HTTP_HELM_REPO'
    | 'AMAZON_S3_HELM_REPO'
    | 'GCS_HELM_REPO'
    | 'SPOT_INST'
    | 'AZURE_ARTIFACTS_PAT'
    | 'CUSTOM'
    | 'CE_AWS'
    | 'CE_GCP'
    | 'CE_AZURE'
    | 'AZURE_VAULT'
    | 'KUBERNETES_CLUSTER_NG'
    | 'GIT_NG'
    | 'SSO_SAML'
    | 'GCP_SECRETS_MANAGER'
    | 'TRIGGER'
  /*
   * @uniqueItems true
   */
  parents?: EncryptedDataParent[]
  accountId?: string
  enabled?: boolean
  kmsId?: string
  additionalMetadata?: AdditionalMetadata
  encryptionType:
    | 'LOCAL'
    | 'KMS'
    | 'GCP_KMS'
    | 'AWS_SECRETS_MANAGER'
    | 'AZURE_VAULT'
    | 'CYBERARK'
    | 'VAULT'
    | 'GCP_SECRETS_MANAGER'
    | 'CUSTOM'
    | 'VAULT_SSH'
  /*
   * @format int64
   */
  fileSize?: number
  appIds?: string[]
  serviceIds?: string[]
  envIds?: string[]
  backupEncryptedValue?: string[]
  backupEncryptionKey?: string
  backupKmsId?: string
  backupEncryptionType?:
    | 'LOCAL'
    | 'KMS'
    | 'GCP_KMS'
    | 'AWS_SECRETS_MANAGER'
    | 'AZURE_VAULT'
    | 'CYBERARK'
    | 'VAULT'
    | 'GCP_SECRETS_MANAGER'
    | 'CUSTOM'
    | 'VAULT_SSH'
  /*
   * @uniqueItems true
   */
  serviceVariableIds?: string[]
  searchTags?: {
    [key: string]: AtomicInteger
  }
  scopedToAccount?: boolean
  usageRestrictions?: UsageRestrictions
  inheritScopesFromSM?: boolean
  /*
   * @format int64
   */
  nextMigrationIteration?: number
  /*
   * @format int64
   */
  nextAwsToGcpKmsMigrationIteration?: number
  /*
   * @format int64
   */
  nextLocalToGcpKmsMigrationIteration?: number
  /*
   * @format int64
   */
  nextAwsKmsToGcpKmsMigrationIteration?: number
  base64Encoded?: boolean
  encryptedBy?: string
  /*
   * @format int32
   */
  setupUsage?: number
  /*
   * @format int64
   */
  runTimeUsage?: number
  /*
   * @format int32
   */
  changeLog?: number
  keywords?: string[]
  ngMetadata?: NGEncryptedDataMetadata
  hideFromListing?: boolean
  parameterizedSecret?: boolean
  inlineSecret?: boolean
  referencedSecret?: boolean
}

export type EncryptedDataParent = {
  id?: string
  type?:
    | 'HOST_CONNECTION_ATTRIBUTES'
    | 'BASTION_HOST_CONNECTION_ATTRIBUTES'
    | 'SMTP'
    | 'SFTP'
    | 'JENKINS'
    | 'BAMBOO'
    | 'STRING'
    | 'SPLUNK'
    | 'ELK'
    | 'LOGZ'
    | 'SUMO'
    | 'DATA_DOG'
    | 'APM_VERIFICATION'
    | 'BUG_SNAG'
    | 'LOG_VERIFICATION'
    | 'APP_DYNAMICS'
    | 'NEW_RELIC'
    | 'DYNA_TRACE'
    | 'INSTANA'
    | 'DATA_DOG_LOG'
    | 'CLOUD_WATCH'
    | 'SCALYR'
    | 'ELB'
    | 'SLACK'
    | 'AWS'
    | 'GCS'
    | 'GCP'
    | 'AZURE'
    | 'PCF'
    | 'RANCHER'
    | 'DIRECT'
    | 'KUBERNETES_CLUSTER'
    | 'DOCKER'
    | 'ECR'
    | 'GCR'
    | 'ACR'
    | 'PHYSICAL_DATA_CENTER'
    | 'KUBERNETES'
    | 'NEXUS'
    | 'ARTIFACTORY'
    | 'SMB'
    | 'AMAZON_S3'
    | 'GIT'
    | 'SSH_SESSION_CONFIG'
    | 'SERVICE_VARIABLE'
    | 'CONFIG_FILE'
    | 'KMS'
    | 'GCP_KMS'
    | 'JIRA'
    | 'SERVICENOW'
    | 'SECRET_TEXT'
    | 'YAML_GIT_SYNC'
    | 'VAULT'
    | 'VAULT_SSH'
    | 'AWS_SECRETS_MANAGER'
    | 'CYBERARK'
    | 'WINRM_CONNECTION_ATTRIBUTES'
    | 'WINRM_SESSION_CONFIG'
    | 'PROMETHEUS'
    | 'INFRASTRUCTURE_MAPPING'
    | 'HTTP_HELM_REPO'
    | 'AMAZON_S3_HELM_REPO'
    | 'GCS_HELM_REPO'
    | 'SPOT_INST'
    | 'AZURE_ARTIFACTS_PAT'
    | 'CUSTOM'
    | 'CE_AWS'
    | 'CE_GCP'
    | 'CE_AZURE'
    | 'AZURE_VAULT'
    | 'KUBERNETES_CLUSTER_NG'
    | 'GIT_NG'
    | 'SSO_SAML'
    | 'GCP_SECRETS_MANAGER'
    | 'TRIGGER'
  fieldName?: string
}

export type NGEncryptedDataMetadata = {
  identifier?: string
  accountIdentifier?: string
  orgIdentifier?: string
  projectIdentifier?: string
  tags?: string[]
  secretManagerIdentifier?: string
  secretManagerName?: string
  description?: string
  draft?: boolean
}

export type RestResponsePageResponseEncryptedData = {
  metaData?: {
    [key: string]: Record<string, any>
  }
  resource?: EncryptedData[]
  responseMessages?: ResponseMessage[]
}

export type RestResponsePageResponseSecretUsageLog = {
  metaData?: {
    [key: string]: Record<string, any>
  }
  resource?: SecretUsageLog[]
  responseMessages?: ResponseMessage[]
}

export type SecretUsageLog = {
  uuid: string
  appId: string
  createdBy?: EmbeddedUser
  /*
   * @format int64
   */
  createdAt?: number
  lastUpdatedBy?: EmbeddedUser
  /*
   * @format int64
   */
  lastUpdatedAt: number
  encryptedDataId?: string
  accountId?: string
  workflowExecutionId?: string
  envId?: string
  entityName?: string
  workflowExecutionName?: string
  /*
   * @format date-time
   */
  validUntil?: string
  pipelineExecution?: boolean
}

export type RestResponseListSecretChangeLog = {
  metaData?: {
    [key: string]: Record<string, any>
  }
  resource?: SecretChangeLog[]
  responseMessages?: ResponseMessage[]
}

export type SecretChangeLog = {
  uuid: string
  accountId?: string
  encryptedDataId?: string
  user: EmbeddedUser
  description?: string
  createdBy?: EmbeddedUser
  /*
   * @format int64
   */
  createdAt?: number
  lastUpdatedBy?: EmbeddedUser
  /*
   * @format int64
   */
  lastUpdatedAt: number
  external?: boolean
}

export type RestResponseCollectionSettingAttribute = {
  metaData?: {
    [key: string]: Record<string, any>
  }
  resource?: SettingAttribute[]
  responseMessages?: ResponseMessage[]
}

export type RestResponseListSecretManagerConfig = {
  metaData?: {
    [key: string]: Record<string, any>
  }
  resource?: SecretManagerConfig[]
  responseMessages?: ResponseMessage[]
}

export type RestResponseSetSecretSetupUsage = {
  metaData?: {
    [key: string]: Record<string, any>
  }
  /*
   * @uniqueItems true
   */
  resource?: SecretSetupUsage[]
  responseMessages?: ResponseMessage[]
}

export type SecretSetupUsage = {
  entityId?: string
  type?:
    | 'HOST_CONNECTION_ATTRIBUTES'
    | 'BASTION_HOST_CONNECTION_ATTRIBUTES'
    | 'SMTP'
    | 'SFTP'
    | 'JENKINS'
    | 'BAMBOO'
    | 'STRING'
    | 'SPLUNK'
    | 'ELK'
    | 'LOGZ'
    | 'SUMO'
    | 'DATA_DOG'
    | 'APM_VERIFICATION'
    | 'BUG_SNAG'
    | 'LOG_VERIFICATION'
    | 'APP_DYNAMICS'
    | 'NEW_RELIC'
    | 'DYNA_TRACE'
    | 'INSTANA'
    | 'DATA_DOG_LOG'
    | 'CLOUD_WATCH'
    | 'SCALYR'
    | 'ELB'
    | 'SLACK'
    | 'AWS'
    | 'GCS'
    | 'GCP'
    | 'AZURE'
    | 'PCF'
    | 'RANCHER'
    | 'DIRECT'
    | 'KUBERNETES_CLUSTER'
    | 'DOCKER'
    | 'ECR'
    | 'GCR'
    | 'ACR'
    | 'PHYSICAL_DATA_CENTER'
    | 'KUBERNETES'
    | 'NEXUS'
    | 'ARTIFACTORY'
    | 'SMB'
    | 'AMAZON_S3'
    | 'GIT'
    | 'SSH_SESSION_CONFIG'
    | 'SERVICE_VARIABLE'
    | 'CONFIG_FILE'
    | 'KMS'
    | 'GCP_KMS'
    | 'JIRA'
    | 'SERVICENOW'
    | 'SECRET_TEXT'
    | 'YAML_GIT_SYNC'
    | 'VAULT'
    | 'VAULT_SSH'
    | 'AWS_SECRETS_MANAGER'
    | 'CYBERARK'
    | 'WINRM_CONNECTION_ATTRIBUTES'
    | 'WINRM_SESSION_CONFIG'
    | 'PROMETHEUS'
    | 'INFRASTRUCTURE_MAPPING'
    | 'HTTP_HELM_REPO'
    | 'AMAZON_S3_HELM_REPO'
    | 'GCS_HELM_REPO'
    | 'SPOT_INST'
    | 'AZURE_ARTIFACTS_PAT'
    | 'CUSTOM'
    | 'CE_AWS'
    | 'CE_GCP'
    | 'CE_AZURE'
    | 'AZURE_VAULT'
    | 'KUBERNETES_CLUSTER_NG'
    | 'GIT_NG'
    | 'SSO_SAML'
    | 'GCP_SECRETS_MANAGER'
    | 'TRIGGER'
  fieldName?: string
  entity?: UuidAware
}

export type VaultConfig = {
  basePath?: string
  /*
   * @format int32
   */
  renewIntervalHours?: number
  /*
   * @format int32
   */
  secretEngineVersion?: number
  uuid: string
  encryptionType?:
    | 'LOCAL'
    | 'KMS'
    | 'GCP_KMS'
    | 'AWS_SECRETS_MANAGER'
    | 'AZURE_VAULT'
    | 'CYBERARK'
    | 'VAULT'
    | 'GCP_SECRETS_MANAGER'
    | 'CUSTOM'
    | 'VAULT_SSH'
  accountId?: string
  /*
   * @format int32
   */
  numOfEncryptedValue?: number
  encryptedBy?: string
  createdBy?: EmbeddedUser
  /*
   * @format int64
   */
  createdAt?: number
  lastUpdatedBy?: EmbeddedUser
  /*
   * @format int64
   */
  lastUpdatedAt?: number
  /*
   * @format int64
   */
  nextTokenRenewIteration?: number
  /*
   * @format int64
   */
  manuallyEnteredSecretEngineMigrationIteration?: number
  usageRestrictions?: UsageRestrictions
  scopedToAccount?: boolean
  templatizedFields?: string[]
  name?: string
  vaultUrl?: string
  authToken?: string
  appRoleId?: string
  secretId?: string
  secretEngineName?: string
  /*
   * @format int64
   */
  renewalInterval?: number
  engineManuallyEntered?: boolean
  namespace?: string
  /*
   * @format int64
   */
  renewedAt?: number
  useVaultAgent?: boolean
  /*
   * @uniqueItems true
   */
  delegateSelectors?: string[]
  sinkPath?: string
  useAwsIam?: boolean
  vaultAwsIamRole?: string
  awsRegion?: string
  readOnly?: boolean
  certValidationRequired?: boolean
  xvaultAwsIamServerId?: string
  templatized?: boolean
  ['default']?: boolean
}

export type RestResponseTemplateGallery = {
  metaData?: {
    [key: string]: Record<string, any>
  }
  resource?: TemplateGallery
  responseMessages?: ResponseMessage[]
}

export type TemplateGallery = {
  uuid: string
  appId: string
  createdBy?: EmbeddedUser
  /*
   * @format int64
   */
  createdAt?: number
  lastUpdatedBy?: EmbeddedUser
  /*
   * @format int64
   */
  lastUpdatedAt: number
  name?: string
  accountId?: string
  description?: string
  referencedGalleryId?: string
  global?: boolean
  /*
   * @uniqueItems true
   */
  keywords?: string[]
  galleryKey?: string
}

export type RestResponsePageResponseTemplateGallery = {
  metaData?: {
    [key: string]: Record<string, any>
  }
  resource?: TemplateGallery[]
  responseMessages?: ResponseMessage[]
}

export type RestResponseTemplateFolder = {
  metaData?: {
    [key: string]: Record<string, any>
  }
  resource?: TemplateFolder
  responseMessages?: ResponseMessage[]
}

export type TemplateFolder = {
  uuid: string
  appId: string
  createdBy?: EmbeddedUser
  /*
   * @format int64
   */
  createdAt?: number
  lastUpdatedBy?: EmbeddedUser
  /*
   * @format int64
   */
  lastUpdatedAt: number
  accountId?: string
  name?: string
  description?: string
  parentId?: string
  nodeType?: string
  galleryId?: string
  /*
   * @format int64
   */
  templatesCount?: number
  pathId?: string
  children?: TemplateFolder[]
  /*
   * @uniqueItems true
   */
  keywords?: string[]
}

export type RestResponsePageResponseTemplateVersion = {
  metaData?: {
    [key: string]: Record<string, any>
  }
  resource?: TemplateVersion[]
  responseMessages?: ResponseMessage[]
}

export type TemplateVersion = {
  changeType?: string
  templateUuid?: string
  templateName?: string
  templateType?: string
  /*
   * @format int64
   */
  version?: number
  versionDetails?: string
  importedTemplateVersion?: string
  accountId?: string
  galleryId?: string
  uuid: string
  appId: string
  createdBy?: EmbeddedUser
  /*
   * @format int64
   */
  createdAt?: number
  lastUpdatedBy?: EmbeddedUser
  /*
   * @format int64
   */
  lastUpdatedAt: number
}

export type RestResponsePageResponseTemplate = {
  metaData?: {
    [key: string]: Record<string, any>
  }
  resource?: Template[]
  responseMessages?: ResponseMessage[]
}

export type RestResponseListTemplateMetaData = {
  metaData?: {
    [key: string]: Record<string, any>
  }
  resource?: TemplateMetaData[]
  responseMessages?: ResponseMessage[]
}

export type TemplateMetaData = {
  appId?: string
  uuid?: string
  name?: string
  folderName?: string
}

export type CEView = {
  uuid?: string
  /*
   * @minLength 1
   * @maxLength 32
   */
  name?: string
  accountId?: string
  viewVersion?: string
  viewTimeRange?: ViewTimeRange
  viewRules?: ViewRule[]
  dataSources?: ('CLUSTER' | 'AWS' | 'GCP' | 'AZURE' | 'COMMON' | 'CUSTOM' | 'BUSINESS_MAPPING' | 'LABEL')[]
  viewVisualization?: ViewVisualization
  viewType?: 'SAMPLE' | 'CUSTOMER' | 'DEFAULT_AZURE' | 'DEFAULT'
  viewState?: 'DRAFT' | 'COMPLETED'
  /*
   * @format double
   */
  totalCost?: number
  /*
   * @format int64
   */
  createdAt?: number
  /*
   * @format int64
   */
  lastUpdatedAt?: number
  createdBy?: EmbeddedUser
  lastUpdatedBy?: EmbeddedUser
}

export type RestResponseCEView = {
  metaData?: {
    [key: string]: Record<string, any>
  }
  resource?: CEView
  responseMessages?: ResponseMessage[]
}

export type ViewCondition = {
  type?: string
}

export type ViewField = {
  fieldId?: string
  fieldName?: string
  identifier?: 'CLUSTER' | 'AWS' | 'GCP' | 'AZURE' | 'COMMON' | 'CUSTOM' | 'BUSINESS_MAPPING' | 'LABEL'
  identifierName?: string
}

export type ViewIdCondition = ViewCondition & {
  viewField?: ViewField
  viewOperator?: 'IN' | 'NOT_IN' | 'NOT_NULL' | 'NULL'
  values?: string[]
}

export type ViewRule = {
  viewConditions?: ViewCondition[]
}

export type ViewTimeRange = {
  viewTimeRangeType?: 'LAST_7' | 'LAST_30' | 'LAST_MONTH' | 'CURRENT_MONTH' | 'CUSTOM'
  /*
   * @format int64
   */
  startTime?: number
  /*
   * @format int64
   */
  endTime?: number
}

export type ViewVisualization = {
  granularity?: 'DAY' | 'MONTH'
  groupBy?: ViewField
  chartType?: 'STACKED_TIME_SERIES' | 'STACKED_LINE_CHART'
}

export type RestResponseViewCustomField = {
  metaData?: {
    [key: string]: Record<string, any>
  }
  resource?: ViewCustomField
  responseMessages?: ResponseMessage[]
}

export type ViewCustomField = {
  uuid?: string
  accountId?: string
  viewId?: string
  name?: string
  description?: string
  sqlFormula?: string
  displayFormula?: string
  userDefinedExpression?: string
  viewFields?: ViewField[]
  /*
   * @format int64
   */
  createdAt?: number
  /*
   * @format int64
   */
  lastUpdatedAt?: number
}

export type RestResponseYamlHistory = {
  metaData?: {
    [key: string]: Record<string, any>
  }
  resource?: YamlHistory
  responseMessages?: ResponseMessage[]
}

export type YamlHistory = Record<string, any>

export type RestResponseYamlVersion = {
  metaData?: {
    [key: string]: Record<string, any>
  }
  resource?: YamlVersion
  responseMessages?: ResponseMessage[]
}

export type YamlVersion = {
  uuid: string
  appId: string
  createdBy?: EmbeddedUser
  /*
   * @format int64
   */
  createdAt?: number
  lastUpdatedBy?: EmbeddedUser
  /*
   * @format int64
   */
  lastUpdatedAt: number
  yamlVersionId?: string
  /*
   * @format int32
   */
  version?: number
  type?:
    | 'SETUP'
    | 'APP'
    | 'SERVICE'
    | 'SERVICE_COMMAND'
    | 'CONFIG_FILE'
    | 'ENVIRONMENT'
    | 'CONFIG_FILE_OVERRIDE'
    | 'SETTING'
    | 'WORKFLOW'
    | 'PIPELINE'
    | 'PROVISIONER'
    | 'TRIGGER'
    | 'ARTIFACT_STREAM'
    | 'INFRA_MAPPING'
    | 'INFRA_DEFINITION'
    | 'DEPLOYMENT_SPEC'
    | 'APPLICATION_DEFAULTS'
    | 'ACCOUNT_DEFAULTS'
    | 'NOTIFICATION_GROUP'
    | 'APPLICATION_MANIFEST'
    | 'APPLICATION_MANIFEST_FILE'
    | 'SERVICE_CV_CONFIG'
    | 'TAGS'
    | 'GLOBAL_TEMPLATE_LIBRARY'
    | 'APPLICATION_TEMPLATE_LIBRARY'
    | 'GOVERNANCE_CONFIG'
    | 'EVENT_RULE'
  entityId?: string
  /*
   * @format int64
   */
  inEffectStart?: number
  /*
   * @format int64
   */
  inEffectEnd?: number
  yaml?: string
  accountId?: string
}

export type YamlPayload = {
  name?: string
  yaml?: string
  path?: string
}

export type RestResponseYamlPayload = {
  metaData?: {
    [key: string]: Record<string, any>
  }
  resource?: YamlPayload
  responseMessages?: ResponseMessage[]
}

export type RestResponseYamlGitConfig = {
  metaData?: {
    [key: string]: Record<string, any>
  }
  resource?: YamlGitConfig
  responseMessages?: ResponseMessage[]
}

export type Base = {
  uuid: string
  appId: string
  createdBy?: EmbeddedUser
  /*
   * @format int64
   */
  createdAt?: number
  lastUpdatedBy?: EmbeddedUser
  /*
   * @format int64
   */
  lastUpdatedAt: number
}

export type RestResponseBase = {
  metaData?: {
    [key: string]: Record<string, any>
  }
  resource?: Base
  responseMessages?: ResponseMessage[]
}

export type FileOperationStatus = {
  yamlFilePath?: string
  status?: 'FAILED' | 'SUCCESS' | 'SKIPPED'
  errorMssg?: string
  entityId?: string
}

export type RestResponseYamlOperationResponse = {
  metaData?: {
    [key: string]: Record<string, any>
  }
  resource?: YamlOperationResponse
  responseMessages?: ResponseMessage[]
}

export type YamlOperationResponse = {
  responseStatus?: 'FAILED' | 'SUCCESS'
  errorMessage?: string
  filesStatus?: FileOperationStatus[]
}

export type RestResponseFileOperationStatus = {
  metaData?: {
    [key: string]: Record<string, any>
  }
  resource?: FileOperationStatus
  responseMessages?: ResponseMessage[]
}

export type GitSyncWebhook = {
  accountId?: string
  webhookToken?: string
  entityId?: string
  uuid: string
  appId: string
  createdBy?: EmbeddedUser
  /*
   * @format int64
   */
  createdAt?: number
  lastUpdatedBy?: EmbeddedUser
  /*
   * @format int64
   */
  lastUpdatedAt: number
}

export type RestResponseGitSyncWebhook = {
  metaData?: {
    [key: string]: Record<string, any>
  }
  resource?: GitSyncWebhook
  responseMessages?: ResponseMessage[]
}

export type RestResponseListGitSyncError = {
  metaData?: {
    [key: string]: Record<string, any>
  }
  resource?: GitSyncError[]
  responseMessages?: ResponseMessage[]
}
